; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/df/df28.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df28.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@staticTrue = internal global i32 1, align 4, !dbg !17
@staticFalse = internal global i32 0, align 4, !dbg !33
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !27

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !44 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !48, metadata !DIExpression()), !dbg !49
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !52
  ret void, !dbg !53
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !54 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !55, metadata !DIExpression()), !dbg !56
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !57, metadata !DIExpression()), !dbg !58
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !59
  ret void, !dbg !60
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !61 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !62, metadata !DIExpression()), !dbg !63
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !66
  ret void, !dbg !67
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !68 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !69, metadata !DIExpression()), !dbg !70
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !73
  ret void, !dbg !74
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !75 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !76, metadata !DIExpression()), !dbg !77
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !82 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !83, metadata !DIExpression()), !dbg !84
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !87
  ret void, !dbg !88
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !89 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %0 = load i32, ptr %n.addr, align 4, !dbg !94
  %conv = sext i32 %0 to i64, !dbg !94
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !95
  ret ptr %call, !dbg !96
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !97 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !98, metadata !DIExpression()), !dbg !99
  %0 = load i32, ptr %n.addr, align 4, !dbg !100
  %conv = sext i32 %0 to i64, !dbg !100
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !101
  ret ptr %call, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !103 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !104, metadata !DIExpression()), !dbg !105
  %0 = load i32, ptr %n.addr, align 4, !dbg !106
  %conv = sext i32 %0 to i64, !dbg !106
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !107
  ret ptr %call, !dbg !108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !109 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !110, metadata !DIExpression()), !dbg !111
  %0 = load i32, ptr %n.addr, align 4, !dbg !112
  %conv = sext i32 %0 to i64, !dbg !112
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !113
  ret ptr %call, !dbg !114
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !115 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !116, metadata !DIExpression()), !dbg !117
  %0 = load i32, ptr %n.addr, align 4, !dbg !118
  %conv = sext i32 %0 to i64, !dbg !118
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !119
  ret ptr %call, !dbg !120
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !121 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !122, metadata !DIExpression()), !dbg !123
  %0 = load i32, ptr %n.addr, align 4, !dbg !124
  %conv = sext i32 %0 to i64, !dbg !124
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !125
  ret ptr %call, !dbg !126
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !127 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !128, metadata !DIExpression()), !dbg !129
  %0 = load i32, ptr %n.addr, align 4, !dbg !130
  %conv = sext i32 %0 to i64, !dbg !130
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !131
  ret ptr %call, !dbg !132
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !133 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !134, metadata !DIExpression()), !dbg !135
  %0 = load i32, ptr %n.addr, align 4, !dbg !136
  %conv = sext i32 %0 to i64, !dbg !136
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !137
  ret ptr %call, !dbg !138
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !139 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !142, metadata !DIExpression()), !dbg !143
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !144, metadata !DIExpression()), !dbg !145
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !146
  ret void, !dbg !147
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !148 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !152, metadata !DIExpression()), !dbg !153
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !154, metadata !DIExpression()), !dbg !155
  ret void, !dbg !156
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !157 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !158, metadata !DIExpression()), !dbg !159
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !160, metadata !DIExpression()), !dbg !161
  ret void, !dbg !162
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !163 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !166, metadata !DIExpression()), !dbg !167
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !168, metadata !DIExpression()), !dbg !169
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !170, metadata !DIExpression()), !dbg !171
  ret void, !dbg !172
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !173 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !176, metadata !DIExpression()), !dbg !177
  ret void, !dbg !178
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !179 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !180, metadata !DIExpression()), !dbg !181
  %0 = load ptr, ptr %str.addr, align 8, !dbg !182
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !183
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !184
  %call2 = call i32 @getchar(), !dbg !185
  ret void, !dbg !186
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !187 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !191, metadata !DIExpression()), !dbg !192
  %0 = load ptr, ptr %p.addr, align 8, !dbg !193
  store i32 0, ptr %0, align 4, !dbg !194
  %1 = load ptr, ptr %retval, align 8, !dbg !195
  ret ptr %1, !dbg !195
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !196 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !197, metadata !DIExpression()), !dbg !198
  %0 = load ptr, ptr %p.addr, align 8, !dbg !199
  store i32 0, ptr %0, align 4, !dbg !200
  %1 = load ptr, ptr %retval, align 8, !dbg !201
  ret ptr %1, !dbg !201
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !202 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !203, metadata !DIExpression()), !dbg !204
  %0 = load ptr, ptr %p.addr, align 8, !dbg !205
  call void @free(ptr noundef %0) #7, !dbg !206
  %1 = load ptr, ptr %retval, align 8, !dbg !207
  ret ptr %1, !dbg !207
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !208 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !209, metadata !DIExpression()), !dbg !210
  %0 = load ptr, ptr %p.addr, align 8, !dbg !211
  call void @free(ptr noundef %0) #7, !dbg !212
  %1 = load ptr, ptr %retval, align 8, !dbg !213
  ret ptr %1, !dbg !213
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !214 {
entry:
  ret void, !dbg !217
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_05_bad() #0 !dbg !218 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !219, metadata !DIExpression()), !dbg !220
  store ptr null, ptr %data, align 8, !dbg !221
  %0 = load i32, ptr @staticTrue, align 4, !dbg !222
  %tobool = icmp ne i32 %0, 0, !dbg !222
  br i1 %tobool, label %if.then, label %if.end3, !dbg !224

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !225
  store ptr %call, ptr %data, align 8, !dbg !227
  %1 = load ptr, ptr %data, align 8, !dbg !228
  %cmp = icmp eq ptr %1, null, !dbg !230
  br i1 %cmp, label %if.then1, label %if.end, !dbg !231

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !232
  unreachable, !dbg !232

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !234
  %call2 = call ptr @SAFEFREE(ptr noundef %2), !dbg !235
  br label %if.end3, !dbg !236

if.end3:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticTrue, align 4, !dbg !237
  %tobool4 = icmp ne i32 %3, 0, !dbg !237
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !239

if.then5:                                         ; preds = %if.end3
  %4 = load ptr, ptr %data, align 8, !dbg !240
  %call6 = call ptr @DOUBLEFREE(ptr noundef %4), !dbg !242
  br label %if.end7, !dbg !243

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !244
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_05_good() #0 !dbg !245 {
entry:
  call void @goodB2G1(), !dbg !246
  call void @goodB2G2(), !dbg !247
  call void @goodG2B1(), !dbg !248
  call void @goodG2B2(), !dbg !249
  ret void, !dbg !250
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !251 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !255, metadata !DIExpression()), !dbg !256
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !257, metadata !DIExpression()), !dbg !258
  %call = call i64 @time(ptr noundef null) #7, !dbg !259
  %conv = trunc i64 %call to i32, !dbg !260
  call void @srand(i32 noundef %conv) #7, !dbg !261
  call void @CWE415_Double_Free__malloc_free_long_05_good(), !dbg !262
  call void @CWE415_Double_Free__malloc_free_long_05_bad(), !dbg !263
  ret i32 0, !dbg !264
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !265 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !266, metadata !DIExpression()), !dbg !267
  store ptr null, ptr %data, align 8, !dbg !268
  %0 = load i32, ptr @staticTrue, align 4, !dbg !269
  %tobool = icmp ne i32 %0, 0, !dbg !269
  br i1 %tobool, label %if.then, label %if.end3, !dbg !271

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !272
  store ptr %call, ptr %data, align 8, !dbg !274
  %1 = load ptr, ptr %data, align 8, !dbg !275
  %cmp = icmp eq ptr %1, null, !dbg !277
  br i1 %cmp, label %if.then1, label %if.end, !dbg !278

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !279
  unreachable, !dbg !279

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !281
  %call2 = call ptr @SAFEFREE(ptr noundef %2), !dbg !282
  br label %if.end3, !dbg !283

if.end3:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFalse, align 4, !dbg !284
  %tobool4 = icmp ne i32 %3, 0, !dbg !284
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !286

if.then5:                                         ; preds = %if.end3
  call void @printLine(ptr noundef @.str.3), !dbg !287
  br label %if.end6, !dbg !289

if.else:                                          ; preds = %if.end3
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then5
  ret void, !dbg !290
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !291 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !292, metadata !DIExpression()), !dbg !293
  store ptr null, ptr %data, align 8, !dbg !294
  %0 = load i32, ptr @staticTrue, align 4, !dbg !295
  %tobool = icmp ne i32 %0, 0, !dbg !295
  br i1 %tobool, label %if.then, label %if.end3, !dbg !297

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !298
  store ptr %call, ptr %data, align 8, !dbg !300
  %1 = load ptr, ptr %data, align 8, !dbg !301
  %cmp = icmp eq ptr %1, null, !dbg !303
  br i1 %cmp, label %if.then1, label %if.end, !dbg !304

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !305
  unreachable, !dbg !305

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !307
  %call2 = call ptr @SAFEFREE(ptr noundef %2), !dbg !308
  br label %if.end3, !dbg !309

if.end3:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticTrue, align 4, !dbg !310
  %tobool4 = icmp ne i32 %3, 0, !dbg !310
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !312

if.then5:                                         ; preds = %if.end3
  br label %if.end6, !dbg !313

if.end6:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !315
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !316 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !317, metadata !DIExpression()), !dbg !318
  store ptr null, ptr %data, align 8, !dbg !319
  %0 = load i32, ptr @staticFalse, align 4, !dbg !320
  %tobool = icmp ne i32 %0, 0, !dbg !320
  br i1 %tobool, label %if.then, label %if.else, !dbg !322

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !323
  br label %if.end2, !dbg !325

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !326
  store ptr %call, ptr %data, align 8, !dbg !328
  %1 = load ptr, ptr %data, align 8, !dbg !329
  %cmp = icmp eq ptr %1, null, !dbg !331
  br i1 %cmp, label %if.then1, label %if.end, !dbg !332

if.then1:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !333
  unreachable, !dbg !333

if.end:                                           ; preds = %if.else
  br label %if.end2

if.end2:                                          ; preds = %if.end, %if.then
  %2 = load i32, ptr @staticTrue, align 4, !dbg !335
  %tobool3 = icmp ne i32 %2, 0, !dbg !335
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !337

if.then4:                                         ; preds = %if.end2
  %3 = load ptr, ptr %data, align 8, !dbg !338
  %call5 = call ptr @SAFEFREE(ptr noundef %3), !dbg !340
  br label %if.end6, !dbg !341

if.end6:                                          ; preds = %if.then4, %if.end2
  ret void, !dbg !342
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !343 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !344, metadata !DIExpression()), !dbg !345
  store ptr null, ptr %data, align 8, !dbg !346
  %0 = load i32, ptr @staticTrue, align 4, !dbg !347
  %tobool = icmp ne i32 %0, 0, !dbg !347
  br i1 %tobool, label %if.then, label %if.end2, !dbg !349

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !350
  store ptr %call, ptr %data, align 8, !dbg !352
  %1 = load ptr, ptr %data, align 8, !dbg !353
  %cmp = icmp eq ptr %1, null, !dbg !355
  br i1 %cmp, label %if.then1, label %if.end, !dbg !356

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !357
  unreachable, !dbg !357

if.end:                                           ; preds = %if.then
  br label %if.end2, !dbg !359

if.end2:                                          ; preds = %if.end, %entry
  %2 = load i32, ptr @staticTrue, align 4, !dbg !360
  %tobool3 = icmp ne i32 %2, 0, !dbg !360
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !362

if.then4:                                         ; preds = %if.end2
  %3 = load ptr, ptr %data, align 8, !dbg !363
  %call5 = call ptr @SAFEFREE(ptr noundef %3), !dbg !365
  br label %if.end6, !dbg !366

if.end6:                                          ; preds = %if.then4, %if.end2
  ret void, !dbg !367
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!36, !37, !38, !39, !40, !41, !42}
!llvm.ident = !{!43}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "staticTrue", scope: !19, file: !29, line: 35, type: !35, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !26, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df28.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "eab96012622b773e3f6257cfe1a4ed33")
!21 = !{!22, !23, !25}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!25 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!26 = !{!0, !7, !12, !17, !27, !33}
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(scope: null, file: !29, line: 75, type: !30, isLocal: true, isDefinition: true)
!29 = !DIFile(filename: "src/df/df28.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "eab96012622b773e3f6257cfe1a4ed33")
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 21)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "staticFalse", scope: !19, file: !29, line: 36, type: !35, isLocal: true, isDefinition: true)
!35 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!36 = !{i32 7, !"Dwarf Version", i32 5}
!37 = !{i32 2, !"Debug Info Version", i32 3}
!38 = !{i32 1, !"wchar_size", i32 4}
!39 = !{i32 8, !"PIC Level", i32 2}
!40 = !{i32 7, !"PIE Level", i32 2}
!41 = !{i32 7, !"uwtable", i32 2}
!42 = !{i32 7, !"frame-pointer", i32 2}
!43 = !{!"clang version 16.0.0"}
!44 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !45, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!45 = !DISubroutineType(types: !46)
!46 = !{null, !22, !22}
!47 = !{}
!48 = !DILocalVariable(name: "p", arg: 1, scope: !44, file: !2, line: 4, type: !22)
!49 = !DILocation(line: 4, column: 22, scope: !44)
!50 = !DILocalVariable(name: "q", arg: 2, scope: !44, file: !2, line: 4, type: !22)
!51 = !DILocation(line: 4, column: 31, scope: !44)
!52 = !DILocation(line: 5, column: 3, scope: !44)
!53 = !DILocation(line: 6, column: 1, scope: !44)
!54 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !45, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!55 = !DILocalVariable(name: "p", arg: 1, scope: !54, file: !2, line: 8, type: !22)
!56 = !DILocation(line: 8, column: 25, scope: !54)
!57 = !DILocalVariable(name: "q", arg: 2, scope: !54, file: !2, line: 8, type: !22)
!58 = !DILocation(line: 8, column: 34, scope: !54)
!59 = !DILocation(line: 9, column: 3, scope: !54)
!60 = !DILocation(line: 10, column: 1, scope: !54)
!61 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !45, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!62 = !DILocalVariable(name: "p", arg: 1, scope: !61, file: !2, line: 12, type: !22)
!63 = !DILocation(line: 12, column: 21, scope: !61)
!64 = !DILocalVariable(name: "q", arg: 2, scope: !61, file: !2, line: 12, type: !22)
!65 = !DILocation(line: 12, column: 30, scope: !61)
!66 = !DILocation(line: 13, column: 3, scope: !61)
!67 = !DILocation(line: 14, column: 1, scope: !61)
!68 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !45, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!69 = !DILocalVariable(name: "p", arg: 1, scope: !68, file: !2, line: 16, type: !22)
!70 = !DILocation(line: 16, column: 20, scope: !68)
!71 = !DILocalVariable(name: "q", arg: 2, scope: !68, file: !2, line: 16, type: !22)
!72 = !DILocation(line: 16, column: 29, scope: !68)
!73 = !DILocation(line: 17, column: 3, scope: !68)
!74 = !DILocation(line: 18, column: 1, scope: !68)
!75 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !45, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!76 = !DILocalVariable(name: "p", arg: 1, scope: !75, file: !2, line: 20, type: !22)
!77 = !DILocation(line: 20, column: 34, scope: !75)
!78 = !DILocalVariable(name: "q", arg: 2, scope: !75, file: !2, line: 20, type: !22)
!79 = !DILocation(line: 20, column: 43, scope: !75)
!80 = !DILocation(line: 21, column: 3, scope: !75)
!81 = !DILocation(line: 22, column: 1, scope: !75)
!82 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !45, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!83 = !DILocalVariable(name: "p", arg: 1, scope: !82, file: !2, line: 24, type: !22)
!84 = !DILocation(line: 24, column: 33, scope: !82)
!85 = !DILocalVariable(name: "q", arg: 2, scope: !82, file: !2, line: 24, type: !22)
!86 = !DILocation(line: 24, column: 42, scope: !82)
!87 = !DILocation(line: 25, column: 3, scope: !82)
!88 = !DILocation(line: 26, column: 1, scope: !82)
!89 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !90, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!90 = !DISubroutineType(types: !91)
!91 = !{!22, !35}
!92 = !DILocalVariable(name: "n", arg: 1, scope: !89, file: !2, line: 29, type: !35)
!93 = !DILocation(line: 29, column: 22, scope: !89)
!94 = !DILocation(line: 30, column: 17, scope: !89)
!95 = !DILocation(line: 30, column: 10, scope: !89)
!96 = !DILocation(line: 30, column: 3, scope: !89)
!97 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !90, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!98 = !DILocalVariable(name: "n", arg: 1, scope: !97, file: !2, line: 33, type: !35)
!99 = !DILocation(line: 33, column: 28, scope: !97)
!100 = !DILocation(line: 34, column: 19, scope: !97)
!101 = !DILocation(line: 34, column: 12, scope: !97)
!102 = !DILocation(line: 34, column: 5, scope: !97)
!103 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !90, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!104 = !DILocalVariable(name: "n", arg: 1, scope: !103, file: !2, line: 37, type: !35)
!105 = !DILocation(line: 37, column: 21, scope: !103)
!106 = !DILocation(line: 38, column: 17, scope: !103)
!107 = !DILocation(line: 38, column: 10, scope: !103)
!108 = !DILocation(line: 38, column: 3, scope: !103)
!109 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !90, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!110 = !DILocalVariable(name: "n", arg: 1, scope: !109, file: !2, line: 41, type: !35)
!111 = !DILocation(line: 41, column: 21, scope: !109)
!112 = !DILocation(line: 42, column: 17, scope: !109)
!113 = !DILocation(line: 42, column: 10, scope: !109)
!114 = !DILocation(line: 42, column: 3, scope: !109)
!115 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !90, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!116 = !DILocalVariable(name: "n", arg: 1, scope: !115, file: !2, line: 45, type: !35)
!117 = !DILocation(line: 45, column: 21, scope: !115)
!118 = !DILocation(line: 46, column: 17, scope: !115)
!119 = !DILocation(line: 46, column: 10, scope: !115)
!120 = !DILocation(line: 46, column: 3, scope: !115)
!121 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !90, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!122 = !DILocalVariable(name: "n", arg: 1, scope: !121, file: !2, line: 49, type: !35)
!123 = !DILocation(line: 49, column: 21, scope: !121)
!124 = !DILocation(line: 50, column: 17, scope: !121)
!125 = !DILocation(line: 50, column: 10, scope: !121)
!126 = !DILocation(line: 50, column: 3, scope: !121)
!127 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !90, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!128 = !DILocalVariable(name: "n", arg: 1, scope: !127, file: !2, line: 53, type: !35)
!129 = !DILocation(line: 53, column: 21, scope: !127)
!130 = !DILocation(line: 54, column: 17, scope: !127)
!131 = !DILocation(line: 54, column: 10, scope: !127)
!132 = !DILocation(line: 54, column: 3, scope: !127)
!133 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !90, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!134 = !DILocalVariable(name: "n", arg: 1, scope: !133, file: !2, line: 57, type: !35)
!135 = !DILocation(line: 57, column: 18, scope: !133)
!136 = !DILocation(line: 58, column: 17, scope: !133)
!137 = !DILocation(line: 58, column: 10, scope: !133)
!138 = !DILocation(line: 58, column: 3, scope: !133)
!139 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !140, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !35, !35}
!142 = !DILocalVariable(name: "id", arg: 1, scope: !139, file: !2, line: 67, type: !35)
!143 = !DILocation(line: 67, column: 20, scope: !139)
!144 = !DILocalVariable(name: "flags", arg: 2, scope: !139, file: !2, line: 67, type: !35)
!145 = !DILocation(line: 67, column: 28, scope: !139)
!146 = !DILocation(line: 68, column: 3, scope: !139)
!147 = !DILocation(line: 69, column: 1, scope: !139)
!148 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !149, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!149 = !DISubroutineType(types: !150)
!150 = !{null, !35, !151}
!151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!152 = !DILocalVariable(name: "thdid", arg: 1, scope: !148, file: !2, line: 79, type: !35)
!153 = !DILocation(line: 79, column: 21, scope: !148)
!154 = !DILocalVariable(name: "cxt", arg: 2, scope: !148, file: !2, line: 79, type: !151)
!155 = !DILocation(line: 79, column: 34, scope: !148)
!156 = !DILocation(line: 81, column: 1, scope: !148)
!157 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !149, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!158 = !DILocalVariable(name: "thdid", arg: 1, scope: !157, file: !2, line: 82, type: !35)
!159 = !DILocation(line: 82, column: 21, scope: !157)
!160 = !DILocalVariable(name: "cxt", arg: 2, scope: !157, file: !2, line: 82, type: !151)
!161 = !DILocation(line: 82, column: 33, scope: !157)
!162 = !DILocation(line: 84, column: 1, scope: !157)
!163 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !164, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!164 = !DISubroutineType(types: !165)
!165 = !{null, !35, !151, !151}
!166 = !DILocalVariable(name: "thdid", arg: 1, scope: !163, file: !2, line: 85, type: !35)
!167 = !DILocation(line: 85, column: 26, scope: !163)
!168 = !DILocalVariable(name: "cxt", arg: 2, scope: !163, file: !2, line: 85, type: !151)
!169 = !DILocation(line: 85, column: 38, scope: !163)
!170 = !DILocalVariable(name: "lev", arg: 3, scope: !163, file: !2, line: 85, type: !151)
!171 = !DILocation(line: 85, column: 49, scope: !163)
!172 = !DILocation(line: 87, column: 1, scope: !163)
!173 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !174, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!174 = !DISubroutineType(types: !175)
!175 = !{null, !151}
!176 = !DILocalVariable(name: "lockname", arg: 1, scope: !173, file: !2, line: 89, type: !151)
!177 = !DILocation(line: 89, column: 17, scope: !173)
!178 = !DILocation(line: 91, column: 1, scope: !173)
!179 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !174, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!180 = !DILocalVariable(name: "str", arg: 1, scope: !179, file: !2, line: 93, type: !151)
!181 = !DILocation(line: 93, column: 18, scope: !179)
!182 = !DILocation(line: 94, column: 18, scope: !179)
!183 = !DILocation(line: 94, column: 3, scope: !179)
!184 = !DILocation(line: 95, column: 3, scope: !179)
!185 = !DILocation(line: 96, column: 3, scope: !179)
!186 = !DILocation(line: 97, column: 1, scope: !179)
!187 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !188, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!188 = !DISubroutineType(types: !189)
!189 = !{!22, !190}
!190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64)
!191 = !DILocalVariable(name: "p", arg: 1, scope: !187, file: !2, line: 100, type: !190)
!192 = !DILocation(line: 100, column: 24, scope: !187)
!193 = !DILocation(line: 101, column: 6, scope: !187)
!194 = !DILocation(line: 101, column: 8, scope: !187)
!195 = !DILocation(line: 102, column: 1, scope: !187)
!196 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !188, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!197 = !DILocalVariable(name: "p", arg: 1, scope: !196, file: !2, line: 104, type: !190)
!198 = !DILocation(line: 104, column: 20, scope: !196)
!199 = !DILocation(line: 105, column: 6, scope: !196)
!200 = !DILocation(line: 105, column: 8, scope: !196)
!201 = !DILocation(line: 106, column: 1, scope: !196)
!202 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !188, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!203 = !DILocalVariable(name: "p", arg: 1, scope: !202, file: !2, line: 110, type: !190)
!204 = !DILocation(line: 110, column: 22, scope: !202)
!205 = !DILocation(line: 111, column: 10, scope: !202)
!206 = !DILocation(line: 111, column: 5, scope: !202)
!207 = !DILocation(line: 112, column: 1, scope: !202)
!208 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !188, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!209 = !DILocalVariable(name: "p", arg: 1, scope: !208, file: !2, line: 115, type: !190)
!210 = !DILocation(line: 115, column: 24, scope: !208)
!211 = !DILocation(line: 116, column: 10, scope: !208)
!212 = !DILocation(line: 116, column: 5, scope: !208)
!213 = !DILocation(line: 117, column: 1, scope: !208)
!214 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !215, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!215 = !DISubroutineType(types: !216)
!216 = !{null}
!217 = !DILocation(line: 135, column: 20, scope: !214)
!218 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_long_05_bad", scope: !29, file: !29, line: 39, type: !215, scopeLine: 40, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!219 = !DILocalVariable(name: "data", scope: !218, file: !29, line: 41, type: !23)
!220 = !DILocation(line: 41, column: 12, scope: !218)
!221 = !DILocation(line: 43, column: 10, scope: !218)
!222 = !DILocation(line: 44, column: 8, scope: !223)
!223 = distinct !DILexicalBlock(scope: !218, file: !29, line: 44, column: 8)
!224 = !DILocation(line: 44, column: 8, scope: !218)
!225 = !DILocation(line: 46, column: 24, scope: !226)
!226 = distinct !DILexicalBlock(scope: !223, file: !29, line: 45, column: 5)
!227 = !DILocation(line: 46, column: 14, scope: !226)
!228 = !DILocation(line: 47, column: 13, scope: !229)
!229 = distinct !DILexicalBlock(scope: !226, file: !29, line: 47, column: 13)
!230 = !DILocation(line: 47, column: 18, scope: !229)
!231 = !DILocation(line: 47, column: 13, scope: !226)
!232 = !DILocation(line: 47, column: 28, scope: !233)
!233 = distinct !DILexicalBlock(scope: !229, file: !29, line: 47, column: 27)
!234 = !DILocation(line: 49, column: 18, scope: !226)
!235 = !DILocation(line: 49, column: 9, scope: !226)
!236 = !DILocation(line: 50, column: 5, scope: !226)
!237 = !DILocation(line: 51, column: 8, scope: !238)
!238 = distinct !DILexicalBlock(scope: !218, file: !29, line: 51, column: 8)
!239 = !DILocation(line: 51, column: 8, scope: !218)
!240 = !DILocation(line: 54, column: 20, scope: !241)
!241 = distinct !DILexicalBlock(scope: !238, file: !29, line: 52, column: 5)
!242 = !DILocation(line: 54, column: 9, scope: !241)
!243 = !DILocation(line: 55, column: 5, scope: !241)
!244 = !DILocation(line: 56, column: 1, scope: !218)
!245 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_long_05_good", scope: !29, file: !29, line: 149, type: !215, scopeLine: 150, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!246 = !DILocation(line: 151, column: 5, scope: !245)
!247 = !DILocation(line: 152, column: 5, scope: !245)
!248 = !DILocation(line: 153, column: 5, scope: !245)
!249 = !DILocation(line: 154, column: 5, scope: !245)
!250 = !DILocation(line: 155, column: 1, scope: !245)
!251 = distinct !DISubprogram(name: "main", scope: !29, file: !29, line: 164, type: !252, scopeLine: 165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !47)
!252 = !DISubroutineType(types: !253)
!253 = !{!35, !35, !254}
!254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !151, size: 64)
!255 = !DILocalVariable(name: "argc", arg: 1, scope: !251, file: !29, line: 164, type: !35)
!256 = !DILocation(line: 164, column: 14, scope: !251)
!257 = !DILocalVariable(name: "argv", arg: 2, scope: !251, file: !29, line: 164, type: !254)
!258 = !DILocation(line: 164, column: 27, scope: !251)
!259 = !DILocation(line: 167, column: 22, scope: !251)
!260 = !DILocation(line: 167, column: 12, scope: !251)
!261 = !DILocation(line: 167, column: 5, scope: !251)
!262 = !DILocation(line: 168, column: 5, scope: !251)
!263 = !DILocation(line: 169, column: 5, scope: !251)
!264 = !DILocation(line: 170, column: 5, scope: !251)
!265 = distinct !DISubprogram(name: "goodB2G1", scope: !29, file: !29, line: 60, type: !215, scopeLine: 61, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !47)
!266 = !DILocalVariable(name: "data", scope: !265, file: !29, line: 62, type: !23)
!267 = !DILocation(line: 62, column: 12, scope: !265)
!268 = !DILocation(line: 64, column: 10, scope: !265)
!269 = !DILocation(line: 65, column: 8, scope: !270)
!270 = distinct !DILexicalBlock(scope: !265, file: !29, line: 65, column: 8)
!271 = !DILocation(line: 65, column: 8, scope: !265)
!272 = !DILocation(line: 67, column: 24, scope: !273)
!273 = distinct !DILexicalBlock(scope: !270, file: !29, line: 66, column: 5)
!274 = !DILocation(line: 67, column: 14, scope: !273)
!275 = !DILocation(line: 68, column: 13, scope: !276)
!276 = distinct !DILexicalBlock(scope: !273, file: !29, line: 68, column: 13)
!277 = !DILocation(line: 68, column: 18, scope: !276)
!278 = !DILocation(line: 68, column: 13, scope: !273)
!279 = !DILocation(line: 68, column: 28, scope: !280)
!280 = distinct !DILexicalBlock(scope: !276, file: !29, line: 68, column: 27)
!281 = !DILocation(line: 70, column: 18, scope: !273)
!282 = !DILocation(line: 70, column: 9, scope: !273)
!283 = !DILocation(line: 71, column: 5, scope: !273)
!284 = !DILocation(line: 72, column: 8, scope: !285)
!285 = distinct !DILexicalBlock(scope: !265, file: !29, line: 72, column: 8)
!286 = !DILocation(line: 72, column: 8, scope: !265)
!287 = !DILocation(line: 75, column: 9, scope: !288)
!288 = distinct !DILexicalBlock(scope: !285, file: !29, line: 73, column: 5)
!289 = !DILocation(line: 76, column: 5, scope: !288)
!290 = !DILocation(line: 83, column: 1, scope: !265)
!291 = distinct !DISubprogram(name: "goodB2G2", scope: !29, file: !29, line: 86, type: !215, scopeLine: 87, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !47)
!292 = !DILocalVariable(name: "data", scope: !291, file: !29, line: 88, type: !23)
!293 = !DILocation(line: 88, column: 12, scope: !291)
!294 = !DILocation(line: 90, column: 10, scope: !291)
!295 = !DILocation(line: 91, column: 8, scope: !296)
!296 = distinct !DILexicalBlock(scope: !291, file: !29, line: 91, column: 8)
!297 = !DILocation(line: 91, column: 8, scope: !291)
!298 = !DILocation(line: 93, column: 24, scope: !299)
!299 = distinct !DILexicalBlock(scope: !296, file: !29, line: 92, column: 5)
!300 = !DILocation(line: 93, column: 14, scope: !299)
!301 = !DILocation(line: 94, column: 13, scope: !302)
!302 = distinct !DILexicalBlock(scope: !299, file: !29, line: 94, column: 13)
!303 = !DILocation(line: 94, column: 18, scope: !302)
!304 = !DILocation(line: 94, column: 13, scope: !299)
!305 = !DILocation(line: 94, column: 28, scope: !306)
!306 = distinct !DILexicalBlock(scope: !302, file: !29, line: 94, column: 27)
!307 = !DILocation(line: 96, column: 18, scope: !299)
!308 = !DILocation(line: 96, column: 9, scope: !299)
!309 = !DILocation(line: 97, column: 5, scope: !299)
!310 = !DILocation(line: 98, column: 8, scope: !311)
!311 = distinct !DILexicalBlock(scope: !291, file: !29, line: 98, column: 8)
!312 = !DILocation(line: 98, column: 8, scope: !291)
!313 = !DILocation(line: 103, column: 5, scope: !314)
!314 = distinct !DILexicalBlock(scope: !311, file: !29, line: 99, column: 5)
!315 = !DILocation(line: 104, column: 1, scope: !291)
!316 = distinct !DISubprogram(name: "goodG2B1", scope: !29, file: !29, line: 107, type: !215, scopeLine: 108, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !47)
!317 = !DILocalVariable(name: "data", scope: !316, file: !29, line: 109, type: !23)
!318 = !DILocation(line: 109, column: 12, scope: !316)
!319 = !DILocation(line: 111, column: 10, scope: !316)
!320 = !DILocation(line: 112, column: 8, scope: !321)
!321 = distinct !DILexicalBlock(scope: !316, file: !29, line: 112, column: 8)
!322 = !DILocation(line: 112, column: 8, scope: !316)
!323 = !DILocation(line: 115, column: 9, scope: !324)
!324 = distinct !DILexicalBlock(scope: !321, file: !29, line: 113, column: 5)
!325 = !DILocation(line: 116, column: 5, scope: !324)
!326 = !DILocation(line: 119, column: 24, scope: !327)
!327 = distinct !DILexicalBlock(scope: !321, file: !29, line: 118, column: 5)
!328 = !DILocation(line: 119, column: 14, scope: !327)
!329 = !DILocation(line: 120, column: 13, scope: !330)
!330 = distinct !DILexicalBlock(scope: !327, file: !29, line: 120, column: 13)
!331 = !DILocation(line: 120, column: 18, scope: !330)
!332 = !DILocation(line: 120, column: 13, scope: !327)
!333 = !DILocation(line: 120, column: 28, scope: !334)
!334 = distinct !DILexicalBlock(scope: !330, file: !29, line: 120, column: 27)
!335 = !DILocation(line: 123, column: 8, scope: !336)
!336 = distinct !DILexicalBlock(scope: !316, file: !29, line: 123, column: 8)
!337 = !DILocation(line: 123, column: 8, scope: !316)
!338 = !DILocation(line: 126, column: 18, scope: !339)
!339 = distinct !DILexicalBlock(scope: !336, file: !29, line: 124, column: 5)
!340 = !DILocation(line: 126, column: 9, scope: !339)
!341 = !DILocation(line: 127, column: 5, scope: !339)
!342 = !DILocation(line: 128, column: 1, scope: !316)
!343 = distinct !DISubprogram(name: "goodG2B2", scope: !29, file: !29, line: 131, type: !215, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !47)
!344 = !DILocalVariable(name: "data", scope: !343, file: !29, line: 133, type: !23)
!345 = !DILocation(line: 133, column: 12, scope: !343)
!346 = !DILocation(line: 135, column: 10, scope: !343)
!347 = !DILocation(line: 136, column: 8, scope: !348)
!348 = distinct !DILexicalBlock(scope: !343, file: !29, line: 136, column: 8)
!349 = !DILocation(line: 136, column: 8, scope: !343)
!350 = !DILocation(line: 138, column: 24, scope: !351)
!351 = distinct !DILexicalBlock(scope: !348, file: !29, line: 137, column: 5)
!352 = !DILocation(line: 138, column: 14, scope: !351)
!353 = !DILocation(line: 139, column: 13, scope: !354)
!354 = distinct !DILexicalBlock(scope: !351, file: !29, line: 139, column: 13)
!355 = !DILocation(line: 139, column: 18, scope: !354)
!356 = !DILocation(line: 139, column: 13, scope: !351)
!357 = !DILocation(line: 139, column: 28, scope: !358)
!358 = distinct !DILexicalBlock(scope: !354, file: !29, line: 139, column: 27)
!359 = !DILocation(line: 141, column: 5, scope: !351)
!360 = !DILocation(line: 142, column: 8, scope: !361)
!361 = distinct !DILexicalBlock(scope: !343, file: !29, line: 142, column: 8)
!362 = !DILocation(line: 142, column: 8, scope: !343)
!363 = !DILocation(line: 145, column: 18, scope: !364)
!364 = distinct !DILexicalBlock(scope: !361, file: !29, line: 143, column: 5)
!365 = !DILocation(line: 145, column: 9, scope: !364)
!366 = !DILocation(line: 146, column: 5, scope: !364)
!367 = !DILocation(line: 147, column: 1, scope: !343)
