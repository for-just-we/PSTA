; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/df/df31.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df31.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !39 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !43, metadata !DIExpression()), !dbg !44
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !47
  ret void, !dbg !48
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !49 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !50, metadata !DIExpression()), !dbg !51
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !54
  ret void, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !56 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !57, metadata !DIExpression()), !dbg !58
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !61
  ret void, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !63 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !64, metadata !DIExpression()), !dbg !65
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !66, metadata !DIExpression()), !dbg !67
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !68
  ret void, !dbg !69
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !70 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !71, metadata !DIExpression()), !dbg !72
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !75
  ret void, !dbg !76
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !77 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !78, metadata !DIExpression()), !dbg !79
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !82
  ret void, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !84 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %0 = load i32, ptr %n.addr, align 4, !dbg !90
  %conv = sext i32 %0 to i64, !dbg !90
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !91
  ret ptr %call, !dbg !92
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, ptr %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !97
  ret ptr %call, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, ptr %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !103
  ret ptr %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !105 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !106, metadata !DIExpression()), !dbg !107
  %0 = load i32, ptr %n.addr, align 4, !dbg !108
  %conv = sext i32 %0 to i64, !dbg !108
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !109
  ret ptr %call, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !111 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !112, metadata !DIExpression()), !dbg !113
  %0 = load i32, ptr %n.addr, align 4, !dbg !114
  %conv = sext i32 %0 to i64, !dbg !114
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !115
  ret ptr %call, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !117 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !118, metadata !DIExpression()), !dbg !119
  %0 = load i32, ptr %n.addr, align 4, !dbg !120
  %conv = sext i32 %0 to i64, !dbg !120
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !121
  ret ptr %call, !dbg !122
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !123 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !124, metadata !DIExpression()), !dbg !125
  %0 = load i32, ptr %n.addr, align 4, !dbg !126
  %conv = sext i32 %0 to i64, !dbg !126
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !127
  ret ptr %call, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !129 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !130, metadata !DIExpression()), !dbg !131
  %0 = load i32, ptr %n.addr, align 4, !dbg !132
  %conv = sext i32 %0 to i64, !dbg !132
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !133
  ret ptr %call, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !135 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !138, metadata !DIExpression()), !dbg !139
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !140, metadata !DIExpression()), !dbg !141
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !142
  ret void, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !144 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !148, metadata !DIExpression()), !dbg !149
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !150, metadata !DIExpression()), !dbg !151
  ret void, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !153 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !154, metadata !DIExpression()), !dbg !155
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !156, metadata !DIExpression()), !dbg !157
  ret void, !dbg !158
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !159 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !162, metadata !DIExpression()), !dbg !163
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !164, metadata !DIExpression()), !dbg !165
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !166, metadata !DIExpression()), !dbg !167
  ret void, !dbg !168
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !169 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !172, metadata !DIExpression()), !dbg !173
  ret void, !dbg !174
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !175 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !176, metadata !DIExpression()), !dbg !177
  %0 = load ptr, ptr %str.addr, align 8, !dbg !178
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !179
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !180
  %call2 = call i32 @getchar(), !dbg !181
  ret void, !dbg !182
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !183 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !187, metadata !DIExpression()), !dbg !188
  %0 = load ptr, ptr %p.addr, align 8, !dbg !189
  store i32 0, ptr %0, align 4, !dbg !190
  %1 = load ptr, ptr %retval, align 8, !dbg !191
  ret ptr %1, !dbg !191
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !192 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !193, metadata !DIExpression()), !dbg !194
  %0 = load ptr, ptr %p.addr, align 8, !dbg !195
  store i32 0, ptr %0, align 4, !dbg !196
  %1 = load ptr, ptr %retval, align 8, !dbg !197
  ret ptr %1, !dbg !197
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !198 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !199, metadata !DIExpression()), !dbg !200
  %0 = load ptr, ptr %p.addr, align 8, !dbg !201
  call void @free(ptr noundef %0) #7, !dbg !202
  %1 = load ptr, ptr %retval, align 8, !dbg !203
  ret ptr %1, !dbg !203
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !204 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !205, metadata !DIExpression()), !dbg !206
  %0 = load ptr, ptr %p.addr, align 8, !dbg !207
  call void @free(ptr noundef %0) #7, !dbg !208
  %1 = load ptr, ptr %retval, align 8, !dbg !209
  ret ptr %1, !dbg !209
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !210 {
entry:
  ret void, !dbg !213
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_08_bad() #0 !dbg !214 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !215, metadata !DIExpression()), !dbg !216
  store ptr null, ptr %data, align 8, !dbg !217
  %call = call i32 @staticReturnsTrue(), !dbg !218
  %tobool = icmp ne i32 %call, 0, !dbg !218
  br i1 %tobool, label %if.then, label %if.end4, !dbg !220

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !221
  store ptr %call1, ptr %data, align 8, !dbg !223
  %0 = load ptr, ptr %data, align 8, !dbg !224
  %cmp = icmp eq ptr %0, null, !dbg !226
  br i1 %cmp, label %if.then2, label %if.end, !dbg !227

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !228
  unreachable, !dbg !228

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !230
  %call3 = call ptr @SAFEFREE(ptr noundef %1), !dbg !231
  br label %if.end4, !dbg !232

if.end4:                                          ; preds = %if.end, %entry
  %call5 = call i32 @staticReturnsTrue(), !dbg !233
  %tobool6 = icmp ne i32 %call5, 0, !dbg !233
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !235

if.then7:                                         ; preds = %if.end4
  %2 = load ptr, ptr %data, align 8, !dbg !236
  %call8 = call ptr @DOUBLEFREE(ptr noundef %2), !dbg !238
  br label %if.end9, !dbg !239

if.end9:                                          ; preds = %if.then7, %if.end4
  ret void, !dbg !240
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_08_good() #0 !dbg !241 {
entry:
  call void @goodB2G1(), !dbg !242
  call void @goodB2G2(), !dbg !243
  call void @goodG2B1(), !dbg !244
  call void @goodG2B2(), !dbg !245
  ret void, !dbg !246
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !247 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !251, metadata !DIExpression()), !dbg !252
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !253, metadata !DIExpression()), !dbg !254
  %call = call i64 @time(ptr noundef null) #7, !dbg !255
  %conv = trunc i64 %call to i32, !dbg !256
  call void @srand(i32 noundef %conv) #7, !dbg !257
  call void @CWE415_Double_Free__malloc_free_long_08_good(), !dbg !258
  call void @CWE415_Double_Free__malloc_free_long_08_bad(), !dbg !259
  ret i32 0, !dbg !260
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @staticReturnsTrue() #0 !dbg !261 {
entry:
  ret i32 1, !dbg !264
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !265 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !266, metadata !DIExpression()), !dbg !267
  store ptr null, ptr %data, align 8, !dbg !268
  %call = call i32 @staticReturnsTrue(), !dbg !269
  %tobool = icmp ne i32 %call, 0, !dbg !269
  br i1 %tobool, label %if.then, label %if.end4, !dbg !271

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !272
  store ptr %call1, ptr %data, align 8, !dbg !274
  %0 = load ptr, ptr %data, align 8, !dbg !275
  %cmp = icmp eq ptr %0, null, !dbg !277
  br i1 %cmp, label %if.then2, label %if.end, !dbg !278

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !279
  unreachable, !dbg !279

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !281
  %call3 = call ptr @SAFEFREE(ptr noundef %1), !dbg !282
  br label %if.end4, !dbg !283

if.end4:                                          ; preds = %if.end, %entry
  %call5 = call i32 @staticReturnsFalse(), !dbg !284
  %tobool6 = icmp ne i32 %call5, 0, !dbg !284
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !286

if.then7:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.3), !dbg !287
  br label %if.end8, !dbg !289

if.else:                                          ; preds = %if.end4
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then7
  ret void, !dbg !290
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @staticReturnsFalse() #0 !dbg !291 {
entry:
  ret i32 0, !dbg !292
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !293 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !294, metadata !DIExpression()), !dbg !295
  store ptr null, ptr %data, align 8, !dbg !296
  %call = call i32 @staticReturnsTrue(), !dbg !297
  %tobool = icmp ne i32 %call, 0, !dbg !297
  br i1 %tobool, label %if.then, label %if.end4, !dbg !299

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !300
  store ptr %call1, ptr %data, align 8, !dbg !302
  %0 = load ptr, ptr %data, align 8, !dbg !303
  %cmp = icmp eq ptr %0, null, !dbg !305
  br i1 %cmp, label %if.then2, label %if.end, !dbg !306

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !307
  unreachable, !dbg !307

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !309
  %call3 = call ptr @SAFEFREE(ptr noundef %1), !dbg !310
  br label %if.end4, !dbg !311

if.end4:                                          ; preds = %if.end, %entry
  %call5 = call i32 @staticReturnsTrue(), !dbg !312
  %tobool6 = icmp ne i32 %call5, 0, !dbg !312
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !314

if.then7:                                         ; preds = %if.end4
  br label %if.end8, !dbg !315

if.end8:                                          ; preds = %if.then7, %if.end4
  ret void, !dbg !317
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !318 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !319, metadata !DIExpression()), !dbg !320
  store ptr null, ptr %data, align 8, !dbg !321
  %call = call i32 @staticReturnsFalse(), !dbg !322
  %tobool = icmp ne i32 %call, 0, !dbg !322
  br i1 %tobool, label %if.then, label %if.else, !dbg !324

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !325
  br label %if.end3, !dbg !327

if.else:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !328
  store ptr %call1, ptr %data, align 8, !dbg !330
  %0 = load ptr, ptr %data, align 8, !dbg !331
  %cmp = icmp eq ptr %0, null, !dbg !333
  br i1 %cmp, label %if.then2, label %if.end, !dbg !334

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !335
  unreachable, !dbg !335

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %call4 = call i32 @staticReturnsTrue(), !dbg !337
  %tobool5 = icmp ne i32 %call4, 0, !dbg !337
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !339

if.then6:                                         ; preds = %if.end3
  %1 = load ptr, ptr %data, align 8, !dbg !340
  %call7 = call ptr @SAFEFREE(ptr noundef %1), !dbg !342
  br label %if.end8, !dbg !343

if.end8:                                          ; preds = %if.then6, %if.end3
  ret void, !dbg !344
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !345 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !346, metadata !DIExpression()), !dbg !347
  store ptr null, ptr %data, align 8, !dbg !348
  %call = call i32 @staticReturnsTrue(), !dbg !349
  %tobool = icmp ne i32 %call, 0, !dbg !349
  br i1 %tobool, label %if.then, label %if.end3, !dbg !351

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !352
  store ptr %call1, ptr %data, align 8, !dbg !354
  %0 = load ptr, ptr %data, align 8, !dbg !355
  %cmp = icmp eq ptr %0, null, !dbg !357
  br i1 %cmp, label %if.then2, label %if.end, !dbg !358

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !359
  unreachable, !dbg !359

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !361

if.end3:                                          ; preds = %if.end, %entry
  %call4 = call i32 @staticReturnsTrue(), !dbg !362
  %tobool5 = icmp ne i32 %call4, 0, !dbg !362
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !364

if.then6:                                         ; preds = %if.end3
  %1 = load ptr, ptr %data, align 8, !dbg !365
  %call7 = call ptr @SAFEFREE(ptr noundef %1), !dbg !367
  br label %if.end8, !dbg !368

if.end8:                                          ; preds = %if.then6, %if.end3
  ret void, !dbg !369
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!23}
!llvm.module.flags = !{!31, !32, !33, !34, !35, !36, !37}
!llvm.ident = !{!38}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 82, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/df/df31.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "522fe0a1321fbfe7c87f90e59228bad2")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 21)
!23 = distinct !DICompileUnit(language: DW_LANG_C11, file: !24, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !25, globals: !30, splitDebugInlining: false, nameTableKind: None)
!24 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df31.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "522fe0a1321fbfe7c87f90e59228bad2")
!25 = !{!26, !27, !29}
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64)
!28 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!29 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!30 = !{!0, !7, !12, !17}
!31 = !{i32 7, !"Dwarf Version", i32 5}
!32 = !{i32 2, !"Debug Info Version", i32 3}
!33 = !{i32 1, !"wchar_size", i32 4}
!34 = !{i32 8, !"PIC Level", i32 2}
!35 = !{i32 7, !"PIE Level", i32 2}
!36 = !{i32 7, !"uwtable", i32 2}
!37 = !{i32 7, !"frame-pointer", i32 2}
!38 = !{!"clang version 16.0.0"}
!39 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !40, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!40 = !DISubroutineType(types: !41)
!41 = !{null, !26, !26}
!42 = !{}
!43 = !DILocalVariable(name: "p", arg: 1, scope: !39, file: !2, line: 4, type: !26)
!44 = !DILocation(line: 4, column: 22, scope: !39)
!45 = !DILocalVariable(name: "q", arg: 2, scope: !39, file: !2, line: 4, type: !26)
!46 = !DILocation(line: 4, column: 31, scope: !39)
!47 = !DILocation(line: 5, column: 3, scope: !39)
!48 = !DILocation(line: 6, column: 1, scope: !39)
!49 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !40, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!50 = !DILocalVariable(name: "p", arg: 1, scope: !49, file: !2, line: 8, type: !26)
!51 = !DILocation(line: 8, column: 25, scope: !49)
!52 = !DILocalVariable(name: "q", arg: 2, scope: !49, file: !2, line: 8, type: !26)
!53 = !DILocation(line: 8, column: 34, scope: !49)
!54 = !DILocation(line: 9, column: 3, scope: !49)
!55 = !DILocation(line: 10, column: 1, scope: !49)
!56 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !40, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!57 = !DILocalVariable(name: "p", arg: 1, scope: !56, file: !2, line: 12, type: !26)
!58 = !DILocation(line: 12, column: 21, scope: !56)
!59 = !DILocalVariable(name: "q", arg: 2, scope: !56, file: !2, line: 12, type: !26)
!60 = !DILocation(line: 12, column: 30, scope: !56)
!61 = !DILocation(line: 13, column: 3, scope: !56)
!62 = !DILocation(line: 14, column: 1, scope: !56)
!63 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !40, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!64 = !DILocalVariable(name: "p", arg: 1, scope: !63, file: !2, line: 16, type: !26)
!65 = !DILocation(line: 16, column: 20, scope: !63)
!66 = !DILocalVariable(name: "q", arg: 2, scope: !63, file: !2, line: 16, type: !26)
!67 = !DILocation(line: 16, column: 29, scope: !63)
!68 = !DILocation(line: 17, column: 3, scope: !63)
!69 = !DILocation(line: 18, column: 1, scope: !63)
!70 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !40, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!71 = !DILocalVariable(name: "p", arg: 1, scope: !70, file: !2, line: 20, type: !26)
!72 = !DILocation(line: 20, column: 34, scope: !70)
!73 = !DILocalVariable(name: "q", arg: 2, scope: !70, file: !2, line: 20, type: !26)
!74 = !DILocation(line: 20, column: 43, scope: !70)
!75 = !DILocation(line: 21, column: 3, scope: !70)
!76 = !DILocation(line: 22, column: 1, scope: !70)
!77 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !40, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!78 = !DILocalVariable(name: "p", arg: 1, scope: !77, file: !2, line: 24, type: !26)
!79 = !DILocation(line: 24, column: 33, scope: !77)
!80 = !DILocalVariable(name: "q", arg: 2, scope: !77, file: !2, line: 24, type: !26)
!81 = !DILocation(line: 24, column: 42, scope: !77)
!82 = !DILocation(line: 25, column: 3, scope: !77)
!83 = !DILocation(line: 26, column: 1, scope: !77)
!84 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !85, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!85 = !DISubroutineType(types: !86)
!86 = !{!26, !87}
!87 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!88 = !DILocalVariable(name: "n", arg: 1, scope: !84, file: !2, line: 29, type: !87)
!89 = !DILocation(line: 29, column: 22, scope: !84)
!90 = !DILocation(line: 30, column: 17, scope: !84)
!91 = !DILocation(line: 30, column: 10, scope: !84)
!92 = !DILocation(line: 30, column: 3, scope: !84)
!93 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !85, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!94 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !2, line: 33, type: !87)
!95 = !DILocation(line: 33, column: 28, scope: !93)
!96 = !DILocation(line: 34, column: 19, scope: !93)
!97 = !DILocation(line: 34, column: 12, scope: !93)
!98 = !DILocation(line: 34, column: 5, scope: !93)
!99 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !85, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !2, line: 37, type: !87)
!101 = !DILocation(line: 37, column: 21, scope: !99)
!102 = !DILocation(line: 38, column: 17, scope: !99)
!103 = !DILocation(line: 38, column: 10, scope: !99)
!104 = !DILocation(line: 38, column: 3, scope: !99)
!105 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !85, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!106 = !DILocalVariable(name: "n", arg: 1, scope: !105, file: !2, line: 41, type: !87)
!107 = !DILocation(line: 41, column: 21, scope: !105)
!108 = !DILocation(line: 42, column: 17, scope: !105)
!109 = !DILocation(line: 42, column: 10, scope: !105)
!110 = !DILocation(line: 42, column: 3, scope: !105)
!111 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !85, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!112 = !DILocalVariable(name: "n", arg: 1, scope: !111, file: !2, line: 45, type: !87)
!113 = !DILocation(line: 45, column: 21, scope: !111)
!114 = !DILocation(line: 46, column: 17, scope: !111)
!115 = !DILocation(line: 46, column: 10, scope: !111)
!116 = !DILocation(line: 46, column: 3, scope: !111)
!117 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !85, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!118 = !DILocalVariable(name: "n", arg: 1, scope: !117, file: !2, line: 49, type: !87)
!119 = !DILocation(line: 49, column: 21, scope: !117)
!120 = !DILocation(line: 50, column: 17, scope: !117)
!121 = !DILocation(line: 50, column: 10, scope: !117)
!122 = !DILocation(line: 50, column: 3, scope: !117)
!123 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !85, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!124 = !DILocalVariable(name: "n", arg: 1, scope: !123, file: !2, line: 53, type: !87)
!125 = !DILocation(line: 53, column: 21, scope: !123)
!126 = !DILocation(line: 54, column: 17, scope: !123)
!127 = !DILocation(line: 54, column: 10, scope: !123)
!128 = !DILocation(line: 54, column: 3, scope: !123)
!129 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !85, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!130 = !DILocalVariable(name: "n", arg: 1, scope: !129, file: !2, line: 57, type: !87)
!131 = !DILocation(line: 57, column: 18, scope: !129)
!132 = !DILocation(line: 58, column: 17, scope: !129)
!133 = !DILocation(line: 58, column: 10, scope: !129)
!134 = !DILocation(line: 58, column: 3, scope: !129)
!135 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !136, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!136 = !DISubroutineType(types: !137)
!137 = !{null, !87, !87}
!138 = !DILocalVariable(name: "id", arg: 1, scope: !135, file: !2, line: 67, type: !87)
!139 = !DILocation(line: 67, column: 20, scope: !135)
!140 = !DILocalVariable(name: "flags", arg: 2, scope: !135, file: !2, line: 67, type: !87)
!141 = !DILocation(line: 67, column: 28, scope: !135)
!142 = !DILocation(line: 68, column: 3, scope: !135)
!143 = !DILocation(line: 69, column: 1, scope: !135)
!144 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !145, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!145 = !DISubroutineType(types: !146)
!146 = !{null, !87, !147}
!147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!148 = !DILocalVariable(name: "thdid", arg: 1, scope: !144, file: !2, line: 79, type: !87)
!149 = !DILocation(line: 79, column: 21, scope: !144)
!150 = !DILocalVariable(name: "cxt", arg: 2, scope: !144, file: !2, line: 79, type: !147)
!151 = !DILocation(line: 79, column: 34, scope: !144)
!152 = !DILocation(line: 81, column: 1, scope: !144)
!153 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !145, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!154 = !DILocalVariable(name: "thdid", arg: 1, scope: !153, file: !2, line: 82, type: !87)
!155 = !DILocation(line: 82, column: 21, scope: !153)
!156 = !DILocalVariable(name: "cxt", arg: 2, scope: !153, file: !2, line: 82, type: !147)
!157 = !DILocation(line: 82, column: 33, scope: !153)
!158 = !DILocation(line: 84, column: 1, scope: !153)
!159 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !160, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!160 = !DISubroutineType(types: !161)
!161 = !{null, !87, !147, !147}
!162 = !DILocalVariable(name: "thdid", arg: 1, scope: !159, file: !2, line: 85, type: !87)
!163 = !DILocation(line: 85, column: 26, scope: !159)
!164 = !DILocalVariable(name: "cxt", arg: 2, scope: !159, file: !2, line: 85, type: !147)
!165 = !DILocation(line: 85, column: 38, scope: !159)
!166 = !DILocalVariable(name: "lev", arg: 3, scope: !159, file: !2, line: 85, type: !147)
!167 = !DILocation(line: 85, column: 49, scope: !159)
!168 = !DILocation(line: 87, column: 1, scope: !159)
!169 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !170, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!170 = !DISubroutineType(types: !171)
!171 = !{null, !147}
!172 = !DILocalVariable(name: "lockname", arg: 1, scope: !169, file: !2, line: 89, type: !147)
!173 = !DILocation(line: 89, column: 17, scope: !169)
!174 = !DILocation(line: 91, column: 1, scope: !169)
!175 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !170, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!176 = !DILocalVariable(name: "str", arg: 1, scope: !175, file: !2, line: 93, type: !147)
!177 = !DILocation(line: 93, column: 18, scope: !175)
!178 = !DILocation(line: 94, column: 18, scope: !175)
!179 = !DILocation(line: 94, column: 3, scope: !175)
!180 = !DILocation(line: 95, column: 3, scope: !175)
!181 = !DILocation(line: 96, column: 3, scope: !175)
!182 = !DILocation(line: 97, column: 1, scope: !175)
!183 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !184, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!184 = !DISubroutineType(types: !185)
!185 = !{!26, !186}
!186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !87, size: 64)
!187 = !DILocalVariable(name: "p", arg: 1, scope: !183, file: !2, line: 100, type: !186)
!188 = !DILocation(line: 100, column: 24, scope: !183)
!189 = !DILocation(line: 101, column: 6, scope: !183)
!190 = !DILocation(line: 101, column: 8, scope: !183)
!191 = !DILocation(line: 102, column: 1, scope: !183)
!192 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !184, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!193 = !DILocalVariable(name: "p", arg: 1, scope: !192, file: !2, line: 104, type: !186)
!194 = !DILocation(line: 104, column: 20, scope: !192)
!195 = !DILocation(line: 105, column: 6, scope: !192)
!196 = !DILocation(line: 105, column: 8, scope: !192)
!197 = !DILocation(line: 106, column: 1, scope: !192)
!198 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !184, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!199 = !DILocalVariable(name: "p", arg: 1, scope: !198, file: !2, line: 110, type: !186)
!200 = !DILocation(line: 110, column: 22, scope: !198)
!201 = !DILocation(line: 111, column: 10, scope: !198)
!202 = !DILocation(line: 111, column: 5, scope: !198)
!203 = !DILocation(line: 112, column: 1, scope: !198)
!204 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !184, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!205 = !DILocalVariable(name: "p", arg: 1, scope: !204, file: !2, line: 115, type: !186)
!206 = !DILocation(line: 115, column: 24, scope: !204)
!207 = !DILocation(line: 116, column: 10, scope: !204)
!208 = !DILocation(line: 116, column: 5, scope: !204)
!209 = !DILocation(line: 117, column: 1, scope: !204)
!210 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !211, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!211 = !DISubroutineType(types: !212)
!212 = !{null}
!213 = !DILocation(line: 135, column: 20, scope: !210)
!214 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_long_08_bad", scope: !19, file: !19, line: 46, type: !211, scopeLine: 47, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!215 = !DILocalVariable(name: "data", scope: !214, file: !19, line: 48, type: !27)
!216 = !DILocation(line: 48, column: 12, scope: !214)
!217 = !DILocation(line: 50, column: 10, scope: !214)
!218 = !DILocation(line: 51, column: 8, scope: !219)
!219 = distinct !DILexicalBlock(scope: !214, file: !19, line: 51, column: 8)
!220 = !DILocation(line: 51, column: 8, scope: !214)
!221 = !DILocation(line: 53, column: 24, scope: !222)
!222 = distinct !DILexicalBlock(scope: !219, file: !19, line: 52, column: 5)
!223 = !DILocation(line: 53, column: 14, scope: !222)
!224 = !DILocation(line: 54, column: 13, scope: !225)
!225 = distinct !DILexicalBlock(scope: !222, file: !19, line: 54, column: 13)
!226 = !DILocation(line: 54, column: 18, scope: !225)
!227 = !DILocation(line: 54, column: 13, scope: !222)
!228 = !DILocation(line: 54, column: 28, scope: !229)
!229 = distinct !DILexicalBlock(scope: !225, file: !19, line: 54, column: 27)
!230 = !DILocation(line: 56, column: 18, scope: !222)
!231 = !DILocation(line: 56, column: 9, scope: !222)
!232 = !DILocation(line: 57, column: 5, scope: !222)
!233 = !DILocation(line: 58, column: 8, scope: !234)
!234 = distinct !DILexicalBlock(scope: !214, file: !19, line: 58, column: 8)
!235 = !DILocation(line: 58, column: 8, scope: !214)
!236 = !DILocation(line: 61, column: 20, scope: !237)
!237 = distinct !DILexicalBlock(scope: !234, file: !19, line: 59, column: 5)
!238 = !DILocation(line: 61, column: 9, scope: !237)
!239 = !DILocation(line: 62, column: 5, scope: !237)
!240 = !DILocation(line: 63, column: 1, scope: !214)
!241 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_long_08_good", scope: !19, file: !19, line: 156, type: !211, scopeLine: 157, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!242 = !DILocation(line: 158, column: 5, scope: !241)
!243 = !DILocation(line: 159, column: 5, scope: !241)
!244 = !DILocation(line: 160, column: 5, scope: !241)
!245 = !DILocation(line: 161, column: 5, scope: !241)
!246 = !DILocation(line: 162, column: 1, scope: !241)
!247 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 171, type: !248, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!248 = !DISubroutineType(types: !249)
!249 = !{!87, !87, !250}
!250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!251 = !DILocalVariable(name: "argc", arg: 1, scope: !247, file: !19, line: 171, type: !87)
!252 = !DILocation(line: 171, column: 14, scope: !247)
!253 = !DILocalVariable(name: "argv", arg: 2, scope: !247, file: !19, line: 171, type: !250)
!254 = !DILocation(line: 171, column: 27, scope: !247)
!255 = !DILocation(line: 174, column: 22, scope: !247)
!256 = !DILocation(line: 174, column: 12, scope: !247)
!257 = !DILocation(line: 174, column: 5, scope: !247)
!258 = !DILocation(line: 175, column: 5, scope: !247)
!259 = !DILocation(line: 176, column: 5, scope: !247)
!260 = !DILocation(line: 177, column: 5, scope: !247)
!261 = distinct !DISubprogram(name: "staticReturnsTrue", scope: !19, file: !19, line: 35, type: !262, scopeLine: 36, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !42)
!262 = !DISubroutineType(types: !263)
!263 = !{!87}
!264 = !DILocation(line: 37, column: 5, scope: !261)
!265 = distinct !DISubprogram(name: "goodB2G1", scope: !19, file: !19, line: 67, type: !211, scopeLine: 68, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !42)
!266 = !DILocalVariable(name: "data", scope: !265, file: !19, line: 69, type: !27)
!267 = !DILocation(line: 69, column: 12, scope: !265)
!268 = !DILocation(line: 71, column: 10, scope: !265)
!269 = !DILocation(line: 72, column: 8, scope: !270)
!270 = distinct !DILexicalBlock(scope: !265, file: !19, line: 72, column: 8)
!271 = !DILocation(line: 72, column: 8, scope: !265)
!272 = !DILocation(line: 74, column: 24, scope: !273)
!273 = distinct !DILexicalBlock(scope: !270, file: !19, line: 73, column: 5)
!274 = !DILocation(line: 74, column: 14, scope: !273)
!275 = !DILocation(line: 75, column: 13, scope: !276)
!276 = distinct !DILexicalBlock(scope: !273, file: !19, line: 75, column: 13)
!277 = !DILocation(line: 75, column: 18, scope: !276)
!278 = !DILocation(line: 75, column: 13, scope: !273)
!279 = !DILocation(line: 75, column: 28, scope: !280)
!280 = distinct !DILexicalBlock(scope: !276, file: !19, line: 75, column: 27)
!281 = !DILocation(line: 77, column: 18, scope: !273)
!282 = !DILocation(line: 77, column: 9, scope: !273)
!283 = !DILocation(line: 78, column: 5, scope: !273)
!284 = !DILocation(line: 79, column: 8, scope: !285)
!285 = distinct !DILexicalBlock(scope: !265, file: !19, line: 79, column: 8)
!286 = !DILocation(line: 79, column: 8, scope: !265)
!287 = !DILocation(line: 82, column: 9, scope: !288)
!288 = distinct !DILexicalBlock(scope: !285, file: !19, line: 80, column: 5)
!289 = !DILocation(line: 83, column: 5, scope: !288)
!290 = !DILocation(line: 90, column: 1, scope: !265)
!291 = distinct !DISubprogram(name: "staticReturnsFalse", scope: !19, file: !19, line: 40, type: !262, scopeLine: 41, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !42)
!292 = !DILocation(line: 42, column: 5, scope: !291)
!293 = distinct !DISubprogram(name: "goodB2G2", scope: !19, file: !19, line: 93, type: !211, scopeLine: 94, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !42)
!294 = !DILocalVariable(name: "data", scope: !293, file: !19, line: 95, type: !27)
!295 = !DILocation(line: 95, column: 12, scope: !293)
!296 = !DILocation(line: 97, column: 10, scope: !293)
!297 = !DILocation(line: 98, column: 8, scope: !298)
!298 = distinct !DILexicalBlock(scope: !293, file: !19, line: 98, column: 8)
!299 = !DILocation(line: 98, column: 8, scope: !293)
!300 = !DILocation(line: 100, column: 24, scope: !301)
!301 = distinct !DILexicalBlock(scope: !298, file: !19, line: 99, column: 5)
!302 = !DILocation(line: 100, column: 14, scope: !301)
!303 = !DILocation(line: 101, column: 13, scope: !304)
!304 = distinct !DILexicalBlock(scope: !301, file: !19, line: 101, column: 13)
!305 = !DILocation(line: 101, column: 18, scope: !304)
!306 = !DILocation(line: 101, column: 13, scope: !301)
!307 = !DILocation(line: 101, column: 28, scope: !308)
!308 = distinct !DILexicalBlock(scope: !304, file: !19, line: 101, column: 27)
!309 = !DILocation(line: 103, column: 18, scope: !301)
!310 = !DILocation(line: 103, column: 9, scope: !301)
!311 = !DILocation(line: 104, column: 5, scope: !301)
!312 = !DILocation(line: 105, column: 8, scope: !313)
!313 = distinct !DILexicalBlock(scope: !293, file: !19, line: 105, column: 8)
!314 = !DILocation(line: 105, column: 8, scope: !293)
!315 = !DILocation(line: 110, column: 5, scope: !316)
!316 = distinct !DILexicalBlock(scope: !313, file: !19, line: 106, column: 5)
!317 = !DILocation(line: 111, column: 1, scope: !293)
!318 = distinct !DISubprogram(name: "goodG2B1", scope: !19, file: !19, line: 114, type: !211, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !42)
!319 = !DILocalVariable(name: "data", scope: !318, file: !19, line: 116, type: !27)
!320 = !DILocation(line: 116, column: 12, scope: !318)
!321 = !DILocation(line: 118, column: 10, scope: !318)
!322 = !DILocation(line: 119, column: 8, scope: !323)
!323 = distinct !DILexicalBlock(scope: !318, file: !19, line: 119, column: 8)
!324 = !DILocation(line: 119, column: 8, scope: !318)
!325 = !DILocation(line: 122, column: 9, scope: !326)
!326 = distinct !DILexicalBlock(scope: !323, file: !19, line: 120, column: 5)
!327 = !DILocation(line: 123, column: 5, scope: !326)
!328 = !DILocation(line: 126, column: 24, scope: !329)
!329 = distinct !DILexicalBlock(scope: !323, file: !19, line: 125, column: 5)
!330 = !DILocation(line: 126, column: 14, scope: !329)
!331 = !DILocation(line: 127, column: 13, scope: !332)
!332 = distinct !DILexicalBlock(scope: !329, file: !19, line: 127, column: 13)
!333 = !DILocation(line: 127, column: 18, scope: !332)
!334 = !DILocation(line: 127, column: 13, scope: !329)
!335 = !DILocation(line: 127, column: 28, scope: !336)
!336 = distinct !DILexicalBlock(scope: !332, file: !19, line: 127, column: 27)
!337 = !DILocation(line: 130, column: 8, scope: !338)
!338 = distinct !DILexicalBlock(scope: !318, file: !19, line: 130, column: 8)
!339 = !DILocation(line: 130, column: 8, scope: !318)
!340 = !DILocation(line: 133, column: 18, scope: !341)
!341 = distinct !DILexicalBlock(scope: !338, file: !19, line: 131, column: 5)
!342 = !DILocation(line: 133, column: 9, scope: !341)
!343 = !DILocation(line: 134, column: 5, scope: !341)
!344 = !DILocation(line: 135, column: 1, scope: !318)
!345 = distinct !DISubprogram(name: "goodG2B2", scope: !19, file: !19, line: 138, type: !211, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !42)
!346 = !DILocalVariable(name: "data", scope: !345, file: !19, line: 140, type: !27)
!347 = !DILocation(line: 140, column: 12, scope: !345)
!348 = !DILocation(line: 142, column: 10, scope: !345)
!349 = !DILocation(line: 143, column: 8, scope: !350)
!350 = distinct !DILexicalBlock(scope: !345, file: !19, line: 143, column: 8)
!351 = !DILocation(line: 143, column: 8, scope: !345)
!352 = !DILocation(line: 145, column: 24, scope: !353)
!353 = distinct !DILexicalBlock(scope: !350, file: !19, line: 144, column: 5)
!354 = !DILocation(line: 145, column: 14, scope: !353)
!355 = !DILocation(line: 146, column: 13, scope: !356)
!356 = distinct !DILexicalBlock(scope: !353, file: !19, line: 146, column: 13)
!357 = !DILocation(line: 146, column: 18, scope: !356)
!358 = !DILocation(line: 146, column: 13, scope: !353)
!359 = !DILocation(line: 146, column: 28, scope: !360)
!360 = distinct !DILexicalBlock(scope: !356, file: !19, line: 146, column: 27)
!361 = !DILocation(line: 148, column: 5, scope: !353)
!362 = !DILocation(line: 149, column: 8, scope: !363)
!363 = distinct !DILexicalBlock(scope: !345, file: !19, line: 149, column: 8)
!364 = !DILocation(line: 149, column: 8, scope: !345)
!365 = !DILocation(line: 152, column: 18, scope: !366)
!366 = distinct !DILexicalBlock(scope: !363, file: !19, line: 150, column: 5)
!367 = !DILocation(line: 152, column: 9, scope: !366)
!368 = !DILocation(line: 153, column: 5, scope: !366)
!369 = !DILocation(line: 154, column: 1, scope: !345)
