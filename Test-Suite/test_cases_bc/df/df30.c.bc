; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/df/df30.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df30.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@staticFive = internal global i32 5, align 4, !dbg !17
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !27

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !42 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !46, metadata !DIExpression()), !dbg !47
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !48, metadata !DIExpression()), !dbg !49
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !50
  ret void, !dbg !51
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !52 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !53, metadata !DIExpression()), !dbg !54
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !57
  ret void, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !59 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !60, metadata !DIExpression()), !dbg !61
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !62, metadata !DIExpression()), !dbg !63
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !64
  ret void, !dbg !65
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !66 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !67, metadata !DIExpression()), !dbg !68
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !69, metadata !DIExpression()), !dbg !70
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !71
  ret void, !dbg !72
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !73 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !74, metadata !DIExpression()), !dbg !75
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !76, metadata !DIExpression()), !dbg !77
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !78
  ret void, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !80 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !81, metadata !DIExpression()), !dbg !82
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !85
  ret void, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !87 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !90, metadata !DIExpression()), !dbg !91
  %0 = load i32, ptr %n.addr, align 4, !dbg !92
  %conv = sext i32 %0 to i64, !dbg !92
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !93
  ret ptr %call, !dbg !94
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !95 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !96, metadata !DIExpression()), !dbg !97
  %0 = load i32, ptr %n.addr, align 4, !dbg !98
  %conv = sext i32 %0 to i64, !dbg !98
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !99
  ret ptr %call, !dbg !100
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !101 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !102, metadata !DIExpression()), !dbg !103
  %0 = load i32, ptr %n.addr, align 4, !dbg !104
  %conv = sext i32 %0 to i64, !dbg !104
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !105
  ret ptr %call, !dbg !106
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !107 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !108, metadata !DIExpression()), !dbg !109
  %0 = load i32, ptr %n.addr, align 4, !dbg !110
  %conv = sext i32 %0 to i64, !dbg !110
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !111
  ret ptr %call, !dbg !112
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !113 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %0 = load i32, ptr %n.addr, align 4, !dbg !116
  %conv = sext i32 %0 to i64, !dbg !116
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !117
  ret ptr %call, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !119 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !120, metadata !DIExpression()), !dbg !121
  %0 = load i32, ptr %n.addr, align 4, !dbg !122
  %conv = sext i32 %0 to i64, !dbg !122
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !123
  ret ptr %call, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !125 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !126, metadata !DIExpression()), !dbg !127
  %0 = load i32, ptr %n.addr, align 4, !dbg !128
  %conv = sext i32 %0 to i64, !dbg !128
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !129
  ret ptr %call, !dbg !130
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !131 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !132, metadata !DIExpression()), !dbg !133
  %0 = load i32, ptr %n.addr, align 4, !dbg !134
  %conv = sext i32 %0 to i64, !dbg !134
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !135
  ret ptr %call, !dbg !136
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !137 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !140, metadata !DIExpression()), !dbg !141
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !142, metadata !DIExpression()), !dbg !143
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !144
  ret void, !dbg !145
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !146 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !150, metadata !DIExpression()), !dbg !151
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !152, metadata !DIExpression()), !dbg !153
  ret void, !dbg !154
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !155 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !156, metadata !DIExpression()), !dbg !157
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !158, metadata !DIExpression()), !dbg !159
  ret void, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !161 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !164, metadata !DIExpression()), !dbg !165
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !166, metadata !DIExpression()), !dbg !167
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !168, metadata !DIExpression()), !dbg !169
  ret void, !dbg !170
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !171 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !174, metadata !DIExpression()), !dbg !175
  ret void, !dbg !176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !177 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !178, metadata !DIExpression()), !dbg !179
  %0 = load ptr, ptr %str.addr, align 8, !dbg !180
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !181
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !182
  %call2 = call i32 @getchar(), !dbg !183
  ret void, !dbg !184
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !185 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !189, metadata !DIExpression()), !dbg !190
  %0 = load ptr, ptr %p.addr, align 8, !dbg !191
  store i32 0, ptr %0, align 4, !dbg !192
  %1 = load ptr, ptr %retval, align 8, !dbg !193
  ret ptr %1, !dbg !193
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !194 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !195, metadata !DIExpression()), !dbg !196
  %0 = load ptr, ptr %p.addr, align 8, !dbg !197
  store i32 0, ptr %0, align 4, !dbg !198
  %1 = load ptr, ptr %retval, align 8, !dbg !199
  ret ptr %1, !dbg !199
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !200 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !201, metadata !DIExpression()), !dbg !202
  %0 = load ptr, ptr %p.addr, align 8, !dbg !203
  call void @free(ptr noundef %0) #7, !dbg !204
  %1 = load ptr, ptr %retval, align 8, !dbg !205
  ret ptr %1, !dbg !205
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !206 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !207, metadata !DIExpression()), !dbg !208
  %0 = load ptr, ptr %p.addr, align 8, !dbg !209
  call void @free(ptr noundef %0) #7, !dbg !210
  %1 = load ptr, ptr %retval, align 8, !dbg !211
  ret ptr %1, !dbg !211
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !212 {
entry:
  ret void, !dbg !215
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_07_bad() #0 !dbg !216 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !217, metadata !DIExpression()), !dbg !218
  store ptr null, ptr %data, align 8, !dbg !219
  %0 = load i32, ptr @staticFive, align 4, !dbg !220
  %cmp = icmp eq i32 %0, 5, !dbg !222
  br i1 %cmp, label %if.then, label %if.end4, !dbg !223

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !224
  store ptr %call, ptr %data, align 8, !dbg !226
  %1 = load ptr, ptr %data, align 8, !dbg !227
  %cmp1 = icmp eq ptr %1, null, !dbg !229
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !230

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !231
  unreachable, !dbg !231

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !233
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !234
  br label %if.end4, !dbg !235

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !236
  %cmp5 = icmp eq i32 %3, 5, !dbg !238
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !239

if.then6:                                         ; preds = %if.end4
  %4 = load ptr, ptr %data, align 8, !dbg !240
  %call7 = call ptr @DOUBLEFREE(ptr noundef %4), !dbg !242
  br label %if.end8, !dbg !243

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !244
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_07_good() #0 !dbg !245 {
entry:
  call void @goodB2G1(), !dbg !246
  call void @goodB2G2(), !dbg !247
  call void @goodG2B1(), !dbg !248
  call void @goodG2B2(), !dbg !249
  ret void, !dbg !250
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !251 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !255, metadata !DIExpression()), !dbg !256
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !257, metadata !DIExpression()), !dbg !258
  %call = call i64 @time(ptr noundef null) #7, !dbg !259
  %conv = trunc i64 %call to i32, !dbg !260
  call void @srand(i32 noundef %conv) #7, !dbg !261
  call void @CWE415_Double_Free__malloc_free_long_07_good(), !dbg !262
  call void @CWE415_Double_Free__malloc_free_long_07_bad(), !dbg !263
  ret i32 0, !dbg !264
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !265 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !266, metadata !DIExpression()), !dbg !267
  store ptr null, ptr %data, align 8, !dbg !268
  %0 = load i32, ptr @staticFive, align 4, !dbg !269
  %cmp = icmp eq i32 %0, 5, !dbg !271
  br i1 %cmp, label %if.then, label %if.end4, !dbg !272

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !273
  store ptr %call, ptr %data, align 8, !dbg !275
  %1 = load ptr, ptr %data, align 8, !dbg !276
  %cmp1 = icmp eq ptr %1, null, !dbg !278
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !279

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !280
  unreachable, !dbg !280

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !282
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !283
  br label %if.end4, !dbg !284

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !285
  %cmp5 = icmp ne i32 %3, 5, !dbg !287
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !288

if.then6:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.3), !dbg !289
  br label %if.end7, !dbg !291

if.else:                                          ; preds = %if.end4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void, !dbg !292
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !293 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !294, metadata !DIExpression()), !dbg !295
  store ptr null, ptr %data, align 8, !dbg !296
  %0 = load i32, ptr @staticFive, align 4, !dbg !297
  %cmp = icmp eq i32 %0, 5, !dbg !299
  br i1 %cmp, label %if.then, label %if.end4, !dbg !300

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !301
  store ptr %call, ptr %data, align 8, !dbg !303
  %1 = load ptr, ptr %data, align 8, !dbg !304
  %cmp1 = icmp eq ptr %1, null, !dbg !306
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !307

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !308
  unreachable, !dbg !308

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !310
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !311
  br label %if.end4, !dbg !312

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !313
  %cmp5 = icmp eq i32 %3, 5, !dbg !315
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !316

if.then6:                                         ; preds = %if.end4
  br label %if.end7, !dbg !317

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !319
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !320 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !321, metadata !DIExpression()), !dbg !322
  store ptr null, ptr %data, align 8, !dbg !323
  %0 = load i32, ptr @staticFive, align 4, !dbg !324
  %cmp = icmp ne i32 %0, 5, !dbg !326
  br i1 %cmp, label %if.then, label %if.else, !dbg !327

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !328
  br label %if.end3, !dbg !330

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !331
  store ptr %call, ptr %data, align 8, !dbg !333
  %1 = load ptr, ptr %data, align 8, !dbg !334
  %cmp1 = icmp eq ptr %1, null, !dbg !336
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !337

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !338
  unreachable, !dbg !338

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %2 = load i32, ptr @staticFive, align 4, !dbg !340
  %cmp4 = icmp eq i32 %2, 5, !dbg !342
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !343

if.then5:                                         ; preds = %if.end3
  %3 = load ptr, ptr %data, align 8, !dbg !344
  %call6 = call ptr @SAFEFREE(ptr noundef %3), !dbg !346
  br label %if.end7, !dbg !347

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !348
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !349 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !350, metadata !DIExpression()), !dbg !351
  store ptr null, ptr %data, align 8, !dbg !352
  %0 = load i32, ptr @staticFive, align 4, !dbg !353
  %cmp = icmp eq i32 %0, 5, !dbg !355
  br i1 %cmp, label %if.then, label %if.end3, !dbg !356

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !357
  store ptr %call, ptr %data, align 8, !dbg !359
  %1 = load ptr, ptr %data, align 8, !dbg !360
  %cmp1 = icmp eq ptr %1, null, !dbg !362
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !363

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !364
  unreachable, !dbg !364

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !366

if.end3:                                          ; preds = %if.end, %entry
  %2 = load i32, ptr @staticFive, align 4, !dbg !367
  %cmp4 = icmp eq i32 %2, 5, !dbg !369
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !370

if.then5:                                         ; preds = %if.end3
  %3 = load ptr, ptr %data, align 8, !dbg !371
  %call6 = call ptr @SAFEFREE(ptr noundef %3), !dbg !373
  br label %if.end7, !dbg !374

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !375
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!34, !35, !36, !37, !38, !39, !40}
!llvm.ident = !{!41}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "staticFive", scope: !19, file: !29, line: 35, type: !33, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !26, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df30.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "aecca96c964144cd45447f20326fca50")
!21 = !{!22, !23, !25}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!25 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!26 = !{!0, !7, !12, !17, !27}
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(scope: null, file: !29, line: 74, type: !30, isLocal: true, isDefinition: true)
!29 = !DIFile(filename: "src/df/df30.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "aecca96c964144cd45447f20326fca50")
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 21)
!33 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!34 = !{i32 7, !"Dwarf Version", i32 5}
!35 = !{i32 2, !"Debug Info Version", i32 3}
!36 = !{i32 1, !"wchar_size", i32 4}
!37 = !{i32 8, !"PIC Level", i32 2}
!38 = !{i32 7, !"PIE Level", i32 2}
!39 = !{i32 7, !"uwtable", i32 2}
!40 = !{i32 7, !"frame-pointer", i32 2}
!41 = !{!"clang version 16.0.0"}
!42 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !43, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!43 = !DISubroutineType(types: !44)
!44 = !{null, !22, !22}
!45 = !{}
!46 = !DILocalVariable(name: "p", arg: 1, scope: !42, file: !2, line: 4, type: !22)
!47 = !DILocation(line: 4, column: 22, scope: !42)
!48 = !DILocalVariable(name: "q", arg: 2, scope: !42, file: !2, line: 4, type: !22)
!49 = !DILocation(line: 4, column: 31, scope: !42)
!50 = !DILocation(line: 5, column: 3, scope: !42)
!51 = !DILocation(line: 6, column: 1, scope: !42)
!52 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !43, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!53 = !DILocalVariable(name: "p", arg: 1, scope: !52, file: !2, line: 8, type: !22)
!54 = !DILocation(line: 8, column: 25, scope: !52)
!55 = !DILocalVariable(name: "q", arg: 2, scope: !52, file: !2, line: 8, type: !22)
!56 = !DILocation(line: 8, column: 34, scope: !52)
!57 = !DILocation(line: 9, column: 3, scope: !52)
!58 = !DILocation(line: 10, column: 1, scope: !52)
!59 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !43, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!60 = !DILocalVariable(name: "p", arg: 1, scope: !59, file: !2, line: 12, type: !22)
!61 = !DILocation(line: 12, column: 21, scope: !59)
!62 = !DILocalVariable(name: "q", arg: 2, scope: !59, file: !2, line: 12, type: !22)
!63 = !DILocation(line: 12, column: 30, scope: !59)
!64 = !DILocation(line: 13, column: 3, scope: !59)
!65 = !DILocation(line: 14, column: 1, scope: !59)
!66 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !43, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!67 = !DILocalVariable(name: "p", arg: 1, scope: !66, file: !2, line: 16, type: !22)
!68 = !DILocation(line: 16, column: 20, scope: !66)
!69 = !DILocalVariable(name: "q", arg: 2, scope: !66, file: !2, line: 16, type: !22)
!70 = !DILocation(line: 16, column: 29, scope: !66)
!71 = !DILocation(line: 17, column: 3, scope: !66)
!72 = !DILocation(line: 18, column: 1, scope: !66)
!73 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !43, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!74 = !DILocalVariable(name: "p", arg: 1, scope: !73, file: !2, line: 20, type: !22)
!75 = !DILocation(line: 20, column: 34, scope: !73)
!76 = !DILocalVariable(name: "q", arg: 2, scope: !73, file: !2, line: 20, type: !22)
!77 = !DILocation(line: 20, column: 43, scope: !73)
!78 = !DILocation(line: 21, column: 3, scope: !73)
!79 = !DILocation(line: 22, column: 1, scope: !73)
!80 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !43, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!81 = !DILocalVariable(name: "p", arg: 1, scope: !80, file: !2, line: 24, type: !22)
!82 = !DILocation(line: 24, column: 33, scope: !80)
!83 = !DILocalVariable(name: "q", arg: 2, scope: !80, file: !2, line: 24, type: !22)
!84 = !DILocation(line: 24, column: 42, scope: !80)
!85 = !DILocation(line: 25, column: 3, scope: !80)
!86 = !DILocation(line: 26, column: 1, scope: !80)
!87 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !88, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!88 = !DISubroutineType(types: !89)
!89 = !{!22, !33}
!90 = !DILocalVariable(name: "n", arg: 1, scope: !87, file: !2, line: 29, type: !33)
!91 = !DILocation(line: 29, column: 22, scope: !87)
!92 = !DILocation(line: 30, column: 17, scope: !87)
!93 = !DILocation(line: 30, column: 10, scope: !87)
!94 = !DILocation(line: 30, column: 3, scope: !87)
!95 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !88, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!96 = !DILocalVariable(name: "n", arg: 1, scope: !95, file: !2, line: 33, type: !33)
!97 = !DILocation(line: 33, column: 28, scope: !95)
!98 = !DILocation(line: 34, column: 19, scope: !95)
!99 = !DILocation(line: 34, column: 12, scope: !95)
!100 = !DILocation(line: 34, column: 5, scope: !95)
!101 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !88, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!102 = !DILocalVariable(name: "n", arg: 1, scope: !101, file: !2, line: 37, type: !33)
!103 = !DILocation(line: 37, column: 21, scope: !101)
!104 = !DILocation(line: 38, column: 17, scope: !101)
!105 = !DILocation(line: 38, column: 10, scope: !101)
!106 = !DILocation(line: 38, column: 3, scope: !101)
!107 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !88, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!108 = !DILocalVariable(name: "n", arg: 1, scope: !107, file: !2, line: 41, type: !33)
!109 = !DILocation(line: 41, column: 21, scope: !107)
!110 = !DILocation(line: 42, column: 17, scope: !107)
!111 = !DILocation(line: 42, column: 10, scope: !107)
!112 = !DILocation(line: 42, column: 3, scope: !107)
!113 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !88, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!114 = !DILocalVariable(name: "n", arg: 1, scope: !113, file: !2, line: 45, type: !33)
!115 = !DILocation(line: 45, column: 21, scope: !113)
!116 = !DILocation(line: 46, column: 17, scope: !113)
!117 = !DILocation(line: 46, column: 10, scope: !113)
!118 = !DILocation(line: 46, column: 3, scope: !113)
!119 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !88, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!120 = !DILocalVariable(name: "n", arg: 1, scope: !119, file: !2, line: 49, type: !33)
!121 = !DILocation(line: 49, column: 21, scope: !119)
!122 = !DILocation(line: 50, column: 17, scope: !119)
!123 = !DILocation(line: 50, column: 10, scope: !119)
!124 = !DILocation(line: 50, column: 3, scope: !119)
!125 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !88, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!126 = !DILocalVariable(name: "n", arg: 1, scope: !125, file: !2, line: 53, type: !33)
!127 = !DILocation(line: 53, column: 21, scope: !125)
!128 = !DILocation(line: 54, column: 17, scope: !125)
!129 = !DILocation(line: 54, column: 10, scope: !125)
!130 = !DILocation(line: 54, column: 3, scope: !125)
!131 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !88, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!132 = !DILocalVariable(name: "n", arg: 1, scope: !131, file: !2, line: 57, type: !33)
!133 = !DILocation(line: 57, column: 18, scope: !131)
!134 = !DILocation(line: 58, column: 17, scope: !131)
!135 = !DILocation(line: 58, column: 10, scope: !131)
!136 = !DILocation(line: 58, column: 3, scope: !131)
!137 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !138, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!138 = !DISubroutineType(types: !139)
!139 = !{null, !33, !33}
!140 = !DILocalVariable(name: "id", arg: 1, scope: !137, file: !2, line: 67, type: !33)
!141 = !DILocation(line: 67, column: 20, scope: !137)
!142 = !DILocalVariable(name: "flags", arg: 2, scope: !137, file: !2, line: 67, type: !33)
!143 = !DILocation(line: 67, column: 28, scope: !137)
!144 = !DILocation(line: 68, column: 3, scope: !137)
!145 = !DILocation(line: 69, column: 1, scope: !137)
!146 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !147, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!147 = !DISubroutineType(types: !148)
!148 = !{null, !33, !149}
!149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!150 = !DILocalVariable(name: "thdid", arg: 1, scope: !146, file: !2, line: 79, type: !33)
!151 = !DILocation(line: 79, column: 21, scope: !146)
!152 = !DILocalVariable(name: "cxt", arg: 2, scope: !146, file: !2, line: 79, type: !149)
!153 = !DILocation(line: 79, column: 34, scope: !146)
!154 = !DILocation(line: 81, column: 1, scope: !146)
!155 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !147, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!156 = !DILocalVariable(name: "thdid", arg: 1, scope: !155, file: !2, line: 82, type: !33)
!157 = !DILocation(line: 82, column: 21, scope: !155)
!158 = !DILocalVariable(name: "cxt", arg: 2, scope: !155, file: !2, line: 82, type: !149)
!159 = !DILocation(line: 82, column: 33, scope: !155)
!160 = !DILocation(line: 84, column: 1, scope: !155)
!161 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !162, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!162 = !DISubroutineType(types: !163)
!163 = !{null, !33, !149, !149}
!164 = !DILocalVariable(name: "thdid", arg: 1, scope: !161, file: !2, line: 85, type: !33)
!165 = !DILocation(line: 85, column: 26, scope: !161)
!166 = !DILocalVariable(name: "cxt", arg: 2, scope: !161, file: !2, line: 85, type: !149)
!167 = !DILocation(line: 85, column: 38, scope: !161)
!168 = !DILocalVariable(name: "lev", arg: 3, scope: !161, file: !2, line: 85, type: !149)
!169 = !DILocation(line: 85, column: 49, scope: !161)
!170 = !DILocation(line: 87, column: 1, scope: !161)
!171 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !172, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!172 = !DISubroutineType(types: !173)
!173 = !{null, !149}
!174 = !DILocalVariable(name: "lockname", arg: 1, scope: !171, file: !2, line: 89, type: !149)
!175 = !DILocation(line: 89, column: 17, scope: !171)
!176 = !DILocation(line: 91, column: 1, scope: !171)
!177 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !172, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!178 = !DILocalVariable(name: "str", arg: 1, scope: !177, file: !2, line: 93, type: !149)
!179 = !DILocation(line: 93, column: 18, scope: !177)
!180 = !DILocation(line: 94, column: 18, scope: !177)
!181 = !DILocation(line: 94, column: 3, scope: !177)
!182 = !DILocation(line: 95, column: 3, scope: !177)
!183 = !DILocation(line: 96, column: 3, scope: !177)
!184 = !DILocation(line: 97, column: 1, scope: !177)
!185 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !186, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!186 = !DISubroutineType(types: !187)
!187 = !{!22, !188}
!188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64)
!189 = !DILocalVariable(name: "p", arg: 1, scope: !185, file: !2, line: 100, type: !188)
!190 = !DILocation(line: 100, column: 24, scope: !185)
!191 = !DILocation(line: 101, column: 6, scope: !185)
!192 = !DILocation(line: 101, column: 8, scope: !185)
!193 = !DILocation(line: 102, column: 1, scope: !185)
!194 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !186, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!195 = !DILocalVariable(name: "p", arg: 1, scope: !194, file: !2, line: 104, type: !188)
!196 = !DILocation(line: 104, column: 20, scope: !194)
!197 = !DILocation(line: 105, column: 6, scope: !194)
!198 = !DILocation(line: 105, column: 8, scope: !194)
!199 = !DILocation(line: 106, column: 1, scope: !194)
!200 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !186, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!201 = !DILocalVariable(name: "p", arg: 1, scope: !200, file: !2, line: 110, type: !188)
!202 = !DILocation(line: 110, column: 22, scope: !200)
!203 = !DILocation(line: 111, column: 10, scope: !200)
!204 = !DILocation(line: 111, column: 5, scope: !200)
!205 = !DILocation(line: 112, column: 1, scope: !200)
!206 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !186, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!207 = !DILocalVariable(name: "p", arg: 1, scope: !206, file: !2, line: 115, type: !188)
!208 = !DILocation(line: 115, column: 24, scope: !206)
!209 = !DILocation(line: 116, column: 10, scope: !206)
!210 = !DILocation(line: 116, column: 5, scope: !206)
!211 = !DILocation(line: 117, column: 1, scope: !206)
!212 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !213, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!213 = !DISubroutineType(types: !214)
!214 = !{null}
!215 = !DILocation(line: 135, column: 20, scope: !212)
!216 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_long_07_bad", scope: !29, file: !29, line: 38, type: !213, scopeLine: 39, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!217 = !DILocalVariable(name: "data", scope: !216, file: !29, line: 40, type: !23)
!218 = !DILocation(line: 40, column: 12, scope: !216)
!219 = !DILocation(line: 42, column: 10, scope: !216)
!220 = !DILocation(line: 43, column: 8, scope: !221)
!221 = distinct !DILexicalBlock(scope: !216, file: !29, line: 43, column: 8)
!222 = !DILocation(line: 43, column: 18, scope: !221)
!223 = !DILocation(line: 43, column: 8, scope: !216)
!224 = !DILocation(line: 45, column: 24, scope: !225)
!225 = distinct !DILexicalBlock(scope: !221, file: !29, line: 44, column: 5)
!226 = !DILocation(line: 45, column: 14, scope: !225)
!227 = !DILocation(line: 46, column: 13, scope: !228)
!228 = distinct !DILexicalBlock(scope: !225, file: !29, line: 46, column: 13)
!229 = !DILocation(line: 46, column: 18, scope: !228)
!230 = !DILocation(line: 46, column: 13, scope: !225)
!231 = !DILocation(line: 46, column: 28, scope: !232)
!232 = distinct !DILexicalBlock(scope: !228, file: !29, line: 46, column: 27)
!233 = !DILocation(line: 48, column: 18, scope: !225)
!234 = !DILocation(line: 48, column: 9, scope: !225)
!235 = !DILocation(line: 49, column: 5, scope: !225)
!236 = !DILocation(line: 50, column: 8, scope: !237)
!237 = distinct !DILexicalBlock(scope: !216, file: !29, line: 50, column: 8)
!238 = !DILocation(line: 50, column: 18, scope: !237)
!239 = !DILocation(line: 50, column: 8, scope: !216)
!240 = !DILocation(line: 53, column: 20, scope: !241)
!241 = distinct !DILexicalBlock(scope: !237, file: !29, line: 51, column: 5)
!242 = !DILocation(line: 53, column: 9, scope: !241)
!243 = !DILocation(line: 54, column: 5, scope: !241)
!244 = !DILocation(line: 55, column: 1, scope: !216)
!245 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_long_07_good", scope: !29, file: !29, line: 148, type: !213, scopeLine: 149, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!246 = !DILocation(line: 150, column: 5, scope: !245)
!247 = !DILocation(line: 151, column: 5, scope: !245)
!248 = !DILocation(line: 152, column: 5, scope: !245)
!249 = !DILocation(line: 153, column: 5, scope: !245)
!250 = !DILocation(line: 154, column: 1, scope: !245)
!251 = distinct !DISubprogram(name: "main", scope: !29, file: !29, line: 163, type: !252, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !45)
!252 = !DISubroutineType(types: !253)
!253 = !{!33, !33, !254}
!254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !149, size: 64)
!255 = !DILocalVariable(name: "argc", arg: 1, scope: !251, file: !29, line: 163, type: !33)
!256 = !DILocation(line: 163, column: 14, scope: !251)
!257 = !DILocalVariable(name: "argv", arg: 2, scope: !251, file: !29, line: 163, type: !254)
!258 = !DILocation(line: 163, column: 27, scope: !251)
!259 = !DILocation(line: 166, column: 22, scope: !251)
!260 = !DILocation(line: 166, column: 12, scope: !251)
!261 = !DILocation(line: 166, column: 5, scope: !251)
!262 = !DILocation(line: 167, column: 5, scope: !251)
!263 = !DILocation(line: 168, column: 5, scope: !251)
!264 = !DILocation(line: 169, column: 5, scope: !251)
!265 = distinct !DISubprogram(name: "goodB2G1", scope: !29, file: !29, line: 59, type: !213, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !45)
!266 = !DILocalVariable(name: "data", scope: !265, file: !29, line: 61, type: !23)
!267 = !DILocation(line: 61, column: 12, scope: !265)
!268 = !DILocation(line: 63, column: 10, scope: !265)
!269 = !DILocation(line: 64, column: 8, scope: !270)
!270 = distinct !DILexicalBlock(scope: !265, file: !29, line: 64, column: 8)
!271 = !DILocation(line: 64, column: 18, scope: !270)
!272 = !DILocation(line: 64, column: 8, scope: !265)
!273 = !DILocation(line: 66, column: 24, scope: !274)
!274 = distinct !DILexicalBlock(scope: !270, file: !29, line: 65, column: 5)
!275 = !DILocation(line: 66, column: 14, scope: !274)
!276 = !DILocation(line: 67, column: 13, scope: !277)
!277 = distinct !DILexicalBlock(scope: !274, file: !29, line: 67, column: 13)
!278 = !DILocation(line: 67, column: 18, scope: !277)
!279 = !DILocation(line: 67, column: 13, scope: !274)
!280 = !DILocation(line: 67, column: 28, scope: !281)
!281 = distinct !DILexicalBlock(scope: !277, file: !29, line: 67, column: 27)
!282 = !DILocation(line: 69, column: 18, scope: !274)
!283 = !DILocation(line: 69, column: 9, scope: !274)
!284 = !DILocation(line: 70, column: 5, scope: !274)
!285 = !DILocation(line: 71, column: 8, scope: !286)
!286 = distinct !DILexicalBlock(scope: !265, file: !29, line: 71, column: 8)
!287 = !DILocation(line: 71, column: 18, scope: !286)
!288 = !DILocation(line: 71, column: 8, scope: !265)
!289 = !DILocation(line: 74, column: 9, scope: !290)
!290 = distinct !DILexicalBlock(scope: !286, file: !29, line: 72, column: 5)
!291 = !DILocation(line: 75, column: 5, scope: !290)
!292 = !DILocation(line: 82, column: 1, scope: !265)
!293 = distinct !DISubprogram(name: "goodB2G2", scope: !29, file: !29, line: 85, type: !213, scopeLine: 86, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !45)
!294 = !DILocalVariable(name: "data", scope: !293, file: !29, line: 87, type: !23)
!295 = !DILocation(line: 87, column: 12, scope: !293)
!296 = !DILocation(line: 89, column: 10, scope: !293)
!297 = !DILocation(line: 90, column: 8, scope: !298)
!298 = distinct !DILexicalBlock(scope: !293, file: !29, line: 90, column: 8)
!299 = !DILocation(line: 90, column: 18, scope: !298)
!300 = !DILocation(line: 90, column: 8, scope: !293)
!301 = !DILocation(line: 92, column: 24, scope: !302)
!302 = distinct !DILexicalBlock(scope: !298, file: !29, line: 91, column: 5)
!303 = !DILocation(line: 92, column: 14, scope: !302)
!304 = !DILocation(line: 93, column: 13, scope: !305)
!305 = distinct !DILexicalBlock(scope: !302, file: !29, line: 93, column: 13)
!306 = !DILocation(line: 93, column: 18, scope: !305)
!307 = !DILocation(line: 93, column: 13, scope: !302)
!308 = !DILocation(line: 93, column: 28, scope: !309)
!309 = distinct !DILexicalBlock(scope: !305, file: !29, line: 93, column: 27)
!310 = !DILocation(line: 95, column: 18, scope: !302)
!311 = !DILocation(line: 95, column: 9, scope: !302)
!312 = !DILocation(line: 96, column: 5, scope: !302)
!313 = !DILocation(line: 97, column: 8, scope: !314)
!314 = distinct !DILexicalBlock(scope: !293, file: !29, line: 97, column: 8)
!315 = !DILocation(line: 97, column: 18, scope: !314)
!316 = !DILocation(line: 97, column: 8, scope: !293)
!317 = !DILocation(line: 102, column: 5, scope: !318)
!318 = distinct !DILexicalBlock(scope: !314, file: !29, line: 98, column: 5)
!319 = !DILocation(line: 103, column: 1, scope: !293)
!320 = distinct !DISubprogram(name: "goodG2B1", scope: !29, file: !29, line: 106, type: !213, scopeLine: 107, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !45)
!321 = !DILocalVariable(name: "data", scope: !320, file: !29, line: 108, type: !23)
!322 = !DILocation(line: 108, column: 12, scope: !320)
!323 = !DILocation(line: 110, column: 10, scope: !320)
!324 = !DILocation(line: 111, column: 8, scope: !325)
!325 = distinct !DILexicalBlock(scope: !320, file: !29, line: 111, column: 8)
!326 = !DILocation(line: 111, column: 18, scope: !325)
!327 = !DILocation(line: 111, column: 8, scope: !320)
!328 = !DILocation(line: 114, column: 9, scope: !329)
!329 = distinct !DILexicalBlock(scope: !325, file: !29, line: 112, column: 5)
!330 = !DILocation(line: 115, column: 5, scope: !329)
!331 = !DILocation(line: 118, column: 24, scope: !332)
!332 = distinct !DILexicalBlock(scope: !325, file: !29, line: 117, column: 5)
!333 = !DILocation(line: 118, column: 14, scope: !332)
!334 = !DILocation(line: 119, column: 13, scope: !335)
!335 = distinct !DILexicalBlock(scope: !332, file: !29, line: 119, column: 13)
!336 = !DILocation(line: 119, column: 18, scope: !335)
!337 = !DILocation(line: 119, column: 13, scope: !332)
!338 = !DILocation(line: 119, column: 28, scope: !339)
!339 = distinct !DILexicalBlock(scope: !335, file: !29, line: 119, column: 27)
!340 = !DILocation(line: 122, column: 8, scope: !341)
!341 = distinct !DILexicalBlock(scope: !320, file: !29, line: 122, column: 8)
!342 = !DILocation(line: 122, column: 18, scope: !341)
!343 = !DILocation(line: 122, column: 8, scope: !320)
!344 = !DILocation(line: 125, column: 18, scope: !345)
!345 = distinct !DILexicalBlock(scope: !341, file: !29, line: 123, column: 5)
!346 = !DILocation(line: 125, column: 9, scope: !345)
!347 = !DILocation(line: 126, column: 5, scope: !345)
!348 = !DILocation(line: 127, column: 1, scope: !320)
!349 = distinct !DISubprogram(name: "goodG2B2", scope: !29, file: !29, line: 130, type: !213, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !45)
!350 = !DILocalVariable(name: "data", scope: !349, file: !29, line: 132, type: !23)
!351 = !DILocation(line: 132, column: 12, scope: !349)
!352 = !DILocation(line: 134, column: 10, scope: !349)
!353 = !DILocation(line: 135, column: 8, scope: !354)
!354 = distinct !DILexicalBlock(scope: !349, file: !29, line: 135, column: 8)
!355 = !DILocation(line: 135, column: 18, scope: !354)
!356 = !DILocation(line: 135, column: 8, scope: !349)
!357 = !DILocation(line: 137, column: 24, scope: !358)
!358 = distinct !DILexicalBlock(scope: !354, file: !29, line: 136, column: 5)
!359 = !DILocation(line: 137, column: 14, scope: !358)
!360 = !DILocation(line: 138, column: 13, scope: !361)
!361 = distinct !DILexicalBlock(scope: !358, file: !29, line: 138, column: 13)
!362 = !DILocation(line: 138, column: 18, scope: !361)
!363 = !DILocation(line: 138, column: 13, scope: !358)
!364 = !DILocation(line: 138, column: 28, scope: !365)
!365 = distinct !DILexicalBlock(scope: !361, file: !29, line: 138, column: 27)
!366 = !DILocation(line: 140, column: 5, scope: !358)
!367 = !DILocation(line: 141, column: 8, scope: !368)
!368 = distinct !DILexicalBlock(scope: !349, file: !29, line: 141, column: 8)
!369 = !DILocation(line: 141, column: 18, scope: !368)
!370 = !DILocation(line: 141, column: 8, scope: !349)
!371 = !DILocation(line: 144, column: 18, scope: !372)
!372 = distinct !DILexicalBlock(scope: !368, file: !29, line: 142, column: 5)
!373 = !DILocation(line: 144, column: 9, scope: !372)
!374 = !DILocation(line: 145, column: 5, scope: !372)
!375 = !DILocation(line: 146, column: 1, scope: !349)
