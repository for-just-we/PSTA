; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/df/df10.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df10.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@badStatic = internal global i32 0, align 4, !dbg !17
@goodB2G1Static = internal global i32 0, align 4, !dbg !33
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !36
@goodB2G2Static = internal global i32 0, align 4, !dbg !41
@goodG2BStatic = internal global i32 0, align 4, !dbg !43

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !53 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !57, metadata !DIExpression()), !dbg !58
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !61
  ret void, !dbg !62
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !63 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !64, metadata !DIExpression()), !dbg !65
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !66, metadata !DIExpression()), !dbg !67
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !68
  ret void, !dbg !69
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !70 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !71, metadata !DIExpression()), !dbg !72
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !75
  ret void, !dbg !76
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !77 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !78, metadata !DIExpression()), !dbg !79
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !82
  ret void, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !84 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !85, metadata !DIExpression()), !dbg !86
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !87, metadata !DIExpression()), !dbg !88
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !89
  ret void, !dbg !90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !91 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !92, metadata !DIExpression()), !dbg !93
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !96
  ret void, !dbg !97
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !98 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !101, metadata !DIExpression()), !dbg !102
  %0 = load i32, ptr %n.addr, align 4, !dbg !103
  %conv = sext i32 %0 to i64, !dbg !103
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !104
  ret ptr %call, !dbg !105
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !106 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !107, metadata !DIExpression()), !dbg !108
  %0 = load i32, ptr %n.addr, align 4, !dbg !109
  %conv = sext i32 %0 to i64, !dbg !109
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !110
  ret ptr %call, !dbg !111
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !112 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %0 = load i32, ptr %n.addr, align 4, !dbg !115
  %conv = sext i32 %0 to i64, !dbg !115
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !116
  ret ptr %call, !dbg !117
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !118 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !119, metadata !DIExpression()), !dbg !120
  %0 = load i32, ptr %n.addr, align 4, !dbg !121
  %conv = sext i32 %0 to i64, !dbg !121
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !122
  ret ptr %call, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !124 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !125, metadata !DIExpression()), !dbg !126
  %0 = load i32, ptr %n.addr, align 4, !dbg !127
  %conv = sext i32 %0 to i64, !dbg !127
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !128
  ret ptr %call, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !130 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !131, metadata !DIExpression()), !dbg !132
  %0 = load i32, ptr %n.addr, align 4, !dbg !133
  %conv = sext i32 %0 to i64, !dbg !133
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !134
  ret ptr %call, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !136 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !137, metadata !DIExpression()), !dbg !138
  %0 = load i32, ptr %n.addr, align 4, !dbg !139
  %conv = sext i32 %0 to i64, !dbg !139
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !140
  ret ptr %call, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !142 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !143, metadata !DIExpression()), !dbg !144
  %0 = load i32, ptr %n.addr, align 4, !dbg !145
  %conv = sext i32 %0 to i64, !dbg !145
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !146
  ret ptr %call, !dbg !147
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !148 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !151, metadata !DIExpression()), !dbg !152
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !153, metadata !DIExpression()), !dbg !154
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !155
  ret void, !dbg !156
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !157 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !161, metadata !DIExpression()), !dbg !162
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !163, metadata !DIExpression()), !dbg !164
  ret void, !dbg !165
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !166 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !167, metadata !DIExpression()), !dbg !168
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !169, metadata !DIExpression()), !dbg !170
  ret void, !dbg !171
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !172 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !175, metadata !DIExpression()), !dbg !176
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !177, metadata !DIExpression()), !dbg !178
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !179, metadata !DIExpression()), !dbg !180
  ret void, !dbg !181
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !182 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !185, metadata !DIExpression()), !dbg !186
  ret void, !dbg !187
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !188 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !189, metadata !DIExpression()), !dbg !190
  %0 = load ptr, ptr %str.addr, align 8, !dbg !191
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !192
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !193
  %call2 = call i32 @getchar(), !dbg !194
  ret void, !dbg !195
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !196 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !200, metadata !DIExpression()), !dbg !201
  %0 = load ptr, ptr %p.addr, align 8, !dbg !202
  store i32 0, ptr %0, align 4, !dbg !203
  %1 = load ptr, ptr %retval, align 8, !dbg !204
  ret ptr %1, !dbg !204
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !205 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !206, metadata !DIExpression()), !dbg !207
  %0 = load ptr, ptr %p.addr, align 8, !dbg !208
  store i32 0, ptr %0, align 4, !dbg !209
  %1 = load ptr, ptr %retval, align 8, !dbg !210
  ret ptr %1, !dbg !210
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !211 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !212, metadata !DIExpression()), !dbg !213
  %0 = load ptr, ptr %p.addr, align 8, !dbg !214
  call void @free(ptr noundef %0) #7, !dbg !215
  %1 = load ptr, ptr %retval, align 8, !dbg !216
  ret ptr %1, !dbg !216
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !217 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !218, metadata !DIExpression()), !dbg !219
  %0 = load ptr, ptr %p.addr, align 8, !dbg !220
  call void @free(ptr noundef %0) #7, !dbg !221
  %1 = load ptr, ptr %retval, align 8, !dbg !222
  ret ptr %1, !dbg !222
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !223 {
entry:
  ret void, !dbg !226
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_struct_21_bad() #0 !dbg !227 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !228, metadata !DIExpression()), !dbg !229
  store ptr null, ptr %data, align 8, !dbg !230
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !231
  store ptr %call, ptr %data, align 8, !dbg !232
  %0 = load ptr, ptr %data, align 8, !dbg !233
  %cmp = icmp eq ptr %0, null, !dbg !235
  br i1 %cmp, label %if.then, label %if.end, !dbg !236

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !237
  unreachable, !dbg !237

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !239
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !240
  store i32 1, ptr @badStatic, align 4, !dbg !241
  %2 = load ptr, ptr %data, align 8, !dbg !242
  call void @badSink(ptr noundef %2), !dbg !243
  ret void, !dbg !244
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @badSink(ptr noundef %data) #0 !dbg !245 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !248, metadata !DIExpression()), !dbg !249
  %0 = load i32, ptr @badStatic, align 4, !dbg !250
  %tobool = icmp ne i32 %0, 0, !dbg !250
  br i1 %tobool, label %if.then, label %if.end, !dbg !252

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !253
  %call = call ptr @DOUBLEFREE(ptr noundef %1), !dbg !255
  br label %if.end, !dbg !256

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !257
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_struct_21_good() #0 !dbg !258 {
entry:
  call void @goodB2G1(), !dbg !259
  call void @goodB2G2(), !dbg !260
  call void @goodG2B(), !dbg !261
  ret void, !dbg !262
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !263 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !267, metadata !DIExpression()), !dbg !268
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !269, metadata !DIExpression()), !dbg !270
  %call = call i64 @time(ptr noundef null) #7, !dbg !271
  %conv = trunc i64 %call to i32, !dbg !272
  call void @srand(i32 noundef %conv) #7, !dbg !273
  call void @CWE415_Double_Free__malloc_free_struct_21_good(), !dbg !274
  call void @CWE415_Double_Free__malloc_free_struct_21_bad(), !dbg !275
  ret i32 0, !dbg !276
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !277 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !278, metadata !DIExpression()), !dbg !279
  store ptr null, ptr %data, align 8, !dbg !280
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !281
  store ptr %call, ptr %data, align 8, !dbg !282
  %0 = load ptr, ptr %data, align 8, !dbg !283
  %cmp = icmp eq ptr %0, null, !dbg !285
  br i1 %cmp, label %if.then, label %if.end, !dbg !286

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !287
  unreachable, !dbg !287

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !289
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !290
  store i32 0, ptr @goodB2G1Static, align 4, !dbg !291
  %2 = load ptr, ptr %data, align 8, !dbg !292
  call void @goodB2G1Sink(ptr noundef %2), !dbg !293
  ret void, !dbg !294
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1Sink(ptr noundef %data) #0 !dbg !295 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !296, metadata !DIExpression()), !dbg !297
  %0 = load i32, ptr @goodB2G1Static, align 4, !dbg !298
  %tobool = icmp ne i32 %0, 0, !dbg !298
  br i1 %tobool, label %if.then, label %if.else, !dbg !300

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !301
  br label %if.end, !dbg !303

if.else:                                          ; preds = %entry
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !304
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !305 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !306, metadata !DIExpression()), !dbg !307
  store ptr null, ptr %data, align 8, !dbg !308
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !309
  store ptr %call, ptr %data, align 8, !dbg !310
  %0 = load ptr, ptr %data, align 8, !dbg !311
  %cmp = icmp eq ptr %0, null, !dbg !313
  br i1 %cmp, label %if.then, label %if.end, !dbg !314

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !315
  unreachable, !dbg !315

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !317
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !318
  store i32 1, ptr @goodB2G2Static, align 4, !dbg !319
  %2 = load ptr, ptr %data, align 8, !dbg !320
  call void @goodB2G2Sink(ptr noundef %2), !dbg !321
  ret void, !dbg !322
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2Sink(ptr noundef %data) #0 !dbg !323 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !324, metadata !DIExpression()), !dbg !325
  %0 = load i32, ptr @goodB2G2Static, align 4, !dbg !326
  %tobool = icmp ne i32 %0, 0, !dbg !326
  br i1 %tobool, label %if.then, label %if.end, !dbg !328

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !329

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !331
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !332 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !333, metadata !DIExpression()), !dbg !334
  store ptr null, ptr %data, align 8, !dbg !335
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !336
  store ptr %call, ptr %data, align 8, !dbg !337
  %0 = load ptr, ptr %data, align 8, !dbg !338
  %cmp = icmp eq ptr %0, null, !dbg !340
  br i1 %cmp, label %if.then, label %if.end, !dbg !341

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !342
  unreachable, !dbg !342

if.end:                                           ; preds = %entry
  store i32 1, ptr @goodG2BStatic, align 4, !dbg !344
  %1 = load ptr, ptr %data, align 8, !dbg !345
  call void @goodG2BSink(ptr noundef %1), !dbg !346
  ret void, !dbg !347
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2BSink(ptr noundef %data) #0 !dbg !348 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !349, metadata !DIExpression()), !dbg !350
  %0 = load i32, ptr @goodG2BStatic, align 4, !dbg !351
  %tobool = icmp ne i32 %0, 0, !dbg !351
  br i1 %tobool, label %if.then, label %if.end, !dbg !353

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !354
  %call = call ptr @SAFEFREE(ptr noundef %1), !dbg !356
  br label %if.end, !dbg !357

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !358
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!45, !46, !47, !48, !49, !50, !51}
!llvm.ident = !{!52}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "badStatic", scope: !19, file: !35, line: 31, type: !29, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !32, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df10.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "5d121aeef3e95a751065aca75326d33f")
!21 = !{!22, !23, !31}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !25, line: 100, baseType: !26)
!25 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !25, line: 96, size: 64, elements: !27)
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !26, file: !25, line: 98, baseType: !29, size: 32)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !26, file: !25, line: 99, baseType: !29, size: 32, offset: 32)
!31 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!32 = !{!0, !7, !12, !17, !33, !36, !41, !43}
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "goodB2G1Static", scope: !19, file: !35, line: 57, type: !29, isLocal: true, isDefinition: true)
!35 = !DIFile(filename: "src/df/df10.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "5d121aeef3e95a751065aca75326d33f")
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(scope: null, file: !35, line: 67, type: !38, isLocal: true, isDefinition: true)
!38 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !39)
!39 = !{!40}
!40 = !DISubrange(count: 21)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "goodB2G2Static", scope: !19, file: !35, line: 58, type: !29, isLocal: true, isDefinition: true)
!43 = !DIGlobalVariableExpression(var: !44, expr: !DIExpression())
!44 = distinct !DIGlobalVariable(name: "goodG2BStatic", scope: !19, file: !35, line: 59, type: !29, isLocal: true, isDefinition: true)
!45 = !{i32 7, !"Dwarf Version", i32 5}
!46 = !{i32 2, !"Debug Info Version", i32 3}
!47 = !{i32 1, !"wchar_size", i32 4}
!48 = !{i32 8, !"PIC Level", i32 2}
!49 = !{i32 7, !"PIE Level", i32 2}
!50 = !{i32 7, !"uwtable", i32 2}
!51 = !{i32 7, !"frame-pointer", i32 2}
!52 = !{!"clang version 16.0.0"}
!53 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !54, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!54 = !DISubroutineType(types: !55)
!55 = !{null, !22, !22}
!56 = !{}
!57 = !DILocalVariable(name: "p", arg: 1, scope: !53, file: !2, line: 4, type: !22)
!58 = !DILocation(line: 4, column: 22, scope: !53)
!59 = !DILocalVariable(name: "q", arg: 2, scope: !53, file: !2, line: 4, type: !22)
!60 = !DILocation(line: 4, column: 31, scope: !53)
!61 = !DILocation(line: 5, column: 3, scope: !53)
!62 = !DILocation(line: 6, column: 1, scope: !53)
!63 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !54, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!64 = !DILocalVariable(name: "p", arg: 1, scope: !63, file: !2, line: 8, type: !22)
!65 = !DILocation(line: 8, column: 25, scope: !63)
!66 = !DILocalVariable(name: "q", arg: 2, scope: !63, file: !2, line: 8, type: !22)
!67 = !DILocation(line: 8, column: 34, scope: !63)
!68 = !DILocation(line: 9, column: 3, scope: !63)
!69 = !DILocation(line: 10, column: 1, scope: !63)
!70 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !54, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!71 = !DILocalVariable(name: "p", arg: 1, scope: !70, file: !2, line: 12, type: !22)
!72 = !DILocation(line: 12, column: 21, scope: !70)
!73 = !DILocalVariable(name: "q", arg: 2, scope: !70, file: !2, line: 12, type: !22)
!74 = !DILocation(line: 12, column: 30, scope: !70)
!75 = !DILocation(line: 13, column: 3, scope: !70)
!76 = !DILocation(line: 14, column: 1, scope: !70)
!77 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !54, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!78 = !DILocalVariable(name: "p", arg: 1, scope: !77, file: !2, line: 16, type: !22)
!79 = !DILocation(line: 16, column: 20, scope: !77)
!80 = !DILocalVariable(name: "q", arg: 2, scope: !77, file: !2, line: 16, type: !22)
!81 = !DILocation(line: 16, column: 29, scope: !77)
!82 = !DILocation(line: 17, column: 3, scope: !77)
!83 = !DILocation(line: 18, column: 1, scope: !77)
!84 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !54, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!85 = !DILocalVariable(name: "p", arg: 1, scope: !84, file: !2, line: 20, type: !22)
!86 = !DILocation(line: 20, column: 34, scope: !84)
!87 = !DILocalVariable(name: "q", arg: 2, scope: !84, file: !2, line: 20, type: !22)
!88 = !DILocation(line: 20, column: 43, scope: !84)
!89 = !DILocation(line: 21, column: 3, scope: !84)
!90 = !DILocation(line: 22, column: 1, scope: !84)
!91 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !54, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!92 = !DILocalVariable(name: "p", arg: 1, scope: !91, file: !2, line: 24, type: !22)
!93 = !DILocation(line: 24, column: 33, scope: !91)
!94 = !DILocalVariable(name: "q", arg: 2, scope: !91, file: !2, line: 24, type: !22)
!95 = !DILocation(line: 24, column: 42, scope: !91)
!96 = !DILocation(line: 25, column: 3, scope: !91)
!97 = !DILocation(line: 26, column: 1, scope: !91)
!98 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !99, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!99 = !DISubroutineType(types: !100)
!100 = !{!22, !29}
!101 = !DILocalVariable(name: "n", arg: 1, scope: !98, file: !2, line: 29, type: !29)
!102 = !DILocation(line: 29, column: 22, scope: !98)
!103 = !DILocation(line: 30, column: 17, scope: !98)
!104 = !DILocation(line: 30, column: 10, scope: !98)
!105 = !DILocation(line: 30, column: 3, scope: !98)
!106 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !99, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!107 = !DILocalVariable(name: "n", arg: 1, scope: !106, file: !2, line: 33, type: !29)
!108 = !DILocation(line: 33, column: 28, scope: !106)
!109 = !DILocation(line: 34, column: 19, scope: !106)
!110 = !DILocation(line: 34, column: 12, scope: !106)
!111 = !DILocation(line: 34, column: 5, scope: !106)
!112 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !99, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!113 = !DILocalVariable(name: "n", arg: 1, scope: !112, file: !2, line: 37, type: !29)
!114 = !DILocation(line: 37, column: 21, scope: !112)
!115 = !DILocation(line: 38, column: 17, scope: !112)
!116 = !DILocation(line: 38, column: 10, scope: !112)
!117 = !DILocation(line: 38, column: 3, scope: !112)
!118 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !99, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!119 = !DILocalVariable(name: "n", arg: 1, scope: !118, file: !2, line: 41, type: !29)
!120 = !DILocation(line: 41, column: 21, scope: !118)
!121 = !DILocation(line: 42, column: 17, scope: !118)
!122 = !DILocation(line: 42, column: 10, scope: !118)
!123 = !DILocation(line: 42, column: 3, scope: !118)
!124 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !99, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!125 = !DILocalVariable(name: "n", arg: 1, scope: !124, file: !2, line: 45, type: !29)
!126 = !DILocation(line: 45, column: 21, scope: !124)
!127 = !DILocation(line: 46, column: 17, scope: !124)
!128 = !DILocation(line: 46, column: 10, scope: !124)
!129 = !DILocation(line: 46, column: 3, scope: !124)
!130 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !99, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!131 = !DILocalVariable(name: "n", arg: 1, scope: !130, file: !2, line: 49, type: !29)
!132 = !DILocation(line: 49, column: 21, scope: !130)
!133 = !DILocation(line: 50, column: 17, scope: !130)
!134 = !DILocation(line: 50, column: 10, scope: !130)
!135 = !DILocation(line: 50, column: 3, scope: !130)
!136 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !99, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!137 = !DILocalVariable(name: "n", arg: 1, scope: !136, file: !2, line: 53, type: !29)
!138 = !DILocation(line: 53, column: 21, scope: !136)
!139 = !DILocation(line: 54, column: 17, scope: !136)
!140 = !DILocation(line: 54, column: 10, scope: !136)
!141 = !DILocation(line: 54, column: 3, scope: !136)
!142 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !99, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!143 = !DILocalVariable(name: "n", arg: 1, scope: !142, file: !2, line: 57, type: !29)
!144 = !DILocation(line: 57, column: 18, scope: !142)
!145 = !DILocation(line: 58, column: 17, scope: !142)
!146 = !DILocation(line: 58, column: 10, scope: !142)
!147 = !DILocation(line: 58, column: 3, scope: !142)
!148 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !149, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!149 = !DISubroutineType(types: !150)
!150 = !{null, !29, !29}
!151 = !DILocalVariable(name: "id", arg: 1, scope: !148, file: !2, line: 67, type: !29)
!152 = !DILocation(line: 67, column: 20, scope: !148)
!153 = !DILocalVariable(name: "flags", arg: 2, scope: !148, file: !2, line: 67, type: !29)
!154 = !DILocation(line: 67, column: 28, scope: !148)
!155 = !DILocation(line: 68, column: 3, scope: !148)
!156 = !DILocation(line: 69, column: 1, scope: !148)
!157 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !158, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!158 = !DISubroutineType(types: !159)
!159 = !{null, !29, !160}
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!161 = !DILocalVariable(name: "thdid", arg: 1, scope: !157, file: !2, line: 79, type: !29)
!162 = !DILocation(line: 79, column: 21, scope: !157)
!163 = !DILocalVariable(name: "cxt", arg: 2, scope: !157, file: !2, line: 79, type: !160)
!164 = !DILocation(line: 79, column: 34, scope: !157)
!165 = !DILocation(line: 81, column: 1, scope: !157)
!166 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !158, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!167 = !DILocalVariable(name: "thdid", arg: 1, scope: !166, file: !2, line: 82, type: !29)
!168 = !DILocation(line: 82, column: 21, scope: !166)
!169 = !DILocalVariable(name: "cxt", arg: 2, scope: !166, file: !2, line: 82, type: !160)
!170 = !DILocation(line: 82, column: 33, scope: !166)
!171 = !DILocation(line: 84, column: 1, scope: !166)
!172 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !173, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!173 = !DISubroutineType(types: !174)
!174 = !{null, !29, !160, !160}
!175 = !DILocalVariable(name: "thdid", arg: 1, scope: !172, file: !2, line: 85, type: !29)
!176 = !DILocation(line: 85, column: 26, scope: !172)
!177 = !DILocalVariable(name: "cxt", arg: 2, scope: !172, file: !2, line: 85, type: !160)
!178 = !DILocation(line: 85, column: 38, scope: !172)
!179 = !DILocalVariable(name: "lev", arg: 3, scope: !172, file: !2, line: 85, type: !160)
!180 = !DILocation(line: 85, column: 49, scope: !172)
!181 = !DILocation(line: 87, column: 1, scope: !172)
!182 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !183, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !160}
!185 = !DILocalVariable(name: "lockname", arg: 1, scope: !182, file: !2, line: 89, type: !160)
!186 = !DILocation(line: 89, column: 17, scope: !182)
!187 = !DILocation(line: 91, column: 1, scope: !182)
!188 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !183, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!189 = !DILocalVariable(name: "str", arg: 1, scope: !188, file: !2, line: 93, type: !160)
!190 = !DILocation(line: 93, column: 18, scope: !188)
!191 = !DILocation(line: 94, column: 18, scope: !188)
!192 = !DILocation(line: 94, column: 3, scope: !188)
!193 = !DILocation(line: 95, column: 3, scope: !188)
!194 = !DILocation(line: 96, column: 3, scope: !188)
!195 = !DILocation(line: 97, column: 1, scope: !188)
!196 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !197, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!197 = !DISubroutineType(types: !198)
!198 = !{!22, !199}
!199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!200 = !DILocalVariable(name: "p", arg: 1, scope: !196, file: !2, line: 100, type: !199)
!201 = !DILocation(line: 100, column: 24, scope: !196)
!202 = !DILocation(line: 101, column: 6, scope: !196)
!203 = !DILocation(line: 101, column: 8, scope: !196)
!204 = !DILocation(line: 102, column: 1, scope: !196)
!205 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !197, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!206 = !DILocalVariable(name: "p", arg: 1, scope: !205, file: !2, line: 104, type: !199)
!207 = !DILocation(line: 104, column: 20, scope: !205)
!208 = !DILocation(line: 105, column: 6, scope: !205)
!209 = !DILocation(line: 105, column: 8, scope: !205)
!210 = !DILocation(line: 106, column: 1, scope: !205)
!211 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !197, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!212 = !DILocalVariable(name: "p", arg: 1, scope: !211, file: !2, line: 110, type: !199)
!213 = !DILocation(line: 110, column: 22, scope: !211)
!214 = !DILocation(line: 111, column: 10, scope: !211)
!215 = !DILocation(line: 111, column: 5, scope: !211)
!216 = !DILocation(line: 112, column: 1, scope: !211)
!217 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !197, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!218 = !DILocalVariable(name: "p", arg: 1, scope: !217, file: !2, line: 115, type: !199)
!219 = !DILocation(line: 115, column: 24, scope: !217)
!220 = !DILocation(line: 116, column: 10, scope: !217)
!221 = !DILocation(line: 116, column: 5, scope: !217)
!222 = !DILocation(line: 117, column: 1, scope: !217)
!223 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !224, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!224 = !DISubroutineType(types: !225)
!225 = !{null}
!226 = !DILocation(line: 135, column: 20, scope: !223)
!227 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_struct_21_bad", scope: !35, file: !35, line: 42, type: !224, scopeLine: 43, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!228 = !DILocalVariable(name: "data", scope: !227, file: !35, line: 44, type: !23)
!229 = !DILocation(line: 44, column: 21, scope: !227)
!230 = !DILocation(line: 46, column: 10, scope: !227)
!231 = !DILocation(line: 47, column: 29, scope: !227)
!232 = !DILocation(line: 47, column: 10, scope: !227)
!233 = !DILocation(line: 48, column: 9, scope: !234)
!234 = distinct !DILexicalBlock(scope: !227, file: !35, line: 48, column: 9)
!235 = !DILocation(line: 48, column: 14, scope: !234)
!236 = !DILocation(line: 48, column: 9, scope: !227)
!237 = !DILocation(line: 48, column: 24, scope: !238)
!238 = distinct !DILexicalBlock(scope: !234, file: !35, line: 48, column: 23)
!239 = !DILocation(line: 50, column: 14, scope: !227)
!240 = !DILocation(line: 50, column: 5, scope: !227)
!241 = !DILocation(line: 51, column: 15, scope: !227)
!242 = !DILocation(line: 52, column: 13, scope: !227)
!243 = !DILocation(line: 52, column: 5, scope: !227)
!244 = !DILocation(line: 53, column: 1, scope: !227)
!245 = distinct !DISubprogram(name: "badSink", scope: !35, file: !35, line: 33, type: !246, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !56)
!246 = !DISubroutineType(types: !247)
!247 = !{null, !23}
!248 = !DILocalVariable(name: "data", arg: 1, scope: !245, file: !35, line: 33, type: !23)
!249 = !DILocation(line: 33, column: 37, scope: !245)
!250 = !DILocation(line: 35, column: 8, scope: !251)
!251 = distinct !DILexicalBlock(scope: !245, file: !35, line: 35, column: 8)
!252 = !DILocation(line: 35, column: 8, scope: !245)
!253 = !DILocation(line: 38, column: 20, scope: !254)
!254 = distinct !DILexicalBlock(scope: !251, file: !35, line: 36, column: 5)
!255 = !DILocation(line: 38, column: 9, scope: !254)
!256 = !DILocation(line: 39, column: 5, scope: !254)
!257 = !DILocation(line: 40, column: 1, scope: !245)
!258 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_struct_21_good", scope: !35, file: !35, line: 136, type: !224, scopeLine: 137, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!259 = !DILocation(line: 138, column: 5, scope: !258)
!260 = !DILocation(line: 139, column: 5, scope: !258)
!261 = !DILocation(line: 140, column: 5, scope: !258)
!262 = !DILocation(line: 141, column: 1, scope: !258)
!263 = distinct !DISubprogram(name: "main", scope: !35, file: !35, line: 150, type: !264, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !56)
!264 = !DISubroutineType(types: !265)
!265 = !{!29, !29, !266}
!266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !160, size: 64)
!267 = !DILocalVariable(name: "argc", arg: 1, scope: !263, file: !35, line: 150, type: !29)
!268 = !DILocation(line: 150, column: 14, scope: !263)
!269 = !DILocalVariable(name: "argv", arg: 2, scope: !263, file: !35, line: 150, type: !266)
!270 = !DILocation(line: 150, column: 27, scope: !263)
!271 = !DILocation(line: 153, column: 22, scope: !263)
!272 = !DILocation(line: 153, column: 12, scope: !263)
!273 = !DILocation(line: 153, column: 5, scope: !263)
!274 = !DILocation(line: 154, column: 5, scope: !263)
!275 = !DILocation(line: 155, column: 5, scope: !263)
!276 = !DILocation(line: 156, column: 5, scope: !263)
!277 = distinct !DISubprogram(name: "goodB2G1", scope: !35, file: !35, line: 77, type: !224, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !56)
!278 = !DILocalVariable(name: "data", scope: !277, file: !35, line: 79, type: !23)
!279 = !DILocation(line: 79, column: 21, scope: !277)
!280 = !DILocation(line: 81, column: 10, scope: !277)
!281 = !DILocation(line: 82, column: 29, scope: !277)
!282 = !DILocation(line: 82, column: 10, scope: !277)
!283 = !DILocation(line: 83, column: 9, scope: !284)
!284 = distinct !DILexicalBlock(scope: !277, file: !35, line: 83, column: 9)
!285 = !DILocation(line: 83, column: 14, scope: !284)
!286 = !DILocation(line: 83, column: 9, scope: !277)
!287 = !DILocation(line: 83, column: 24, scope: !288)
!288 = distinct !DILexicalBlock(scope: !284, file: !35, line: 83, column: 23)
!289 = !DILocation(line: 85, column: 14, scope: !277)
!290 = !DILocation(line: 85, column: 5, scope: !277)
!291 = !DILocation(line: 86, column: 20, scope: !277)
!292 = !DILocation(line: 87, column: 18, scope: !277)
!293 = !DILocation(line: 87, column: 5, scope: !277)
!294 = !DILocation(line: 88, column: 1, scope: !277)
!295 = distinct !DISubprogram(name: "goodB2G1Sink", scope: !35, file: !35, line: 62, type: !246, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !56)
!296 = !DILocalVariable(name: "data", arg: 1, scope: !295, file: !35, line: 62, type: !23)
!297 = !DILocation(line: 62, column: 42, scope: !295)
!298 = !DILocation(line: 64, column: 8, scope: !299)
!299 = distinct !DILexicalBlock(scope: !295, file: !35, line: 64, column: 8)
!300 = !DILocation(line: 64, column: 8, scope: !295)
!301 = !DILocation(line: 67, column: 9, scope: !302)
!302 = distinct !DILexicalBlock(scope: !299, file: !35, line: 65, column: 5)
!303 = !DILocation(line: 68, column: 5, scope: !302)
!304 = !DILocation(line: 75, column: 1, scope: !295)
!305 = distinct !DISubprogram(name: "goodB2G2", scope: !35, file: !35, line: 101, type: !224, scopeLine: 102, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !56)
!306 = !DILocalVariable(name: "data", scope: !305, file: !35, line: 103, type: !23)
!307 = !DILocation(line: 103, column: 21, scope: !305)
!308 = !DILocation(line: 105, column: 10, scope: !305)
!309 = !DILocation(line: 106, column: 29, scope: !305)
!310 = !DILocation(line: 106, column: 10, scope: !305)
!311 = !DILocation(line: 107, column: 9, scope: !312)
!312 = distinct !DILexicalBlock(scope: !305, file: !35, line: 107, column: 9)
!313 = !DILocation(line: 107, column: 14, scope: !312)
!314 = !DILocation(line: 107, column: 9, scope: !305)
!315 = !DILocation(line: 107, column: 24, scope: !316)
!316 = distinct !DILexicalBlock(scope: !312, file: !35, line: 107, column: 23)
!317 = !DILocation(line: 109, column: 14, scope: !305)
!318 = !DILocation(line: 109, column: 5, scope: !305)
!319 = !DILocation(line: 110, column: 20, scope: !305)
!320 = !DILocation(line: 111, column: 18, scope: !305)
!321 = !DILocation(line: 111, column: 5, scope: !305)
!322 = !DILocation(line: 112, column: 1, scope: !305)
!323 = distinct !DISubprogram(name: "goodB2G2Sink", scope: !35, file: !35, line: 91, type: !246, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !56)
!324 = !DILocalVariable(name: "data", arg: 1, scope: !323, file: !35, line: 91, type: !23)
!325 = !DILocation(line: 91, column: 42, scope: !323)
!326 = !DILocation(line: 93, column: 8, scope: !327)
!327 = distinct !DILexicalBlock(scope: !323, file: !35, line: 93, column: 8)
!328 = !DILocation(line: 93, column: 8, scope: !323)
!329 = !DILocation(line: 98, column: 5, scope: !330)
!330 = distinct !DILexicalBlock(scope: !327, file: !35, line: 94, column: 5)
!331 = !DILocation(line: 99, column: 1, scope: !323)
!332 = distinct !DISubprogram(name: "goodG2B", scope: !35, file: !35, line: 124, type: !224, scopeLine: 125, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !56)
!333 = !DILocalVariable(name: "data", scope: !332, file: !35, line: 126, type: !23)
!334 = !DILocation(line: 126, column: 21, scope: !332)
!335 = !DILocation(line: 128, column: 10, scope: !332)
!336 = !DILocation(line: 129, column: 29, scope: !332)
!337 = !DILocation(line: 129, column: 10, scope: !332)
!338 = !DILocation(line: 130, column: 9, scope: !339)
!339 = distinct !DILexicalBlock(scope: !332, file: !35, line: 130, column: 9)
!340 = !DILocation(line: 130, column: 14, scope: !339)
!341 = !DILocation(line: 130, column: 9, scope: !332)
!342 = !DILocation(line: 130, column: 24, scope: !343)
!343 = distinct !DILexicalBlock(scope: !339, file: !35, line: 130, column: 23)
!344 = !DILocation(line: 132, column: 19, scope: !332)
!345 = !DILocation(line: 133, column: 17, scope: !332)
!346 = !DILocation(line: 133, column: 5, scope: !332)
!347 = !DILocation(line: 134, column: 1, scope: !332)
!348 = distinct !DISubprogram(name: "goodG2BSink", scope: !35, file: !35, line: 115, type: !246, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !56)
!349 = !DILocalVariable(name: "data", arg: 1, scope: !348, file: !35, line: 115, type: !23)
!350 = !DILocation(line: 115, column: 41, scope: !348)
!351 = !DILocation(line: 117, column: 8, scope: !352)
!352 = distinct !DILexicalBlock(scope: !348, file: !35, line: 117, column: 8)
!353 = !DILocation(line: 117, column: 8, scope: !348)
!354 = !DILocation(line: 120, column: 18, scope: !355)
!355 = distinct !DILexicalBlock(scope: !352, file: !35, line: 118, column: 5)
!356 = !DILocation(line: 120, column: 9, scope: !355)
!357 = !DILocation(line: 121, column: 5, scope: !355)
!358 = !DILocation(line: 122, column: 1, scope: !348)
