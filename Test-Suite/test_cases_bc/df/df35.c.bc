; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/df/df35.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df35.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !33 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !37, metadata !DIExpression()), !dbg !38
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !39, metadata !DIExpression()), !dbg !40
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !41
  ret void, !dbg !42
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !43 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !44, metadata !DIExpression()), !dbg !45
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !48
  ret void, !dbg !49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !50 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !51, metadata !DIExpression()), !dbg !52
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !53, metadata !DIExpression()), !dbg !54
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !55
  ret void, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !57 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !58, metadata !DIExpression()), !dbg !59
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !60, metadata !DIExpression()), !dbg !61
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !62
  ret void, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !64 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !65, metadata !DIExpression()), !dbg !66
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !71 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !72, metadata !DIExpression()), !dbg !73
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !76
  ret void, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !78 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %0 = load i32, ptr %n.addr, align 4, !dbg !84
  %conv = sext i32 %0 to i64, !dbg !84
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !85
  ret ptr %call, !dbg !86
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !87 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %0 = load i32, ptr %n.addr, align 4, !dbg !90
  %conv = sext i32 %0 to i64, !dbg !90
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !91
  ret ptr %call, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, ptr %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !97
  ret ptr %call, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, ptr %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !103
  ret ptr %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !105 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !106, metadata !DIExpression()), !dbg !107
  %0 = load i32, ptr %n.addr, align 4, !dbg !108
  %conv = sext i32 %0 to i64, !dbg !108
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !109
  ret ptr %call, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !111 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !112, metadata !DIExpression()), !dbg !113
  %0 = load i32, ptr %n.addr, align 4, !dbg !114
  %conv = sext i32 %0 to i64, !dbg !114
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !115
  ret ptr %call, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !117 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !118, metadata !DIExpression()), !dbg !119
  %0 = load i32, ptr %n.addr, align 4, !dbg !120
  %conv = sext i32 %0 to i64, !dbg !120
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !121
  ret ptr %call, !dbg !122
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !123 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !124, metadata !DIExpression()), !dbg !125
  %0 = load i32, ptr %n.addr, align 4, !dbg !126
  %conv = sext i32 %0 to i64, !dbg !126
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !127
  ret ptr %call, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !129 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !132, metadata !DIExpression()), !dbg !133
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !134, metadata !DIExpression()), !dbg !135
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !136
  ret void, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !138 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !142, metadata !DIExpression()), !dbg !143
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !144, metadata !DIExpression()), !dbg !145
  ret void, !dbg !146
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !147 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !148, metadata !DIExpression()), !dbg !149
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !150, metadata !DIExpression()), !dbg !151
  ret void, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !153 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !156, metadata !DIExpression()), !dbg !157
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !158, metadata !DIExpression()), !dbg !159
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !160, metadata !DIExpression()), !dbg !161
  ret void, !dbg !162
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !163 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !166, metadata !DIExpression()), !dbg !167
  ret void, !dbg !168
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !169 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !170, metadata !DIExpression()), !dbg !171
  %0 = load ptr, ptr %str.addr, align 8, !dbg !172
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !173
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !174
  %call2 = call i32 @getchar(), !dbg !175
  ret void, !dbg !176
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !177 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !181, metadata !DIExpression()), !dbg !182
  %0 = load ptr, ptr %p.addr, align 8, !dbg !183
  store i32 0, ptr %0, align 4, !dbg !184
  %1 = load ptr, ptr %retval, align 8, !dbg !185
  ret ptr %1, !dbg !185
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !186 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !187, metadata !DIExpression()), !dbg !188
  %0 = load ptr, ptr %p.addr, align 8, !dbg !189
  store i32 0, ptr %0, align 4, !dbg !190
  %1 = load ptr, ptr %retval, align 8, !dbg !191
  ret ptr %1, !dbg !191
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !192 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !193, metadata !DIExpression()), !dbg !194
  %0 = load ptr, ptr %p.addr, align 8, !dbg !195
  call void @free(ptr noundef %0) #7, !dbg !196
  %1 = load ptr, ptr %retval, align 8, !dbg !197
  ret ptr %1, !dbg !197
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !198 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !199, metadata !DIExpression()), !dbg !200
  %0 = load ptr, ptr %p.addr, align 8, !dbg !201
  call void @free(ptr noundef %0) #7, !dbg !202
  %1 = load ptr, ptr %retval, align 8, !dbg !203
  ret ptr %1, !dbg !203
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !204 {
entry:
  ret void, !dbg !207
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_12_bad() #0 !dbg !208 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !210, metadata !DIExpression()), !dbg !211
  store ptr null, ptr %data, align 8, !dbg !212
  %call = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !213
  %tobool = icmp ne i32 %call, 0, !dbg !213
  br i1 %tobool, label %if.then, label %if.end4, !dbg !215

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !216
  store ptr %call1, ptr %data, align 8, !dbg !218
  %0 = load ptr, ptr %data, align 8, !dbg !219
  %cmp = icmp eq ptr %0, null, !dbg !221
  br i1 %cmp, label %if.then2, label %if.end, !dbg !222

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !223
  unreachable, !dbg !223

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !225
  %call3 = call ptr @SAFEFREE(ptr noundef %1), !dbg !226
  br label %if.end4, !dbg !227

if.end4:                                          ; preds = %if.end, %entry
  %call5 = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !228
  %tobool6 = icmp ne i32 %call5, 0, !dbg !228
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !230

if.then7:                                         ; preds = %if.end4
  %2 = load ptr, ptr %data, align 8, !dbg !231
  %call8 = call ptr @DOUBLEFREE(ptr noundef %2), !dbg !233
  br label %if.end9, !dbg !234

if.else:                                          ; preds = %if.end4
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then7
  ret void, !dbg !235
}

declare i32 @globalReturnsTrueOrFalse(...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_12_good() #0 !dbg !236 {
entry:
  call void @goodB2G(), !dbg !237
  call void @goodG2B(), !dbg !238
  ret void, !dbg !239
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !240 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !244, metadata !DIExpression()), !dbg !245
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !246, metadata !DIExpression()), !dbg !247
  %call = call i64 @time(ptr noundef null) #7, !dbg !248
  %conv = trunc i64 %call to i32, !dbg !249
  call void @srand(i32 noundef %conv) #7, !dbg !250
  call void @CWE415_Double_Free__malloc_free_long_12_good(), !dbg !251
  call void @CWE415_Double_Free__malloc_free_long_12_bad(), !dbg !252
  ret i32 0, !dbg !253
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !254 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !255, metadata !DIExpression()), !dbg !256
  store ptr null, ptr %data, align 8, !dbg !257
  %call = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !258
  %tobool = icmp ne i32 %call, 0, !dbg !258
  br i1 %tobool, label %if.then, label %if.else, !dbg !260

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !261
  store ptr %call1, ptr %data, align 8, !dbg !263
  %0 = load ptr, ptr %data, align 8, !dbg !264
  %cmp = icmp eq ptr %0, null, !dbg !266
  br i1 %cmp, label %if.then2, label %if.end, !dbg !267

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !268
  unreachable, !dbg !268

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !270
  %call3 = call ptr @SAFEFREE(ptr noundef %1), !dbg !271
  br label %if.end9, !dbg !272

if.else:                                          ; preds = %entry
  %call4 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !273
  store ptr %call4, ptr %data, align 8, !dbg !275
  %2 = load ptr, ptr %data, align 8, !dbg !276
  %cmp5 = icmp eq ptr %2, null, !dbg !278
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !279

if.then6:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !280
  unreachable, !dbg !280

if.end7:                                          ; preds = %if.else
  %3 = load ptr, ptr %data, align 8, !dbg !282
  %call8 = call ptr @SAFEFREE(ptr noundef %3), !dbg !283
  br label %if.end9

if.end9:                                          ; preds = %if.end7, %if.end
  %call10 = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !284
  %tobool11 = icmp ne i32 %call10, 0, !dbg !284
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !286

if.then12:                                        ; preds = %if.end9
  br label %if.end14, !dbg !287

if.else13:                                        ; preds = %if.end9
  br label %if.end14

if.end14:                                         ; preds = %if.else13, %if.then12
  ret void, !dbg !289
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !290 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !291, metadata !DIExpression()), !dbg !292
  store ptr null, ptr %data, align 8, !dbg !293
  %call = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !294
  %tobool = icmp ne i32 %call, 0, !dbg !294
  br i1 %tobool, label %if.then, label %if.else, !dbg !296

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !297
  store ptr %call1, ptr %data, align 8, !dbg !299
  %0 = load ptr, ptr %data, align 8, !dbg !300
  %cmp = icmp eq ptr %0, null, !dbg !302
  br i1 %cmp, label %if.then2, label %if.end, !dbg !303

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !304
  unreachable, !dbg !304

if.end:                                           ; preds = %if.then
  br label %if.end7, !dbg !306

if.else:                                          ; preds = %entry
  %call3 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !307
  store ptr %call3, ptr %data, align 8, !dbg !309
  %1 = load ptr, ptr %data, align 8, !dbg !310
  %cmp4 = icmp eq ptr %1, null, !dbg !312
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !313

if.then5:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !314
  unreachable, !dbg !314

if.end6:                                          ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.end
  %call8 = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !316
  %tobool9 = icmp ne i32 %call8, 0, !dbg !316
  br i1 %tobool9, label %if.then10, label %if.else12, !dbg !318

if.then10:                                        ; preds = %if.end7
  %2 = load ptr, ptr %data, align 8, !dbg !319
  %call11 = call ptr @SAFEFREE(ptr noundef %2), !dbg !321
  br label %if.end14, !dbg !322

if.else12:                                        ; preds = %if.end7
  %3 = load ptr, ptr %data, align 8, !dbg !323
  %call13 = call ptr @SAFEFREE(ptr noundef %3), !dbg !325
  br label %if.end14

if.end14:                                         ; preds = %if.else12, %if.then10
  ret void, !dbg !326
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!17}
!llvm.module.flags = !{!25, !26, !27, !28, !29, !30, !31}
!llvm.ident = !{!32}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = distinct !DICompileUnit(language: DW_LANG_C11, file: !18, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !19, globals: !24, splitDebugInlining: false, nameTableKind: None)
!18 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df35.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "4ecd9b7804115d5332302875fca291f3")
!19 = !{!20, !21, !23}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64)
!22 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!23 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!24 = !{!0, !7, !12}
!25 = !{i32 7, !"Dwarf Version", i32 5}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{i32 8, !"PIC Level", i32 2}
!29 = !{i32 7, !"PIE Level", i32 2}
!30 = !{i32 7, !"uwtable", i32 2}
!31 = !{i32 7, !"frame-pointer", i32 2}
!32 = !{!"clang version 16.0.0"}
!33 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !34, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!34 = !DISubroutineType(types: !35)
!35 = !{null, !20, !20}
!36 = !{}
!37 = !DILocalVariable(name: "p", arg: 1, scope: !33, file: !2, line: 4, type: !20)
!38 = !DILocation(line: 4, column: 22, scope: !33)
!39 = !DILocalVariable(name: "q", arg: 2, scope: !33, file: !2, line: 4, type: !20)
!40 = !DILocation(line: 4, column: 31, scope: !33)
!41 = !DILocation(line: 5, column: 3, scope: !33)
!42 = !DILocation(line: 6, column: 1, scope: !33)
!43 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !34, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!44 = !DILocalVariable(name: "p", arg: 1, scope: !43, file: !2, line: 8, type: !20)
!45 = !DILocation(line: 8, column: 25, scope: !43)
!46 = !DILocalVariable(name: "q", arg: 2, scope: !43, file: !2, line: 8, type: !20)
!47 = !DILocation(line: 8, column: 34, scope: !43)
!48 = !DILocation(line: 9, column: 3, scope: !43)
!49 = !DILocation(line: 10, column: 1, scope: !43)
!50 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !34, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!51 = !DILocalVariable(name: "p", arg: 1, scope: !50, file: !2, line: 12, type: !20)
!52 = !DILocation(line: 12, column: 21, scope: !50)
!53 = !DILocalVariable(name: "q", arg: 2, scope: !50, file: !2, line: 12, type: !20)
!54 = !DILocation(line: 12, column: 30, scope: !50)
!55 = !DILocation(line: 13, column: 3, scope: !50)
!56 = !DILocation(line: 14, column: 1, scope: !50)
!57 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !34, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!58 = !DILocalVariable(name: "p", arg: 1, scope: !57, file: !2, line: 16, type: !20)
!59 = !DILocation(line: 16, column: 20, scope: !57)
!60 = !DILocalVariable(name: "q", arg: 2, scope: !57, file: !2, line: 16, type: !20)
!61 = !DILocation(line: 16, column: 29, scope: !57)
!62 = !DILocation(line: 17, column: 3, scope: !57)
!63 = !DILocation(line: 18, column: 1, scope: !57)
!64 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !34, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!65 = !DILocalVariable(name: "p", arg: 1, scope: !64, file: !2, line: 20, type: !20)
!66 = !DILocation(line: 20, column: 34, scope: !64)
!67 = !DILocalVariable(name: "q", arg: 2, scope: !64, file: !2, line: 20, type: !20)
!68 = !DILocation(line: 20, column: 43, scope: !64)
!69 = !DILocation(line: 21, column: 3, scope: !64)
!70 = !DILocation(line: 22, column: 1, scope: !64)
!71 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !34, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!72 = !DILocalVariable(name: "p", arg: 1, scope: !71, file: !2, line: 24, type: !20)
!73 = !DILocation(line: 24, column: 33, scope: !71)
!74 = !DILocalVariable(name: "q", arg: 2, scope: !71, file: !2, line: 24, type: !20)
!75 = !DILocation(line: 24, column: 42, scope: !71)
!76 = !DILocation(line: 25, column: 3, scope: !71)
!77 = !DILocation(line: 26, column: 1, scope: !71)
!78 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !79, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!79 = !DISubroutineType(types: !80)
!80 = !{!20, !81}
!81 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!82 = !DILocalVariable(name: "n", arg: 1, scope: !78, file: !2, line: 29, type: !81)
!83 = !DILocation(line: 29, column: 22, scope: !78)
!84 = !DILocation(line: 30, column: 17, scope: !78)
!85 = !DILocation(line: 30, column: 10, scope: !78)
!86 = !DILocation(line: 30, column: 3, scope: !78)
!87 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !79, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!88 = !DILocalVariable(name: "n", arg: 1, scope: !87, file: !2, line: 33, type: !81)
!89 = !DILocation(line: 33, column: 28, scope: !87)
!90 = !DILocation(line: 34, column: 19, scope: !87)
!91 = !DILocation(line: 34, column: 12, scope: !87)
!92 = !DILocation(line: 34, column: 5, scope: !87)
!93 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !79, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!94 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !2, line: 37, type: !81)
!95 = !DILocation(line: 37, column: 21, scope: !93)
!96 = !DILocation(line: 38, column: 17, scope: !93)
!97 = !DILocation(line: 38, column: 10, scope: !93)
!98 = !DILocation(line: 38, column: 3, scope: !93)
!99 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !79, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !2, line: 41, type: !81)
!101 = !DILocation(line: 41, column: 21, scope: !99)
!102 = !DILocation(line: 42, column: 17, scope: !99)
!103 = !DILocation(line: 42, column: 10, scope: !99)
!104 = !DILocation(line: 42, column: 3, scope: !99)
!105 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !79, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!106 = !DILocalVariable(name: "n", arg: 1, scope: !105, file: !2, line: 45, type: !81)
!107 = !DILocation(line: 45, column: 21, scope: !105)
!108 = !DILocation(line: 46, column: 17, scope: !105)
!109 = !DILocation(line: 46, column: 10, scope: !105)
!110 = !DILocation(line: 46, column: 3, scope: !105)
!111 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !79, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!112 = !DILocalVariable(name: "n", arg: 1, scope: !111, file: !2, line: 49, type: !81)
!113 = !DILocation(line: 49, column: 21, scope: !111)
!114 = !DILocation(line: 50, column: 17, scope: !111)
!115 = !DILocation(line: 50, column: 10, scope: !111)
!116 = !DILocation(line: 50, column: 3, scope: !111)
!117 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !79, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!118 = !DILocalVariable(name: "n", arg: 1, scope: !117, file: !2, line: 53, type: !81)
!119 = !DILocation(line: 53, column: 21, scope: !117)
!120 = !DILocation(line: 54, column: 17, scope: !117)
!121 = !DILocation(line: 54, column: 10, scope: !117)
!122 = !DILocation(line: 54, column: 3, scope: !117)
!123 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !79, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!124 = !DILocalVariable(name: "n", arg: 1, scope: !123, file: !2, line: 57, type: !81)
!125 = !DILocation(line: 57, column: 18, scope: !123)
!126 = !DILocation(line: 58, column: 17, scope: !123)
!127 = !DILocation(line: 58, column: 10, scope: !123)
!128 = !DILocation(line: 58, column: 3, scope: !123)
!129 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !130, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!130 = !DISubroutineType(types: !131)
!131 = !{null, !81, !81}
!132 = !DILocalVariable(name: "id", arg: 1, scope: !129, file: !2, line: 67, type: !81)
!133 = !DILocation(line: 67, column: 20, scope: !129)
!134 = !DILocalVariable(name: "flags", arg: 2, scope: !129, file: !2, line: 67, type: !81)
!135 = !DILocation(line: 67, column: 28, scope: !129)
!136 = !DILocation(line: 68, column: 3, scope: !129)
!137 = !DILocation(line: 69, column: 1, scope: !129)
!138 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !139, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!139 = !DISubroutineType(types: !140)
!140 = !{null, !81, !141}
!141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!142 = !DILocalVariable(name: "thdid", arg: 1, scope: !138, file: !2, line: 79, type: !81)
!143 = !DILocation(line: 79, column: 21, scope: !138)
!144 = !DILocalVariable(name: "cxt", arg: 2, scope: !138, file: !2, line: 79, type: !141)
!145 = !DILocation(line: 79, column: 34, scope: !138)
!146 = !DILocation(line: 81, column: 1, scope: !138)
!147 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !139, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!148 = !DILocalVariable(name: "thdid", arg: 1, scope: !147, file: !2, line: 82, type: !81)
!149 = !DILocation(line: 82, column: 21, scope: !147)
!150 = !DILocalVariable(name: "cxt", arg: 2, scope: !147, file: !2, line: 82, type: !141)
!151 = !DILocation(line: 82, column: 33, scope: !147)
!152 = !DILocation(line: 84, column: 1, scope: !147)
!153 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !154, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!154 = !DISubroutineType(types: !155)
!155 = !{null, !81, !141, !141}
!156 = !DILocalVariable(name: "thdid", arg: 1, scope: !153, file: !2, line: 85, type: !81)
!157 = !DILocation(line: 85, column: 26, scope: !153)
!158 = !DILocalVariable(name: "cxt", arg: 2, scope: !153, file: !2, line: 85, type: !141)
!159 = !DILocation(line: 85, column: 38, scope: !153)
!160 = !DILocalVariable(name: "lev", arg: 3, scope: !153, file: !2, line: 85, type: !141)
!161 = !DILocation(line: 85, column: 49, scope: !153)
!162 = !DILocation(line: 87, column: 1, scope: !153)
!163 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !164, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!164 = !DISubroutineType(types: !165)
!165 = !{null, !141}
!166 = !DILocalVariable(name: "lockname", arg: 1, scope: !163, file: !2, line: 89, type: !141)
!167 = !DILocation(line: 89, column: 17, scope: !163)
!168 = !DILocation(line: 91, column: 1, scope: !163)
!169 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !164, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!170 = !DILocalVariable(name: "str", arg: 1, scope: !169, file: !2, line: 93, type: !141)
!171 = !DILocation(line: 93, column: 18, scope: !169)
!172 = !DILocation(line: 94, column: 18, scope: !169)
!173 = !DILocation(line: 94, column: 3, scope: !169)
!174 = !DILocation(line: 95, column: 3, scope: !169)
!175 = !DILocation(line: 96, column: 3, scope: !169)
!176 = !DILocation(line: 97, column: 1, scope: !169)
!177 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !178, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!178 = !DISubroutineType(types: !179)
!179 = !{!20, !180}
!180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !81, size: 64)
!181 = !DILocalVariable(name: "p", arg: 1, scope: !177, file: !2, line: 100, type: !180)
!182 = !DILocation(line: 100, column: 24, scope: !177)
!183 = !DILocation(line: 101, column: 6, scope: !177)
!184 = !DILocation(line: 101, column: 8, scope: !177)
!185 = !DILocation(line: 102, column: 1, scope: !177)
!186 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !178, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!187 = !DILocalVariable(name: "p", arg: 1, scope: !186, file: !2, line: 104, type: !180)
!188 = !DILocation(line: 104, column: 20, scope: !186)
!189 = !DILocation(line: 105, column: 6, scope: !186)
!190 = !DILocation(line: 105, column: 8, scope: !186)
!191 = !DILocation(line: 106, column: 1, scope: !186)
!192 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !178, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!193 = !DILocalVariable(name: "p", arg: 1, scope: !192, file: !2, line: 110, type: !180)
!194 = !DILocation(line: 110, column: 22, scope: !192)
!195 = !DILocation(line: 111, column: 10, scope: !192)
!196 = !DILocation(line: 111, column: 5, scope: !192)
!197 = !DILocation(line: 112, column: 1, scope: !192)
!198 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !178, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!199 = !DILocalVariable(name: "p", arg: 1, scope: !198, file: !2, line: 115, type: !180)
!200 = !DILocation(line: 115, column: 24, scope: !198)
!201 = !DILocation(line: 116, column: 10, scope: !198)
!202 = !DILocation(line: 116, column: 5, scope: !198)
!203 = !DILocation(line: 117, column: 1, scope: !198)
!204 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !205, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!205 = !DISubroutineType(types: !206)
!206 = !{null}
!207 = !DILocation(line: 135, column: 20, scope: !204)
!208 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_long_12_bad", scope: !209, file: !209, line: 33, type: !205, scopeLine: 34, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!209 = !DIFile(filename: "src/df/df35.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "4ecd9b7804115d5332302875fca291f3")
!210 = !DILocalVariable(name: "data", scope: !208, file: !209, line: 35, type: !21)
!211 = !DILocation(line: 35, column: 12, scope: !208)
!212 = !DILocation(line: 37, column: 10, scope: !208)
!213 = !DILocation(line: 38, column: 8, scope: !214)
!214 = distinct !DILexicalBlock(scope: !208, file: !209, line: 38, column: 8)
!215 = !DILocation(line: 38, column: 8, scope: !208)
!216 = !DILocation(line: 40, column: 24, scope: !217)
!217 = distinct !DILexicalBlock(scope: !214, file: !209, line: 39, column: 5)
!218 = !DILocation(line: 40, column: 14, scope: !217)
!219 = !DILocation(line: 41, column: 13, scope: !220)
!220 = distinct !DILexicalBlock(scope: !217, file: !209, line: 41, column: 13)
!221 = !DILocation(line: 41, column: 18, scope: !220)
!222 = !DILocation(line: 41, column: 13, scope: !217)
!223 = !DILocation(line: 41, column: 28, scope: !224)
!224 = distinct !DILexicalBlock(scope: !220, file: !209, line: 41, column: 27)
!225 = !DILocation(line: 43, column: 18, scope: !217)
!226 = !DILocation(line: 43, column: 9, scope: !217)
!227 = !DILocation(line: 44, column: 5, scope: !217)
!228 = !DILocation(line: 51, column: 8, scope: !229)
!229 = distinct !DILexicalBlock(scope: !208, file: !209, line: 51, column: 8)
!230 = !DILocation(line: 51, column: 8, scope: !208)
!231 = !DILocation(line: 54, column: 20, scope: !232)
!232 = distinct !DILexicalBlock(scope: !229, file: !209, line: 52, column: 5)
!233 = !DILocation(line: 54, column: 9, scope: !232)
!234 = !DILocation(line: 55, column: 5, scope: !232)
!235 = !DILocation(line: 62, column: 1, scope: !208)
!236 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_long_12_good", scope: !209, file: !209, line: 133, type: !205, scopeLine: 134, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!237 = !DILocation(line: 135, column: 5, scope: !236)
!238 = !DILocation(line: 136, column: 5, scope: !236)
!239 = !DILocation(line: 137, column: 1, scope: !236)
!240 = distinct !DISubprogram(name: "main", scope: !209, file: !209, line: 146, type: !241, scopeLine: 147, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!241 = !DISubroutineType(types: !242)
!242 = !{!81, !81, !243}
!243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!244 = !DILocalVariable(name: "argc", arg: 1, scope: !240, file: !209, line: 146, type: !81)
!245 = !DILocation(line: 146, column: 14, scope: !240)
!246 = !DILocalVariable(name: "argv", arg: 2, scope: !240, file: !209, line: 146, type: !243)
!247 = !DILocation(line: 146, column: 27, scope: !240)
!248 = !DILocation(line: 149, column: 22, scope: !240)
!249 = !DILocation(line: 149, column: 12, scope: !240)
!250 = !DILocation(line: 149, column: 5, scope: !240)
!251 = !DILocation(line: 150, column: 5, scope: !240)
!252 = !DILocation(line: 151, column: 5, scope: !240)
!253 = !DILocation(line: 152, column: 5, scope: !240)
!254 = distinct !DISubprogram(name: "goodB2G", scope: !209, file: !209, line: 68, type: !205, scopeLine: 69, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !17, retainedNodes: !36)
!255 = !DILocalVariable(name: "data", scope: !254, file: !209, line: 70, type: !21)
!256 = !DILocation(line: 70, column: 12, scope: !254)
!257 = !DILocation(line: 72, column: 10, scope: !254)
!258 = !DILocation(line: 73, column: 8, scope: !259)
!259 = distinct !DILexicalBlock(scope: !254, file: !209, line: 73, column: 8)
!260 = !DILocation(line: 73, column: 8, scope: !254)
!261 = !DILocation(line: 75, column: 24, scope: !262)
!262 = distinct !DILexicalBlock(scope: !259, file: !209, line: 74, column: 5)
!263 = !DILocation(line: 75, column: 14, scope: !262)
!264 = !DILocation(line: 76, column: 13, scope: !265)
!265 = distinct !DILexicalBlock(scope: !262, file: !209, line: 76, column: 13)
!266 = !DILocation(line: 76, column: 18, scope: !265)
!267 = !DILocation(line: 76, column: 13, scope: !262)
!268 = !DILocation(line: 76, column: 28, scope: !269)
!269 = distinct !DILexicalBlock(scope: !265, file: !209, line: 76, column: 27)
!270 = !DILocation(line: 78, column: 18, scope: !262)
!271 = !DILocation(line: 78, column: 9, scope: !262)
!272 = !DILocation(line: 79, column: 5, scope: !262)
!273 = !DILocation(line: 82, column: 24, scope: !274)
!274 = distinct !DILexicalBlock(scope: !259, file: !209, line: 81, column: 5)
!275 = !DILocation(line: 82, column: 14, scope: !274)
!276 = !DILocation(line: 83, column: 13, scope: !277)
!277 = distinct !DILexicalBlock(scope: !274, file: !209, line: 83, column: 13)
!278 = !DILocation(line: 83, column: 18, scope: !277)
!279 = !DILocation(line: 83, column: 13, scope: !274)
!280 = !DILocation(line: 83, column: 28, scope: !281)
!281 = distinct !DILexicalBlock(scope: !277, file: !209, line: 83, column: 27)
!282 = !DILocation(line: 85, column: 18, scope: !274)
!283 = !DILocation(line: 85, column: 9, scope: !274)
!284 = !DILocation(line: 87, column: 8, scope: !285)
!285 = distinct !DILexicalBlock(scope: !254, file: !209, line: 87, column: 8)
!286 = !DILocation(line: 87, column: 8, scope: !254)
!287 = !DILocation(line: 92, column: 5, scope: !288)
!288 = distinct !DILexicalBlock(scope: !285, file: !209, line: 88, column: 5)
!289 = !DILocation(line: 99, column: 1, scope: !254)
!290 = distinct !DISubprogram(name: "goodG2B", scope: !209, file: !209, line: 104, type: !205, scopeLine: 105, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !17, retainedNodes: !36)
!291 = !DILocalVariable(name: "data", scope: !290, file: !209, line: 106, type: !21)
!292 = !DILocation(line: 106, column: 12, scope: !290)
!293 = !DILocation(line: 108, column: 10, scope: !290)
!294 = !DILocation(line: 109, column: 8, scope: !295)
!295 = distinct !DILexicalBlock(scope: !290, file: !209, line: 109, column: 8)
!296 = !DILocation(line: 109, column: 8, scope: !290)
!297 = !DILocation(line: 111, column: 24, scope: !298)
!298 = distinct !DILexicalBlock(scope: !295, file: !209, line: 110, column: 5)
!299 = !DILocation(line: 111, column: 14, scope: !298)
!300 = !DILocation(line: 112, column: 13, scope: !301)
!301 = distinct !DILexicalBlock(scope: !298, file: !209, line: 112, column: 13)
!302 = !DILocation(line: 112, column: 18, scope: !301)
!303 = !DILocation(line: 112, column: 13, scope: !298)
!304 = !DILocation(line: 112, column: 28, scope: !305)
!305 = distinct !DILexicalBlock(scope: !301, file: !209, line: 112, column: 27)
!306 = !DILocation(line: 114, column: 5, scope: !298)
!307 = !DILocation(line: 117, column: 24, scope: !308)
!308 = distinct !DILexicalBlock(scope: !295, file: !209, line: 116, column: 5)
!309 = !DILocation(line: 117, column: 14, scope: !308)
!310 = !DILocation(line: 118, column: 13, scope: !311)
!311 = distinct !DILexicalBlock(scope: !308, file: !209, line: 118, column: 13)
!312 = !DILocation(line: 118, column: 18, scope: !311)
!313 = !DILocation(line: 118, column: 13, scope: !308)
!314 = !DILocation(line: 118, column: 28, scope: !315)
!315 = distinct !DILexicalBlock(scope: !311, file: !209, line: 118, column: 27)
!316 = !DILocation(line: 121, column: 8, scope: !317)
!317 = distinct !DILexicalBlock(scope: !290, file: !209, line: 121, column: 8)
!318 = !DILocation(line: 121, column: 8, scope: !290)
!319 = !DILocation(line: 124, column: 18, scope: !320)
!320 = distinct !DILexicalBlock(scope: !317, file: !209, line: 122, column: 5)
!321 = !DILocation(line: 124, column: 9, scope: !320)
!322 = !DILocation(line: 125, column: 5, scope: !320)
!323 = !DILocation(line: 129, column: 18, scope: !324)
!324 = distinct !DILexicalBlock(scope: !317, file: !209, line: 127, column: 5)
!325 = !DILocation(line: 129, column: 9, scope: !324)
!326 = !DILocation(line: 131, column: 1, scope: !290)
