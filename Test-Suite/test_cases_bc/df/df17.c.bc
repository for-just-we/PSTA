; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/df/df17.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df17.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@CWE415_Double_Free__malloc_free_struct_45_badData = internal global ptr null, align 8, !dbg !17
@CWE415_Double_Free__malloc_free_struct_45_goodG2BData = internal global ptr null, align 8, !dbg !33
@CWE415_Double_Free__malloc_free_struct_45_goodB2GData = internal global ptr null, align 8, !dbg !36

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !46 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !50, metadata !DIExpression()), !dbg !51
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !54
  ret void, !dbg !55
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !56 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !57, metadata !DIExpression()), !dbg !58
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !61
  ret void, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !63 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !64, metadata !DIExpression()), !dbg !65
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !66, metadata !DIExpression()), !dbg !67
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !68
  ret void, !dbg !69
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !70 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !71, metadata !DIExpression()), !dbg !72
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !75
  ret void, !dbg !76
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !77 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !78, metadata !DIExpression()), !dbg !79
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !82
  ret void, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !84 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !85, metadata !DIExpression()), !dbg !86
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !87, metadata !DIExpression()), !dbg !88
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !89
  ret void, !dbg !90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !91 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, ptr %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !97
  ret ptr %call, !dbg !98
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, ptr %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !103
  ret ptr %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !105 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !106, metadata !DIExpression()), !dbg !107
  %0 = load i32, ptr %n.addr, align 4, !dbg !108
  %conv = sext i32 %0 to i64, !dbg !108
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !109
  ret ptr %call, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !111 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !112, metadata !DIExpression()), !dbg !113
  %0 = load i32, ptr %n.addr, align 4, !dbg !114
  %conv = sext i32 %0 to i64, !dbg !114
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !115
  ret ptr %call, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !117 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !118, metadata !DIExpression()), !dbg !119
  %0 = load i32, ptr %n.addr, align 4, !dbg !120
  %conv = sext i32 %0 to i64, !dbg !120
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !121
  ret ptr %call, !dbg !122
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !123 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !124, metadata !DIExpression()), !dbg !125
  %0 = load i32, ptr %n.addr, align 4, !dbg !126
  %conv = sext i32 %0 to i64, !dbg !126
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !127
  ret ptr %call, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !129 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !130, metadata !DIExpression()), !dbg !131
  %0 = load i32, ptr %n.addr, align 4, !dbg !132
  %conv = sext i32 %0 to i64, !dbg !132
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !133
  ret ptr %call, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !135 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !136, metadata !DIExpression()), !dbg !137
  %0 = load i32, ptr %n.addr, align 4, !dbg !138
  %conv = sext i32 %0 to i64, !dbg !138
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !139
  ret ptr %call, !dbg !140
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !141 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !144, metadata !DIExpression()), !dbg !145
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !146, metadata !DIExpression()), !dbg !147
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !148
  ret void, !dbg !149
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !150 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !154, metadata !DIExpression()), !dbg !155
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !156, metadata !DIExpression()), !dbg !157
  ret void, !dbg !158
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !159 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !160, metadata !DIExpression()), !dbg !161
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !162, metadata !DIExpression()), !dbg !163
  ret void, !dbg !164
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !165 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !168, metadata !DIExpression()), !dbg !169
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !170, metadata !DIExpression()), !dbg !171
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !172, metadata !DIExpression()), !dbg !173
  ret void, !dbg !174
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !175 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !178, metadata !DIExpression()), !dbg !179
  ret void, !dbg !180
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !181 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !182, metadata !DIExpression()), !dbg !183
  %0 = load ptr, ptr %str.addr, align 8, !dbg !184
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !185
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !186
  %call2 = call i32 @getchar(), !dbg !187
  ret void, !dbg !188
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !189 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !193, metadata !DIExpression()), !dbg !194
  %0 = load ptr, ptr %p.addr, align 8, !dbg !195
  store i32 0, ptr %0, align 4, !dbg !196
  %1 = load ptr, ptr %retval, align 8, !dbg !197
  ret ptr %1, !dbg !197
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !198 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !199, metadata !DIExpression()), !dbg !200
  %0 = load ptr, ptr %p.addr, align 8, !dbg !201
  store i32 0, ptr %0, align 4, !dbg !202
  %1 = load ptr, ptr %retval, align 8, !dbg !203
  ret ptr %1, !dbg !203
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !204 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !205, metadata !DIExpression()), !dbg !206
  %0 = load ptr, ptr %p.addr, align 8, !dbg !207
  call void @free(ptr noundef %0) #7, !dbg !208
  %1 = load ptr, ptr %retval, align 8, !dbg !209
  ret ptr %1, !dbg !209
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !210 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !211, metadata !DIExpression()), !dbg !212
  %0 = load ptr, ptr %p.addr, align 8, !dbg !213
  call void @free(ptr noundef %0) #7, !dbg !214
  %1 = load ptr, ptr %retval, align 8, !dbg !215
  ret ptr %1, !dbg !215
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !216 {
entry:
  ret void, !dbg !219
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_struct_45_bad() #0 !dbg !220 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !221, metadata !DIExpression()), !dbg !222
  store ptr null, ptr %data, align 8, !dbg !223
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !224
  store ptr %call, ptr %data, align 8, !dbg !225
  %0 = load ptr, ptr %data, align 8, !dbg !226
  %cmp = icmp eq ptr %0, null, !dbg !228
  br i1 %cmp, label %if.then, label %if.end, !dbg !229

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !230
  unreachable, !dbg !230

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !232
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !233
  %2 = load ptr, ptr %data, align 8, !dbg !234
  store ptr %2, ptr @CWE415_Double_Free__malloc_free_struct_45_badData, align 8, !dbg !235
  call void @badSink(), !dbg !236
  ret void, !dbg !237
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_struct_45_good() #0 !dbg !238 {
entry:
  call void @goodG2B(), !dbg !239
  call void @goodB2G(), !dbg !240
  ret void, !dbg !241
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !242 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !246, metadata !DIExpression()), !dbg !247
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !248, metadata !DIExpression()), !dbg !249
  %call = call i64 @time(ptr noundef null) #7, !dbg !250
  %conv = trunc i64 %call to i32, !dbg !251
  call void @srand(i32 noundef %conv) #7, !dbg !252
  call void @CWE415_Double_Free__malloc_free_struct_45_good(), !dbg !253
  call void @CWE415_Double_Free__malloc_free_struct_45_bad(), !dbg !254
  ret i32 0, !dbg !255
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @badSink() #0 !dbg !256 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !257, metadata !DIExpression()), !dbg !258
  %0 = load ptr, ptr @CWE415_Double_Free__malloc_free_struct_45_badData, align 8, !dbg !259
  store ptr %0, ptr %data, align 8, !dbg !258
  %1 = load ptr, ptr %data, align 8, !dbg !260
  %call = call ptr @DOUBLEFREE(ptr noundef %1), !dbg !261
  ret void, !dbg !262
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !263 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !264, metadata !DIExpression()), !dbg !265
  store ptr null, ptr %data, align 8, !dbg !266
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !267
  store ptr %call, ptr %data, align 8, !dbg !268
  %0 = load ptr, ptr %data, align 8, !dbg !269
  %cmp = icmp eq ptr %0, null, !dbg !271
  br i1 %cmp, label %if.then, label %if.end, !dbg !272

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !273
  unreachable, !dbg !273

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !275
  store ptr %1, ptr @CWE415_Double_Free__malloc_free_struct_45_goodG2BData, align 8, !dbg !276
  call void @goodG2BSink(), !dbg !277
  ret void, !dbg !278
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2BSink() #0 !dbg !279 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !280, metadata !DIExpression()), !dbg !281
  %0 = load ptr, ptr @CWE415_Double_Free__malloc_free_struct_45_goodG2BData, align 8, !dbg !282
  store ptr %0, ptr %data, align 8, !dbg !281
  %1 = load ptr, ptr %data, align 8, !dbg !283
  %call = call ptr @SAFEFREE(ptr noundef %1), !dbg !284
  ret void, !dbg !285
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !286 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !287, metadata !DIExpression()), !dbg !288
  store ptr null, ptr %data, align 8, !dbg !289
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !290
  store ptr %call, ptr %data, align 8, !dbg !291
  %0 = load ptr, ptr %data, align 8, !dbg !292
  %cmp = icmp eq ptr %0, null, !dbg !294
  br i1 %cmp, label %if.then, label %if.end, !dbg !295

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !296
  unreachable, !dbg !296

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !298
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !299
  %2 = load ptr, ptr %data, align 8, !dbg !300
  store ptr %2, ptr @CWE415_Double_Free__malloc_free_struct_45_goodB2GData, align 8, !dbg !301
  call void @goodB2GSink(), !dbg !302
  ret void, !dbg !303
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2GSink() #0 !dbg !304 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !305, metadata !DIExpression()), !dbg !306
  %0 = load ptr, ptr @CWE415_Double_Free__malloc_free_struct_45_goodB2GData, align 8, !dbg !307
  store ptr %0, ptr %data, align 8, !dbg !306
  ret void, !dbg !308
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!38, !39, !40, !41, !42, !43, !44}
!llvm.ident = !{!45}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "CWE415_Double_Free__malloc_free_struct_45_badData", scope: !19, file: !35, line: 31, type: !23, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !32, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df17.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "fa326b89cda6d9d0c2704b875b33a83b")
!21 = !{!22, !23, !31}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !25, line: 100, baseType: !26)
!25 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !25, line: 96, size: 64, elements: !27)
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !26, file: !25, line: 98, baseType: !29, size: 32)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !26, file: !25, line: 99, baseType: !29, size: 32, offset: 32)
!31 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!32 = !{!0, !7, !12, !17, !33, !36}
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "CWE415_Double_Free__malloc_free_struct_45_goodG2BData", scope: !19, file: !35, line: 32, type: !23, isLocal: true, isDefinition: true)
!35 = !DIFile(filename: "src/df/df17.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "fa326b89cda6d9d0c2704b875b33a83b")
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "CWE415_Double_Free__malloc_free_struct_45_goodB2GData", scope: !19, file: !35, line: 33, type: !23, isLocal: true, isDefinition: true)
!38 = !{i32 7, !"Dwarf Version", i32 5}
!39 = !{i32 2, !"Debug Info Version", i32 3}
!40 = !{i32 1, !"wchar_size", i32 4}
!41 = !{i32 8, !"PIC Level", i32 2}
!42 = !{i32 7, !"PIE Level", i32 2}
!43 = !{i32 7, !"uwtable", i32 2}
!44 = !{i32 7, !"frame-pointer", i32 2}
!45 = !{!"clang version 16.0.0"}
!46 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !47, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!47 = !DISubroutineType(types: !48)
!48 = !{null, !22, !22}
!49 = !{}
!50 = !DILocalVariable(name: "p", arg: 1, scope: !46, file: !2, line: 4, type: !22)
!51 = !DILocation(line: 4, column: 22, scope: !46)
!52 = !DILocalVariable(name: "q", arg: 2, scope: !46, file: !2, line: 4, type: !22)
!53 = !DILocation(line: 4, column: 31, scope: !46)
!54 = !DILocation(line: 5, column: 3, scope: !46)
!55 = !DILocation(line: 6, column: 1, scope: !46)
!56 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !47, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!57 = !DILocalVariable(name: "p", arg: 1, scope: !56, file: !2, line: 8, type: !22)
!58 = !DILocation(line: 8, column: 25, scope: !56)
!59 = !DILocalVariable(name: "q", arg: 2, scope: !56, file: !2, line: 8, type: !22)
!60 = !DILocation(line: 8, column: 34, scope: !56)
!61 = !DILocation(line: 9, column: 3, scope: !56)
!62 = !DILocation(line: 10, column: 1, scope: !56)
!63 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !47, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!64 = !DILocalVariable(name: "p", arg: 1, scope: !63, file: !2, line: 12, type: !22)
!65 = !DILocation(line: 12, column: 21, scope: !63)
!66 = !DILocalVariable(name: "q", arg: 2, scope: !63, file: !2, line: 12, type: !22)
!67 = !DILocation(line: 12, column: 30, scope: !63)
!68 = !DILocation(line: 13, column: 3, scope: !63)
!69 = !DILocation(line: 14, column: 1, scope: !63)
!70 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !47, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!71 = !DILocalVariable(name: "p", arg: 1, scope: !70, file: !2, line: 16, type: !22)
!72 = !DILocation(line: 16, column: 20, scope: !70)
!73 = !DILocalVariable(name: "q", arg: 2, scope: !70, file: !2, line: 16, type: !22)
!74 = !DILocation(line: 16, column: 29, scope: !70)
!75 = !DILocation(line: 17, column: 3, scope: !70)
!76 = !DILocation(line: 18, column: 1, scope: !70)
!77 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !47, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!78 = !DILocalVariable(name: "p", arg: 1, scope: !77, file: !2, line: 20, type: !22)
!79 = !DILocation(line: 20, column: 34, scope: !77)
!80 = !DILocalVariable(name: "q", arg: 2, scope: !77, file: !2, line: 20, type: !22)
!81 = !DILocation(line: 20, column: 43, scope: !77)
!82 = !DILocation(line: 21, column: 3, scope: !77)
!83 = !DILocation(line: 22, column: 1, scope: !77)
!84 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !47, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!85 = !DILocalVariable(name: "p", arg: 1, scope: !84, file: !2, line: 24, type: !22)
!86 = !DILocation(line: 24, column: 33, scope: !84)
!87 = !DILocalVariable(name: "q", arg: 2, scope: !84, file: !2, line: 24, type: !22)
!88 = !DILocation(line: 24, column: 42, scope: !84)
!89 = !DILocation(line: 25, column: 3, scope: !84)
!90 = !DILocation(line: 26, column: 1, scope: !84)
!91 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !92, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!92 = !DISubroutineType(types: !93)
!93 = !{!22, !29}
!94 = !DILocalVariable(name: "n", arg: 1, scope: !91, file: !2, line: 29, type: !29)
!95 = !DILocation(line: 29, column: 22, scope: !91)
!96 = !DILocation(line: 30, column: 17, scope: !91)
!97 = !DILocation(line: 30, column: 10, scope: !91)
!98 = !DILocation(line: 30, column: 3, scope: !91)
!99 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !92, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !2, line: 33, type: !29)
!101 = !DILocation(line: 33, column: 28, scope: !99)
!102 = !DILocation(line: 34, column: 19, scope: !99)
!103 = !DILocation(line: 34, column: 12, scope: !99)
!104 = !DILocation(line: 34, column: 5, scope: !99)
!105 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !92, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!106 = !DILocalVariable(name: "n", arg: 1, scope: !105, file: !2, line: 37, type: !29)
!107 = !DILocation(line: 37, column: 21, scope: !105)
!108 = !DILocation(line: 38, column: 17, scope: !105)
!109 = !DILocation(line: 38, column: 10, scope: !105)
!110 = !DILocation(line: 38, column: 3, scope: !105)
!111 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !92, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!112 = !DILocalVariable(name: "n", arg: 1, scope: !111, file: !2, line: 41, type: !29)
!113 = !DILocation(line: 41, column: 21, scope: !111)
!114 = !DILocation(line: 42, column: 17, scope: !111)
!115 = !DILocation(line: 42, column: 10, scope: !111)
!116 = !DILocation(line: 42, column: 3, scope: !111)
!117 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !92, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!118 = !DILocalVariable(name: "n", arg: 1, scope: !117, file: !2, line: 45, type: !29)
!119 = !DILocation(line: 45, column: 21, scope: !117)
!120 = !DILocation(line: 46, column: 17, scope: !117)
!121 = !DILocation(line: 46, column: 10, scope: !117)
!122 = !DILocation(line: 46, column: 3, scope: !117)
!123 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !92, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!124 = !DILocalVariable(name: "n", arg: 1, scope: !123, file: !2, line: 49, type: !29)
!125 = !DILocation(line: 49, column: 21, scope: !123)
!126 = !DILocation(line: 50, column: 17, scope: !123)
!127 = !DILocation(line: 50, column: 10, scope: !123)
!128 = !DILocation(line: 50, column: 3, scope: !123)
!129 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !92, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!130 = !DILocalVariable(name: "n", arg: 1, scope: !129, file: !2, line: 53, type: !29)
!131 = !DILocation(line: 53, column: 21, scope: !129)
!132 = !DILocation(line: 54, column: 17, scope: !129)
!133 = !DILocation(line: 54, column: 10, scope: !129)
!134 = !DILocation(line: 54, column: 3, scope: !129)
!135 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !92, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!136 = !DILocalVariable(name: "n", arg: 1, scope: !135, file: !2, line: 57, type: !29)
!137 = !DILocation(line: 57, column: 18, scope: !135)
!138 = !DILocation(line: 58, column: 17, scope: !135)
!139 = !DILocation(line: 58, column: 10, scope: !135)
!140 = !DILocation(line: 58, column: 3, scope: !135)
!141 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !142, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !29, !29}
!144 = !DILocalVariable(name: "id", arg: 1, scope: !141, file: !2, line: 67, type: !29)
!145 = !DILocation(line: 67, column: 20, scope: !141)
!146 = !DILocalVariable(name: "flags", arg: 2, scope: !141, file: !2, line: 67, type: !29)
!147 = !DILocation(line: 67, column: 28, scope: !141)
!148 = !DILocation(line: 68, column: 3, scope: !141)
!149 = !DILocation(line: 69, column: 1, scope: !141)
!150 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !151, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!151 = !DISubroutineType(types: !152)
!152 = !{null, !29, !153}
!153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!154 = !DILocalVariable(name: "thdid", arg: 1, scope: !150, file: !2, line: 79, type: !29)
!155 = !DILocation(line: 79, column: 21, scope: !150)
!156 = !DILocalVariable(name: "cxt", arg: 2, scope: !150, file: !2, line: 79, type: !153)
!157 = !DILocation(line: 79, column: 34, scope: !150)
!158 = !DILocation(line: 81, column: 1, scope: !150)
!159 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !151, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!160 = !DILocalVariable(name: "thdid", arg: 1, scope: !159, file: !2, line: 82, type: !29)
!161 = !DILocation(line: 82, column: 21, scope: !159)
!162 = !DILocalVariable(name: "cxt", arg: 2, scope: !159, file: !2, line: 82, type: !153)
!163 = !DILocation(line: 82, column: 33, scope: !159)
!164 = !DILocation(line: 84, column: 1, scope: !159)
!165 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !166, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!166 = !DISubroutineType(types: !167)
!167 = !{null, !29, !153, !153}
!168 = !DILocalVariable(name: "thdid", arg: 1, scope: !165, file: !2, line: 85, type: !29)
!169 = !DILocation(line: 85, column: 26, scope: !165)
!170 = !DILocalVariable(name: "cxt", arg: 2, scope: !165, file: !2, line: 85, type: !153)
!171 = !DILocation(line: 85, column: 38, scope: !165)
!172 = !DILocalVariable(name: "lev", arg: 3, scope: !165, file: !2, line: 85, type: !153)
!173 = !DILocation(line: 85, column: 49, scope: !165)
!174 = !DILocation(line: 87, column: 1, scope: !165)
!175 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !176, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!176 = !DISubroutineType(types: !177)
!177 = !{null, !153}
!178 = !DILocalVariable(name: "lockname", arg: 1, scope: !175, file: !2, line: 89, type: !153)
!179 = !DILocation(line: 89, column: 17, scope: !175)
!180 = !DILocation(line: 91, column: 1, scope: !175)
!181 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !176, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!182 = !DILocalVariable(name: "str", arg: 1, scope: !181, file: !2, line: 93, type: !153)
!183 = !DILocation(line: 93, column: 18, scope: !181)
!184 = !DILocation(line: 94, column: 18, scope: !181)
!185 = !DILocation(line: 94, column: 3, scope: !181)
!186 = !DILocation(line: 95, column: 3, scope: !181)
!187 = !DILocation(line: 96, column: 3, scope: !181)
!188 = !DILocation(line: 97, column: 1, scope: !181)
!189 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !190, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!190 = !DISubroutineType(types: !191)
!191 = !{!22, !192}
!192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!193 = !DILocalVariable(name: "p", arg: 1, scope: !189, file: !2, line: 100, type: !192)
!194 = !DILocation(line: 100, column: 24, scope: !189)
!195 = !DILocation(line: 101, column: 6, scope: !189)
!196 = !DILocation(line: 101, column: 8, scope: !189)
!197 = !DILocation(line: 102, column: 1, scope: !189)
!198 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !190, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!199 = !DILocalVariable(name: "p", arg: 1, scope: !198, file: !2, line: 104, type: !192)
!200 = !DILocation(line: 104, column: 20, scope: !198)
!201 = !DILocation(line: 105, column: 6, scope: !198)
!202 = !DILocation(line: 105, column: 8, scope: !198)
!203 = !DILocation(line: 106, column: 1, scope: !198)
!204 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !190, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!205 = !DILocalVariable(name: "p", arg: 1, scope: !204, file: !2, line: 110, type: !192)
!206 = !DILocation(line: 110, column: 22, scope: !204)
!207 = !DILocation(line: 111, column: 10, scope: !204)
!208 = !DILocation(line: 111, column: 5, scope: !204)
!209 = !DILocation(line: 112, column: 1, scope: !204)
!210 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !190, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!211 = !DILocalVariable(name: "p", arg: 1, scope: !210, file: !2, line: 115, type: !192)
!212 = !DILocation(line: 115, column: 24, scope: !210)
!213 = !DILocation(line: 116, column: 10, scope: !210)
!214 = !DILocation(line: 116, column: 5, scope: !210)
!215 = !DILocation(line: 117, column: 1, scope: !210)
!216 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !217, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!217 = !DISubroutineType(types: !218)
!218 = !{null}
!219 = !DILocation(line: 135, column: 20, scope: !216)
!220 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_struct_45_bad", scope: !35, file: !35, line: 43, type: !217, scopeLine: 44, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!221 = !DILocalVariable(name: "data", scope: !220, file: !35, line: 45, type: !23)
!222 = !DILocation(line: 45, column: 21, scope: !220)
!223 = !DILocation(line: 47, column: 10, scope: !220)
!224 = !DILocation(line: 48, column: 29, scope: !220)
!225 = !DILocation(line: 48, column: 10, scope: !220)
!226 = !DILocation(line: 49, column: 9, scope: !227)
!227 = distinct !DILexicalBlock(scope: !220, file: !35, line: 49, column: 9)
!228 = !DILocation(line: 49, column: 14, scope: !227)
!229 = !DILocation(line: 49, column: 9, scope: !220)
!230 = !DILocation(line: 49, column: 24, scope: !231)
!231 = distinct !DILexicalBlock(scope: !227, file: !35, line: 49, column: 23)
!232 = !DILocation(line: 51, column: 14, scope: !220)
!233 = !DILocation(line: 51, column: 5, scope: !220)
!234 = !DILocation(line: 52, column: 57, scope: !220)
!235 = !DILocation(line: 52, column: 55, scope: !220)
!236 = !DILocation(line: 53, column: 5, scope: !220)
!237 = !DILocation(line: 54, column: 1, scope: !220)
!238 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_struct_45_good", scope: !35, file: !35, line: 99, type: !217, scopeLine: 100, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!239 = !DILocation(line: 101, column: 5, scope: !238)
!240 = !DILocation(line: 102, column: 5, scope: !238)
!241 = !DILocation(line: 103, column: 1, scope: !238)
!242 = distinct !DISubprogram(name: "main", scope: !35, file: !35, line: 112, type: !243, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !49)
!243 = !DISubroutineType(types: !244)
!244 = !{!29, !29, !245}
!245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !153, size: 64)
!246 = !DILocalVariable(name: "argc", arg: 1, scope: !242, file: !35, line: 112, type: !29)
!247 = !DILocation(line: 112, column: 14, scope: !242)
!248 = !DILocalVariable(name: "argv", arg: 2, scope: !242, file: !35, line: 112, type: !245)
!249 = !DILocation(line: 112, column: 27, scope: !242)
!250 = !DILocation(line: 115, column: 22, scope: !242)
!251 = !DILocation(line: 115, column: 12, scope: !242)
!252 = !DILocation(line: 115, column: 5, scope: !242)
!253 = !DILocation(line: 116, column: 5, scope: !242)
!254 = !DILocation(line: 117, column: 5, scope: !242)
!255 = !DILocation(line: 118, column: 5, scope: !242)
!256 = distinct !DISubprogram(name: "badSink", scope: !35, file: !35, line: 36, type: !217, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !49)
!257 = !DILocalVariable(name: "data", scope: !256, file: !35, line: 38, type: !23)
!258 = !DILocation(line: 38, column: 21, scope: !256)
!259 = !DILocation(line: 38, column: 28, scope: !256)
!260 = !DILocation(line: 40, column: 16, scope: !256)
!261 = !DILocation(line: 40, column: 5, scope: !256)
!262 = !DILocation(line: 41, column: 1, scope: !256)
!263 = distinct !DISubprogram(name: "goodG2B", scope: !35, file: !35, line: 65, type: !217, scopeLine: 66, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !49)
!264 = !DILocalVariable(name: "data", scope: !263, file: !35, line: 67, type: !23)
!265 = !DILocation(line: 67, column: 21, scope: !263)
!266 = !DILocation(line: 69, column: 10, scope: !263)
!267 = !DILocation(line: 70, column: 29, scope: !263)
!268 = !DILocation(line: 70, column: 10, scope: !263)
!269 = !DILocation(line: 71, column: 9, scope: !270)
!270 = distinct !DILexicalBlock(scope: !263, file: !35, line: 71, column: 9)
!271 = !DILocation(line: 71, column: 14, scope: !270)
!272 = !DILocation(line: 71, column: 9, scope: !263)
!273 = !DILocation(line: 71, column: 24, scope: !274)
!274 = distinct !DILexicalBlock(scope: !270, file: !35, line: 71, column: 23)
!275 = !DILocation(line: 73, column: 61, scope: !263)
!276 = !DILocation(line: 73, column: 59, scope: !263)
!277 = !DILocation(line: 74, column: 5, scope: !263)
!278 = !DILocation(line: 75, column: 1, scope: !263)
!279 = distinct !DISubprogram(name: "goodG2BSink", scope: !35, file: !35, line: 58, type: !217, scopeLine: 59, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !49)
!280 = !DILocalVariable(name: "data", scope: !279, file: !35, line: 60, type: !23)
!281 = !DILocation(line: 60, column: 21, scope: !279)
!282 = !DILocation(line: 60, column: 28, scope: !279)
!283 = !DILocation(line: 62, column: 14, scope: !279)
!284 = !DILocation(line: 62, column: 5, scope: !279)
!285 = !DILocation(line: 63, column: 1, scope: !279)
!286 = distinct !DISubprogram(name: "goodB2G", scope: !35, file: !35, line: 86, type: !217, scopeLine: 87, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !49)
!287 = !DILocalVariable(name: "data", scope: !286, file: !35, line: 88, type: !23)
!288 = !DILocation(line: 88, column: 21, scope: !286)
!289 = !DILocation(line: 90, column: 10, scope: !286)
!290 = !DILocation(line: 91, column: 29, scope: !286)
!291 = !DILocation(line: 91, column: 10, scope: !286)
!292 = !DILocation(line: 92, column: 9, scope: !293)
!293 = distinct !DILexicalBlock(scope: !286, file: !35, line: 92, column: 9)
!294 = !DILocation(line: 92, column: 14, scope: !293)
!295 = !DILocation(line: 92, column: 9, scope: !286)
!296 = !DILocation(line: 92, column: 24, scope: !297)
!297 = distinct !DILexicalBlock(scope: !293, file: !35, line: 92, column: 23)
!298 = !DILocation(line: 94, column: 14, scope: !286)
!299 = !DILocation(line: 94, column: 5, scope: !286)
!300 = !DILocation(line: 95, column: 61, scope: !286)
!301 = !DILocation(line: 95, column: 59, scope: !286)
!302 = !DILocation(line: 96, column: 5, scope: !286)
!303 = !DILocation(line: 97, column: 1, scope: !286)
!304 = distinct !DISubprogram(name: "goodB2GSink", scope: !35, file: !35, line: 78, type: !217, scopeLine: 79, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !49)
!305 = !DILocalVariable(name: "data", scope: !304, file: !35, line: 80, type: !23)
!306 = !DILocation(line: 80, column: 21, scope: !304)
!307 = !DILocation(line: 80, column: 28, scope: !304)
!308 = !DILocation(line: 84, column: 1, scope: !304)
