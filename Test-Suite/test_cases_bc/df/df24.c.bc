; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/df/df24.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df24.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@staticFive = internal global i32 5, align 4, !dbg !17
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !29

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !43 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !47, metadata !DIExpression()), !dbg !48
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !51
  ret void, !dbg !52
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !53 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !54, metadata !DIExpression()), !dbg !55
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !58
  ret void, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !60 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !61, metadata !DIExpression()), !dbg !62
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !63, metadata !DIExpression()), !dbg !64
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !65
  ret void, !dbg !66
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !67 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !68, metadata !DIExpression()), !dbg !69
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !70, metadata !DIExpression()), !dbg !71
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !72
  ret void, !dbg !73
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !74 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !75, metadata !DIExpression()), !dbg !76
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !77, metadata !DIExpression()), !dbg !78
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !79
  ret void, !dbg !80
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !81 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !82, metadata !DIExpression()), !dbg !83
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !84, metadata !DIExpression()), !dbg !85
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !86
  ret void, !dbg !87
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !88 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !91, metadata !DIExpression()), !dbg !92
  %0 = load i32, ptr %n.addr, align 4, !dbg !93
  %conv = sext i32 %0 to i64, !dbg !93
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !94
  ret ptr %call, !dbg !95
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !96 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %0 = load i32, ptr %n.addr, align 4, !dbg !99
  %conv = sext i32 %0 to i64, !dbg !99
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !100
  ret ptr %call, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !102 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %0 = load i32, ptr %n.addr, align 4, !dbg !105
  %conv = sext i32 %0 to i64, !dbg !105
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !106
  ret ptr %call, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !108 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !109, metadata !DIExpression()), !dbg !110
  %0 = load i32, ptr %n.addr, align 4, !dbg !111
  %conv = sext i32 %0 to i64, !dbg !111
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !112
  ret ptr %call, !dbg !113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !114 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %0 = load i32, ptr %n.addr, align 4, !dbg !117
  %conv = sext i32 %0 to i64, !dbg !117
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !118
  ret ptr %call, !dbg !119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !120 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !121, metadata !DIExpression()), !dbg !122
  %0 = load i32, ptr %n.addr, align 4, !dbg !123
  %conv = sext i32 %0 to i64, !dbg !123
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !124
  ret ptr %call, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !126 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !127, metadata !DIExpression()), !dbg !128
  %0 = load i32, ptr %n.addr, align 4, !dbg !129
  %conv = sext i32 %0 to i64, !dbg !129
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !130
  ret ptr %call, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !132 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !133, metadata !DIExpression()), !dbg !134
  %0 = load i32, ptr %n.addr, align 4, !dbg !135
  %conv = sext i32 %0 to i64, !dbg !135
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !136
  ret ptr %call, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !138 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !141, metadata !DIExpression()), !dbg !142
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !143, metadata !DIExpression()), !dbg !144
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !145
  ret void, !dbg !146
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !147 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !151, metadata !DIExpression()), !dbg !152
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !153, metadata !DIExpression()), !dbg !154
  ret void, !dbg !155
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !156 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !157, metadata !DIExpression()), !dbg !158
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !159, metadata !DIExpression()), !dbg !160
  ret void, !dbg !161
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !162 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !165, metadata !DIExpression()), !dbg !166
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !167, metadata !DIExpression()), !dbg !168
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !169, metadata !DIExpression()), !dbg !170
  ret void, !dbg !171
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !172 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !175, metadata !DIExpression()), !dbg !176
  ret void, !dbg !177
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !178 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !179, metadata !DIExpression()), !dbg !180
  %0 = load ptr, ptr %str.addr, align 8, !dbg !181
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !182
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !183
  %call2 = call i32 @getchar(), !dbg !184
  ret void, !dbg !185
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !186 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !190, metadata !DIExpression()), !dbg !191
  %0 = load ptr, ptr %p.addr, align 8, !dbg !192
  store i32 0, ptr %0, align 4, !dbg !193
  %1 = load ptr, ptr %retval, align 8, !dbg !194
  ret ptr %1, !dbg !194
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !195 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !196, metadata !DIExpression()), !dbg !197
  %0 = load ptr, ptr %p.addr, align 8, !dbg !198
  store i32 0, ptr %0, align 4, !dbg !199
  %1 = load ptr, ptr %retval, align 8, !dbg !200
  ret ptr %1, !dbg !200
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !201 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !202, metadata !DIExpression()), !dbg !203
  %0 = load ptr, ptr %p.addr, align 8, !dbg !204
  call void @free(ptr noundef %0) #7, !dbg !205
  %1 = load ptr, ptr %retval, align 8, !dbg !206
  ret ptr %1, !dbg !206
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !207 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !208, metadata !DIExpression()), !dbg !209
  %0 = load ptr, ptr %p.addr, align 8, !dbg !210
  call void @free(ptr noundef %0) #7, !dbg !211
  %1 = load ptr, ptr %retval, align 8, !dbg !212
  ret ptr %1, !dbg !212
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !213 {
entry:
  ret void, !dbg !216
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_wchar_t_07_bad() #0 !dbg !217 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !218, metadata !DIExpression()), !dbg !219
  store ptr null, ptr %data, align 8, !dbg !220
  %0 = load i32, ptr @staticFive, align 4, !dbg !221
  %cmp = icmp eq i32 %0, 5, !dbg !223
  br i1 %cmp, label %if.then, label %if.end4, !dbg !224

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !225
  store ptr %call, ptr %data, align 8, !dbg !227
  %1 = load ptr, ptr %data, align 8, !dbg !228
  %cmp1 = icmp eq ptr %1, null, !dbg !230
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !231

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !232
  unreachable, !dbg !232

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !234
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !235
  br label %if.end4, !dbg !236

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !237
  %cmp5 = icmp eq i32 %3, 5, !dbg !239
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !240

if.then6:                                         ; preds = %if.end4
  %4 = load ptr, ptr %data, align 8, !dbg !241
  %call7 = call ptr @DOUBLEFREE(ptr noundef %4), !dbg !243
  br label %if.end8, !dbg !244

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !245
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_wchar_t_07_good() #0 !dbg !246 {
entry:
  call void @goodB2G1(), !dbg !247
  call void @goodB2G2(), !dbg !248
  call void @goodG2B1(), !dbg !249
  call void @goodG2B2(), !dbg !250
  ret void, !dbg !251
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !252 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !256, metadata !DIExpression()), !dbg !257
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !258, metadata !DIExpression()), !dbg !259
  %call = call i64 @time(ptr noundef null) #7, !dbg !260
  %conv = trunc i64 %call to i32, !dbg !261
  call void @srand(i32 noundef %conv) #7, !dbg !262
  call void @CWE415_Double_Free__malloc_free_wchar_t_07_good(), !dbg !263
  call void @CWE415_Double_Free__malloc_free_wchar_t_07_bad(), !dbg !264
  ret i32 0, !dbg !265
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !266 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !267, metadata !DIExpression()), !dbg !268
  store ptr null, ptr %data, align 8, !dbg !269
  %0 = load i32, ptr @staticFive, align 4, !dbg !270
  %cmp = icmp eq i32 %0, 5, !dbg !272
  br i1 %cmp, label %if.then, label %if.end4, !dbg !273

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !274
  store ptr %call, ptr %data, align 8, !dbg !276
  %1 = load ptr, ptr %data, align 8, !dbg !277
  %cmp1 = icmp eq ptr %1, null, !dbg !279
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !280

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !281
  unreachable, !dbg !281

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !283
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !284
  br label %if.end4, !dbg !285

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !286
  %cmp5 = icmp ne i32 %3, 5, !dbg !288
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !289

if.then6:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.3), !dbg !290
  br label %if.end7, !dbg !292

if.else:                                          ; preds = %if.end4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void, !dbg !293
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !294 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !295, metadata !DIExpression()), !dbg !296
  store ptr null, ptr %data, align 8, !dbg !297
  %0 = load i32, ptr @staticFive, align 4, !dbg !298
  %cmp = icmp eq i32 %0, 5, !dbg !300
  br i1 %cmp, label %if.then, label %if.end4, !dbg !301

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !302
  store ptr %call, ptr %data, align 8, !dbg !304
  %1 = load ptr, ptr %data, align 8, !dbg !305
  %cmp1 = icmp eq ptr %1, null, !dbg !307
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !308

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !309
  unreachable, !dbg !309

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !311
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !312
  br label %if.end4, !dbg !313

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !314
  %cmp5 = icmp eq i32 %3, 5, !dbg !316
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !317

if.then6:                                         ; preds = %if.end4
  br label %if.end7, !dbg !318

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !320
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !321 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !322, metadata !DIExpression()), !dbg !323
  store ptr null, ptr %data, align 8, !dbg !324
  %0 = load i32, ptr @staticFive, align 4, !dbg !325
  %cmp = icmp ne i32 %0, 5, !dbg !327
  br i1 %cmp, label %if.then, label %if.else, !dbg !328

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !329
  br label %if.end3, !dbg !331

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !332
  store ptr %call, ptr %data, align 8, !dbg !334
  %1 = load ptr, ptr %data, align 8, !dbg !335
  %cmp1 = icmp eq ptr %1, null, !dbg !337
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !338

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !339
  unreachable, !dbg !339

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %2 = load i32, ptr @staticFive, align 4, !dbg !341
  %cmp4 = icmp eq i32 %2, 5, !dbg !343
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !344

if.then5:                                         ; preds = %if.end3
  %3 = load ptr, ptr %data, align 8, !dbg !345
  %call6 = call ptr @SAFEFREE(ptr noundef %3), !dbg !347
  br label %if.end7, !dbg !348

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !349
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !350 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !351, metadata !DIExpression()), !dbg !352
  store ptr null, ptr %data, align 8, !dbg !353
  %0 = load i32, ptr @staticFive, align 4, !dbg !354
  %cmp = icmp eq i32 %0, 5, !dbg !356
  br i1 %cmp, label %if.then, label %if.end3, !dbg !357

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !358
  store ptr %call, ptr %data, align 8, !dbg !360
  %1 = load ptr, ptr %data, align 8, !dbg !361
  %cmp1 = icmp eq ptr %1, null, !dbg !363
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !364

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !365
  unreachable, !dbg !365

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !367

if.end3:                                          ; preds = %if.end, %entry
  %2 = load i32, ptr @staticFive, align 4, !dbg !368
  %cmp4 = icmp eq i32 %2, 5, !dbg !370
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !371

if.then5:                                         ; preds = %if.end3
  %3 = load ptr, ptr %data, align 8, !dbg !372
  %call6 = call ptr @SAFEFREE(ptr noundef %3), !dbg !374
  br label %if.end7, !dbg !375

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !376
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!35, !36, !37, !38, !39, !40, !41}
!llvm.ident = !{!42}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "staticFive", scope: !19, file: !31, line: 34, type: !26, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !28, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df24.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "092cfe7875d9aa00f5adb2e75196f0df")
!21 = !{!22, !23, !27}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !25, line: 74, baseType: !26)
!25 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!26 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!27 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!28 = !{!0, !7, !12, !17, !29}
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(scope: null, file: !31, line: 73, type: !32, isLocal: true, isDefinition: true)
!31 = !DIFile(filename: "src/df/df24.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "092cfe7875d9aa00f5adb2e75196f0df")
!32 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !33)
!33 = !{!34}
!34 = !DISubrange(count: 21)
!35 = !{i32 7, !"Dwarf Version", i32 5}
!36 = !{i32 2, !"Debug Info Version", i32 3}
!37 = !{i32 1, !"wchar_size", i32 4}
!38 = !{i32 8, !"PIC Level", i32 2}
!39 = !{i32 7, !"PIE Level", i32 2}
!40 = !{i32 7, !"uwtable", i32 2}
!41 = !{i32 7, !"frame-pointer", i32 2}
!42 = !{!"clang version 16.0.0"}
!43 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !44, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!44 = !DISubroutineType(types: !45)
!45 = !{null, !22, !22}
!46 = !{}
!47 = !DILocalVariable(name: "p", arg: 1, scope: !43, file: !2, line: 4, type: !22)
!48 = !DILocation(line: 4, column: 22, scope: !43)
!49 = !DILocalVariable(name: "q", arg: 2, scope: !43, file: !2, line: 4, type: !22)
!50 = !DILocation(line: 4, column: 31, scope: !43)
!51 = !DILocation(line: 5, column: 3, scope: !43)
!52 = !DILocation(line: 6, column: 1, scope: !43)
!53 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !44, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!54 = !DILocalVariable(name: "p", arg: 1, scope: !53, file: !2, line: 8, type: !22)
!55 = !DILocation(line: 8, column: 25, scope: !53)
!56 = !DILocalVariable(name: "q", arg: 2, scope: !53, file: !2, line: 8, type: !22)
!57 = !DILocation(line: 8, column: 34, scope: !53)
!58 = !DILocation(line: 9, column: 3, scope: !53)
!59 = !DILocation(line: 10, column: 1, scope: !53)
!60 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !44, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!61 = !DILocalVariable(name: "p", arg: 1, scope: !60, file: !2, line: 12, type: !22)
!62 = !DILocation(line: 12, column: 21, scope: !60)
!63 = !DILocalVariable(name: "q", arg: 2, scope: !60, file: !2, line: 12, type: !22)
!64 = !DILocation(line: 12, column: 30, scope: !60)
!65 = !DILocation(line: 13, column: 3, scope: !60)
!66 = !DILocation(line: 14, column: 1, scope: !60)
!67 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !44, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!68 = !DILocalVariable(name: "p", arg: 1, scope: !67, file: !2, line: 16, type: !22)
!69 = !DILocation(line: 16, column: 20, scope: !67)
!70 = !DILocalVariable(name: "q", arg: 2, scope: !67, file: !2, line: 16, type: !22)
!71 = !DILocation(line: 16, column: 29, scope: !67)
!72 = !DILocation(line: 17, column: 3, scope: !67)
!73 = !DILocation(line: 18, column: 1, scope: !67)
!74 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !44, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!75 = !DILocalVariable(name: "p", arg: 1, scope: !74, file: !2, line: 20, type: !22)
!76 = !DILocation(line: 20, column: 34, scope: !74)
!77 = !DILocalVariable(name: "q", arg: 2, scope: !74, file: !2, line: 20, type: !22)
!78 = !DILocation(line: 20, column: 43, scope: !74)
!79 = !DILocation(line: 21, column: 3, scope: !74)
!80 = !DILocation(line: 22, column: 1, scope: !74)
!81 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !44, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!82 = !DILocalVariable(name: "p", arg: 1, scope: !81, file: !2, line: 24, type: !22)
!83 = !DILocation(line: 24, column: 33, scope: !81)
!84 = !DILocalVariable(name: "q", arg: 2, scope: !81, file: !2, line: 24, type: !22)
!85 = !DILocation(line: 24, column: 42, scope: !81)
!86 = !DILocation(line: 25, column: 3, scope: !81)
!87 = !DILocation(line: 26, column: 1, scope: !81)
!88 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !89, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!89 = !DISubroutineType(types: !90)
!90 = !{!22, !26}
!91 = !DILocalVariable(name: "n", arg: 1, scope: !88, file: !2, line: 29, type: !26)
!92 = !DILocation(line: 29, column: 22, scope: !88)
!93 = !DILocation(line: 30, column: 17, scope: !88)
!94 = !DILocation(line: 30, column: 10, scope: !88)
!95 = !DILocation(line: 30, column: 3, scope: !88)
!96 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !89, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!97 = !DILocalVariable(name: "n", arg: 1, scope: !96, file: !2, line: 33, type: !26)
!98 = !DILocation(line: 33, column: 28, scope: !96)
!99 = !DILocation(line: 34, column: 19, scope: !96)
!100 = !DILocation(line: 34, column: 12, scope: !96)
!101 = !DILocation(line: 34, column: 5, scope: !96)
!102 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !89, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!103 = !DILocalVariable(name: "n", arg: 1, scope: !102, file: !2, line: 37, type: !26)
!104 = !DILocation(line: 37, column: 21, scope: !102)
!105 = !DILocation(line: 38, column: 17, scope: !102)
!106 = !DILocation(line: 38, column: 10, scope: !102)
!107 = !DILocation(line: 38, column: 3, scope: !102)
!108 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !89, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!109 = !DILocalVariable(name: "n", arg: 1, scope: !108, file: !2, line: 41, type: !26)
!110 = !DILocation(line: 41, column: 21, scope: !108)
!111 = !DILocation(line: 42, column: 17, scope: !108)
!112 = !DILocation(line: 42, column: 10, scope: !108)
!113 = !DILocation(line: 42, column: 3, scope: !108)
!114 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !89, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!115 = !DILocalVariable(name: "n", arg: 1, scope: !114, file: !2, line: 45, type: !26)
!116 = !DILocation(line: 45, column: 21, scope: !114)
!117 = !DILocation(line: 46, column: 17, scope: !114)
!118 = !DILocation(line: 46, column: 10, scope: !114)
!119 = !DILocation(line: 46, column: 3, scope: !114)
!120 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !89, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!121 = !DILocalVariable(name: "n", arg: 1, scope: !120, file: !2, line: 49, type: !26)
!122 = !DILocation(line: 49, column: 21, scope: !120)
!123 = !DILocation(line: 50, column: 17, scope: !120)
!124 = !DILocation(line: 50, column: 10, scope: !120)
!125 = !DILocation(line: 50, column: 3, scope: !120)
!126 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !89, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!127 = !DILocalVariable(name: "n", arg: 1, scope: !126, file: !2, line: 53, type: !26)
!128 = !DILocation(line: 53, column: 21, scope: !126)
!129 = !DILocation(line: 54, column: 17, scope: !126)
!130 = !DILocation(line: 54, column: 10, scope: !126)
!131 = !DILocation(line: 54, column: 3, scope: !126)
!132 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !89, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!133 = !DILocalVariable(name: "n", arg: 1, scope: !132, file: !2, line: 57, type: !26)
!134 = !DILocation(line: 57, column: 18, scope: !132)
!135 = !DILocation(line: 58, column: 17, scope: !132)
!136 = !DILocation(line: 58, column: 10, scope: !132)
!137 = !DILocation(line: 58, column: 3, scope: !132)
!138 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !139, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!139 = !DISubroutineType(types: !140)
!140 = !{null, !26, !26}
!141 = !DILocalVariable(name: "id", arg: 1, scope: !138, file: !2, line: 67, type: !26)
!142 = !DILocation(line: 67, column: 20, scope: !138)
!143 = !DILocalVariable(name: "flags", arg: 2, scope: !138, file: !2, line: 67, type: !26)
!144 = !DILocation(line: 67, column: 28, scope: !138)
!145 = !DILocation(line: 68, column: 3, scope: !138)
!146 = !DILocation(line: 69, column: 1, scope: !138)
!147 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !148, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!148 = !DISubroutineType(types: !149)
!149 = !{null, !26, !150}
!150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!151 = !DILocalVariable(name: "thdid", arg: 1, scope: !147, file: !2, line: 79, type: !26)
!152 = !DILocation(line: 79, column: 21, scope: !147)
!153 = !DILocalVariable(name: "cxt", arg: 2, scope: !147, file: !2, line: 79, type: !150)
!154 = !DILocation(line: 79, column: 34, scope: !147)
!155 = !DILocation(line: 81, column: 1, scope: !147)
!156 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !148, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!157 = !DILocalVariable(name: "thdid", arg: 1, scope: !156, file: !2, line: 82, type: !26)
!158 = !DILocation(line: 82, column: 21, scope: !156)
!159 = !DILocalVariable(name: "cxt", arg: 2, scope: !156, file: !2, line: 82, type: !150)
!160 = !DILocation(line: 82, column: 33, scope: !156)
!161 = !DILocation(line: 84, column: 1, scope: !156)
!162 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !163, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!163 = !DISubroutineType(types: !164)
!164 = !{null, !26, !150, !150}
!165 = !DILocalVariable(name: "thdid", arg: 1, scope: !162, file: !2, line: 85, type: !26)
!166 = !DILocation(line: 85, column: 26, scope: !162)
!167 = !DILocalVariable(name: "cxt", arg: 2, scope: !162, file: !2, line: 85, type: !150)
!168 = !DILocation(line: 85, column: 38, scope: !162)
!169 = !DILocalVariable(name: "lev", arg: 3, scope: !162, file: !2, line: 85, type: !150)
!170 = !DILocation(line: 85, column: 49, scope: !162)
!171 = !DILocation(line: 87, column: 1, scope: !162)
!172 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !173, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!173 = !DISubroutineType(types: !174)
!174 = !{null, !150}
!175 = !DILocalVariable(name: "lockname", arg: 1, scope: !172, file: !2, line: 89, type: !150)
!176 = !DILocation(line: 89, column: 17, scope: !172)
!177 = !DILocation(line: 91, column: 1, scope: !172)
!178 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !173, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!179 = !DILocalVariable(name: "str", arg: 1, scope: !178, file: !2, line: 93, type: !150)
!180 = !DILocation(line: 93, column: 18, scope: !178)
!181 = !DILocation(line: 94, column: 18, scope: !178)
!182 = !DILocation(line: 94, column: 3, scope: !178)
!183 = !DILocation(line: 95, column: 3, scope: !178)
!184 = !DILocation(line: 96, column: 3, scope: !178)
!185 = !DILocation(line: 97, column: 1, scope: !178)
!186 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !187, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!187 = !DISubroutineType(types: !188)
!188 = !{!22, !189}
!189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!190 = !DILocalVariable(name: "p", arg: 1, scope: !186, file: !2, line: 100, type: !189)
!191 = !DILocation(line: 100, column: 24, scope: !186)
!192 = !DILocation(line: 101, column: 6, scope: !186)
!193 = !DILocation(line: 101, column: 8, scope: !186)
!194 = !DILocation(line: 102, column: 1, scope: !186)
!195 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !187, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!196 = !DILocalVariable(name: "p", arg: 1, scope: !195, file: !2, line: 104, type: !189)
!197 = !DILocation(line: 104, column: 20, scope: !195)
!198 = !DILocation(line: 105, column: 6, scope: !195)
!199 = !DILocation(line: 105, column: 8, scope: !195)
!200 = !DILocation(line: 106, column: 1, scope: !195)
!201 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !187, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!202 = !DILocalVariable(name: "p", arg: 1, scope: !201, file: !2, line: 110, type: !189)
!203 = !DILocation(line: 110, column: 22, scope: !201)
!204 = !DILocation(line: 111, column: 10, scope: !201)
!205 = !DILocation(line: 111, column: 5, scope: !201)
!206 = !DILocation(line: 112, column: 1, scope: !201)
!207 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !187, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!208 = !DILocalVariable(name: "p", arg: 1, scope: !207, file: !2, line: 115, type: !189)
!209 = !DILocation(line: 115, column: 24, scope: !207)
!210 = !DILocation(line: 116, column: 10, scope: !207)
!211 = !DILocation(line: 116, column: 5, scope: !207)
!212 = !DILocation(line: 117, column: 1, scope: !207)
!213 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !214, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!214 = !DISubroutineType(types: !215)
!215 = !{null}
!216 = !DILocation(line: 135, column: 20, scope: !213)
!217 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_wchar_t_07_bad", scope: !31, file: !31, line: 37, type: !214, scopeLine: 38, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!218 = !DILocalVariable(name: "data", scope: !217, file: !31, line: 39, type: !23)
!219 = !DILocation(line: 39, column: 15, scope: !217)
!220 = !DILocation(line: 41, column: 10, scope: !217)
!221 = !DILocation(line: 42, column: 8, scope: !222)
!222 = distinct !DILexicalBlock(scope: !217, file: !31, line: 42, column: 8)
!223 = !DILocation(line: 42, column: 18, scope: !222)
!224 = !DILocation(line: 42, column: 8, scope: !217)
!225 = !DILocation(line: 44, column: 27, scope: !226)
!226 = distinct !DILexicalBlock(scope: !222, file: !31, line: 43, column: 5)
!227 = !DILocation(line: 44, column: 14, scope: !226)
!228 = !DILocation(line: 45, column: 13, scope: !229)
!229 = distinct !DILexicalBlock(scope: !226, file: !31, line: 45, column: 13)
!230 = !DILocation(line: 45, column: 18, scope: !229)
!231 = !DILocation(line: 45, column: 13, scope: !226)
!232 = !DILocation(line: 45, column: 28, scope: !233)
!233 = distinct !DILexicalBlock(scope: !229, file: !31, line: 45, column: 27)
!234 = !DILocation(line: 47, column: 18, scope: !226)
!235 = !DILocation(line: 47, column: 9, scope: !226)
!236 = !DILocation(line: 48, column: 5, scope: !226)
!237 = !DILocation(line: 49, column: 8, scope: !238)
!238 = distinct !DILexicalBlock(scope: !217, file: !31, line: 49, column: 8)
!239 = !DILocation(line: 49, column: 18, scope: !238)
!240 = !DILocation(line: 49, column: 8, scope: !217)
!241 = !DILocation(line: 52, column: 20, scope: !242)
!242 = distinct !DILexicalBlock(scope: !238, file: !31, line: 50, column: 5)
!243 = !DILocation(line: 52, column: 9, scope: !242)
!244 = !DILocation(line: 53, column: 5, scope: !242)
!245 = !DILocation(line: 54, column: 1, scope: !217)
!246 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_wchar_t_07_good", scope: !31, file: !31, line: 147, type: !214, scopeLine: 148, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!247 = !DILocation(line: 149, column: 5, scope: !246)
!248 = !DILocation(line: 150, column: 5, scope: !246)
!249 = !DILocation(line: 151, column: 5, scope: !246)
!250 = !DILocation(line: 152, column: 5, scope: !246)
!251 = !DILocation(line: 153, column: 1, scope: !246)
!252 = distinct !DISubprogram(name: "main", scope: !31, file: !31, line: 162, type: !253, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !46)
!253 = !DISubroutineType(types: !254)
!254 = !{!26, !26, !255}
!255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!256 = !DILocalVariable(name: "argc", arg: 1, scope: !252, file: !31, line: 162, type: !26)
!257 = !DILocation(line: 162, column: 14, scope: !252)
!258 = !DILocalVariable(name: "argv", arg: 2, scope: !252, file: !31, line: 162, type: !255)
!259 = !DILocation(line: 162, column: 27, scope: !252)
!260 = !DILocation(line: 165, column: 22, scope: !252)
!261 = !DILocation(line: 165, column: 12, scope: !252)
!262 = !DILocation(line: 165, column: 5, scope: !252)
!263 = !DILocation(line: 166, column: 5, scope: !252)
!264 = !DILocation(line: 167, column: 5, scope: !252)
!265 = !DILocation(line: 168, column: 5, scope: !252)
!266 = distinct !DISubprogram(name: "goodB2G1", scope: !31, file: !31, line: 58, type: !214, scopeLine: 59, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !46)
!267 = !DILocalVariable(name: "data", scope: !266, file: !31, line: 60, type: !23)
!268 = !DILocation(line: 60, column: 15, scope: !266)
!269 = !DILocation(line: 62, column: 10, scope: !266)
!270 = !DILocation(line: 63, column: 8, scope: !271)
!271 = distinct !DILexicalBlock(scope: !266, file: !31, line: 63, column: 8)
!272 = !DILocation(line: 63, column: 18, scope: !271)
!273 = !DILocation(line: 63, column: 8, scope: !266)
!274 = !DILocation(line: 65, column: 27, scope: !275)
!275 = distinct !DILexicalBlock(scope: !271, file: !31, line: 64, column: 5)
!276 = !DILocation(line: 65, column: 14, scope: !275)
!277 = !DILocation(line: 66, column: 13, scope: !278)
!278 = distinct !DILexicalBlock(scope: !275, file: !31, line: 66, column: 13)
!279 = !DILocation(line: 66, column: 18, scope: !278)
!280 = !DILocation(line: 66, column: 13, scope: !275)
!281 = !DILocation(line: 66, column: 28, scope: !282)
!282 = distinct !DILexicalBlock(scope: !278, file: !31, line: 66, column: 27)
!283 = !DILocation(line: 68, column: 18, scope: !275)
!284 = !DILocation(line: 68, column: 9, scope: !275)
!285 = !DILocation(line: 69, column: 5, scope: !275)
!286 = !DILocation(line: 70, column: 8, scope: !287)
!287 = distinct !DILexicalBlock(scope: !266, file: !31, line: 70, column: 8)
!288 = !DILocation(line: 70, column: 18, scope: !287)
!289 = !DILocation(line: 70, column: 8, scope: !266)
!290 = !DILocation(line: 73, column: 9, scope: !291)
!291 = distinct !DILexicalBlock(scope: !287, file: !31, line: 71, column: 5)
!292 = !DILocation(line: 74, column: 5, scope: !291)
!293 = !DILocation(line: 81, column: 1, scope: !266)
!294 = distinct !DISubprogram(name: "goodB2G2", scope: !31, file: !31, line: 84, type: !214, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !46)
!295 = !DILocalVariable(name: "data", scope: !294, file: !31, line: 86, type: !23)
!296 = !DILocation(line: 86, column: 15, scope: !294)
!297 = !DILocation(line: 88, column: 10, scope: !294)
!298 = !DILocation(line: 89, column: 8, scope: !299)
!299 = distinct !DILexicalBlock(scope: !294, file: !31, line: 89, column: 8)
!300 = !DILocation(line: 89, column: 18, scope: !299)
!301 = !DILocation(line: 89, column: 8, scope: !294)
!302 = !DILocation(line: 91, column: 27, scope: !303)
!303 = distinct !DILexicalBlock(scope: !299, file: !31, line: 90, column: 5)
!304 = !DILocation(line: 91, column: 14, scope: !303)
!305 = !DILocation(line: 92, column: 13, scope: !306)
!306 = distinct !DILexicalBlock(scope: !303, file: !31, line: 92, column: 13)
!307 = !DILocation(line: 92, column: 18, scope: !306)
!308 = !DILocation(line: 92, column: 13, scope: !303)
!309 = !DILocation(line: 92, column: 28, scope: !310)
!310 = distinct !DILexicalBlock(scope: !306, file: !31, line: 92, column: 27)
!311 = !DILocation(line: 94, column: 18, scope: !303)
!312 = !DILocation(line: 94, column: 9, scope: !303)
!313 = !DILocation(line: 95, column: 5, scope: !303)
!314 = !DILocation(line: 96, column: 8, scope: !315)
!315 = distinct !DILexicalBlock(scope: !294, file: !31, line: 96, column: 8)
!316 = !DILocation(line: 96, column: 18, scope: !315)
!317 = !DILocation(line: 96, column: 8, scope: !294)
!318 = !DILocation(line: 101, column: 5, scope: !319)
!319 = distinct !DILexicalBlock(scope: !315, file: !31, line: 97, column: 5)
!320 = !DILocation(line: 102, column: 1, scope: !294)
!321 = distinct !DISubprogram(name: "goodG2B1", scope: !31, file: !31, line: 105, type: !214, scopeLine: 106, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !46)
!322 = !DILocalVariable(name: "data", scope: !321, file: !31, line: 107, type: !23)
!323 = !DILocation(line: 107, column: 15, scope: !321)
!324 = !DILocation(line: 109, column: 10, scope: !321)
!325 = !DILocation(line: 110, column: 8, scope: !326)
!326 = distinct !DILexicalBlock(scope: !321, file: !31, line: 110, column: 8)
!327 = !DILocation(line: 110, column: 18, scope: !326)
!328 = !DILocation(line: 110, column: 8, scope: !321)
!329 = !DILocation(line: 113, column: 9, scope: !330)
!330 = distinct !DILexicalBlock(scope: !326, file: !31, line: 111, column: 5)
!331 = !DILocation(line: 114, column: 5, scope: !330)
!332 = !DILocation(line: 117, column: 27, scope: !333)
!333 = distinct !DILexicalBlock(scope: !326, file: !31, line: 116, column: 5)
!334 = !DILocation(line: 117, column: 14, scope: !333)
!335 = !DILocation(line: 118, column: 13, scope: !336)
!336 = distinct !DILexicalBlock(scope: !333, file: !31, line: 118, column: 13)
!337 = !DILocation(line: 118, column: 18, scope: !336)
!338 = !DILocation(line: 118, column: 13, scope: !333)
!339 = !DILocation(line: 118, column: 28, scope: !340)
!340 = distinct !DILexicalBlock(scope: !336, file: !31, line: 118, column: 27)
!341 = !DILocation(line: 121, column: 8, scope: !342)
!342 = distinct !DILexicalBlock(scope: !321, file: !31, line: 121, column: 8)
!343 = !DILocation(line: 121, column: 18, scope: !342)
!344 = !DILocation(line: 121, column: 8, scope: !321)
!345 = !DILocation(line: 124, column: 18, scope: !346)
!346 = distinct !DILexicalBlock(scope: !342, file: !31, line: 122, column: 5)
!347 = !DILocation(line: 124, column: 9, scope: !346)
!348 = !DILocation(line: 125, column: 5, scope: !346)
!349 = !DILocation(line: 126, column: 1, scope: !321)
!350 = distinct !DISubprogram(name: "goodG2B2", scope: !31, file: !31, line: 129, type: !214, scopeLine: 130, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !46)
!351 = !DILocalVariable(name: "data", scope: !350, file: !31, line: 131, type: !23)
!352 = !DILocation(line: 131, column: 15, scope: !350)
!353 = !DILocation(line: 133, column: 10, scope: !350)
!354 = !DILocation(line: 134, column: 8, scope: !355)
!355 = distinct !DILexicalBlock(scope: !350, file: !31, line: 134, column: 8)
!356 = !DILocation(line: 134, column: 18, scope: !355)
!357 = !DILocation(line: 134, column: 8, scope: !350)
!358 = !DILocation(line: 136, column: 27, scope: !359)
!359 = distinct !DILexicalBlock(scope: !355, file: !31, line: 135, column: 5)
!360 = !DILocation(line: 136, column: 14, scope: !359)
!361 = !DILocation(line: 137, column: 13, scope: !362)
!362 = distinct !DILexicalBlock(scope: !359, file: !31, line: 137, column: 13)
!363 = !DILocation(line: 137, column: 18, scope: !362)
!364 = !DILocation(line: 137, column: 13, scope: !359)
!365 = !DILocation(line: 137, column: 28, scope: !366)
!366 = distinct !DILexicalBlock(scope: !362, file: !31, line: 137, column: 27)
!367 = !DILocation(line: 139, column: 5, scope: !359)
!368 = !DILocation(line: 140, column: 8, scope: !369)
!369 = distinct !DILexicalBlock(scope: !350, file: !31, line: 140, column: 8)
!370 = !DILocation(line: 140, column: 18, scope: !369)
!371 = !DILocation(line: 140, column: 8, scope: !350)
!372 = !DILocation(line: 143, column: 18, scope: !373)
!373 = distinct !DILexicalBlock(scope: !369, file: !31, line: 141, column: 5)
!374 = !DILocation(line: 143, column: 9, scope: !373)
!375 = !DILocation(line: 144, column: 5, scope: !373)
!376 = !DILocation(line: 145, column: 1, scope: !350)
