; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/df/df41.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df41.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@badStatic = internal global i32 0, align 4, !dbg !17
@goodB2G1Static = internal global i32 0, align 4, !dbg !27
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !31
@goodB2G2Static = internal global i32 0, align 4, !dbg !36
@goodG2BStatic = internal global i32 0, align 4, !dbg !38

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !48 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !52, metadata !DIExpression()), !dbg !53
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !56
  ret void, !dbg !57
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !58 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !59, metadata !DIExpression()), !dbg !60
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !63
  ret void, !dbg !64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !65 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !66, metadata !DIExpression()), !dbg !67
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !68, metadata !DIExpression()), !dbg !69
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !70
  ret void, !dbg !71
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !72 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !73, metadata !DIExpression()), !dbg !74
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !75, metadata !DIExpression()), !dbg !76
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !77
  ret void, !dbg !78
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !79 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !80, metadata !DIExpression()), !dbg !81
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !84
  ret void, !dbg !85
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !86 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !87, metadata !DIExpression()), !dbg !88
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !89, metadata !DIExpression()), !dbg !90
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !91
  ret void, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !96, metadata !DIExpression()), !dbg !97
  %0 = load i32, ptr %n.addr, align 4, !dbg !98
  %conv = sext i32 %0 to i64, !dbg !98
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !99
  ret ptr %call, !dbg !100
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !101 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !102, metadata !DIExpression()), !dbg !103
  %0 = load i32, ptr %n.addr, align 4, !dbg !104
  %conv = sext i32 %0 to i64, !dbg !104
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !105
  ret ptr %call, !dbg !106
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !107 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !108, metadata !DIExpression()), !dbg !109
  %0 = load i32, ptr %n.addr, align 4, !dbg !110
  %conv = sext i32 %0 to i64, !dbg !110
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !111
  ret ptr %call, !dbg !112
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !113 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %0 = load i32, ptr %n.addr, align 4, !dbg !116
  %conv = sext i32 %0 to i64, !dbg !116
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !117
  ret ptr %call, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !119 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !120, metadata !DIExpression()), !dbg !121
  %0 = load i32, ptr %n.addr, align 4, !dbg !122
  %conv = sext i32 %0 to i64, !dbg !122
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !123
  ret ptr %call, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !125 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !126, metadata !DIExpression()), !dbg !127
  %0 = load i32, ptr %n.addr, align 4, !dbg !128
  %conv = sext i32 %0 to i64, !dbg !128
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !129
  ret ptr %call, !dbg !130
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !131 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !132, metadata !DIExpression()), !dbg !133
  %0 = load i32, ptr %n.addr, align 4, !dbg !134
  %conv = sext i32 %0 to i64, !dbg !134
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !135
  ret ptr %call, !dbg !136
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !137 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !138, metadata !DIExpression()), !dbg !139
  %0 = load i32, ptr %n.addr, align 4, !dbg !140
  %conv = sext i32 %0 to i64, !dbg !140
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !141
  ret ptr %call, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !143 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !146, metadata !DIExpression()), !dbg !147
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !148, metadata !DIExpression()), !dbg !149
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !150
  ret void, !dbg !151
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !152 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !156, metadata !DIExpression()), !dbg !157
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !158, metadata !DIExpression()), !dbg !159
  ret void, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !161 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !162, metadata !DIExpression()), !dbg !163
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !164, metadata !DIExpression()), !dbg !165
  ret void, !dbg !166
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !167 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !170, metadata !DIExpression()), !dbg !171
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !172, metadata !DIExpression()), !dbg !173
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !174, metadata !DIExpression()), !dbg !175
  ret void, !dbg !176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !177 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !180, metadata !DIExpression()), !dbg !181
  ret void, !dbg !182
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !183 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !184, metadata !DIExpression()), !dbg !185
  %0 = load ptr, ptr %str.addr, align 8, !dbg !186
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !187
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !188
  %call2 = call i32 @getchar(), !dbg !189
  ret void, !dbg !190
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !191 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !195, metadata !DIExpression()), !dbg !196
  %0 = load ptr, ptr %p.addr, align 8, !dbg !197
  store i32 0, ptr %0, align 4, !dbg !198
  %1 = load ptr, ptr %retval, align 8, !dbg !199
  ret ptr %1, !dbg !199
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !200 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !201, metadata !DIExpression()), !dbg !202
  %0 = load ptr, ptr %p.addr, align 8, !dbg !203
  store i32 0, ptr %0, align 4, !dbg !204
  %1 = load ptr, ptr %retval, align 8, !dbg !205
  ret ptr %1, !dbg !205
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !206 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !207, metadata !DIExpression()), !dbg !208
  %0 = load ptr, ptr %p.addr, align 8, !dbg !209
  call void @free(ptr noundef %0) #7, !dbg !210
  %1 = load ptr, ptr %retval, align 8, !dbg !211
  ret ptr %1, !dbg !211
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !212 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !213, metadata !DIExpression()), !dbg !214
  %0 = load ptr, ptr %p.addr, align 8, !dbg !215
  call void @free(ptr noundef %0) #7, !dbg !216
  %1 = load ptr, ptr %retval, align 8, !dbg !217
  ret ptr %1, !dbg !217
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !218 {
entry:
  ret void, !dbg !221
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_21_bad() #0 !dbg !222 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !223, metadata !DIExpression()), !dbg !224
  store ptr null, ptr %data, align 8, !dbg !225
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !226
  store ptr %call, ptr %data, align 8, !dbg !227
  %0 = load ptr, ptr %data, align 8, !dbg !228
  %cmp = icmp eq ptr %0, null, !dbg !230
  br i1 %cmp, label %if.then, label %if.end, !dbg !231

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !232
  unreachable, !dbg !232

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !234
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !235
  store i32 1, ptr @badStatic, align 4, !dbg !236
  %2 = load ptr, ptr %data, align 8, !dbg !237
  call void @badSink(ptr noundef %2), !dbg !238
  ret void, !dbg !239
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @badSink(ptr noundef %data) #0 !dbg !240 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !243, metadata !DIExpression()), !dbg !244
  %0 = load i32, ptr @badStatic, align 4, !dbg !245
  %tobool = icmp ne i32 %0, 0, !dbg !245
  br i1 %tobool, label %if.then, label %if.end, !dbg !247

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !248
  %call = call ptr @DOUBLEFREE(ptr noundef %1), !dbg !250
  br label %if.end, !dbg !251

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !252
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_21_good() #0 !dbg !253 {
entry:
  call void @goodB2G1(), !dbg !254
  call void @goodB2G2(), !dbg !255
  call void @goodG2B(), !dbg !256
  ret void, !dbg !257
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !258 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !262, metadata !DIExpression()), !dbg !263
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !264, metadata !DIExpression()), !dbg !265
  %call = call i64 @time(ptr noundef null) #7, !dbg !266
  %conv = trunc i64 %call to i32, !dbg !267
  call void @srand(i32 noundef %conv) #7, !dbg !268
  call void @CWE415_Double_Free__malloc_free_long_21_good(), !dbg !269
  call void @CWE415_Double_Free__malloc_free_long_21_bad(), !dbg !270
  ret i32 0, !dbg !271
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !272 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !273, metadata !DIExpression()), !dbg !274
  store ptr null, ptr %data, align 8, !dbg !275
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !276
  store ptr %call, ptr %data, align 8, !dbg !277
  %0 = load ptr, ptr %data, align 8, !dbg !278
  %cmp = icmp eq ptr %0, null, !dbg !280
  br i1 %cmp, label %if.then, label %if.end, !dbg !281

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !282
  unreachable, !dbg !282

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !284
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !285
  store i32 0, ptr @goodB2G1Static, align 4, !dbg !286
  %2 = load ptr, ptr %data, align 8, !dbg !287
  call void @goodB2G1Sink(ptr noundef %2), !dbg !288
  ret void, !dbg !289
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1Sink(ptr noundef %data) #0 !dbg !290 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !291, metadata !DIExpression()), !dbg !292
  %0 = load i32, ptr @goodB2G1Static, align 4, !dbg !293
  %tobool = icmp ne i32 %0, 0, !dbg !293
  br i1 %tobool, label %if.then, label %if.else, !dbg !295

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !296
  br label %if.end, !dbg !298

if.else:                                          ; preds = %entry
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !299
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !300 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !301, metadata !DIExpression()), !dbg !302
  store ptr null, ptr %data, align 8, !dbg !303
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !304
  store ptr %call, ptr %data, align 8, !dbg !305
  %0 = load ptr, ptr %data, align 8, !dbg !306
  %cmp = icmp eq ptr %0, null, !dbg !308
  br i1 %cmp, label %if.then, label %if.end, !dbg !309

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !310
  unreachable, !dbg !310

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !312
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !313
  store i32 1, ptr @goodB2G2Static, align 4, !dbg !314
  %2 = load ptr, ptr %data, align 8, !dbg !315
  call void @goodB2G2Sink(ptr noundef %2), !dbg !316
  ret void, !dbg !317
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2Sink(ptr noundef %data) #0 !dbg !318 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !319, metadata !DIExpression()), !dbg !320
  %0 = load i32, ptr @goodB2G2Static, align 4, !dbg !321
  %tobool = icmp ne i32 %0, 0, !dbg !321
  br i1 %tobool, label %if.then, label %if.end, !dbg !323

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !324

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !326
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !327 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !328, metadata !DIExpression()), !dbg !329
  store ptr null, ptr %data, align 8, !dbg !330
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !331
  store ptr %call, ptr %data, align 8, !dbg !332
  %0 = load ptr, ptr %data, align 8, !dbg !333
  %cmp = icmp eq ptr %0, null, !dbg !335
  br i1 %cmp, label %if.then, label %if.end, !dbg !336

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !337
  unreachable, !dbg !337

if.end:                                           ; preds = %entry
  store i32 1, ptr @goodG2BStatic, align 4, !dbg !339
  %1 = load ptr, ptr %data, align 8, !dbg !340
  call void @goodG2BSink(ptr noundef %1), !dbg !341
  ret void, !dbg !342
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2BSink(ptr noundef %data) #0 !dbg !343 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !344, metadata !DIExpression()), !dbg !345
  %0 = load i32, ptr @goodG2BStatic, align 4, !dbg !346
  %tobool = icmp ne i32 %0, 0, !dbg !346
  br i1 %tobool, label %if.then, label %if.end, !dbg !348

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !349
  %call = call ptr @SAFEFREE(ptr noundef %1), !dbg !351
  br label %if.end, !dbg !352

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !353
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!40, !41, !42, !43, !44, !45, !46}
!llvm.ident = !{!47}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "badStatic", scope: !19, file: !29, line: 33, type: !30, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !26, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/df/df41.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "6687c6d19081997b2637114093297b34")
!21 = !{!22, !23, !25}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!25 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!26 = !{!0, !7, !12, !17, !27, !31, !36, !38}
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(name: "goodB2G1Static", scope: !19, file: !29, line: 59, type: !30, isLocal: true, isDefinition: true)
!29 = !DIFile(filename: "src/df/df41.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "6687c6d19081997b2637114093297b34")
!30 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(scope: null, file: !29, line: 69, type: !33, isLocal: true, isDefinition: true)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 21)
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "goodB2G2Static", scope: !19, file: !29, line: 60, type: !30, isLocal: true, isDefinition: true)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(name: "goodG2BStatic", scope: !19, file: !29, line: 61, type: !30, isLocal: true, isDefinition: true)
!40 = !{i32 7, !"Dwarf Version", i32 5}
!41 = !{i32 2, !"Debug Info Version", i32 3}
!42 = !{i32 1, !"wchar_size", i32 4}
!43 = !{i32 8, !"PIC Level", i32 2}
!44 = !{i32 7, !"PIE Level", i32 2}
!45 = !{i32 7, !"uwtable", i32 2}
!46 = !{i32 7, !"frame-pointer", i32 2}
!47 = !{!"clang version 16.0.0"}
!48 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !49, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!49 = !DISubroutineType(types: !50)
!50 = !{null, !22, !22}
!51 = !{}
!52 = !DILocalVariable(name: "p", arg: 1, scope: !48, file: !2, line: 4, type: !22)
!53 = !DILocation(line: 4, column: 22, scope: !48)
!54 = !DILocalVariable(name: "q", arg: 2, scope: !48, file: !2, line: 4, type: !22)
!55 = !DILocation(line: 4, column: 31, scope: !48)
!56 = !DILocation(line: 5, column: 3, scope: !48)
!57 = !DILocation(line: 6, column: 1, scope: !48)
!58 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !49, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!59 = !DILocalVariable(name: "p", arg: 1, scope: !58, file: !2, line: 8, type: !22)
!60 = !DILocation(line: 8, column: 25, scope: !58)
!61 = !DILocalVariable(name: "q", arg: 2, scope: !58, file: !2, line: 8, type: !22)
!62 = !DILocation(line: 8, column: 34, scope: !58)
!63 = !DILocation(line: 9, column: 3, scope: !58)
!64 = !DILocation(line: 10, column: 1, scope: !58)
!65 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !49, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!66 = !DILocalVariable(name: "p", arg: 1, scope: !65, file: !2, line: 12, type: !22)
!67 = !DILocation(line: 12, column: 21, scope: !65)
!68 = !DILocalVariable(name: "q", arg: 2, scope: !65, file: !2, line: 12, type: !22)
!69 = !DILocation(line: 12, column: 30, scope: !65)
!70 = !DILocation(line: 13, column: 3, scope: !65)
!71 = !DILocation(line: 14, column: 1, scope: !65)
!72 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !49, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!73 = !DILocalVariable(name: "p", arg: 1, scope: !72, file: !2, line: 16, type: !22)
!74 = !DILocation(line: 16, column: 20, scope: !72)
!75 = !DILocalVariable(name: "q", arg: 2, scope: !72, file: !2, line: 16, type: !22)
!76 = !DILocation(line: 16, column: 29, scope: !72)
!77 = !DILocation(line: 17, column: 3, scope: !72)
!78 = !DILocation(line: 18, column: 1, scope: !72)
!79 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !49, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!80 = !DILocalVariable(name: "p", arg: 1, scope: !79, file: !2, line: 20, type: !22)
!81 = !DILocation(line: 20, column: 34, scope: !79)
!82 = !DILocalVariable(name: "q", arg: 2, scope: !79, file: !2, line: 20, type: !22)
!83 = !DILocation(line: 20, column: 43, scope: !79)
!84 = !DILocation(line: 21, column: 3, scope: !79)
!85 = !DILocation(line: 22, column: 1, scope: !79)
!86 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !49, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!87 = !DILocalVariable(name: "p", arg: 1, scope: !86, file: !2, line: 24, type: !22)
!88 = !DILocation(line: 24, column: 33, scope: !86)
!89 = !DILocalVariable(name: "q", arg: 2, scope: !86, file: !2, line: 24, type: !22)
!90 = !DILocation(line: 24, column: 42, scope: !86)
!91 = !DILocation(line: 25, column: 3, scope: !86)
!92 = !DILocation(line: 26, column: 1, scope: !86)
!93 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !94, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!94 = !DISubroutineType(types: !95)
!95 = !{!22, !30}
!96 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !2, line: 29, type: !30)
!97 = !DILocation(line: 29, column: 22, scope: !93)
!98 = !DILocation(line: 30, column: 17, scope: !93)
!99 = !DILocation(line: 30, column: 10, scope: !93)
!100 = !DILocation(line: 30, column: 3, scope: !93)
!101 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !94, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!102 = !DILocalVariable(name: "n", arg: 1, scope: !101, file: !2, line: 33, type: !30)
!103 = !DILocation(line: 33, column: 28, scope: !101)
!104 = !DILocation(line: 34, column: 19, scope: !101)
!105 = !DILocation(line: 34, column: 12, scope: !101)
!106 = !DILocation(line: 34, column: 5, scope: !101)
!107 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !94, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!108 = !DILocalVariable(name: "n", arg: 1, scope: !107, file: !2, line: 37, type: !30)
!109 = !DILocation(line: 37, column: 21, scope: !107)
!110 = !DILocation(line: 38, column: 17, scope: !107)
!111 = !DILocation(line: 38, column: 10, scope: !107)
!112 = !DILocation(line: 38, column: 3, scope: !107)
!113 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !94, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!114 = !DILocalVariable(name: "n", arg: 1, scope: !113, file: !2, line: 41, type: !30)
!115 = !DILocation(line: 41, column: 21, scope: !113)
!116 = !DILocation(line: 42, column: 17, scope: !113)
!117 = !DILocation(line: 42, column: 10, scope: !113)
!118 = !DILocation(line: 42, column: 3, scope: !113)
!119 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !94, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!120 = !DILocalVariable(name: "n", arg: 1, scope: !119, file: !2, line: 45, type: !30)
!121 = !DILocation(line: 45, column: 21, scope: !119)
!122 = !DILocation(line: 46, column: 17, scope: !119)
!123 = !DILocation(line: 46, column: 10, scope: !119)
!124 = !DILocation(line: 46, column: 3, scope: !119)
!125 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !94, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!126 = !DILocalVariable(name: "n", arg: 1, scope: !125, file: !2, line: 49, type: !30)
!127 = !DILocation(line: 49, column: 21, scope: !125)
!128 = !DILocation(line: 50, column: 17, scope: !125)
!129 = !DILocation(line: 50, column: 10, scope: !125)
!130 = !DILocation(line: 50, column: 3, scope: !125)
!131 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !94, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!132 = !DILocalVariable(name: "n", arg: 1, scope: !131, file: !2, line: 53, type: !30)
!133 = !DILocation(line: 53, column: 21, scope: !131)
!134 = !DILocation(line: 54, column: 17, scope: !131)
!135 = !DILocation(line: 54, column: 10, scope: !131)
!136 = !DILocation(line: 54, column: 3, scope: !131)
!137 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !94, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!138 = !DILocalVariable(name: "n", arg: 1, scope: !137, file: !2, line: 57, type: !30)
!139 = !DILocation(line: 57, column: 18, scope: !137)
!140 = !DILocation(line: 58, column: 17, scope: !137)
!141 = !DILocation(line: 58, column: 10, scope: !137)
!142 = !DILocation(line: 58, column: 3, scope: !137)
!143 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !144, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !30, !30}
!146 = !DILocalVariable(name: "id", arg: 1, scope: !143, file: !2, line: 67, type: !30)
!147 = !DILocation(line: 67, column: 20, scope: !143)
!148 = !DILocalVariable(name: "flags", arg: 2, scope: !143, file: !2, line: 67, type: !30)
!149 = !DILocation(line: 67, column: 28, scope: !143)
!150 = !DILocation(line: 68, column: 3, scope: !143)
!151 = !DILocation(line: 69, column: 1, scope: !143)
!152 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !153, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!153 = !DISubroutineType(types: !154)
!154 = !{null, !30, !155}
!155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!156 = !DILocalVariable(name: "thdid", arg: 1, scope: !152, file: !2, line: 79, type: !30)
!157 = !DILocation(line: 79, column: 21, scope: !152)
!158 = !DILocalVariable(name: "cxt", arg: 2, scope: !152, file: !2, line: 79, type: !155)
!159 = !DILocation(line: 79, column: 34, scope: !152)
!160 = !DILocation(line: 81, column: 1, scope: !152)
!161 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !153, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!162 = !DILocalVariable(name: "thdid", arg: 1, scope: !161, file: !2, line: 82, type: !30)
!163 = !DILocation(line: 82, column: 21, scope: !161)
!164 = !DILocalVariable(name: "cxt", arg: 2, scope: !161, file: !2, line: 82, type: !155)
!165 = !DILocation(line: 82, column: 33, scope: !161)
!166 = !DILocation(line: 84, column: 1, scope: !161)
!167 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !168, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!168 = !DISubroutineType(types: !169)
!169 = !{null, !30, !155, !155}
!170 = !DILocalVariable(name: "thdid", arg: 1, scope: !167, file: !2, line: 85, type: !30)
!171 = !DILocation(line: 85, column: 26, scope: !167)
!172 = !DILocalVariable(name: "cxt", arg: 2, scope: !167, file: !2, line: 85, type: !155)
!173 = !DILocation(line: 85, column: 38, scope: !167)
!174 = !DILocalVariable(name: "lev", arg: 3, scope: !167, file: !2, line: 85, type: !155)
!175 = !DILocation(line: 85, column: 49, scope: !167)
!176 = !DILocation(line: 87, column: 1, scope: !167)
!177 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !178, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!178 = !DISubroutineType(types: !179)
!179 = !{null, !155}
!180 = !DILocalVariable(name: "lockname", arg: 1, scope: !177, file: !2, line: 89, type: !155)
!181 = !DILocation(line: 89, column: 17, scope: !177)
!182 = !DILocation(line: 91, column: 1, scope: !177)
!183 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !178, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!184 = !DILocalVariable(name: "str", arg: 1, scope: !183, file: !2, line: 93, type: !155)
!185 = !DILocation(line: 93, column: 18, scope: !183)
!186 = !DILocation(line: 94, column: 18, scope: !183)
!187 = !DILocation(line: 94, column: 3, scope: !183)
!188 = !DILocation(line: 95, column: 3, scope: !183)
!189 = !DILocation(line: 96, column: 3, scope: !183)
!190 = !DILocation(line: 97, column: 1, scope: !183)
!191 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !192, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!192 = !DISubroutineType(types: !193)
!193 = !{!22, !194}
!194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!195 = !DILocalVariable(name: "p", arg: 1, scope: !191, file: !2, line: 100, type: !194)
!196 = !DILocation(line: 100, column: 24, scope: !191)
!197 = !DILocation(line: 101, column: 6, scope: !191)
!198 = !DILocation(line: 101, column: 8, scope: !191)
!199 = !DILocation(line: 102, column: 1, scope: !191)
!200 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !192, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!201 = !DILocalVariable(name: "p", arg: 1, scope: !200, file: !2, line: 104, type: !194)
!202 = !DILocation(line: 104, column: 20, scope: !200)
!203 = !DILocation(line: 105, column: 6, scope: !200)
!204 = !DILocation(line: 105, column: 8, scope: !200)
!205 = !DILocation(line: 106, column: 1, scope: !200)
!206 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !192, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!207 = !DILocalVariable(name: "p", arg: 1, scope: !206, file: !2, line: 110, type: !194)
!208 = !DILocation(line: 110, column: 22, scope: !206)
!209 = !DILocation(line: 111, column: 10, scope: !206)
!210 = !DILocation(line: 111, column: 5, scope: !206)
!211 = !DILocation(line: 112, column: 1, scope: !206)
!212 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !192, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!213 = !DILocalVariable(name: "p", arg: 1, scope: !212, file: !2, line: 115, type: !194)
!214 = !DILocation(line: 115, column: 24, scope: !212)
!215 = !DILocation(line: 116, column: 10, scope: !212)
!216 = !DILocation(line: 116, column: 5, scope: !212)
!217 = !DILocation(line: 117, column: 1, scope: !212)
!218 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !219, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!219 = !DISubroutineType(types: !220)
!220 = !{null}
!221 = !DILocation(line: 135, column: 20, scope: !218)
!222 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_long_21_bad", scope: !29, file: !29, line: 44, type: !219, scopeLine: 45, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!223 = !DILocalVariable(name: "data", scope: !222, file: !29, line: 46, type: !23)
!224 = !DILocation(line: 46, column: 12, scope: !222)
!225 = !DILocation(line: 48, column: 10, scope: !222)
!226 = !DILocation(line: 49, column: 20, scope: !222)
!227 = !DILocation(line: 49, column: 10, scope: !222)
!228 = !DILocation(line: 50, column: 9, scope: !229)
!229 = distinct !DILexicalBlock(scope: !222, file: !29, line: 50, column: 9)
!230 = !DILocation(line: 50, column: 14, scope: !229)
!231 = !DILocation(line: 50, column: 9, scope: !222)
!232 = !DILocation(line: 50, column: 24, scope: !233)
!233 = distinct !DILexicalBlock(scope: !229, file: !29, line: 50, column: 23)
!234 = !DILocation(line: 52, column: 14, scope: !222)
!235 = !DILocation(line: 52, column: 5, scope: !222)
!236 = !DILocation(line: 53, column: 15, scope: !222)
!237 = !DILocation(line: 54, column: 13, scope: !222)
!238 = !DILocation(line: 54, column: 5, scope: !222)
!239 = !DILocation(line: 55, column: 1, scope: !222)
!240 = distinct !DISubprogram(name: "badSink", scope: !29, file: !29, line: 35, type: !241, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !51)
!241 = !DISubroutineType(types: !242)
!242 = !{null, !23}
!243 = !DILocalVariable(name: "data", arg: 1, scope: !240, file: !29, line: 35, type: !23)
!244 = !DILocation(line: 35, column: 28, scope: !240)
!245 = !DILocation(line: 37, column: 8, scope: !246)
!246 = distinct !DILexicalBlock(scope: !240, file: !29, line: 37, column: 8)
!247 = !DILocation(line: 37, column: 8, scope: !240)
!248 = !DILocation(line: 40, column: 20, scope: !249)
!249 = distinct !DILexicalBlock(scope: !246, file: !29, line: 38, column: 5)
!250 = !DILocation(line: 40, column: 9, scope: !249)
!251 = !DILocation(line: 41, column: 5, scope: !249)
!252 = !DILocation(line: 42, column: 1, scope: !240)
!253 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_long_21_good", scope: !29, file: !29, line: 138, type: !219, scopeLine: 139, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!254 = !DILocation(line: 140, column: 5, scope: !253)
!255 = !DILocation(line: 141, column: 5, scope: !253)
!256 = !DILocation(line: 142, column: 5, scope: !253)
!257 = !DILocation(line: 143, column: 1, scope: !253)
!258 = distinct !DISubprogram(name: "main", scope: !29, file: !29, line: 152, type: !259, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !51)
!259 = !DISubroutineType(types: !260)
!260 = !{!30, !30, !261}
!261 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !155, size: 64)
!262 = !DILocalVariable(name: "argc", arg: 1, scope: !258, file: !29, line: 152, type: !30)
!263 = !DILocation(line: 152, column: 14, scope: !258)
!264 = !DILocalVariable(name: "argv", arg: 2, scope: !258, file: !29, line: 152, type: !261)
!265 = !DILocation(line: 152, column: 27, scope: !258)
!266 = !DILocation(line: 155, column: 22, scope: !258)
!267 = !DILocation(line: 155, column: 12, scope: !258)
!268 = !DILocation(line: 155, column: 5, scope: !258)
!269 = !DILocation(line: 156, column: 5, scope: !258)
!270 = !DILocation(line: 157, column: 5, scope: !258)
!271 = !DILocation(line: 158, column: 5, scope: !258)
!272 = distinct !DISubprogram(name: "goodB2G1", scope: !29, file: !29, line: 79, type: !219, scopeLine: 80, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !51)
!273 = !DILocalVariable(name: "data", scope: !272, file: !29, line: 81, type: !23)
!274 = !DILocation(line: 81, column: 12, scope: !272)
!275 = !DILocation(line: 83, column: 10, scope: !272)
!276 = !DILocation(line: 84, column: 20, scope: !272)
!277 = !DILocation(line: 84, column: 10, scope: !272)
!278 = !DILocation(line: 85, column: 9, scope: !279)
!279 = distinct !DILexicalBlock(scope: !272, file: !29, line: 85, column: 9)
!280 = !DILocation(line: 85, column: 14, scope: !279)
!281 = !DILocation(line: 85, column: 9, scope: !272)
!282 = !DILocation(line: 85, column: 24, scope: !283)
!283 = distinct !DILexicalBlock(scope: !279, file: !29, line: 85, column: 23)
!284 = !DILocation(line: 87, column: 14, scope: !272)
!285 = !DILocation(line: 87, column: 5, scope: !272)
!286 = !DILocation(line: 88, column: 20, scope: !272)
!287 = !DILocation(line: 89, column: 18, scope: !272)
!288 = !DILocation(line: 89, column: 5, scope: !272)
!289 = !DILocation(line: 90, column: 1, scope: !272)
!290 = distinct !DISubprogram(name: "goodB2G1Sink", scope: !29, file: !29, line: 64, type: !241, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !51)
!291 = !DILocalVariable(name: "data", arg: 1, scope: !290, file: !29, line: 64, type: !23)
!292 = !DILocation(line: 64, column: 33, scope: !290)
!293 = !DILocation(line: 66, column: 8, scope: !294)
!294 = distinct !DILexicalBlock(scope: !290, file: !29, line: 66, column: 8)
!295 = !DILocation(line: 66, column: 8, scope: !290)
!296 = !DILocation(line: 69, column: 9, scope: !297)
!297 = distinct !DILexicalBlock(scope: !294, file: !29, line: 67, column: 5)
!298 = !DILocation(line: 70, column: 5, scope: !297)
!299 = !DILocation(line: 77, column: 1, scope: !290)
!300 = distinct !DISubprogram(name: "goodB2G2", scope: !29, file: !29, line: 103, type: !219, scopeLine: 104, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !51)
!301 = !DILocalVariable(name: "data", scope: !300, file: !29, line: 105, type: !23)
!302 = !DILocation(line: 105, column: 12, scope: !300)
!303 = !DILocation(line: 107, column: 10, scope: !300)
!304 = !DILocation(line: 108, column: 20, scope: !300)
!305 = !DILocation(line: 108, column: 10, scope: !300)
!306 = !DILocation(line: 109, column: 9, scope: !307)
!307 = distinct !DILexicalBlock(scope: !300, file: !29, line: 109, column: 9)
!308 = !DILocation(line: 109, column: 14, scope: !307)
!309 = !DILocation(line: 109, column: 9, scope: !300)
!310 = !DILocation(line: 109, column: 24, scope: !311)
!311 = distinct !DILexicalBlock(scope: !307, file: !29, line: 109, column: 23)
!312 = !DILocation(line: 111, column: 14, scope: !300)
!313 = !DILocation(line: 111, column: 5, scope: !300)
!314 = !DILocation(line: 112, column: 20, scope: !300)
!315 = !DILocation(line: 113, column: 18, scope: !300)
!316 = !DILocation(line: 113, column: 5, scope: !300)
!317 = !DILocation(line: 114, column: 1, scope: !300)
!318 = distinct !DISubprogram(name: "goodB2G2Sink", scope: !29, file: !29, line: 93, type: !241, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !51)
!319 = !DILocalVariable(name: "data", arg: 1, scope: !318, file: !29, line: 93, type: !23)
!320 = !DILocation(line: 93, column: 33, scope: !318)
!321 = !DILocation(line: 95, column: 8, scope: !322)
!322 = distinct !DILexicalBlock(scope: !318, file: !29, line: 95, column: 8)
!323 = !DILocation(line: 95, column: 8, scope: !318)
!324 = !DILocation(line: 100, column: 5, scope: !325)
!325 = distinct !DILexicalBlock(scope: !322, file: !29, line: 96, column: 5)
!326 = !DILocation(line: 101, column: 1, scope: !318)
!327 = distinct !DISubprogram(name: "goodG2B", scope: !29, file: !29, line: 126, type: !219, scopeLine: 127, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !51)
!328 = !DILocalVariable(name: "data", scope: !327, file: !29, line: 128, type: !23)
!329 = !DILocation(line: 128, column: 12, scope: !327)
!330 = !DILocation(line: 130, column: 10, scope: !327)
!331 = !DILocation(line: 131, column: 20, scope: !327)
!332 = !DILocation(line: 131, column: 10, scope: !327)
!333 = !DILocation(line: 132, column: 9, scope: !334)
!334 = distinct !DILexicalBlock(scope: !327, file: !29, line: 132, column: 9)
!335 = !DILocation(line: 132, column: 14, scope: !334)
!336 = !DILocation(line: 132, column: 9, scope: !327)
!337 = !DILocation(line: 132, column: 24, scope: !338)
!338 = distinct !DILexicalBlock(scope: !334, file: !29, line: 132, column: 23)
!339 = !DILocation(line: 134, column: 19, scope: !327)
!340 = !DILocation(line: 135, column: 17, scope: !327)
!341 = !DILocation(line: 135, column: 5, scope: !327)
!342 = !DILocation(line: 136, column: 1, scope: !327)
!343 = distinct !DISubprogram(name: "goodG2BSink", scope: !29, file: !29, line: 117, type: !241, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !51)
!344 = !DILocalVariable(name: "data", arg: 1, scope: !343, file: !29, line: 117, type: !23)
!345 = !DILocation(line: 117, column: 32, scope: !343)
!346 = !DILocation(line: 119, column: 8, scope: !347)
!347 = distinct !DILexicalBlock(scope: !343, file: !29, line: 119, column: 8)
!348 = !DILocation(line: 119, column: 8, scope: !343)
!349 = !DILocation(line: 122, column: 18, scope: !350)
!350 = distinct !DILexicalBlock(scope: !347, file: !29, line: 120, column: 5)
!351 = !DILocation(line: 122, column: 9, scope: !350)
!352 = !DILocation(line: 123, column: 5, scope: !350)
!353 = !DILocation(line: 124, column: 1, scope: !343)
