; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tdf/CWE415_Double_Free__malloc_free_int_10.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tdf/CWE415_Double_Free__malloc_free_int_10.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@globalTrue = external global i32, align 4
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !33
@globalFalse = external global i32, align 4
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !38

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !59 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !63, metadata !DIExpression()), !dbg !64
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !65, metadata !DIExpression()), !dbg !66
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !67
  ret void, !dbg !68
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !69 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !70, metadata !DIExpression()), !dbg !71
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !72, metadata !DIExpression()), !dbg !73
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !74
  ret void, !dbg !75
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !76 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !77, metadata !DIExpression()), !dbg !78
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !81
  ret void, !dbg !82
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !83 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !84, metadata !DIExpression()), !dbg !85
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !88
  ret void, !dbg !89
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !90 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !91, metadata !DIExpression()), !dbg !92
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !95
  ret void, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !97 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !98, metadata !DIExpression()), !dbg !99
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !102
  ret void, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !104 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !107, metadata !DIExpression()), !dbg !108
  %0 = load i32, ptr %n.addr, align 4, !dbg !109
  %conv = sext i32 %0 to i64, !dbg !109
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !110
  ret ptr %call, !dbg !111
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !112 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %0 = load i32, ptr %n.addr, align 4, !dbg !115
  %conv = sext i32 %0 to i64, !dbg !115
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !116
  ret ptr %call, !dbg !117
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !118 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !119, metadata !DIExpression()), !dbg !120
  %0 = load i32, ptr %n.addr, align 4, !dbg !121
  %conv = sext i32 %0 to i64, !dbg !121
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !122
  ret ptr %call, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !124 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !125, metadata !DIExpression()), !dbg !126
  %0 = load i32, ptr %n.addr, align 4, !dbg !127
  %conv = sext i32 %0 to i64, !dbg !127
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !128
  ret ptr %call, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !130 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !131, metadata !DIExpression()), !dbg !132
  %0 = load i32, ptr %n.addr, align 4, !dbg !133
  %conv = sext i32 %0 to i64, !dbg !133
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !134
  ret ptr %call, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !136 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !137, metadata !DIExpression()), !dbg !138
  %0 = load i32, ptr %n.addr, align 4, !dbg !139
  %conv = sext i32 %0 to i64, !dbg !139
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !140
  ret ptr %call, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !142 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !143, metadata !DIExpression()), !dbg !144
  %0 = load i32, ptr %n.addr, align 4, !dbg !145
  %conv = sext i32 %0 to i64, !dbg !145
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !146
  ret ptr %call, !dbg !147
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !148 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !149, metadata !DIExpression()), !dbg !150
  %0 = load i32, ptr %n.addr, align 4, !dbg !151
  %conv = sext i32 %0 to i64, !dbg !151
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !152
  ret ptr %call, !dbg !153
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !154 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !157, metadata !DIExpression()), !dbg !158
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !159, metadata !DIExpression()), !dbg !160
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !161
  ret void, !dbg !162
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !163 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !167, metadata !DIExpression()), !dbg !168
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !169, metadata !DIExpression()), !dbg !170
  ret void, !dbg !171
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !172 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !173, metadata !DIExpression()), !dbg !174
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !175, metadata !DIExpression()), !dbg !176
  ret void, !dbg !177
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !178 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !181, metadata !DIExpression()), !dbg !182
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !183, metadata !DIExpression()), !dbg !184
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !185, metadata !DIExpression()), !dbg !186
  ret void, !dbg !187
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !188 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !191, metadata !DIExpression()), !dbg !192
  ret void, !dbg !193
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !194 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !195, metadata !DIExpression()), !dbg !196
  %0 = load ptr, ptr %str.addr, align 8, !dbg !197
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !198
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !199
  %call2 = call i32 @getchar(), !dbg !200
  ret void, !dbg !201
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !202 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !205, metadata !DIExpression()), !dbg !206
  %0 = load ptr, ptr %p.addr, align 8, !dbg !207
  store i32 0, ptr %0, align 4, !dbg !208
  %1 = load ptr, ptr %retval, align 8, !dbg !209
  ret ptr %1, !dbg !209
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !210 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !211, metadata !DIExpression()), !dbg !212
  %0 = load ptr, ptr %p.addr, align 8, !dbg !213
  store i32 0, ptr %0, align 4, !dbg !214
  %1 = load ptr, ptr %retval, align 8, !dbg !215
  ret ptr %1, !dbg !215
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !216 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !217, metadata !DIExpression()), !dbg !218
  %0 = load ptr, ptr %p.addr, align 8, !dbg !219
  call void @free(ptr noundef %0) #7, !dbg !220
  %1 = load ptr, ptr %retval, align 8, !dbg !221
  ret ptr %1, !dbg !221
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !222 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !223, metadata !DIExpression()), !dbg !224
  %0 = load ptr, ptr %p.addr, align 8, !dbg !225
  call void @free(ptr noundef %0) #7, !dbg !226
  %1 = load ptr, ptr %retval, align 8, !dbg !227
  ret ptr %1, !dbg !227
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !228 {
entry:
  ret void, !dbg !231
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_int_10_bad() #0 !dbg !232 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !233, metadata !DIExpression()), !dbg !234
  store ptr null, ptr %data, align 8, !dbg !235
  %0 = load i32, ptr @globalTrue, align 4, !dbg !236
  %tobool = icmp ne i32 %0, 0, !dbg !236
  br i1 %tobool, label %if.then, label %if.end3, !dbg !238

if.then:                                          ; preds = %entry
  %call = call ptr @DOUBLEFREEMALLOC(i32 noundef 400), !dbg !239
  store ptr %call, ptr %data, align 8, !dbg !241
  %1 = load ptr, ptr %data, align 8, !dbg !242
  %cmp = icmp eq ptr %1, null, !dbg !244
  br i1 %cmp, label %if.then1, label %if.end, !dbg !245

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !246
  unreachable, !dbg !246

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !248
  %call2 = call ptr @SAFEFREE(ptr noundef %2), !dbg !249
  br label %if.end3, !dbg !250

if.end3:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @globalTrue, align 4, !dbg !251
  %tobool4 = icmp ne i32 %3, 0, !dbg !251
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !253

if.then5:                                         ; preds = %if.end3
  %4 = load ptr, ptr %data, align 8, !dbg !254
  %call6 = call ptr @DOUBLEFREE(ptr noundef %4), !dbg !256
  br label %if.end7, !dbg !257

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !258
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_int_10_good() #0 !dbg !259 {
entry:
  call void @goodB2G1(), !dbg !260
  call void @goodB2G2(), !dbg !261
  call void @goodG2B1(), !dbg !262
  call void @goodG2B2(), !dbg !263
  ret void, !dbg !264
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !265 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !269, metadata !DIExpression()), !dbg !270
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !271, metadata !DIExpression()), !dbg !272
  %call = call i64 @time(ptr noundef null) #7, !dbg !273
  %conv = trunc i64 %call to i32, !dbg !274
  call void @srand(i32 noundef %conv) #7, !dbg !275
  call void @printLine(ptr noundef @.str.3), !dbg !276
  call void @CWE415_Double_Free__malloc_free_int_10_good(), !dbg !277
  call void @printLine(ptr noundef @.str.4), !dbg !278
  call void @printLine(ptr noundef @.str.5), !dbg !279
  call void @CWE415_Double_Free__malloc_free_int_10_bad(), !dbg !280
  call void @printLine(ptr noundef @.str.6), !dbg !281
  ret i32 0, !dbg !282
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !283 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !284, metadata !DIExpression()), !dbg !285
  store ptr null, ptr %data, align 8, !dbg !286
  %0 = load i32, ptr @globalTrue, align 4, !dbg !287
  %tobool = icmp ne i32 %0, 0, !dbg !287
  br i1 %tobool, label %if.then, label %if.end3, !dbg !289

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !290
  store ptr %call, ptr %data, align 8, !dbg !292
  %1 = load ptr, ptr %data, align 8, !dbg !293
  %cmp = icmp eq ptr %1, null, !dbg !295
  br i1 %cmp, label %if.then1, label %if.end, !dbg !296

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !297
  unreachable, !dbg !297

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !299
  %call2 = call ptr @SAFEFREE(ptr noundef %2), !dbg !300
  br label %if.end3, !dbg !301

if.end3:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @globalFalse, align 4, !dbg !302
  %tobool4 = icmp ne i32 %3, 0, !dbg !302
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !304

if.then5:                                         ; preds = %if.end3
  call void @printLine(ptr noundef @.str.7), !dbg !305
  br label %if.end6, !dbg !307

if.else:                                          ; preds = %if.end3
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then5
  ret void, !dbg !308
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !309 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !310, metadata !DIExpression()), !dbg !311
  store ptr null, ptr %data, align 8, !dbg !312
  %0 = load i32, ptr @globalTrue, align 4, !dbg !313
  %tobool = icmp ne i32 %0, 0, !dbg !313
  br i1 %tobool, label %if.then, label %if.end3, !dbg !315

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !316
  store ptr %call, ptr %data, align 8, !dbg !318
  %1 = load ptr, ptr %data, align 8, !dbg !319
  %cmp = icmp eq ptr %1, null, !dbg !321
  br i1 %cmp, label %if.then1, label %if.end, !dbg !322

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !323
  unreachable, !dbg !323

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !325
  %call2 = call ptr @SAFEFREE(ptr noundef %2), !dbg !326
  br label %if.end3, !dbg !327

if.end3:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @globalTrue, align 4, !dbg !328
  %tobool4 = icmp ne i32 %3, 0, !dbg !328
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !330

if.then5:                                         ; preds = %if.end3
  br label %if.end6, !dbg !331

if.end6:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !333
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !334 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !335, metadata !DIExpression()), !dbg !336
  store ptr null, ptr %data, align 8, !dbg !337
  %0 = load i32, ptr @globalFalse, align 4, !dbg !338
  %tobool = icmp ne i32 %0, 0, !dbg !338
  br i1 %tobool, label %if.then, label %if.else, !dbg !340

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !341
  br label %if.end2, !dbg !343

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !344
  store ptr %call, ptr %data, align 8, !dbg !346
  %1 = load ptr, ptr %data, align 8, !dbg !347
  %cmp = icmp eq ptr %1, null, !dbg !349
  br i1 %cmp, label %if.then1, label %if.end, !dbg !350

if.then1:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !351
  unreachable, !dbg !351

if.end:                                           ; preds = %if.else
  br label %if.end2

if.end2:                                          ; preds = %if.end, %if.then
  %2 = load i32, ptr @globalTrue, align 4, !dbg !353
  %tobool3 = icmp ne i32 %2, 0, !dbg !353
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !355

if.then4:                                         ; preds = %if.end2
  %3 = load ptr, ptr %data, align 8, !dbg !356
  %call5 = call ptr @SAFEFREE(ptr noundef %3), !dbg !358
  br label %if.end6, !dbg !359

if.end6:                                          ; preds = %if.then4, %if.end2
  ret void, !dbg !360
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !361 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !362, metadata !DIExpression()), !dbg !363
  store ptr null, ptr %data, align 8, !dbg !364
  %0 = load i32, ptr @globalTrue, align 4, !dbg !365
  %tobool = icmp ne i32 %0, 0, !dbg !365
  br i1 %tobool, label %if.then, label %if.end2, !dbg !367

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !368
  store ptr %call, ptr %data, align 8, !dbg !370
  %1 = load ptr, ptr %data, align 8, !dbg !371
  %cmp = icmp eq ptr %1, null, !dbg !373
  br i1 %cmp, label %if.then1, label %if.end, !dbg !374

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !375
  unreachable, !dbg !375

if.end:                                           ; preds = %if.then
  br label %if.end2, !dbg !377

if.end2:                                          ; preds = %if.end, %entry
  %2 = load i32, ptr @globalTrue, align 4, !dbg !378
  %tobool3 = icmp ne i32 %2, 0, !dbg !378
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !380

if.then4:                                         ; preds = %if.end2
  %3 = load ptr, ptr %data, align 8, !dbg !381
  %call5 = call ptr @SAFEFREE(ptr noundef %3), !dbg !383
  br label %if.end6, !dbg !384

if.end6:                                          ; preds = %if.then4, %if.end2
  ret void, !dbg !385
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!43}
!llvm.module.flags = !{!51, !52, !53, !54, !55, !56, !57}
!llvm.ident = !{!58}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 159, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tdf/CWE415_Double_Free__malloc_free_int_10.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "2c12833a3b9a4a98ee78af6631f84b61")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 18)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 161, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 16)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 164, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 17)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 166, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 15)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(scope: null, file: !19, line: 63, type: !40, isLocal: true, isDefinition: true)
!40 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !41)
!41 = !{!42}
!42 = !DISubrange(count: 21)
!43 = distinct !DICompileUnit(language: DW_LANG_C11, file: !44, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !45, globals: !50, splitDebugInlining: false, nameTableKind: None)
!44 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tdf/CWE415_Double_Free__malloc_free_int_10.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "2c12833a3b9a4a98ee78af6631f84b61")
!45 = !{!46, !47, !49}
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!49 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!50 = !{!0, !7, !12, !17, !23, !28, !33, !38}
!51 = !{i32 7, !"Dwarf Version", i32 5}
!52 = !{i32 2, !"Debug Info Version", i32 3}
!53 = !{i32 1, !"wchar_size", i32 4}
!54 = !{i32 8, !"PIC Level", i32 2}
!55 = !{i32 7, !"PIE Level", i32 2}
!56 = !{i32 7, !"uwtable", i32 2}
!57 = !{i32 7, !"frame-pointer", i32 2}
!58 = !{!"clang version 16.0.0"}
!59 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !60, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!60 = !DISubroutineType(types: !61)
!61 = !{null, !46, !46}
!62 = !{}
!63 = !DILocalVariable(name: "p", arg: 1, scope: !59, file: !2, line: 4, type: !46)
!64 = !DILocation(line: 4, column: 22, scope: !59)
!65 = !DILocalVariable(name: "q", arg: 2, scope: !59, file: !2, line: 4, type: !46)
!66 = !DILocation(line: 4, column: 31, scope: !59)
!67 = !DILocation(line: 5, column: 3, scope: !59)
!68 = !DILocation(line: 6, column: 1, scope: !59)
!69 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !60, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!70 = !DILocalVariable(name: "p", arg: 1, scope: !69, file: !2, line: 8, type: !46)
!71 = !DILocation(line: 8, column: 25, scope: !69)
!72 = !DILocalVariable(name: "q", arg: 2, scope: !69, file: !2, line: 8, type: !46)
!73 = !DILocation(line: 8, column: 34, scope: !69)
!74 = !DILocation(line: 9, column: 3, scope: !69)
!75 = !DILocation(line: 10, column: 1, scope: !69)
!76 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !60, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!77 = !DILocalVariable(name: "p", arg: 1, scope: !76, file: !2, line: 12, type: !46)
!78 = !DILocation(line: 12, column: 21, scope: !76)
!79 = !DILocalVariable(name: "q", arg: 2, scope: !76, file: !2, line: 12, type: !46)
!80 = !DILocation(line: 12, column: 30, scope: !76)
!81 = !DILocation(line: 13, column: 3, scope: !76)
!82 = !DILocation(line: 14, column: 1, scope: !76)
!83 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !60, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!84 = !DILocalVariable(name: "p", arg: 1, scope: !83, file: !2, line: 16, type: !46)
!85 = !DILocation(line: 16, column: 20, scope: !83)
!86 = !DILocalVariable(name: "q", arg: 2, scope: !83, file: !2, line: 16, type: !46)
!87 = !DILocation(line: 16, column: 29, scope: !83)
!88 = !DILocation(line: 17, column: 3, scope: !83)
!89 = !DILocation(line: 18, column: 1, scope: !83)
!90 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !60, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!91 = !DILocalVariable(name: "p", arg: 1, scope: !90, file: !2, line: 20, type: !46)
!92 = !DILocation(line: 20, column: 34, scope: !90)
!93 = !DILocalVariable(name: "q", arg: 2, scope: !90, file: !2, line: 20, type: !46)
!94 = !DILocation(line: 20, column: 43, scope: !90)
!95 = !DILocation(line: 21, column: 3, scope: !90)
!96 = !DILocation(line: 22, column: 1, scope: !90)
!97 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !60, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!98 = !DILocalVariable(name: "p", arg: 1, scope: !97, file: !2, line: 24, type: !46)
!99 = !DILocation(line: 24, column: 33, scope: !97)
!100 = !DILocalVariable(name: "q", arg: 2, scope: !97, file: !2, line: 24, type: !46)
!101 = !DILocation(line: 24, column: 42, scope: !97)
!102 = !DILocation(line: 25, column: 3, scope: !97)
!103 = !DILocation(line: 26, column: 1, scope: !97)
!104 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !105, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!105 = !DISubroutineType(types: !106)
!106 = !{!46, !48}
!107 = !DILocalVariable(name: "n", arg: 1, scope: !104, file: !2, line: 29, type: !48)
!108 = !DILocation(line: 29, column: 22, scope: !104)
!109 = !DILocation(line: 30, column: 17, scope: !104)
!110 = !DILocation(line: 30, column: 10, scope: !104)
!111 = !DILocation(line: 30, column: 3, scope: !104)
!112 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !105, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!113 = !DILocalVariable(name: "n", arg: 1, scope: !112, file: !2, line: 33, type: !48)
!114 = !DILocation(line: 33, column: 28, scope: !112)
!115 = !DILocation(line: 34, column: 19, scope: !112)
!116 = !DILocation(line: 34, column: 12, scope: !112)
!117 = !DILocation(line: 34, column: 5, scope: !112)
!118 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !105, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!119 = !DILocalVariable(name: "n", arg: 1, scope: !118, file: !2, line: 37, type: !48)
!120 = !DILocation(line: 37, column: 21, scope: !118)
!121 = !DILocation(line: 38, column: 17, scope: !118)
!122 = !DILocation(line: 38, column: 10, scope: !118)
!123 = !DILocation(line: 38, column: 3, scope: !118)
!124 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !105, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!125 = !DILocalVariable(name: "n", arg: 1, scope: !124, file: !2, line: 41, type: !48)
!126 = !DILocation(line: 41, column: 21, scope: !124)
!127 = !DILocation(line: 42, column: 17, scope: !124)
!128 = !DILocation(line: 42, column: 10, scope: !124)
!129 = !DILocation(line: 42, column: 3, scope: !124)
!130 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !105, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!131 = !DILocalVariable(name: "n", arg: 1, scope: !130, file: !2, line: 45, type: !48)
!132 = !DILocation(line: 45, column: 21, scope: !130)
!133 = !DILocation(line: 46, column: 17, scope: !130)
!134 = !DILocation(line: 46, column: 10, scope: !130)
!135 = !DILocation(line: 46, column: 3, scope: !130)
!136 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !105, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!137 = !DILocalVariable(name: "n", arg: 1, scope: !136, file: !2, line: 49, type: !48)
!138 = !DILocation(line: 49, column: 21, scope: !136)
!139 = !DILocation(line: 50, column: 17, scope: !136)
!140 = !DILocation(line: 50, column: 10, scope: !136)
!141 = !DILocation(line: 50, column: 3, scope: !136)
!142 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !105, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!143 = !DILocalVariable(name: "n", arg: 1, scope: !142, file: !2, line: 53, type: !48)
!144 = !DILocation(line: 53, column: 21, scope: !142)
!145 = !DILocation(line: 54, column: 17, scope: !142)
!146 = !DILocation(line: 54, column: 10, scope: !142)
!147 = !DILocation(line: 54, column: 3, scope: !142)
!148 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !105, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!149 = !DILocalVariable(name: "n", arg: 1, scope: !148, file: !2, line: 57, type: !48)
!150 = !DILocation(line: 57, column: 18, scope: !148)
!151 = !DILocation(line: 58, column: 17, scope: !148)
!152 = !DILocation(line: 58, column: 10, scope: !148)
!153 = !DILocation(line: 58, column: 3, scope: !148)
!154 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !155, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!155 = !DISubroutineType(types: !156)
!156 = !{null, !48, !48}
!157 = !DILocalVariable(name: "id", arg: 1, scope: !154, file: !2, line: 67, type: !48)
!158 = !DILocation(line: 67, column: 20, scope: !154)
!159 = !DILocalVariable(name: "flags", arg: 2, scope: !154, file: !2, line: 67, type: !48)
!160 = !DILocation(line: 67, column: 28, scope: !154)
!161 = !DILocation(line: 68, column: 3, scope: !154)
!162 = !DILocation(line: 69, column: 1, scope: !154)
!163 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !164, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!164 = !DISubroutineType(types: !165)
!165 = !{null, !48, !166}
!166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!167 = !DILocalVariable(name: "thdid", arg: 1, scope: !163, file: !2, line: 79, type: !48)
!168 = !DILocation(line: 79, column: 21, scope: !163)
!169 = !DILocalVariable(name: "cxt", arg: 2, scope: !163, file: !2, line: 79, type: !166)
!170 = !DILocation(line: 79, column: 34, scope: !163)
!171 = !DILocation(line: 81, column: 1, scope: !163)
!172 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !164, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!173 = !DILocalVariable(name: "thdid", arg: 1, scope: !172, file: !2, line: 82, type: !48)
!174 = !DILocation(line: 82, column: 21, scope: !172)
!175 = !DILocalVariable(name: "cxt", arg: 2, scope: !172, file: !2, line: 82, type: !166)
!176 = !DILocation(line: 82, column: 33, scope: !172)
!177 = !DILocation(line: 84, column: 1, scope: !172)
!178 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !179, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!179 = !DISubroutineType(types: !180)
!180 = !{null, !48, !166, !166}
!181 = !DILocalVariable(name: "thdid", arg: 1, scope: !178, file: !2, line: 85, type: !48)
!182 = !DILocation(line: 85, column: 26, scope: !178)
!183 = !DILocalVariable(name: "cxt", arg: 2, scope: !178, file: !2, line: 85, type: !166)
!184 = !DILocation(line: 85, column: 38, scope: !178)
!185 = !DILocalVariable(name: "lev", arg: 3, scope: !178, file: !2, line: 85, type: !166)
!186 = !DILocation(line: 85, column: 49, scope: !178)
!187 = !DILocation(line: 87, column: 1, scope: !178)
!188 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !189, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!189 = !DISubroutineType(types: !190)
!190 = !{null, !166}
!191 = !DILocalVariable(name: "lockname", arg: 1, scope: !188, file: !2, line: 89, type: !166)
!192 = !DILocation(line: 89, column: 17, scope: !188)
!193 = !DILocation(line: 91, column: 1, scope: !188)
!194 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !189, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!195 = !DILocalVariable(name: "str", arg: 1, scope: !194, file: !2, line: 93, type: !166)
!196 = !DILocation(line: 93, column: 18, scope: !194)
!197 = !DILocation(line: 94, column: 18, scope: !194)
!198 = !DILocation(line: 94, column: 3, scope: !194)
!199 = !DILocation(line: 95, column: 3, scope: !194)
!200 = !DILocation(line: 96, column: 3, scope: !194)
!201 = !DILocation(line: 97, column: 1, scope: !194)
!202 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !203, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!203 = !DISubroutineType(types: !204)
!204 = !{!46, !47}
!205 = !DILocalVariable(name: "p", arg: 1, scope: !202, file: !2, line: 100, type: !47)
!206 = !DILocation(line: 100, column: 24, scope: !202)
!207 = !DILocation(line: 101, column: 6, scope: !202)
!208 = !DILocation(line: 101, column: 8, scope: !202)
!209 = !DILocation(line: 102, column: 1, scope: !202)
!210 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !203, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!211 = !DILocalVariable(name: "p", arg: 1, scope: !210, file: !2, line: 104, type: !47)
!212 = !DILocation(line: 104, column: 20, scope: !210)
!213 = !DILocation(line: 105, column: 6, scope: !210)
!214 = !DILocation(line: 105, column: 8, scope: !210)
!215 = !DILocation(line: 106, column: 1, scope: !210)
!216 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !203, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!217 = !DILocalVariable(name: "p", arg: 1, scope: !216, file: !2, line: 110, type: !47)
!218 = !DILocation(line: 110, column: 22, scope: !216)
!219 = !DILocation(line: 111, column: 10, scope: !216)
!220 = !DILocation(line: 111, column: 5, scope: !216)
!221 = !DILocation(line: 112, column: 1, scope: !216)
!222 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !203, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!223 = !DILocalVariable(name: "p", arg: 1, scope: !222, file: !2, line: 115, type: !47)
!224 = !DILocation(line: 115, column: 24, scope: !222)
!225 = !DILocation(line: 116, column: 10, scope: !222)
!226 = !DILocation(line: 116, column: 5, scope: !222)
!227 = !DILocation(line: 117, column: 1, scope: !222)
!228 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !229, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!229 = !DISubroutineType(types: !230)
!230 = !{null}
!231 = !DILocation(line: 135, column: 20, scope: !228)
!232 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_int_10_bad", scope: !19, file: !19, line: 24, type: !229, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!233 = !DILocalVariable(name: "data", scope: !232, file: !19, line: 26, type: !47)
!234 = !DILocation(line: 26, column: 11, scope: !232)
!235 = !DILocation(line: 28, column: 10, scope: !232)
!236 = !DILocation(line: 29, column: 8, scope: !237)
!237 = distinct !DILexicalBlock(scope: !232, file: !19, line: 29, column: 8)
!238 = !DILocation(line: 29, column: 8, scope: !232)
!239 = !DILocation(line: 31, column: 23, scope: !240)
!240 = distinct !DILexicalBlock(scope: !237, file: !19, line: 30, column: 5)
!241 = !DILocation(line: 31, column: 14, scope: !240)
!242 = !DILocation(line: 32, column: 13, scope: !243)
!243 = distinct !DILexicalBlock(scope: !240, file: !19, line: 32, column: 13)
!244 = !DILocation(line: 32, column: 18, scope: !243)
!245 = !DILocation(line: 32, column: 13, scope: !240)
!246 = !DILocation(line: 32, column: 28, scope: !247)
!247 = distinct !DILexicalBlock(scope: !243, file: !19, line: 32, column: 27)
!248 = !DILocation(line: 34, column: 18, scope: !240)
!249 = !DILocation(line: 34, column: 9, scope: !240)
!250 = !DILocation(line: 35, column: 5, scope: !240)
!251 = !DILocation(line: 36, column: 8, scope: !252)
!252 = distinct !DILexicalBlock(scope: !232, file: !19, line: 36, column: 8)
!253 = !DILocation(line: 36, column: 8, scope: !232)
!254 = !DILocation(line: 39, column: 20, scope: !255)
!255 = distinct !DILexicalBlock(scope: !252, file: !19, line: 37, column: 5)
!256 = !DILocation(line: 39, column: 9, scope: !255)
!257 = !DILocation(line: 40, column: 5, scope: !255)
!258 = !DILocation(line: 41, column: 1, scope: !232)
!259 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_int_10_good", scope: !19, file: !19, line: 137, type: !229, scopeLine: 138, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!260 = !DILocation(line: 139, column: 5, scope: !259)
!261 = !DILocation(line: 140, column: 5, scope: !259)
!262 = !DILocation(line: 141, column: 5, scope: !259)
!263 = !DILocation(line: 142, column: 5, scope: !259)
!264 = !DILocation(line: 143, column: 1, scope: !259)
!265 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 154, type: !266, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !62)
!266 = !DISubroutineType(types: !267)
!267 = !{!48, !48, !268}
!268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !166, size: 64)
!269 = !DILocalVariable(name: "argc", arg: 1, scope: !265, file: !19, line: 154, type: !48)
!270 = !DILocation(line: 154, column: 14, scope: !265)
!271 = !DILocalVariable(name: "argv", arg: 2, scope: !265, file: !19, line: 154, type: !268)
!272 = !DILocation(line: 154, column: 27, scope: !265)
!273 = !DILocation(line: 157, column: 22, scope: !265)
!274 = !DILocation(line: 157, column: 12, scope: !265)
!275 = !DILocation(line: 157, column: 5, scope: !265)
!276 = !DILocation(line: 159, column: 5, scope: !265)
!277 = !DILocation(line: 160, column: 5, scope: !265)
!278 = !DILocation(line: 161, column: 5, scope: !265)
!279 = !DILocation(line: 164, column: 5, scope: !265)
!280 = !DILocation(line: 165, column: 5, scope: !265)
!281 = !DILocation(line: 166, column: 5, scope: !265)
!282 = !DILocation(line: 168, column: 5, scope: !265)
!283 = distinct !DISubprogram(name: "goodB2G1", scope: !19, file: !19, line: 48, type: !229, scopeLine: 49, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !62)
!284 = !DILocalVariable(name: "data", scope: !283, file: !19, line: 50, type: !47)
!285 = !DILocation(line: 50, column: 11, scope: !283)
!286 = !DILocation(line: 52, column: 10, scope: !283)
!287 = !DILocation(line: 53, column: 8, scope: !288)
!288 = distinct !DILexicalBlock(scope: !283, file: !19, line: 53, column: 8)
!289 = !DILocation(line: 53, column: 8, scope: !283)
!290 = !DILocation(line: 55, column: 23, scope: !291)
!291 = distinct !DILexicalBlock(scope: !288, file: !19, line: 54, column: 5)
!292 = !DILocation(line: 55, column: 14, scope: !291)
!293 = !DILocation(line: 56, column: 13, scope: !294)
!294 = distinct !DILexicalBlock(scope: !291, file: !19, line: 56, column: 13)
!295 = !DILocation(line: 56, column: 18, scope: !294)
!296 = !DILocation(line: 56, column: 13, scope: !291)
!297 = !DILocation(line: 56, column: 28, scope: !298)
!298 = distinct !DILexicalBlock(scope: !294, file: !19, line: 56, column: 27)
!299 = !DILocation(line: 58, column: 18, scope: !291)
!300 = !DILocation(line: 58, column: 9, scope: !291)
!301 = !DILocation(line: 59, column: 5, scope: !291)
!302 = !DILocation(line: 60, column: 8, scope: !303)
!303 = distinct !DILexicalBlock(scope: !283, file: !19, line: 60, column: 8)
!304 = !DILocation(line: 60, column: 8, scope: !283)
!305 = !DILocation(line: 63, column: 9, scope: !306)
!306 = distinct !DILexicalBlock(scope: !303, file: !19, line: 61, column: 5)
!307 = !DILocation(line: 64, column: 5, scope: !306)
!308 = !DILocation(line: 71, column: 1, scope: !283)
!309 = distinct !DISubprogram(name: "goodB2G2", scope: !19, file: !19, line: 74, type: !229, scopeLine: 75, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !62)
!310 = !DILocalVariable(name: "data", scope: !309, file: !19, line: 76, type: !47)
!311 = !DILocation(line: 76, column: 11, scope: !309)
!312 = !DILocation(line: 78, column: 10, scope: !309)
!313 = !DILocation(line: 79, column: 8, scope: !314)
!314 = distinct !DILexicalBlock(scope: !309, file: !19, line: 79, column: 8)
!315 = !DILocation(line: 79, column: 8, scope: !309)
!316 = !DILocation(line: 81, column: 23, scope: !317)
!317 = distinct !DILexicalBlock(scope: !314, file: !19, line: 80, column: 5)
!318 = !DILocation(line: 81, column: 14, scope: !317)
!319 = !DILocation(line: 82, column: 13, scope: !320)
!320 = distinct !DILexicalBlock(scope: !317, file: !19, line: 82, column: 13)
!321 = !DILocation(line: 82, column: 18, scope: !320)
!322 = !DILocation(line: 82, column: 13, scope: !317)
!323 = !DILocation(line: 82, column: 28, scope: !324)
!324 = distinct !DILexicalBlock(scope: !320, file: !19, line: 82, column: 27)
!325 = !DILocation(line: 84, column: 18, scope: !317)
!326 = !DILocation(line: 84, column: 9, scope: !317)
!327 = !DILocation(line: 85, column: 5, scope: !317)
!328 = !DILocation(line: 86, column: 8, scope: !329)
!329 = distinct !DILexicalBlock(scope: !309, file: !19, line: 86, column: 8)
!330 = !DILocation(line: 86, column: 8, scope: !309)
!331 = !DILocation(line: 91, column: 5, scope: !332)
!332 = distinct !DILexicalBlock(scope: !329, file: !19, line: 87, column: 5)
!333 = !DILocation(line: 92, column: 1, scope: !309)
!334 = distinct !DISubprogram(name: "goodG2B1", scope: !19, file: !19, line: 95, type: !229, scopeLine: 96, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !62)
!335 = !DILocalVariable(name: "data", scope: !334, file: !19, line: 97, type: !47)
!336 = !DILocation(line: 97, column: 11, scope: !334)
!337 = !DILocation(line: 99, column: 10, scope: !334)
!338 = !DILocation(line: 100, column: 8, scope: !339)
!339 = distinct !DILexicalBlock(scope: !334, file: !19, line: 100, column: 8)
!340 = !DILocation(line: 100, column: 8, scope: !334)
!341 = !DILocation(line: 103, column: 9, scope: !342)
!342 = distinct !DILexicalBlock(scope: !339, file: !19, line: 101, column: 5)
!343 = !DILocation(line: 104, column: 5, scope: !342)
!344 = !DILocation(line: 107, column: 23, scope: !345)
!345 = distinct !DILexicalBlock(scope: !339, file: !19, line: 106, column: 5)
!346 = !DILocation(line: 107, column: 14, scope: !345)
!347 = !DILocation(line: 108, column: 13, scope: !348)
!348 = distinct !DILexicalBlock(scope: !345, file: !19, line: 108, column: 13)
!349 = !DILocation(line: 108, column: 18, scope: !348)
!350 = !DILocation(line: 108, column: 13, scope: !345)
!351 = !DILocation(line: 108, column: 28, scope: !352)
!352 = distinct !DILexicalBlock(scope: !348, file: !19, line: 108, column: 27)
!353 = !DILocation(line: 111, column: 8, scope: !354)
!354 = distinct !DILexicalBlock(scope: !334, file: !19, line: 111, column: 8)
!355 = !DILocation(line: 111, column: 8, scope: !334)
!356 = !DILocation(line: 114, column: 18, scope: !357)
!357 = distinct !DILexicalBlock(scope: !354, file: !19, line: 112, column: 5)
!358 = !DILocation(line: 114, column: 9, scope: !357)
!359 = !DILocation(line: 115, column: 5, scope: !357)
!360 = !DILocation(line: 116, column: 1, scope: !334)
!361 = distinct !DISubprogram(name: "goodG2B2", scope: !19, file: !19, line: 119, type: !229, scopeLine: 120, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !62)
!362 = !DILocalVariable(name: "data", scope: !361, file: !19, line: 121, type: !47)
!363 = !DILocation(line: 121, column: 11, scope: !361)
!364 = !DILocation(line: 123, column: 10, scope: !361)
!365 = !DILocation(line: 124, column: 8, scope: !366)
!366 = distinct !DILexicalBlock(scope: !361, file: !19, line: 124, column: 8)
!367 = !DILocation(line: 124, column: 8, scope: !361)
!368 = !DILocation(line: 126, column: 23, scope: !369)
!369 = distinct !DILexicalBlock(scope: !366, file: !19, line: 125, column: 5)
!370 = !DILocation(line: 126, column: 14, scope: !369)
!371 = !DILocation(line: 127, column: 13, scope: !372)
!372 = distinct !DILexicalBlock(scope: !369, file: !19, line: 127, column: 13)
!373 = !DILocation(line: 127, column: 18, scope: !372)
!374 = !DILocation(line: 127, column: 13, scope: !369)
!375 = !DILocation(line: 127, column: 28, scope: !376)
!376 = distinct !DILexicalBlock(scope: !372, file: !19, line: 127, column: 27)
!377 = !DILocation(line: 129, column: 5, scope: !369)
!378 = !DILocation(line: 130, column: 8, scope: !379)
!379 = distinct !DILexicalBlock(scope: !361, file: !19, line: 130, column: 8)
!380 = !DILocation(line: 130, column: 8, scope: !361)
!381 = !DILocation(line: 133, column: 18, scope: !382)
!382 = distinct !DILexicalBlock(scope: !379, file: !19, line: 131, column: 5)
!383 = !DILocation(line: 133, column: 9, scope: !382)
!384 = !DILocation(line: 134, column: 5, scope: !382)
!385 = !DILocation(line: 135, column: 1, scope: !361)
