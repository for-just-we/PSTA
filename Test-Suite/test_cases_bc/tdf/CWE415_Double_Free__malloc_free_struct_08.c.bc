; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tdf/CWE415_Double_Free__malloc_free_struct_08.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tdf/CWE415_Double_Free__malloc_free_struct_08.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !33
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !38

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !65 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !69, metadata !DIExpression()), !dbg !70
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !73
  ret void, !dbg !74
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !75 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !76, metadata !DIExpression()), !dbg !77
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !82 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !83, metadata !DIExpression()), !dbg !84
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !87
  ret void, !dbg !88
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !89 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !90, metadata !DIExpression()), !dbg !91
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !94
  ret void, !dbg !95
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !96 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !97, metadata !DIExpression()), !dbg !98
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !101
  ret void, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !103 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !104, metadata !DIExpression()), !dbg !105
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !106, metadata !DIExpression()), !dbg !107
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !108
  ret void, !dbg !109
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !110 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %0 = load i32, ptr %n.addr, align 4, !dbg !115
  %conv = sext i32 %0 to i64, !dbg !115
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !116
  ret ptr %call, !dbg !117
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !118 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !119, metadata !DIExpression()), !dbg !120
  %0 = load i32, ptr %n.addr, align 4, !dbg !121
  %conv = sext i32 %0 to i64, !dbg !121
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !122
  ret ptr %call, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !124 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !125, metadata !DIExpression()), !dbg !126
  %0 = load i32, ptr %n.addr, align 4, !dbg !127
  %conv = sext i32 %0 to i64, !dbg !127
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !128
  ret ptr %call, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !130 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !131, metadata !DIExpression()), !dbg !132
  %0 = load i32, ptr %n.addr, align 4, !dbg !133
  %conv = sext i32 %0 to i64, !dbg !133
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !134
  ret ptr %call, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !136 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !137, metadata !DIExpression()), !dbg !138
  %0 = load i32, ptr %n.addr, align 4, !dbg !139
  %conv = sext i32 %0 to i64, !dbg !139
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !140
  ret ptr %call, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !142 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !143, metadata !DIExpression()), !dbg !144
  %0 = load i32, ptr %n.addr, align 4, !dbg !145
  %conv = sext i32 %0 to i64, !dbg !145
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !146
  ret ptr %call, !dbg !147
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !148 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !149, metadata !DIExpression()), !dbg !150
  %0 = load i32, ptr %n.addr, align 4, !dbg !151
  %conv = sext i32 %0 to i64, !dbg !151
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !152
  ret ptr %call, !dbg !153
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !154 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !155, metadata !DIExpression()), !dbg !156
  %0 = load i32, ptr %n.addr, align 4, !dbg !157
  %conv = sext i32 %0 to i64, !dbg !157
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !158
  ret ptr %call, !dbg !159
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !160 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !163, metadata !DIExpression()), !dbg !164
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !165, metadata !DIExpression()), !dbg !166
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !167
  ret void, !dbg !168
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !169 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !173, metadata !DIExpression()), !dbg !174
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !175, metadata !DIExpression()), !dbg !176
  ret void, !dbg !177
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !178 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !179, metadata !DIExpression()), !dbg !180
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !181, metadata !DIExpression()), !dbg !182
  ret void, !dbg !183
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !184 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !187, metadata !DIExpression()), !dbg !188
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !189, metadata !DIExpression()), !dbg !190
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !191, metadata !DIExpression()), !dbg !192
  ret void, !dbg !193
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !194 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !197, metadata !DIExpression()), !dbg !198
  ret void, !dbg !199
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !200 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !201, metadata !DIExpression()), !dbg !202
  %0 = load ptr, ptr %str.addr, align 8, !dbg !203
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !204
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !205
  %call2 = call i32 @getchar(), !dbg !206
  ret void, !dbg !207
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !208 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !212, metadata !DIExpression()), !dbg !213
  %0 = load ptr, ptr %p.addr, align 8, !dbg !214
  store i32 0, ptr %0, align 4, !dbg !215
  %1 = load ptr, ptr %retval, align 8, !dbg !216
  ret ptr %1, !dbg !216
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !217 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !218, metadata !DIExpression()), !dbg !219
  %0 = load ptr, ptr %p.addr, align 8, !dbg !220
  store i32 0, ptr %0, align 4, !dbg !221
  %1 = load ptr, ptr %retval, align 8, !dbg !222
  ret ptr %1, !dbg !222
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !223 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !224, metadata !DIExpression()), !dbg !225
  %0 = load ptr, ptr %p.addr, align 8, !dbg !226
  call void @free(ptr noundef %0) #7, !dbg !227
  %1 = load ptr, ptr %retval, align 8, !dbg !228
  ret ptr %1, !dbg !228
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !229 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !230, metadata !DIExpression()), !dbg !231
  %0 = load ptr, ptr %p.addr, align 8, !dbg !232
  call void @free(ptr noundef %0) #7, !dbg !233
  %1 = load ptr, ptr %retval, align 8, !dbg !234
  ret ptr %1, !dbg !234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !235 {
entry:
  ret void, !dbg !238
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_struct_08_bad() #0 !dbg !239 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !240, metadata !DIExpression()), !dbg !241
  store ptr null, ptr %data, align 8, !dbg !242
  %call = call i32 @staticReturnsTrue(), !dbg !243
  %tobool = icmp ne i32 %call, 0, !dbg !243
  br i1 %tobool, label %if.then, label %if.end4, !dbg !245

if.then:                                          ; preds = %entry
  %call1 = call ptr @DOUBLEFREEMALLOC(i32 noundef 800), !dbg !246
  store ptr %call1, ptr %data, align 8, !dbg !248
  %0 = load ptr, ptr %data, align 8, !dbg !249
  %cmp = icmp eq ptr %0, null, !dbg !251
  br i1 %cmp, label %if.then2, label %if.end, !dbg !252

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !253
  unreachable, !dbg !253

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !255
  %call3 = call ptr @SAFEFREE(ptr noundef %1), !dbg !256
  br label %if.end4, !dbg !257

if.end4:                                          ; preds = %if.end, %entry
  %call5 = call i32 @staticReturnsTrue(), !dbg !258
  %tobool6 = icmp ne i32 %call5, 0, !dbg !258
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !260

if.then7:                                         ; preds = %if.end4
  %2 = load ptr, ptr %data, align 8, !dbg !261
  %call8 = call ptr @DOUBLEFREE(ptr noundef %2), !dbg !263
  br label %if.end9, !dbg !264

if.end9:                                          ; preds = %if.then7, %if.end4
  ret void, !dbg !265
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_struct_08_good() #0 !dbg !266 {
entry:
  call void @goodB2G1(), !dbg !267
  call void @goodB2G2(), !dbg !268
  call void @goodG2B1(), !dbg !269
  call void @goodG2B2(), !dbg !270
  ret void, !dbg !271
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !272 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !276, metadata !DIExpression()), !dbg !277
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !278, metadata !DIExpression()), !dbg !279
  %call = call i64 @time(ptr noundef null) #7, !dbg !280
  %conv = trunc i64 %call to i32, !dbg !281
  call void @srand(i32 noundef %conv) #7, !dbg !282
  call void @printLine(ptr noundef @.str.3), !dbg !283
  call void @CWE415_Double_Free__malloc_free_struct_08_good(), !dbg !284
  call void @printLine(ptr noundef @.str.4), !dbg !285
  call void @printLine(ptr noundef @.str.5), !dbg !286
  call void @CWE415_Double_Free__malloc_free_struct_08_bad(), !dbg !287
  call void @printLine(ptr noundef @.str.6), !dbg !288
  ret i32 0, !dbg !289
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @staticReturnsTrue() #0 !dbg !290 {
entry:
  ret i32 1, !dbg !293
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !294 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !295, metadata !DIExpression()), !dbg !296
  store ptr null, ptr %data, align 8, !dbg !297
  %call = call i32 @staticReturnsTrue(), !dbg !298
  %tobool = icmp ne i32 %call, 0, !dbg !298
  br i1 %tobool, label %if.then, label %if.end4, !dbg !300

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !301
  store ptr %call1, ptr %data, align 8, !dbg !303
  %0 = load ptr, ptr %data, align 8, !dbg !304
  %cmp = icmp eq ptr %0, null, !dbg !306
  br i1 %cmp, label %if.then2, label %if.end, !dbg !307

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !308
  unreachable, !dbg !308

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !310
  %call3 = call ptr @SAFEFREE(ptr noundef %1), !dbg !311
  br label %if.end4, !dbg !312

if.end4:                                          ; preds = %if.end, %entry
  %call5 = call i32 @staticReturnsFalse(), !dbg !313
  %tobool6 = icmp ne i32 %call5, 0, !dbg !313
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !315

if.then7:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.7), !dbg !316
  br label %if.end8, !dbg !318

if.else:                                          ; preds = %if.end4
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then7
  ret void, !dbg !319
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @staticReturnsFalse() #0 !dbg !320 {
entry:
  ret i32 0, !dbg !321
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !322 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !323, metadata !DIExpression()), !dbg !324
  store ptr null, ptr %data, align 8, !dbg !325
  %call = call i32 @staticReturnsTrue(), !dbg !326
  %tobool = icmp ne i32 %call, 0, !dbg !326
  br i1 %tobool, label %if.then, label %if.end4, !dbg !328

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !329
  store ptr %call1, ptr %data, align 8, !dbg !331
  %0 = load ptr, ptr %data, align 8, !dbg !332
  %cmp = icmp eq ptr %0, null, !dbg !334
  br i1 %cmp, label %if.then2, label %if.end, !dbg !335

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !336
  unreachable, !dbg !336

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !338
  %call3 = call ptr @SAFEFREE(ptr noundef %1), !dbg !339
  br label %if.end4, !dbg !340

if.end4:                                          ; preds = %if.end, %entry
  %call5 = call i32 @staticReturnsTrue(), !dbg !341
  %tobool6 = icmp ne i32 %call5, 0, !dbg !341
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !343

if.then7:                                         ; preds = %if.end4
  br label %if.end8, !dbg !344

if.end8:                                          ; preds = %if.then7, %if.end4
  ret void, !dbg !346
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !347 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !348, metadata !DIExpression()), !dbg !349
  store ptr null, ptr %data, align 8, !dbg !350
  %call = call i32 @staticReturnsFalse(), !dbg !351
  %tobool = icmp ne i32 %call, 0, !dbg !351
  br i1 %tobool, label %if.then, label %if.else, !dbg !353

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !354
  br label %if.end3, !dbg !356

if.else:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !357
  store ptr %call1, ptr %data, align 8, !dbg !359
  %0 = load ptr, ptr %data, align 8, !dbg !360
  %cmp = icmp eq ptr %0, null, !dbg !362
  br i1 %cmp, label %if.then2, label %if.end, !dbg !363

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !364
  unreachable, !dbg !364

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %call4 = call i32 @staticReturnsTrue(), !dbg !366
  %tobool5 = icmp ne i32 %call4, 0, !dbg !366
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !368

if.then6:                                         ; preds = %if.end3
  %1 = load ptr, ptr %data, align 8, !dbg !369
  %call7 = call ptr @SAFEFREE(ptr noundef %1), !dbg !371
  br label %if.end8, !dbg !372

if.end8:                                          ; preds = %if.then6, %if.end3
  ret void, !dbg !373
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !374 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !375, metadata !DIExpression()), !dbg !376
  store ptr null, ptr %data, align 8, !dbg !377
  %call = call i32 @staticReturnsTrue(), !dbg !378
  %tobool = icmp ne i32 %call, 0, !dbg !378
  br i1 %tobool, label %if.then, label %if.end3, !dbg !380

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !381
  store ptr %call1, ptr %data, align 8, !dbg !383
  %0 = load ptr, ptr %data, align 8, !dbg !384
  %cmp = icmp eq ptr %0, null, !dbg !386
  br i1 %cmp, label %if.then2, label %if.end, !dbg !387

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !388
  unreachable, !dbg !388

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !390

if.end3:                                          ; preds = %if.end, %entry
  %call4 = call i32 @staticReturnsTrue(), !dbg !391
  %tobool5 = icmp ne i32 %call4, 0, !dbg !391
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !393

if.then6:                                         ; preds = %if.end3
  %1 = load ptr, ptr %data, align 8, !dbg !394
  %call7 = call ptr @SAFEFREE(ptr noundef %1), !dbg !396
  br label %if.end8, !dbg !397

if.end8:                                          ; preds = %if.then6, %if.end3
  ret void, !dbg !398
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!43}
!llvm.module.flags = !{!57, !58, !59, !60, !61, !62, !63}
!llvm.ident = !{!64}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 172, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tdf/CWE415_Double_Free__malloc_free_struct_08.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "0ed2531e18998d4cb30aa6e7e44a7e1d")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 18)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 174, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 16)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 177, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 17)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 179, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 15)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(scope: null, file: !19, line: 76, type: !40, isLocal: true, isDefinition: true)
!40 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !41)
!41 = !{!42}
!42 = !DISubrange(count: 21)
!43 = distinct !DICompileUnit(language: DW_LANG_C11, file: !44, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !45, globals: !56, splitDebugInlining: false, nameTableKind: None)
!44 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tdf/CWE415_Double_Free__malloc_free_struct_08.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "0ed2531e18998d4cb30aa6e7e44a7e1d")
!45 = !{!46, !47, !55}
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !49, line: 100, baseType: !50)
!49 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!50 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !49, line: 96, size: 64, elements: !51)
!51 = !{!52, !54}
!52 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !50, file: !49, line: 98, baseType: !53, size: 32)
!53 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!54 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !50, file: !49, line: 99, baseType: !53, size: 32, offset: 32)
!55 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!56 = !{!0, !7, !12, !17, !23, !28, !33, !38}
!57 = !{i32 7, !"Dwarf Version", i32 5}
!58 = !{i32 2, !"Debug Info Version", i32 3}
!59 = !{i32 1, !"wchar_size", i32 4}
!60 = !{i32 8, !"PIC Level", i32 2}
!61 = !{i32 7, !"PIE Level", i32 2}
!62 = !{i32 7, !"uwtable", i32 2}
!63 = !{i32 7, !"frame-pointer", i32 2}
!64 = !{!"clang version 16.0.0"}
!65 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !66, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!66 = !DISubroutineType(types: !67)
!67 = !{null, !46, !46}
!68 = !{}
!69 = !DILocalVariable(name: "p", arg: 1, scope: !65, file: !2, line: 4, type: !46)
!70 = !DILocation(line: 4, column: 22, scope: !65)
!71 = !DILocalVariable(name: "q", arg: 2, scope: !65, file: !2, line: 4, type: !46)
!72 = !DILocation(line: 4, column: 31, scope: !65)
!73 = !DILocation(line: 5, column: 3, scope: !65)
!74 = !DILocation(line: 6, column: 1, scope: !65)
!75 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !66, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!76 = !DILocalVariable(name: "p", arg: 1, scope: !75, file: !2, line: 8, type: !46)
!77 = !DILocation(line: 8, column: 25, scope: !75)
!78 = !DILocalVariable(name: "q", arg: 2, scope: !75, file: !2, line: 8, type: !46)
!79 = !DILocation(line: 8, column: 34, scope: !75)
!80 = !DILocation(line: 9, column: 3, scope: !75)
!81 = !DILocation(line: 10, column: 1, scope: !75)
!82 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !66, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!83 = !DILocalVariable(name: "p", arg: 1, scope: !82, file: !2, line: 12, type: !46)
!84 = !DILocation(line: 12, column: 21, scope: !82)
!85 = !DILocalVariable(name: "q", arg: 2, scope: !82, file: !2, line: 12, type: !46)
!86 = !DILocation(line: 12, column: 30, scope: !82)
!87 = !DILocation(line: 13, column: 3, scope: !82)
!88 = !DILocation(line: 14, column: 1, scope: !82)
!89 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !66, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!90 = !DILocalVariable(name: "p", arg: 1, scope: !89, file: !2, line: 16, type: !46)
!91 = !DILocation(line: 16, column: 20, scope: !89)
!92 = !DILocalVariable(name: "q", arg: 2, scope: !89, file: !2, line: 16, type: !46)
!93 = !DILocation(line: 16, column: 29, scope: !89)
!94 = !DILocation(line: 17, column: 3, scope: !89)
!95 = !DILocation(line: 18, column: 1, scope: !89)
!96 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !66, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!97 = !DILocalVariable(name: "p", arg: 1, scope: !96, file: !2, line: 20, type: !46)
!98 = !DILocation(line: 20, column: 34, scope: !96)
!99 = !DILocalVariable(name: "q", arg: 2, scope: !96, file: !2, line: 20, type: !46)
!100 = !DILocation(line: 20, column: 43, scope: !96)
!101 = !DILocation(line: 21, column: 3, scope: !96)
!102 = !DILocation(line: 22, column: 1, scope: !96)
!103 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !66, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!104 = !DILocalVariable(name: "p", arg: 1, scope: !103, file: !2, line: 24, type: !46)
!105 = !DILocation(line: 24, column: 33, scope: !103)
!106 = !DILocalVariable(name: "q", arg: 2, scope: !103, file: !2, line: 24, type: !46)
!107 = !DILocation(line: 24, column: 42, scope: !103)
!108 = !DILocation(line: 25, column: 3, scope: !103)
!109 = !DILocation(line: 26, column: 1, scope: !103)
!110 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !111, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!111 = !DISubroutineType(types: !112)
!112 = !{!46, !53}
!113 = !DILocalVariable(name: "n", arg: 1, scope: !110, file: !2, line: 29, type: !53)
!114 = !DILocation(line: 29, column: 22, scope: !110)
!115 = !DILocation(line: 30, column: 17, scope: !110)
!116 = !DILocation(line: 30, column: 10, scope: !110)
!117 = !DILocation(line: 30, column: 3, scope: !110)
!118 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !111, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!119 = !DILocalVariable(name: "n", arg: 1, scope: !118, file: !2, line: 33, type: !53)
!120 = !DILocation(line: 33, column: 28, scope: !118)
!121 = !DILocation(line: 34, column: 19, scope: !118)
!122 = !DILocation(line: 34, column: 12, scope: !118)
!123 = !DILocation(line: 34, column: 5, scope: !118)
!124 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !111, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!125 = !DILocalVariable(name: "n", arg: 1, scope: !124, file: !2, line: 37, type: !53)
!126 = !DILocation(line: 37, column: 21, scope: !124)
!127 = !DILocation(line: 38, column: 17, scope: !124)
!128 = !DILocation(line: 38, column: 10, scope: !124)
!129 = !DILocation(line: 38, column: 3, scope: !124)
!130 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !111, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!131 = !DILocalVariable(name: "n", arg: 1, scope: !130, file: !2, line: 41, type: !53)
!132 = !DILocation(line: 41, column: 21, scope: !130)
!133 = !DILocation(line: 42, column: 17, scope: !130)
!134 = !DILocation(line: 42, column: 10, scope: !130)
!135 = !DILocation(line: 42, column: 3, scope: !130)
!136 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !111, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!137 = !DILocalVariable(name: "n", arg: 1, scope: !136, file: !2, line: 45, type: !53)
!138 = !DILocation(line: 45, column: 21, scope: !136)
!139 = !DILocation(line: 46, column: 17, scope: !136)
!140 = !DILocation(line: 46, column: 10, scope: !136)
!141 = !DILocation(line: 46, column: 3, scope: !136)
!142 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !111, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!143 = !DILocalVariable(name: "n", arg: 1, scope: !142, file: !2, line: 49, type: !53)
!144 = !DILocation(line: 49, column: 21, scope: !142)
!145 = !DILocation(line: 50, column: 17, scope: !142)
!146 = !DILocation(line: 50, column: 10, scope: !142)
!147 = !DILocation(line: 50, column: 3, scope: !142)
!148 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !111, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!149 = !DILocalVariable(name: "n", arg: 1, scope: !148, file: !2, line: 53, type: !53)
!150 = !DILocation(line: 53, column: 21, scope: !148)
!151 = !DILocation(line: 54, column: 17, scope: !148)
!152 = !DILocation(line: 54, column: 10, scope: !148)
!153 = !DILocation(line: 54, column: 3, scope: !148)
!154 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !111, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!155 = !DILocalVariable(name: "n", arg: 1, scope: !154, file: !2, line: 57, type: !53)
!156 = !DILocation(line: 57, column: 18, scope: !154)
!157 = !DILocation(line: 58, column: 17, scope: !154)
!158 = !DILocation(line: 58, column: 10, scope: !154)
!159 = !DILocation(line: 58, column: 3, scope: !154)
!160 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !161, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!161 = !DISubroutineType(types: !162)
!162 = !{null, !53, !53}
!163 = !DILocalVariable(name: "id", arg: 1, scope: !160, file: !2, line: 67, type: !53)
!164 = !DILocation(line: 67, column: 20, scope: !160)
!165 = !DILocalVariable(name: "flags", arg: 2, scope: !160, file: !2, line: 67, type: !53)
!166 = !DILocation(line: 67, column: 28, scope: !160)
!167 = !DILocation(line: 68, column: 3, scope: !160)
!168 = !DILocation(line: 69, column: 1, scope: !160)
!169 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !170, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!170 = !DISubroutineType(types: !171)
!171 = !{null, !53, !172}
!172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!173 = !DILocalVariable(name: "thdid", arg: 1, scope: !169, file: !2, line: 79, type: !53)
!174 = !DILocation(line: 79, column: 21, scope: !169)
!175 = !DILocalVariable(name: "cxt", arg: 2, scope: !169, file: !2, line: 79, type: !172)
!176 = !DILocation(line: 79, column: 34, scope: !169)
!177 = !DILocation(line: 81, column: 1, scope: !169)
!178 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !170, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!179 = !DILocalVariable(name: "thdid", arg: 1, scope: !178, file: !2, line: 82, type: !53)
!180 = !DILocation(line: 82, column: 21, scope: !178)
!181 = !DILocalVariable(name: "cxt", arg: 2, scope: !178, file: !2, line: 82, type: !172)
!182 = !DILocation(line: 82, column: 33, scope: !178)
!183 = !DILocation(line: 84, column: 1, scope: !178)
!184 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !185, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!185 = !DISubroutineType(types: !186)
!186 = !{null, !53, !172, !172}
!187 = !DILocalVariable(name: "thdid", arg: 1, scope: !184, file: !2, line: 85, type: !53)
!188 = !DILocation(line: 85, column: 26, scope: !184)
!189 = !DILocalVariable(name: "cxt", arg: 2, scope: !184, file: !2, line: 85, type: !172)
!190 = !DILocation(line: 85, column: 38, scope: !184)
!191 = !DILocalVariable(name: "lev", arg: 3, scope: !184, file: !2, line: 85, type: !172)
!192 = !DILocation(line: 85, column: 49, scope: !184)
!193 = !DILocation(line: 87, column: 1, scope: !184)
!194 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !195, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!195 = !DISubroutineType(types: !196)
!196 = !{null, !172}
!197 = !DILocalVariable(name: "lockname", arg: 1, scope: !194, file: !2, line: 89, type: !172)
!198 = !DILocation(line: 89, column: 17, scope: !194)
!199 = !DILocation(line: 91, column: 1, scope: !194)
!200 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !195, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!201 = !DILocalVariable(name: "str", arg: 1, scope: !200, file: !2, line: 93, type: !172)
!202 = !DILocation(line: 93, column: 18, scope: !200)
!203 = !DILocation(line: 94, column: 18, scope: !200)
!204 = !DILocation(line: 94, column: 3, scope: !200)
!205 = !DILocation(line: 95, column: 3, scope: !200)
!206 = !DILocation(line: 96, column: 3, scope: !200)
!207 = !DILocation(line: 97, column: 1, scope: !200)
!208 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !209, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!209 = !DISubroutineType(types: !210)
!210 = !{!46, !211}
!211 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!212 = !DILocalVariable(name: "p", arg: 1, scope: !208, file: !2, line: 100, type: !211)
!213 = !DILocation(line: 100, column: 24, scope: !208)
!214 = !DILocation(line: 101, column: 6, scope: !208)
!215 = !DILocation(line: 101, column: 8, scope: !208)
!216 = !DILocation(line: 102, column: 1, scope: !208)
!217 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !209, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!218 = !DILocalVariable(name: "p", arg: 1, scope: !217, file: !2, line: 104, type: !211)
!219 = !DILocation(line: 104, column: 20, scope: !217)
!220 = !DILocation(line: 105, column: 6, scope: !217)
!221 = !DILocation(line: 105, column: 8, scope: !217)
!222 = !DILocation(line: 106, column: 1, scope: !217)
!223 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !209, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!224 = !DILocalVariable(name: "p", arg: 1, scope: !223, file: !2, line: 110, type: !211)
!225 = !DILocation(line: 110, column: 22, scope: !223)
!226 = !DILocation(line: 111, column: 10, scope: !223)
!227 = !DILocation(line: 111, column: 5, scope: !223)
!228 = !DILocation(line: 112, column: 1, scope: !223)
!229 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !209, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!230 = !DILocalVariable(name: "p", arg: 1, scope: !229, file: !2, line: 115, type: !211)
!231 = !DILocation(line: 115, column: 24, scope: !229)
!232 = !DILocation(line: 116, column: 10, scope: !229)
!233 = !DILocation(line: 116, column: 5, scope: !229)
!234 = !DILocation(line: 117, column: 1, scope: !229)
!235 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !236, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!236 = !DISubroutineType(types: !237)
!237 = !{null}
!238 = !DILocation(line: 135, column: 20, scope: !235)
!239 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_struct_08_bad", scope: !19, file: !19, line: 37, type: !236, scopeLine: 38, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!240 = !DILocalVariable(name: "data", scope: !239, file: !19, line: 39, type: !47)
!241 = !DILocation(line: 39, column: 21, scope: !239)
!242 = !DILocation(line: 41, column: 10, scope: !239)
!243 = !DILocation(line: 42, column: 8, scope: !244)
!244 = distinct !DILexicalBlock(scope: !239, file: !19, line: 42, column: 8)
!245 = !DILocation(line: 42, column: 8, scope: !239)
!246 = !DILocation(line: 44, column: 33, scope: !247)
!247 = distinct !DILexicalBlock(scope: !244, file: !19, line: 43, column: 5)
!248 = !DILocation(line: 44, column: 14, scope: !247)
!249 = !DILocation(line: 45, column: 13, scope: !250)
!250 = distinct !DILexicalBlock(scope: !247, file: !19, line: 45, column: 13)
!251 = !DILocation(line: 45, column: 18, scope: !250)
!252 = !DILocation(line: 45, column: 13, scope: !247)
!253 = !DILocation(line: 45, column: 28, scope: !254)
!254 = distinct !DILexicalBlock(scope: !250, file: !19, line: 45, column: 27)
!255 = !DILocation(line: 47, column: 18, scope: !247)
!256 = !DILocation(line: 47, column: 9, scope: !247)
!257 = !DILocation(line: 48, column: 5, scope: !247)
!258 = !DILocation(line: 49, column: 8, scope: !259)
!259 = distinct !DILexicalBlock(scope: !239, file: !19, line: 49, column: 8)
!260 = !DILocation(line: 49, column: 8, scope: !239)
!261 = !DILocation(line: 52, column: 20, scope: !262)
!262 = distinct !DILexicalBlock(scope: !259, file: !19, line: 50, column: 5)
!263 = !DILocation(line: 52, column: 9, scope: !262)
!264 = !DILocation(line: 53, column: 5, scope: !262)
!265 = !DILocation(line: 54, column: 1, scope: !239)
!266 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_struct_08_good", scope: !19, file: !19, line: 150, type: !236, scopeLine: 151, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!267 = !DILocation(line: 152, column: 5, scope: !266)
!268 = !DILocation(line: 153, column: 5, scope: !266)
!269 = !DILocation(line: 154, column: 5, scope: !266)
!270 = !DILocation(line: 155, column: 5, scope: !266)
!271 = !DILocation(line: 156, column: 1, scope: !266)
!272 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 167, type: !273, scopeLine: 168, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !68)
!273 = !DISubroutineType(types: !274)
!274 = !{!53, !53, !275}
!275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !172, size: 64)
!276 = !DILocalVariable(name: "argc", arg: 1, scope: !272, file: !19, line: 167, type: !53)
!277 = !DILocation(line: 167, column: 14, scope: !272)
!278 = !DILocalVariable(name: "argv", arg: 2, scope: !272, file: !19, line: 167, type: !275)
!279 = !DILocation(line: 167, column: 27, scope: !272)
!280 = !DILocation(line: 170, column: 22, scope: !272)
!281 = !DILocation(line: 170, column: 12, scope: !272)
!282 = !DILocation(line: 170, column: 5, scope: !272)
!283 = !DILocation(line: 172, column: 5, scope: !272)
!284 = !DILocation(line: 173, column: 5, scope: !272)
!285 = !DILocation(line: 174, column: 5, scope: !272)
!286 = !DILocation(line: 177, column: 5, scope: !272)
!287 = !DILocation(line: 178, column: 5, scope: !272)
!288 = !DILocation(line: 179, column: 5, scope: !272)
!289 = !DILocation(line: 181, column: 5, scope: !272)
!290 = distinct !DISubprogram(name: "staticReturnsTrue", scope: !19, file: !19, line: 25, type: !291, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !68)
!291 = !DISubroutineType(types: !292)
!292 = !{!53}
!293 = !DILocation(line: 27, column: 5, scope: !290)
!294 = distinct !DISubprogram(name: "goodB2G1", scope: !19, file: !19, line: 61, type: !236, scopeLine: 62, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !68)
!295 = !DILocalVariable(name: "data", scope: !294, file: !19, line: 63, type: !47)
!296 = !DILocation(line: 63, column: 21, scope: !294)
!297 = !DILocation(line: 65, column: 10, scope: !294)
!298 = !DILocation(line: 66, column: 8, scope: !299)
!299 = distinct !DILexicalBlock(scope: !294, file: !19, line: 66, column: 8)
!300 = !DILocation(line: 66, column: 8, scope: !294)
!301 = !DILocation(line: 68, column: 33, scope: !302)
!302 = distinct !DILexicalBlock(scope: !299, file: !19, line: 67, column: 5)
!303 = !DILocation(line: 68, column: 14, scope: !302)
!304 = !DILocation(line: 69, column: 13, scope: !305)
!305 = distinct !DILexicalBlock(scope: !302, file: !19, line: 69, column: 13)
!306 = !DILocation(line: 69, column: 18, scope: !305)
!307 = !DILocation(line: 69, column: 13, scope: !302)
!308 = !DILocation(line: 69, column: 28, scope: !309)
!309 = distinct !DILexicalBlock(scope: !305, file: !19, line: 69, column: 27)
!310 = !DILocation(line: 71, column: 18, scope: !302)
!311 = !DILocation(line: 71, column: 9, scope: !302)
!312 = !DILocation(line: 72, column: 5, scope: !302)
!313 = !DILocation(line: 73, column: 8, scope: !314)
!314 = distinct !DILexicalBlock(scope: !294, file: !19, line: 73, column: 8)
!315 = !DILocation(line: 73, column: 8, scope: !294)
!316 = !DILocation(line: 76, column: 9, scope: !317)
!317 = distinct !DILexicalBlock(scope: !314, file: !19, line: 74, column: 5)
!318 = !DILocation(line: 77, column: 5, scope: !317)
!319 = !DILocation(line: 84, column: 1, scope: !294)
!320 = distinct !DISubprogram(name: "staticReturnsFalse", scope: !19, file: !19, line: 30, type: !291, scopeLine: 31, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !68)
!321 = !DILocation(line: 32, column: 5, scope: !320)
!322 = distinct !DISubprogram(name: "goodB2G2", scope: !19, file: !19, line: 87, type: !236, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !68)
!323 = !DILocalVariable(name: "data", scope: !322, file: !19, line: 89, type: !47)
!324 = !DILocation(line: 89, column: 21, scope: !322)
!325 = !DILocation(line: 91, column: 10, scope: !322)
!326 = !DILocation(line: 92, column: 8, scope: !327)
!327 = distinct !DILexicalBlock(scope: !322, file: !19, line: 92, column: 8)
!328 = !DILocation(line: 92, column: 8, scope: !322)
!329 = !DILocation(line: 94, column: 33, scope: !330)
!330 = distinct !DILexicalBlock(scope: !327, file: !19, line: 93, column: 5)
!331 = !DILocation(line: 94, column: 14, scope: !330)
!332 = !DILocation(line: 95, column: 13, scope: !333)
!333 = distinct !DILexicalBlock(scope: !330, file: !19, line: 95, column: 13)
!334 = !DILocation(line: 95, column: 18, scope: !333)
!335 = !DILocation(line: 95, column: 13, scope: !330)
!336 = !DILocation(line: 95, column: 28, scope: !337)
!337 = distinct !DILexicalBlock(scope: !333, file: !19, line: 95, column: 27)
!338 = !DILocation(line: 97, column: 18, scope: !330)
!339 = !DILocation(line: 97, column: 9, scope: !330)
!340 = !DILocation(line: 98, column: 5, scope: !330)
!341 = !DILocation(line: 99, column: 8, scope: !342)
!342 = distinct !DILexicalBlock(scope: !322, file: !19, line: 99, column: 8)
!343 = !DILocation(line: 99, column: 8, scope: !322)
!344 = !DILocation(line: 104, column: 5, scope: !345)
!345 = distinct !DILexicalBlock(scope: !342, file: !19, line: 100, column: 5)
!346 = !DILocation(line: 105, column: 1, scope: !322)
!347 = distinct !DISubprogram(name: "goodG2B1", scope: !19, file: !19, line: 108, type: !236, scopeLine: 109, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !68)
!348 = !DILocalVariable(name: "data", scope: !347, file: !19, line: 110, type: !47)
!349 = !DILocation(line: 110, column: 21, scope: !347)
!350 = !DILocation(line: 112, column: 10, scope: !347)
!351 = !DILocation(line: 113, column: 8, scope: !352)
!352 = distinct !DILexicalBlock(scope: !347, file: !19, line: 113, column: 8)
!353 = !DILocation(line: 113, column: 8, scope: !347)
!354 = !DILocation(line: 116, column: 9, scope: !355)
!355 = distinct !DILexicalBlock(scope: !352, file: !19, line: 114, column: 5)
!356 = !DILocation(line: 117, column: 5, scope: !355)
!357 = !DILocation(line: 120, column: 33, scope: !358)
!358 = distinct !DILexicalBlock(scope: !352, file: !19, line: 119, column: 5)
!359 = !DILocation(line: 120, column: 14, scope: !358)
!360 = !DILocation(line: 121, column: 13, scope: !361)
!361 = distinct !DILexicalBlock(scope: !358, file: !19, line: 121, column: 13)
!362 = !DILocation(line: 121, column: 18, scope: !361)
!363 = !DILocation(line: 121, column: 13, scope: !358)
!364 = !DILocation(line: 121, column: 28, scope: !365)
!365 = distinct !DILexicalBlock(scope: !361, file: !19, line: 121, column: 27)
!366 = !DILocation(line: 124, column: 8, scope: !367)
!367 = distinct !DILexicalBlock(scope: !347, file: !19, line: 124, column: 8)
!368 = !DILocation(line: 124, column: 8, scope: !347)
!369 = !DILocation(line: 127, column: 18, scope: !370)
!370 = distinct !DILexicalBlock(scope: !367, file: !19, line: 125, column: 5)
!371 = !DILocation(line: 127, column: 9, scope: !370)
!372 = !DILocation(line: 128, column: 5, scope: !370)
!373 = !DILocation(line: 129, column: 1, scope: !347)
!374 = distinct !DISubprogram(name: "goodG2B2", scope: !19, file: !19, line: 132, type: !236, scopeLine: 133, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !68)
!375 = !DILocalVariable(name: "data", scope: !374, file: !19, line: 134, type: !47)
!376 = !DILocation(line: 134, column: 21, scope: !374)
!377 = !DILocation(line: 136, column: 10, scope: !374)
!378 = !DILocation(line: 137, column: 8, scope: !379)
!379 = distinct !DILexicalBlock(scope: !374, file: !19, line: 137, column: 8)
!380 = !DILocation(line: 137, column: 8, scope: !374)
!381 = !DILocation(line: 139, column: 33, scope: !382)
!382 = distinct !DILexicalBlock(scope: !379, file: !19, line: 138, column: 5)
!383 = !DILocation(line: 139, column: 14, scope: !382)
!384 = !DILocation(line: 140, column: 13, scope: !385)
!385 = distinct !DILexicalBlock(scope: !382, file: !19, line: 140, column: 13)
!386 = !DILocation(line: 140, column: 18, scope: !385)
!387 = !DILocation(line: 140, column: 13, scope: !382)
!388 = !DILocation(line: 140, column: 28, scope: !389)
!389 = distinct !DILexicalBlock(scope: !385, file: !19, line: 140, column: 27)
!390 = !DILocation(line: 142, column: 5, scope: !382)
!391 = !DILocation(line: 143, column: 8, scope: !392)
!392 = distinct !DILexicalBlock(scope: !374, file: !19, line: 143, column: 8)
!393 = !DILocation(line: 143, column: 8, scope: !374)
!394 = !DILocation(line: 146, column: 18, scope: !395)
!395 = distinct !DILexicalBlock(scope: !392, file: !19, line: 144, column: 5)
!396 = !DILocation(line: 146, column: 9, scope: !395)
!397 = !DILocation(line: 147, column: 5, scope: !395)
!398 = !DILocation(line: 148, column: 1, scope: !374)
