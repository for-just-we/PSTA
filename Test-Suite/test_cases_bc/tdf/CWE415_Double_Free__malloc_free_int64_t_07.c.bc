; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tdf/CWE415_Double_Free__malloc_free_int64_t_07.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tdf/CWE415_Double_Free__malloc_free_int64_t_07.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@staticFive = internal global i32 5, align 4, !dbg !17
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !31
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !37
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !42
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !47
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !52

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !66 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !70, metadata !DIExpression()), !dbg !71
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !72, metadata !DIExpression()), !dbg !73
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !74
  ret void, !dbg !75
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !76 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !77, metadata !DIExpression()), !dbg !78
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !81
  ret void, !dbg !82
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !83 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !84, metadata !DIExpression()), !dbg !85
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !88
  ret void, !dbg !89
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !90 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !91, metadata !DIExpression()), !dbg !92
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !95
  ret void, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !97 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !98, metadata !DIExpression()), !dbg !99
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !102
  ret void, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !104 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !105, metadata !DIExpression()), !dbg !106
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !107, metadata !DIExpression()), !dbg !108
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !109
  ret void, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !111 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %0 = load i32, ptr %n.addr, align 4, !dbg !116
  %conv = sext i32 %0 to i64, !dbg !116
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !117
  ret ptr %call, !dbg !118
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !119 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !120, metadata !DIExpression()), !dbg !121
  %0 = load i32, ptr %n.addr, align 4, !dbg !122
  %conv = sext i32 %0 to i64, !dbg !122
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !123
  ret ptr %call, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !125 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !126, metadata !DIExpression()), !dbg !127
  %0 = load i32, ptr %n.addr, align 4, !dbg !128
  %conv = sext i32 %0 to i64, !dbg !128
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !129
  ret ptr %call, !dbg !130
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !131 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !132, metadata !DIExpression()), !dbg !133
  %0 = load i32, ptr %n.addr, align 4, !dbg !134
  %conv = sext i32 %0 to i64, !dbg !134
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !135
  ret ptr %call, !dbg !136
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !137 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !138, metadata !DIExpression()), !dbg !139
  %0 = load i32, ptr %n.addr, align 4, !dbg !140
  %conv = sext i32 %0 to i64, !dbg !140
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !141
  ret ptr %call, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !143 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !144, metadata !DIExpression()), !dbg !145
  %0 = load i32, ptr %n.addr, align 4, !dbg !146
  %conv = sext i32 %0 to i64, !dbg !146
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !147
  ret ptr %call, !dbg !148
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !149 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !150, metadata !DIExpression()), !dbg !151
  %0 = load i32, ptr %n.addr, align 4, !dbg !152
  %conv = sext i32 %0 to i64, !dbg !152
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !153
  ret ptr %call, !dbg !154
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !155 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !156, metadata !DIExpression()), !dbg !157
  %0 = load i32, ptr %n.addr, align 4, !dbg !158
  %conv = sext i32 %0 to i64, !dbg !158
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !159
  ret ptr %call, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !161 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !164, metadata !DIExpression()), !dbg !165
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !166, metadata !DIExpression()), !dbg !167
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !168
  ret void, !dbg !169
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !170 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !174, metadata !DIExpression()), !dbg !175
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !176, metadata !DIExpression()), !dbg !177
  ret void, !dbg !178
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !179 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !180, metadata !DIExpression()), !dbg !181
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !182, metadata !DIExpression()), !dbg !183
  ret void, !dbg !184
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !185 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !188, metadata !DIExpression()), !dbg !189
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !190, metadata !DIExpression()), !dbg !191
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !192, metadata !DIExpression()), !dbg !193
  ret void, !dbg !194
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !195 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !198, metadata !DIExpression()), !dbg !199
  ret void, !dbg !200
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !201 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !202, metadata !DIExpression()), !dbg !203
  %0 = load ptr, ptr %str.addr, align 8, !dbg !204
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !205
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !206
  %call2 = call i32 @getchar(), !dbg !207
  ret void, !dbg !208
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !209 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !213, metadata !DIExpression()), !dbg !214
  %0 = load ptr, ptr %p.addr, align 8, !dbg !215
  store i32 0, ptr %0, align 4, !dbg !216
  %1 = load ptr, ptr %retval, align 8, !dbg !217
  ret ptr %1, !dbg !217
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !218 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !219, metadata !DIExpression()), !dbg !220
  %0 = load ptr, ptr %p.addr, align 8, !dbg !221
  store i32 0, ptr %0, align 4, !dbg !222
  %1 = load ptr, ptr %retval, align 8, !dbg !223
  ret ptr %1, !dbg !223
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !224 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !225, metadata !DIExpression()), !dbg !226
  %0 = load ptr, ptr %p.addr, align 8, !dbg !227
  call void @free(ptr noundef %0) #7, !dbg !228
  %1 = load ptr, ptr %retval, align 8, !dbg !229
  ret ptr %1, !dbg !229
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !230 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !231, metadata !DIExpression()), !dbg !232
  %0 = load ptr, ptr %p.addr, align 8, !dbg !233
  call void @free(ptr noundef %0) #7, !dbg !234
  %1 = load ptr, ptr %retval, align 8, !dbg !235
  ret ptr %1, !dbg !235
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !236 {
entry:
  ret void, !dbg !239
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_int64_t_07_bad() #0 !dbg !240 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !241, metadata !DIExpression()), !dbg !242
  store ptr null, ptr %data, align 8, !dbg !243
  %0 = load i32, ptr @staticFive, align 4, !dbg !244
  %cmp = icmp eq i32 %0, 5, !dbg !246
  br i1 %cmp, label %if.then, label %if.end4, !dbg !247

if.then:                                          ; preds = %entry
  %call = call ptr @DOUBLEFREEMALLOC(i32 noundef 800), !dbg !248
  store ptr %call, ptr %data, align 8, !dbg !250
  %1 = load ptr, ptr %data, align 8, !dbg !251
  %cmp1 = icmp eq ptr %1, null, !dbg !253
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !254

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !255
  unreachable, !dbg !255

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !257
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !258
  br label %if.end4, !dbg !259

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !260
  %cmp5 = icmp eq i32 %3, 5, !dbg !262
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !263

if.then6:                                         ; preds = %if.end4
  %4 = load ptr, ptr %data, align 8, !dbg !264
  %call7 = call ptr @DOUBLEFREE(ptr noundef %4), !dbg !266
  br label %if.end8, !dbg !267

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !268
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_int64_t_07_good() #0 !dbg !269 {
entry:
  call void @goodB2G1(), !dbg !270
  call void @goodB2G2(), !dbg !271
  call void @goodG2B1(), !dbg !272
  call void @goodG2B2(), !dbg !273
  ret void, !dbg !274
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !275 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !279, metadata !DIExpression()), !dbg !280
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !281, metadata !DIExpression()), !dbg !282
  %call = call i64 @time(ptr noundef null) #7, !dbg !283
  %conv = trunc i64 %call to i32, !dbg !284
  call void @srand(i32 noundef %conv) #7, !dbg !285
  call void @printLine(ptr noundef @.str.3), !dbg !286
  call void @CWE415_Double_Free__malloc_free_int64_t_07_good(), !dbg !287
  call void @printLine(ptr noundef @.str.4), !dbg !288
  call void @printLine(ptr noundef @.str.5), !dbg !289
  call void @CWE415_Double_Free__malloc_free_int64_t_07_bad(), !dbg !290
  call void @printLine(ptr noundef @.str.6), !dbg !291
  ret i32 0, !dbg !292
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !293 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !294, metadata !DIExpression()), !dbg !295
  store ptr null, ptr %data, align 8, !dbg !296
  %0 = load i32, ptr @staticFive, align 4, !dbg !297
  %cmp = icmp eq i32 %0, 5, !dbg !299
  br i1 %cmp, label %if.then, label %if.end4, !dbg !300

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !301
  store ptr %call, ptr %data, align 8, !dbg !303
  %1 = load ptr, ptr %data, align 8, !dbg !304
  %cmp1 = icmp eq ptr %1, null, !dbg !306
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !307

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !308
  unreachable, !dbg !308

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !310
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !311
  br label %if.end4, !dbg !312

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !313
  %cmp5 = icmp ne i32 %3, 5, !dbg !315
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !316

if.then6:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.7), !dbg !317
  br label %if.end7, !dbg !319

if.else:                                          ; preds = %if.end4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void, !dbg !320
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !321 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !322, metadata !DIExpression()), !dbg !323
  store ptr null, ptr %data, align 8, !dbg !324
  %0 = load i32, ptr @staticFive, align 4, !dbg !325
  %cmp = icmp eq i32 %0, 5, !dbg !327
  br i1 %cmp, label %if.then, label %if.end4, !dbg !328

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !329
  store ptr %call, ptr %data, align 8, !dbg !331
  %1 = load ptr, ptr %data, align 8, !dbg !332
  %cmp1 = icmp eq ptr %1, null, !dbg !334
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !335

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !336
  unreachable, !dbg !336

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !338
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !339
  br label %if.end4, !dbg !340

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !341
  %cmp5 = icmp eq i32 %3, 5, !dbg !343
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !344

if.then6:                                         ; preds = %if.end4
  br label %if.end7, !dbg !345

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !347
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !348 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !349, metadata !DIExpression()), !dbg !350
  store ptr null, ptr %data, align 8, !dbg !351
  %0 = load i32, ptr @staticFive, align 4, !dbg !352
  %cmp = icmp ne i32 %0, 5, !dbg !354
  br i1 %cmp, label %if.then, label %if.else, !dbg !355

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !356
  br label %if.end3, !dbg !358

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !359
  store ptr %call, ptr %data, align 8, !dbg !361
  %1 = load ptr, ptr %data, align 8, !dbg !362
  %cmp1 = icmp eq ptr %1, null, !dbg !364
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !365

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !366
  unreachable, !dbg !366

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %2 = load i32, ptr @staticFive, align 4, !dbg !368
  %cmp4 = icmp eq i32 %2, 5, !dbg !370
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !371

if.then5:                                         ; preds = %if.end3
  %3 = load ptr, ptr %data, align 8, !dbg !372
  %call6 = call ptr @SAFEFREE(ptr noundef %3), !dbg !374
  br label %if.end7, !dbg !375

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !376
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !377 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !378, metadata !DIExpression()), !dbg !379
  store ptr null, ptr %data, align 8, !dbg !380
  %0 = load i32, ptr @staticFive, align 4, !dbg !381
  %cmp = icmp eq i32 %0, 5, !dbg !383
  br i1 %cmp, label %if.then, label %if.end3, !dbg !384

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !385
  store ptr %call, ptr %data, align 8, !dbg !387
  %1 = load ptr, ptr %data, align 8, !dbg !388
  %cmp1 = icmp eq ptr %1, null, !dbg !390
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !391

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !392
  unreachable, !dbg !392

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !394

if.end3:                                          ; preds = %if.end, %entry
  %2 = load i32, ptr @staticFive, align 4, !dbg !395
  %cmp4 = icmp eq i32 %2, 5, !dbg !397
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !398

if.then5:                                         ; preds = %if.end3
  %3 = load ptr, ptr %data, align 8, !dbg !399
  %call6 = call ptr @SAFEFREE(ptr noundef %3), !dbg !401
  br label %if.end7, !dbg !402

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !403
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!58, !59, !60, !61, !62, !63, !64}
!llvm.ident = !{!65}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "staticFive", scope: !19, file: !33, line: 25, type: !57, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !30, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tdf/CWE415_Double_Free__malloc_free_int64_t_07.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "c949952222b935a4f664b051e67f89c2")
!21 = !{!22, !23, !29}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !25, line: 27, baseType: !26)
!25 = !DIFile(filename: "/usr/include/bits/stdint-intn.h", directory: "", checksumkind: CSK_MD5, checksum: "457547631e07cd24d9a14c8410e28e57")
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !27, line: 43, baseType: !28)
!27 = !DIFile(filename: "/usr/include/bits/types.h", directory: "", checksumkind: CSK_MD5, checksum: "eac2c46b20ddc2be81186b6ffebfd845")
!28 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!29 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!30 = !{!0, !7, !12, !31, !37, !42, !47, !17, !52}
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(scope: null, file: !33, line: 164, type: !34, isLocal: true, isDefinition: true)
!33 = !DIFile(filename: "src/tdf/CWE415_Double_Free__malloc_free_int64_t_07.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "c949952222b935a4f664b051e67f89c2")
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !35)
!35 = !{!36}
!36 = !DISubrange(count: 18)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(scope: null, file: !33, line: 166, type: !39, isLocal: true, isDefinition: true)
!39 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !40)
!40 = !{!41}
!41 = !DISubrange(count: 16)
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(scope: null, file: !33, line: 169, type: !44, isLocal: true, isDefinition: true)
!44 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !45)
!45 = !{!46}
!46 = !DISubrange(count: 17)
!47 = !DIGlobalVariableExpression(var: !48, expr: !DIExpression())
!48 = distinct !DIGlobalVariable(scope: null, file: !33, line: 171, type: !49, isLocal: true, isDefinition: true)
!49 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !50)
!50 = !{!51}
!51 = !DISubrange(count: 15)
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(scope: null, file: !33, line: 68, type: !54, isLocal: true, isDefinition: true)
!54 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !55)
!55 = !{!56}
!56 = !DISubrange(count: 21)
!57 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!58 = !{i32 7, !"Dwarf Version", i32 5}
!59 = !{i32 2, !"Debug Info Version", i32 3}
!60 = !{i32 1, !"wchar_size", i32 4}
!61 = !{i32 8, !"PIC Level", i32 2}
!62 = !{i32 7, !"PIE Level", i32 2}
!63 = !{i32 7, !"uwtable", i32 2}
!64 = !{i32 7, !"frame-pointer", i32 2}
!65 = !{!"clang version 16.0.0"}
!66 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !67, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!67 = !DISubroutineType(types: !68)
!68 = !{null, !22, !22}
!69 = !{}
!70 = !DILocalVariable(name: "p", arg: 1, scope: !66, file: !2, line: 4, type: !22)
!71 = !DILocation(line: 4, column: 22, scope: !66)
!72 = !DILocalVariable(name: "q", arg: 2, scope: !66, file: !2, line: 4, type: !22)
!73 = !DILocation(line: 4, column: 31, scope: !66)
!74 = !DILocation(line: 5, column: 3, scope: !66)
!75 = !DILocation(line: 6, column: 1, scope: !66)
!76 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !67, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!77 = !DILocalVariable(name: "p", arg: 1, scope: !76, file: !2, line: 8, type: !22)
!78 = !DILocation(line: 8, column: 25, scope: !76)
!79 = !DILocalVariable(name: "q", arg: 2, scope: !76, file: !2, line: 8, type: !22)
!80 = !DILocation(line: 8, column: 34, scope: !76)
!81 = !DILocation(line: 9, column: 3, scope: !76)
!82 = !DILocation(line: 10, column: 1, scope: !76)
!83 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !67, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!84 = !DILocalVariable(name: "p", arg: 1, scope: !83, file: !2, line: 12, type: !22)
!85 = !DILocation(line: 12, column: 21, scope: !83)
!86 = !DILocalVariable(name: "q", arg: 2, scope: !83, file: !2, line: 12, type: !22)
!87 = !DILocation(line: 12, column: 30, scope: !83)
!88 = !DILocation(line: 13, column: 3, scope: !83)
!89 = !DILocation(line: 14, column: 1, scope: !83)
!90 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !67, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!91 = !DILocalVariable(name: "p", arg: 1, scope: !90, file: !2, line: 16, type: !22)
!92 = !DILocation(line: 16, column: 20, scope: !90)
!93 = !DILocalVariable(name: "q", arg: 2, scope: !90, file: !2, line: 16, type: !22)
!94 = !DILocation(line: 16, column: 29, scope: !90)
!95 = !DILocation(line: 17, column: 3, scope: !90)
!96 = !DILocation(line: 18, column: 1, scope: !90)
!97 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !67, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!98 = !DILocalVariable(name: "p", arg: 1, scope: !97, file: !2, line: 20, type: !22)
!99 = !DILocation(line: 20, column: 34, scope: !97)
!100 = !DILocalVariable(name: "q", arg: 2, scope: !97, file: !2, line: 20, type: !22)
!101 = !DILocation(line: 20, column: 43, scope: !97)
!102 = !DILocation(line: 21, column: 3, scope: !97)
!103 = !DILocation(line: 22, column: 1, scope: !97)
!104 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !67, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!105 = !DILocalVariable(name: "p", arg: 1, scope: !104, file: !2, line: 24, type: !22)
!106 = !DILocation(line: 24, column: 33, scope: !104)
!107 = !DILocalVariable(name: "q", arg: 2, scope: !104, file: !2, line: 24, type: !22)
!108 = !DILocation(line: 24, column: 42, scope: !104)
!109 = !DILocation(line: 25, column: 3, scope: !104)
!110 = !DILocation(line: 26, column: 1, scope: !104)
!111 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !112, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!112 = !DISubroutineType(types: !113)
!113 = !{!22, !57}
!114 = !DILocalVariable(name: "n", arg: 1, scope: !111, file: !2, line: 29, type: !57)
!115 = !DILocation(line: 29, column: 22, scope: !111)
!116 = !DILocation(line: 30, column: 17, scope: !111)
!117 = !DILocation(line: 30, column: 10, scope: !111)
!118 = !DILocation(line: 30, column: 3, scope: !111)
!119 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !112, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!120 = !DILocalVariable(name: "n", arg: 1, scope: !119, file: !2, line: 33, type: !57)
!121 = !DILocation(line: 33, column: 28, scope: !119)
!122 = !DILocation(line: 34, column: 19, scope: !119)
!123 = !DILocation(line: 34, column: 12, scope: !119)
!124 = !DILocation(line: 34, column: 5, scope: !119)
!125 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !112, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!126 = !DILocalVariable(name: "n", arg: 1, scope: !125, file: !2, line: 37, type: !57)
!127 = !DILocation(line: 37, column: 21, scope: !125)
!128 = !DILocation(line: 38, column: 17, scope: !125)
!129 = !DILocation(line: 38, column: 10, scope: !125)
!130 = !DILocation(line: 38, column: 3, scope: !125)
!131 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !112, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!132 = !DILocalVariable(name: "n", arg: 1, scope: !131, file: !2, line: 41, type: !57)
!133 = !DILocation(line: 41, column: 21, scope: !131)
!134 = !DILocation(line: 42, column: 17, scope: !131)
!135 = !DILocation(line: 42, column: 10, scope: !131)
!136 = !DILocation(line: 42, column: 3, scope: !131)
!137 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !112, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!138 = !DILocalVariable(name: "n", arg: 1, scope: !137, file: !2, line: 45, type: !57)
!139 = !DILocation(line: 45, column: 21, scope: !137)
!140 = !DILocation(line: 46, column: 17, scope: !137)
!141 = !DILocation(line: 46, column: 10, scope: !137)
!142 = !DILocation(line: 46, column: 3, scope: !137)
!143 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !112, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!144 = !DILocalVariable(name: "n", arg: 1, scope: !143, file: !2, line: 49, type: !57)
!145 = !DILocation(line: 49, column: 21, scope: !143)
!146 = !DILocation(line: 50, column: 17, scope: !143)
!147 = !DILocation(line: 50, column: 10, scope: !143)
!148 = !DILocation(line: 50, column: 3, scope: !143)
!149 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !112, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!150 = !DILocalVariable(name: "n", arg: 1, scope: !149, file: !2, line: 53, type: !57)
!151 = !DILocation(line: 53, column: 21, scope: !149)
!152 = !DILocation(line: 54, column: 17, scope: !149)
!153 = !DILocation(line: 54, column: 10, scope: !149)
!154 = !DILocation(line: 54, column: 3, scope: !149)
!155 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !112, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!156 = !DILocalVariable(name: "n", arg: 1, scope: !155, file: !2, line: 57, type: !57)
!157 = !DILocation(line: 57, column: 18, scope: !155)
!158 = !DILocation(line: 58, column: 17, scope: !155)
!159 = !DILocation(line: 58, column: 10, scope: !155)
!160 = !DILocation(line: 58, column: 3, scope: !155)
!161 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !162, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!162 = !DISubroutineType(types: !163)
!163 = !{null, !57, !57}
!164 = !DILocalVariable(name: "id", arg: 1, scope: !161, file: !2, line: 67, type: !57)
!165 = !DILocation(line: 67, column: 20, scope: !161)
!166 = !DILocalVariable(name: "flags", arg: 2, scope: !161, file: !2, line: 67, type: !57)
!167 = !DILocation(line: 67, column: 28, scope: !161)
!168 = !DILocation(line: 68, column: 3, scope: !161)
!169 = !DILocation(line: 69, column: 1, scope: !161)
!170 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !171, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!171 = !DISubroutineType(types: !172)
!172 = !{null, !57, !173}
!173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!174 = !DILocalVariable(name: "thdid", arg: 1, scope: !170, file: !2, line: 79, type: !57)
!175 = !DILocation(line: 79, column: 21, scope: !170)
!176 = !DILocalVariable(name: "cxt", arg: 2, scope: !170, file: !2, line: 79, type: !173)
!177 = !DILocation(line: 79, column: 34, scope: !170)
!178 = !DILocation(line: 81, column: 1, scope: !170)
!179 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !171, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!180 = !DILocalVariable(name: "thdid", arg: 1, scope: !179, file: !2, line: 82, type: !57)
!181 = !DILocation(line: 82, column: 21, scope: !179)
!182 = !DILocalVariable(name: "cxt", arg: 2, scope: !179, file: !2, line: 82, type: !173)
!183 = !DILocation(line: 82, column: 33, scope: !179)
!184 = !DILocation(line: 84, column: 1, scope: !179)
!185 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !186, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!186 = !DISubroutineType(types: !187)
!187 = !{null, !57, !173, !173}
!188 = !DILocalVariable(name: "thdid", arg: 1, scope: !185, file: !2, line: 85, type: !57)
!189 = !DILocation(line: 85, column: 26, scope: !185)
!190 = !DILocalVariable(name: "cxt", arg: 2, scope: !185, file: !2, line: 85, type: !173)
!191 = !DILocation(line: 85, column: 38, scope: !185)
!192 = !DILocalVariable(name: "lev", arg: 3, scope: !185, file: !2, line: 85, type: !173)
!193 = !DILocation(line: 85, column: 49, scope: !185)
!194 = !DILocation(line: 87, column: 1, scope: !185)
!195 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !196, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!196 = !DISubroutineType(types: !197)
!197 = !{null, !173}
!198 = !DILocalVariable(name: "lockname", arg: 1, scope: !195, file: !2, line: 89, type: !173)
!199 = !DILocation(line: 89, column: 17, scope: !195)
!200 = !DILocation(line: 91, column: 1, scope: !195)
!201 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !196, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!202 = !DILocalVariable(name: "str", arg: 1, scope: !201, file: !2, line: 93, type: !173)
!203 = !DILocation(line: 93, column: 18, scope: !201)
!204 = !DILocation(line: 94, column: 18, scope: !201)
!205 = !DILocation(line: 94, column: 3, scope: !201)
!206 = !DILocation(line: 95, column: 3, scope: !201)
!207 = !DILocation(line: 96, column: 3, scope: !201)
!208 = !DILocation(line: 97, column: 1, scope: !201)
!209 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !210, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!210 = !DISubroutineType(types: !211)
!211 = !{!22, !212}
!212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64)
!213 = !DILocalVariable(name: "p", arg: 1, scope: !209, file: !2, line: 100, type: !212)
!214 = !DILocation(line: 100, column: 24, scope: !209)
!215 = !DILocation(line: 101, column: 6, scope: !209)
!216 = !DILocation(line: 101, column: 8, scope: !209)
!217 = !DILocation(line: 102, column: 1, scope: !209)
!218 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !210, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!219 = !DILocalVariable(name: "p", arg: 1, scope: !218, file: !2, line: 104, type: !212)
!220 = !DILocation(line: 104, column: 20, scope: !218)
!221 = !DILocation(line: 105, column: 6, scope: !218)
!222 = !DILocation(line: 105, column: 8, scope: !218)
!223 = !DILocation(line: 106, column: 1, scope: !218)
!224 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !210, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!225 = !DILocalVariable(name: "p", arg: 1, scope: !224, file: !2, line: 110, type: !212)
!226 = !DILocation(line: 110, column: 22, scope: !224)
!227 = !DILocation(line: 111, column: 10, scope: !224)
!228 = !DILocation(line: 111, column: 5, scope: !224)
!229 = !DILocation(line: 112, column: 1, scope: !224)
!230 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !210, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!231 = !DILocalVariable(name: "p", arg: 1, scope: !230, file: !2, line: 115, type: !212)
!232 = !DILocation(line: 115, column: 24, scope: !230)
!233 = !DILocation(line: 116, column: 10, scope: !230)
!234 = !DILocation(line: 116, column: 5, scope: !230)
!235 = !DILocation(line: 117, column: 1, scope: !230)
!236 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !237, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!237 = !DISubroutineType(types: !238)
!238 = !{null}
!239 = !DILocation(line: 135, column: 20, scope: !236)
!240 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_int64_t_07_bad", scope: !33, file: !33, line: 29, type: !237, scopeLine: 30, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!241 = !DILocalVariable(name: "data", scope: !240, file: !33, line: 31, type: !23)
!242 = !DILocation(line: 31, column: 15, scope: !240)
!243 = !DILocation(line: 33, column: 10, scope: !240)
!244 = !DILocation(line: 34, column: 8, scope: !245)
!245 = distinct !DILexicalBlock(scope: !240, file: !33, line: 34, column: 8)
!246 = !DILocation(line: 34, column: 18, scope: !245)
!247 = !DILocation(line: 34, column: 8, scope: !240)
!248 = !DILocation(line: 36, column: 27, scope: !249)
!249 = distinct !DILexicalBlock(scope: !245, file: !33, line: 35, column: 5)
!250 = !DILocation(line: 36, column: 14, scope: !249)
!251 = !DILocation(line: 37, column: 13, scope: !252)
!252 = distinct !DILexicalBlock(scope: !249, file: !33, line: 37, column: 13)
!253 = !DILocation(line: 37, column: 18, scope: !252)
!254 = !DILocation(line: 37, column: 13, scope: !249)
!255 = !DILocation(line: 37, column: 28, scope: !256)
!256 = distinct !DILexicalBlock(scope: !252, file: !33, line: 37, column: 27)
!257 = !DILocation(line: 39, column: 18, scope: !249)
!258 = !DILocation(line: 39, column: 9, scope: !249)
!259 = !DILocation(line: 40, column: 5, scope: !249)
!260 = !DILocation(line: 41, column: 8, scope: !261)
!261 = distinct !DILexicalBlock(scope: !240, file: !33, line: 41, column: 8)
!262 = !DILocation(line: 41, column: 18, scope: !261)
!263 = !DILocation(line: 41, column: 8, scope: !240)
!264 = !DILocation(line: 44, column: 20, scope: !265)
!265 = distinct !DILexicalBlock(scope: !261, file: !33, line: 42, column: 5)
!266 = !DILocation(line: 44, column: 9, scope: !265)
!267 = !DILocation(line: 45, column: 5, scope: !265)
!268 = !DILocation(line: 46, column: 1, scope: !240)
!269 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_int64_t_07_good", scope: !33, file: !33, line: 142, type: !237, scopeLine: 143, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!270 = !DILocation(line: 144, column: 5, scope: !269)
!271 = !DILocation(line: 145, column: 5, scope: !269)
!272 = !DILocation(line: 146, column: 5, scope: !269)
!273 = !DILocation(line: 147, column: 5, scope: !269)
!274 = !DILocation(line: 148, column: 1, scope: !269)
!275 = distinct !DISubprogram(name: "main", scope: !33, file: !33, line: 159, type: !276, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!276 = !DISubroutineType(types: !277)
!277 = !{!57, !57, !278}
!278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !173, size: 64)
!279 = !DILocalVariable(name: "argc", arg: 1, scope: !275, file: !33, line: 159, type: !57)
!280 = !DILocation(line: 159, column: 14, scope: !275)
!281 = !DILocalVariable(name: "argv", arg: 2, scope: !275, file: !33, line: 159, type: !278)
!282 = !DILocation(line: 159, column: 27, scope: !275)
!283 = !DILocation(line: 162, column: 22, scope: !275)
!284 = !DILocation(line: 162, column: 12, scope: !275)
!285 = !DILocation(line: 162, column: 5, scope: !275)
!286 = !DILocation(line: 164, column: 5, scope: !275)
!287 = !DILocation(line: 165, column: 5, scope: !275)
!288 = !DILocation(line: 166, column: 5, scope: !275)
!289 = !DILocation(line: 169, column: 5, scope: !275)
!290 = !DILocation(line: 170, column: 5, scope: !275)
!291 = !DILocation(line: 171, column: 5, scope: !275)
!292 = !DILocation(line: 173, column: 5, scope: !275)
!293 = distinct !DISubprogram(name: "goodB2G1", scope: !33, file: !33, line: 53, type: !237, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !69)
!294 = !DILocalVariable(name: "data", scope: !293, file: !33, line: 55, type: !23)
!295 = !DILocation(line: 55, column: 15, scope: !293)
!296 = !DILocation(line: 57, column: 10, scope: !293)
!297 = !DILocation(line: 58, column: 8, scope: !298)
!298 = distinct !DILexicalBlock(scope: !293, file: !33, line: 58, column: 8)
!299 = !DILocation(line: 58, column: 18, scope: !298)
!300 = !DILocation(line: 58, column: 8, scope: !293)
!301 = !DILocation(line: 60, column: 27, scope: !302)
!302 = distinct !DILexicalBlock(scope: !298, file: !33, line: 59, column: 5)
!303 = !DILocation(line: 60, column: 14, scope: !302)
!304 = !DILocation(line: 61, column: 13, scope: !305)
!305 = distinct !DILexicalBlock(scope: !302, file: !33, line: 61, column: 13)
!306 = !DILocation(line: 61, column: 18, scope: !305)
!307 = !DILocation(line: 61, column: 13, scope: !302)
!308 = !DILocation(line: 61, column: 28, scope: !309)
!309 = distinct !DILexicalBlock(scope: !305, file: !33, line: 61, column: 27)
!310 = !DILocation(line: 63, column: 18, scope: !302)
!311 = !DILocation(line: 63, column: 9, scope: !302)
!312 = !DILocation(line: 64, column: 5, scope: !302)
!313 = !DILocation(line: 65, column: 8, scope: !314)
!314 = distinct !DILexicalBlock(scope: !293, file: !33, line: 65, column: 8)
!315 = !DILocation(line: 65, column: 18, scope: !314)
!316 = !DILocation(line: 65, column: 8, scope: !293)
!317 = !DILocation(line: 68, column: 9, scope: !318)
!318 = distinct !DILexicalBlock(scope: !314, file: !33, line: 66, column: 5)
!319 = !DILocation(line: 69, column: 5, scope: !318)
!320 = !DILocation(line: 76, column: 1, scope: !293)
!321 = distinct !DISubprogram(name: "goodB2G2", scope: !33, file: !33, line: 79, type: !237, scopeLine: 80, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !69)
!322 = !DILocalVariable(name: "data", scope: !321, file: !33, line: 81, type: !23)
!323 = !DILocation(line: 81, column: 15, scope: !321)
!324 = !DILocation(line: 83, column: 10, scope: !321)
!325 = !DILocation(line: 84, column: 8, scope: !326)
!326 = distinct !DILexicalBlock(scope: !321, file: !33, line: 84, column: 8)
!327 = !DILocation(line: 84, column: 18, scope: !326)
!328 = !DILocation(line: 84, column: 8, scope: !321)
!329 = !DILocation(line: 86, column: 27, scope: !330)
!330 = distinct !DILexicalBlock(scope: !326, file: !33, line: 85, column: 5)
!331 = !DILocation(line: 86, column: 14, scope: !330)
!332 = !DILocation(line: 87, column: 13, scope: !333)
!333 = distinct !DILexicalBlock(scope: !330, file: !33, line: 87, column: 13)
!334 = !DILocation(line: 87, column: 18, scope: !333)
!335 = !DILocation(line: 87, column: 13, scope: !330)
!336 = !DILocation(line: 87, column: 28, scope: !337)
!337 = distinct !DILexicalBlock(scope: !333, file: !33, line: 87, column: 27)
!338 = !DILocation(line: 89, column: 18, scope: !330)
!339 = !DILocation(line: 89, column: 9, scope: !330)
!340 = !DILocation(line: 90, column: 5, scope: !330)
!341 = !DILocation(line: 91, column: 8, scope: !342)
!342 = distinct !DILexicalBlock(scope: !321, file: !33, line: 91, column: 8)
!343 = !DILocation(line: 91, column: 18, scope: !342)
!344 = !DILocation(line: 91, column: 8, scope: !321)
!345 = !DILocation(line: 96, column: 5, scope: !346)
!346 = distinct !DILexicalBlock(scope: !342, file: !33, line: 92, column: 5)
!347 = !DILocation(line: 97, column: 1, scope: !321)
!348 = distinct !DISubprogram(name: "goodG2B1", scope: !33, file: !33, line: 100, type: !237, scopeLine: 101, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !69)
!349 = !DILocalVariable(name: "data", scope: !348, file: !33, line: 102, type: !23)
!350 = !DILocation(line: 102, column: 15, scope: !348)
!351 = !DILocation(line: 104, column: 10, scope: !348)
!352 = !DILocation(line: 105, column: 8, scope: !353)
!353 = distinct !DILexicalBlock(scope: !348, file: !33, line: 105, column: 8)
!354 = !DILocation(line: 105, column: 18, scope: !353)
!355 = !DILocation(line: 105, column: 8, scope: !348)
!356 = !DILocation(line: 108, column: 9, scope: !357)
!357 = distinct !DILexicalBlock(scope: !353, file: !33, line: 106, column: 5)
!358 = !DILocation(line: 109, column: 5, scope: !357)
!359 = !DILocation(line: 112, column: 27, scope: !360)
!360 = distinct !DILexicalBlock(scope: !353, file: !33, line: 111, column: 5)
!361 = !DILocation(line: 112, column: 14, scope: !360)
!362 = !DILocation(line: 113, column: 13, scope: !363)
!363 = distinct !DILexicalBlock(scope: !360, file: !33, line: 113, column: 13)
!364 = !DILocation(line: 113, column: 18, scope: !363)
!365 = !DILocation(line: 113, column: 13, scope: !360)
!366 = !DILocation(line: 113, column: 28, scope: !367)
!367 = distinct !DILexicalBlock(scope: !363, file: !33, line: 113, column: 27)
!368 = !DILocation(line: 116, column: 8, scope: !369)
!369 = distinct !DILexicalBlock(scope: !348, file: !33, line: 116, column: 8)
!370 = !DILocation(line: 116, column: 18, scope: !369)
!371 = !DILocation(line: 116, column: 8, scope: !348)
!372 = !DILocation(line: 119, column: 18, scope: !373)
!373 = distinct !DILexicalBlock(scope: !369, file: !33, line: 117, column: 5)
!374 = !DILocation(line: 119, column: 9, scope: !373)
!375 = !DILocation(line: 120, column: 5, scope: !373)
!376 = !DILocation(line: 121, column: 1, scope: !348)
!377 = distinct !DISubprogram(name: "goodG2B2", scope: !33, file: !33, line: 124, type: !237, scopeLine: 125, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !69)
!378 = !DILocalVariable(name: "data", scope: !377, file: !33, line: 126, type: !23)
!379 = !DILocation(line: 126, column: 15, scope: !377)
!380 = !DILocation(line: 128, column: 10, scope: !377)
!381 = !DILocation(line: 129, column: 8, scope: !382)
!382 = distinct !DILexicalBlock(scope: !377, file: !33, line: 129, column: 8)
!383 = !DILocation(line: 129, column: 18, scope: !382)
!384 = !DILocation(line: 129, column: 8, scope: !377)
!385 = !DILocation(line: 131, column: 27, scope: !386)
!386 = distinct !DILexicalBlock(scope: !382, file: !33, line: 130, column: 5)
!387 = !DILocation(line: 131, column: 14, scope: !386)
!388 = !DILocation(line: 132, column: 13, scope: !389)
!389 = distinct !DILexicalBlock(scope: !386, file: !33, line: 132, column: 13)
!390 = !DILocation(line: 132, column: 18, scope: !389)
!391 = !DILocation(line: 132, column: 13, scope: !386)
!392 = !DILocation(line: 132, column: 28, scope: !393)
!393 = distinct !DILexicalBlock(scope: !389, file: !33, line: 132, column: 27)
!394 = !DILocation(line: 134, column: 5, scope: !386)
!395 = !DILocation(line: 135, column: 8, scope: !396)
!396 = distinct !DILexicalBlock(scope: !377, file: !33, line: 135, column: 8)
!397 = !DILocation(line: 135, column: 18, scope: !396)
!398 = !DILocation(line: 135, column: 8, scope: !377)
!399 = !DILocation(line: 138, column: 18, scope: !400)
!400 = distinct !DILexicalBlock(scope: !396, file: !33, line: 136, column: 5)
!401 = !DILocation(line: 138, column: 9, scope: !400)
!402 = !DILocation(line: 139, column: 5, scope: !400)
!403 = !DILocation(line: 140, column: 1, scope: !377)
