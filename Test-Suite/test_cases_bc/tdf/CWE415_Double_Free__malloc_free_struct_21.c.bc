; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tdf/CWE415_Double_Free__malloc_free_struct_21.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tdf/CWE415_Double_Free__malloc_free_struct_21.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@badStatic = internal global i32 0, align 4, !dbg !17
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !33
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !39
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !44
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !49
@goodB2G1Static = internal global i32 0, align 4, !dbg !54
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !56
@goodB2G2Static = internal global i32 0, align 4, !dbg !61
@goodG2BStatic = internal global i32 0, align 4, !dbg !63

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !73 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !77, metadata !DIExpression()), !dbg !78
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !81
  ret void, !dbg !82
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !83 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !84, metadata !DIExpression()), !dbg !85
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !88
  ret void, !dbg !89
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !90 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !91, metadata !DIExpression()), !dbg !92
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !95
  ret void, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !97 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !98, metadata !DIExpression()), !dbg !99
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !102
  ret void, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !104 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !105, metadata !DIExpression()), !dbg !106
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !107, metadata !DIExpression()), !dbg !108
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !109
  ret void, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !111 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !112, metadata !DIExpression()), !dbg !113
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !116
  ret void, !dbg !117
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !118 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !121, metadata !DIExpression()), !dbg !122
  %0 = load i32, ptr %n.addr, align 4, !dbg !123
  %conv = sext i32 %0 to i64, !dbg !123
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !124
  ret ptr %call, !dbg !125
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !126 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !127, metadata !DIExpression()), !dbg !128
  %0 = load i32, ptr %n.addr, align 4, !dbg !129
  %conv = sext i32 %0 to i64, !dbg !129
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !130
  ret ptr %call, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !132 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !133, metadata !DIExpression()), !dbg !134
  %0 = load i32, ptr %n.addr, align 4, !dbg !135
  %conv = sext i32 %0 to i64, !dbg !135
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !136
  ret ptr %call, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !138 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !139, metadata !DIExpression()), !dbg !140
  %0 = load i32, ptr %n.addr, align 4, !dbg !141
  %conv = sext i32 %0 to i64, !dbg !141
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !142
  ret ptr %call, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !144 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !145, metadata !DIExpression()), !dbg !146
  %0 = load i32, ptr %n.addr, align 4, !dbg !147
  %conv = sext i32 %0 to i64, !dbg !147
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !148
  ret ptr %call, !dbg !149
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !150 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !151, metadata !DIExpression()), !dbg !152
  %0 = load i32, ptr %n.addr, align 4, !dbg !153
  %conv = sext i32 %0 to i64, !dbg !153
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !154
  ret ptr %call, !dbg !155
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !156 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !157, metadata !DIExpression()), !dbg !158
  %0 = load i32, ptr %n.addr, align 4, !dbg !159
  %conv = sext i32 %0 to i64, !dbg !159
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !160
  ret ptr %call, !dbg !161
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !162 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !163, metadata !DIExpression()), !dbg !164
  %0 = load i32, ptr %n.addr, align 4, !dbg !165
  %conv = sext i32 %0 to i64, !dbg !165
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !166
  ret ptr %call, !dbg !167
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !168 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !171, metadata !DIExpression()), !dbg !172
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !173, metadata !DIExpression()), !dbg !174
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !175
  ret void, !dbg !176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !177 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !181, metadata !DIExpression()), !dbg !182
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !183, metadata !DIExpression()), !dbg !184
  ret void, !dbg !185
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !186 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !187, metadata !DIExpression()), !dbg !188
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !189, metadata !DIExpression()), !dbg !190
  ret void, !dbg !191
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !192 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !195, metadata !DIExpression()), !dbg !196
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !197, metadata !DIExpression()), !dbg !198
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !199, metadata !DIExpression()), !dbg !200
  ret void, !dbg !201
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !202 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !205, metadata !DIExpression()), !dbg !206
  ret void, !dbg !207
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !208 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !209, metadata !DIExpression()), !dbg !210
  %0 = load ptr, ptr %str.addr, align 8, !dbg !211
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !212
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !213
  %call2 = call i32 @getchar(), !dbg !214
  ret void, !dbg !215
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !216 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !220, metadata !DIExpression()), !dbg !221
  %0 = load ptr, ptr %p.addr, align 8, !dbg !222
  store i32 0, ptr %0, align 4, !dbg !223
  %1 = load ptr, ptr %retval, align 8, !dbg !224
  ret ptr %1, !dbg !224
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !225 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !226, metadata !DIExpression()), !dbg !227
  %0 = load ptr, ptr %p.addr, align 8, !dbg !228
  store i32 0, ptr %0, align 4, !dbg !229
  %1 = load ptr, ptr %retval, align 8, !dbg !230
  ret ptr %1, !dbg !230
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !231 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !232, metadata !DIExpression()), !dbg !233
  %0 = load ptr, ptr %p.addr, align 8, !dbg !234
  call void @free(ptr noundef %0) #7, !dbg !235
  %1 = load ptr, ptr %retval, align 8, !dbg !236
  ret ptr %1, !dbg !236
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !237 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !238, metadata !DIExpression()), !dbg !239
  %0 = load ptr, ptr %p.addr, align 8, !dbg !240
  call void @free(ptr noundef %0) #7, !dbg !241
  %1 = load ptr, ptr %retval, align 8, !dbg !242
  ret ptr %1, !dbg !242
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !243 {
entry:
  ret void, !dbg !246
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_struct_21_bad() #0 !dbg !247 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !248, metadata !DIExpression()), !dbg !249
  store ptr null, ptr %data, align 8, !dbg !250
  %call = call ptr @DOUBLEFREEMALLOC(i32 noundef 800), !dbg !251
  store ptr %call, ptr %data, align 8, !dbg !252
  %0 = load ptr, ptr %data, align 8, !dbg !253
  %cmp = icmp eq ptr %0, null, !dbg !255
  br i1 %cmp, label %if.then, label %if.end, !dbg !256

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !257
  unreachable, !dbg !257

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !259
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !260
  store i32 1, ptr @badStatic, align 4, !dbg !261
  %2 = load ptr, ptr %data, align 8, !dbg !262
  call void @badSink(ptr noundef %2), !dbg !263
  ret void, !dbg !264
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @badSink(ptr noundef %data) #0 !dbg !265 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !268, metadata !DIExpression()), !dbg !269
  %0 = load i32, ptr @badStatic, align 4, !dbg !270
  %tobool = icmp ne i32 %0, 0, !dbg !270
  br i1 %tobool, label %if.then, label %if.end, !dbg !272

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !273
  %call = call ptr @DOUBLEFREE(ptr noundef %1), !dbg !275
  br label %if.end, !dbg !276

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !277
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_struct_21_good() #0 !dbg !278 {
entry:
  call void @goodB2G1(), !dbg !279
  call void @goodB2G2(), !dbg !280
  call void @goodG2B(), !dbg !281
  ret void, !dbg !282
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !283 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !287, metadata !DIExpression()), !dbg !288
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !289, metadata !DIExpression()), !dbg !290
  %call = call i64 @time(ptr noundef null) #7, !dbg !291
  %conv = trunc i64 %call to i32, !dbg !292
  call void @srand(i32 noundef %conv) #7, !dbg !293
  call void @printLine(ptr noundef @.str.3), !dbg !294
  call void @CWE415_Double_Free__malloc_free_struct_21_good(), !dbg !295
  call void @printLine(ptr noundef @.str.4), !dbg !296
  call void @printLine(ptr noundef @.str.5), !dbg !297
  call void @CWE415_Double_Free__malloc_free_struct_21_bad(), !dbg !298
  call void @printLine(ptr noundef @.str.6), !dbg !299
  ret i32 0, !dbg !300
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !301 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !302, metadata !DIExpression()), !dbg !303
  store ptr null, ptr %data, align 8, !dbg !304
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !305
  store ptr %call, ptr %data, align 8, !dbg !306
  %0 = load ptr, ptr %data, align 8, !dbg !307
  %cmp = icmp eq ptr %0, null, !dbg !309
  br i1 %cmp, label %if.then, label %if.end, !dbg !310

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !311
  unreachable, !dbg !311

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !313
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !314
  store i32 0, ptr @goodB2G1Static, align 4, !dbg !315
  %2 = load ptr, ptr %data, align 8, !dbg !316
  call void @goodB2G1Sink(ptr noundef %2), !dbg !317
  ret void, !dbg !318
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1Sink(ptr noundef %data) #0 !dbg !319 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !320, metadata !DIExpression()), !dbg !321
  %0 = load i32, ptr @goodB2G1Static, align 4, !dbg !322
  %tobool = icmp ne i32 %0, 0, !dbg !322
  br i1 %tobool, label %if.then, label %if.else, !dbg !324

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !325
  br label %if.end, !dbg !327

if.else:                                          ; preds = %entry
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !328
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !329 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !330, metadata !DIExpression()), !dbg !331
  store ptr null, ptr %data, align 8, !dbg !332
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !333
  store ptr %call, ptr %data, align 8, !dbg !334
  %0 = load ptr, ptr %data, align 8, !dbg !335
  %cmp = icmp eq ptr %0, null, !dbg !337
  br i1 %cmp, label %if.then, label %if.end, !dbg !338

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !339
  unreachable, !dbg !339

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !341
  %call1 = call ptr @SAFEFREE(ptr noundef %1), !dbg !342
  store i32 1, ptr @goodB2G2Static, align 4, !dbg !343
  %2 = load ptr, ptr %data, align 8, !dbg !344
  call void @goodB2G2Sink(ptr noundef %2), !dbg !345
  ret void, !dbg !346
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2Sink(ptr noundef %data) #0 !dbg !347 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !348, metadata !DIExpression()), !dbg !349
  %0 = load i32, ptr @goodB2G2Static, align 4, !dbg !350
  %tobool = icmp ne i32 %0, 0, !dbg !350
  br i1 %tobool, label %if.then, label %if.end, !dbg !352

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !353

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !355
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !356 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !357, metadata !DIExpression()), !dbg !358
  store ptr null, ptr %data, align 8, !dbg !359
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !360
  store ptr %call, ptr %data, align 8, !dbg !361
  %0 = load ptr, ptr %data, align 8, !dbg !362
  %cmp = icmp eq ptr %0, null, !dbg !364
  br i1 %cmp, label %if.then, label %if.end, !dbg !365

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !366
  unreachable, !dbg !366

if.end:                                           ; preds = %entry
  store i32 1, ptr @goodG2BStatic, align 4, !dbg !368
  %1 = load ptr, ptr %data, align 8, !dbg !369
  call void @goodG2BSink(ptr noundef %1), !dbg !370
  ret void, !dbg !371
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2BSink(ptr noundef %data) #0 !dbg !372 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !373, metadata !DIExpression()), !dbg !374
  %0 = load i32, ptr @goodG2BStatic, align 4, !dbg !375
  %tobool = icmp ne i32 %0, 0, !dbg !375
  br i1 %tobool, label %if.then, label %if.end, !dbg !377

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !378
  %call = call ptr @SAFEFREE(ptr noundef %1), !dbg !380
  br label %if.end, !dbg !381

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !382
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!65, !66, !67, !68, !69, !70, !71}
!llvm.ident = !{!72}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "badStatic", scope: !19, file: !35, line: 25, type: !29, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !32, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tdf/CWE415_Double_Free__malloc_free_struct_21.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "799f28cd0f3000d2b22a65b44ae7a815")
!21 = !{!22, !23, !31}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !25, line: 100, baseType: !26)
!25 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !25, line: 96, size: 64, elements: !27)
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !26, file: !25, line: 98, baseType: !29, size: 32)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !26, file: !25, line: 99, baseType: !29, size: 32, offset: 32)
!31 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!32 = !{!0, !7, !12, !33, !39, !44, !49, !17, !54, !56, !61, !63}
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !35, line: 154, type: !36, isLocal: true, isDefinition: true)
!35 = !DIFile(filename: "src/tdf/CWE415_Double_Free__malloc_free_struct_21.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "799f28cd0f3000d2b22a65b44ae7a815")
!36 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !37)
!37 = !{!38}
!38 = !DISubrange(count: 18)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(scope: null, file: !35, line: 156, type: !41, isLocal: true, isDefinition: true)
!41 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !42)
!42 = !{!43}
!43 = !DISubrange(count: 16)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(scope: null, file: !35, line: 159, type: !46, isLocal: true, isDefinition: true)
!46 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !47)
!47 = !{!48}
!48 = !DISubrange(count: 17)
!49 = !DIGlobalVariableExpression(var: !50, expr: !DIExpression())
!50 = distinct !DIGlobalVariable(scope: null, file: !35, line: 161, type: !51, isLocal: true, isDefinition: true)
!51 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !52)
!52 = !{!53}
!53 = !DISubrange(count: 15)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(name: "goodB2G1Static", scope: !19, file: !35, line: 54, type: !29, isLocal: true, isDefinition: true)
!56 = !DIGlobalVariableExpression(var: !57, expr: !DIExpression())
!57 = distinct !DIGlobalVariable(scope: null, file: !35, line: 64, type: !58, isLocal: true, isDefinition: true)
!58 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !59)
!59 = !{!60}
!60 = !DISubrange(count: 21)
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "goodB2G2Static", scope: !19, file: !35, line: 55, type: !29, isLocal: true, isDefinition: true)
!63 = !DIGlobalVariableExpression(var: !64, expr: !DIExpression())
!64 = distinct !DIGlobalVariable(name: "goodG2BStatic", scope: !19, file: !35, line: 56, type: !29, isLocal: true, isDefinition: true)
!65 = !{i32 7, !"Dwarf Version", i32 5}
!66 = !{i32 2, !"Debug Info Version", i32 3}
!67 = !{i32 1, !"wchar_size", i32 4}
!68 = !{i32 8, !"PIC Level", i32 2}
!69 = !{i32 7, !"PIE Level", i32 2}
!70 = !{i32 7, !"uwtable", i32 2}
!71 = !{i32 7, !"frame-pointer", i32 2}
!72 = !{!"clang version 16.0.0"}
!73 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !74, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!74 = !DISubroutineType(types: !75)
!75 = !{null, !22, !22}
!76 = !{}
!77 = !DILocalVariable(name: "p", arg: 1, scope: !73, file: !2, line: 4, type: !22)
!78 = !DILocation(line: 4, column: 22, scope: !73)
!79 = !DILocalVariable(name: "q", arg: 2, scope: !73, file: !2, line: 4, type: !22)
!80 = !DILocation(line: 4, column: 31, scope: !73)
!81 = !DILocation(line: 5, column: 3, scope: !73)
!82 = !DILocation(line: 6, column: 1, scope: !73)
!83 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !74, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!84 = !DILocalVariable(name: "p", arg: 1, scope: !83, file: !2, line: 8, type: !22)
!85 = !DILocation(line: 8, column: 25, scope: !83)
!86 = !DILocalVariable(name: "q", arg: 2, scope: !83, file: !2, line: 8, type: !22)
!87 = !DILocation(line: 8, column: 34, scope: !83)
!88 = !DILocation(line: 9, column: 3, scope: !83)
!89 = !DILocation(line: 10, column: 1, scope: !83)
!90 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !74, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!91 = !DILocalVariable(name: "p", arg: 1, scope: !90, file: !2, line: 12, type: !22)
!92 = !DILocation(line: 12, column: 21, scope: !90)
!93 = !DILocalVariable(name: "q", arg: 2, scope: !90, file: !2, line: 12, type: !22)
!94 = !DILocation(line: 12, column: 30, scope: !90)
!95 = !DILocation(line: 13, column: 3, scope: !90)
!96 = !DILocation(line: 14, column: 1, scope: !90)
!97 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !74, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!98 = !DILocalVariable(name: "p", arg: 1, scope: !97, file: !2, line: 16, type: !22)
!99 = !DILocation(line: 16, column: 20, scope: !97)
!100 = !DILocalVariable(name: "q", arg: 2, scope: !97, file: !2, line: 16, type: !22)
!101 = !DILocation(line: 16, column: 29, scope: !97)
!102 = !DILocation(line: 17, column: 3, scope: !97)
!103 = !DILocation(line: 18, column: 1, scope: !97)
!104 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !74, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!105 = !DILocalVariable(name: "p", arg: 1, scope: !104, file: !2, line: 20, type: !22)
!106 = !DILocation(line: 20, column: 34, scope: !104)
!107 = !DILocalVariable(name: "q", arg: 2, scope: !104, file: !2, line: 20, type: !22)
!108 = !DILocation(line: 20, column: 43, scope: !104)
!109 = !DILocation(line: 21, column: 3, scope: !104)
!110 = !DILocation(line: 22, column: 1, scope: !104)
!111 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !74, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!112 = !DILocalVariable(name: "p", arg: 1, scope: !111, file: !2, line: 24, type: !22)
!113 = !DILocation(line: 24, column: 33, scope: !111)
!114 = !DILocalVariable(name: "q", arg: 2, scope: !111, file: !2, line: 24, type: !22)
!115 = !DILocation(line: 24, column: 42, scope: !111)
!116 = !DILocation(line: 25, column: 3, scope: !111)
!117 = !DILocation(line: 26, column: 1, scope: !111)
!118 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !119, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!119 = !DISubroutineType(types: !120)
!120 = !{!22, !29}
!121 = !DILocalVariable(name: "n", arg: 1, scope: !118, file: !2, line: 29, type: !29)
!122 = !DILocation(line: 29, column: 22, scope: !118)
!123 = !DILocation(line: 30, column: 17, scope: !118)
!124 = !DILocation(line: 30, column: 10, scope: !118)
!125 = !DILocation(line: 30, column: 3, scope: !118)
!126 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !119, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!127 = !DILocalVariable(name: "n", arg: 1, scope: !126, file: !2, line: 33, type: !29)
!128 = !DILocation(line: 33, column: 28, scope: !126)
!129 = !DILocation(line: 34, column: 19, scope: !126)
!130 = !DILocation(line: 34, column: 12, scope: !126)
!131 = !DILocation(line: 34, column: 5, scope: !126)
!132 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !119, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!133 = !DILocalVariable(name: "n", arg: 1, scope: !132, file: !2, line: 37, type: !29)
!134 = !DILocation(line: 37, column: 21, scope: !132)
!135 = !DILocation(line: 38, column: 17, scope: !132)
!136 = !DILocation(line: 38, column: 10, scope: !132)
!137 = !DILocation(line: 38, column: 3, scope: !132)
!138 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !119, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!139 = !DILocalVariable(name: "n", arg: 1, scope: !138, file: !2, line: 41, type: !29)
!140 = !DILocation(line: 41, column: 21, scope: !138)
!141 = !DILocation(line: 42, column: 17, scope: !138)
!142 = !DILocation(line: 42, column: 10, scope: !138)
!143 = !DILocation(line: 42, column: 3, scope: !138)
!144 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !119, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!145 = !DILocalVariable(name: "n", arg: 1, scope: !144, file: !2, line: 45, type: !29)
!146 = !DILocation(line: 45, column: 21, scope: !144)
!147 = !DILocation(line: 46, column: 17, scope: !144)
!148 = !DILocation(line: 46, column: 10, scope: !144)
!149 = !DILocation(line: 46, column: 3, scope: !144)
!150 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !119, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!151 = !DILocalVariable(name: "n", arg: 1, scope: !150, file: !2, line: 49, type: !29)
!152 = !DILocation(line: 49, column: 21, scope: !150)
!153 = !DILocation(line: 50, column: 17, scope: !150)
!154 = !DILocation(line: 50, column: 10, scope: !150)
!155 = !DILocation(line: 50, column: 3, scope: !150)
!156 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !119, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!157 = !DILocalVariable(name: "n", arg: 1, scope: !156, file: !2, line: 53, type: !29)
!158 = !DILocation(line: 53, column: 21, scope: !156)
!159 = !DILocation(line: 54, column: 17, scope: !156)
!160 = !DILocation(line: 54, column: 10, scope: !156)
!161 = !DILocation(line: 54, column: 3, scope: !156)
!162 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !119, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!163 = !DILocalVariable(name: "n", arg: 1, scope: !162, file: !2, line: 57, type: !29)
!164 = !DILocation(line: 57, column: 18, scope: !162)
!165 = !DILocation(line: 58, column: 17, scope: !162)
!166 = !DILocation(line: 58, column: 10, scope: !162)
!167 = !DILocation(line: 58, column: 3, scope: !162)
!168 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !169, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!169 = !DISubroutineType(types: !170)
!170 = !{null, !29, !29}
!171 = !DILocalVariable(name: "id", arg: 1, scope: !168, file: !2, line: 67, type: !29)
!172 = !DILocation(line: 67, column: 20, scope: !168)
!173 = !DILocalVariable(name: "flags", arg: 2, scope: !168, file: !2, line: 67, type: !29)
!174 = !DILocation(line: 67, column: 28, scope: !168)
!175 = !DILocation(line: 68, column: 3, scope: !168)
!176 = !DILocation(line: 69, column: 1, scope: !168)
!177 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !178, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!178 = !DISubroutineType(types: !179)
!179 = !{null, !29, !180}
!180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!181 = !DILocalVariable(name: "thdid", arg: 1, scope: !177, file: !2, line: 79, type: !29)
!182 = !DILocation(line: 79, column: 21, scope: !177)
!183 = !DILocalVariable(name: "cxt", arg: 2, scope: !177, file: !2, line: 79, type: !180)
!184 = !DILocation(line: 79, column: 34, scope: !177)
!185 = !DILocation(line: 81, column: 1, scope: !177)
!186 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !178, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!187 = !DILocalVariable(name: "thdid", arg: 1, scope: !186, file: !2, line: 82, type: !29)
!188 = !DILocation(line: 82, column: 21, scope: !186)
!189 = !DILocalVariable(name: "cxt", arg: 2, scope: !186, file: !2, line: 82, type: !180)
!190 = !DILocation(line: 82, column: 33, scope: !186)
!191 = !DILocation(line: 84, column: 1, scope: !186)
!192 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !193, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!193 = !DISubroutineType(types: !194)
!194 = !{null, !29, !180, !180}
!195 = !DILocalVariable(name: "thdid", arg: 1, scope: !192, file: !2, line: 85, type: !29)
!196 = !DILocation(line: 85, column: 26, scope: !192)
!197 = !DILocalVariable(name: "cxt", arg: 2, scope: !192, file: !2, line: 85, type: !180)
!198 = !DILocation(line: 85, column: 38, scope: !192)
!199 = !DILocalVariable(name: "lev", arg: 3, scope: !192, file: !2, line: 85, type: !180)
!200 = !DILocation(line: 85, column: 49, scope: !192)
!201 = !DILocation(line: 87, column: 1, scope: !192)
!202 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !203, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!203 = !DISubroutineType(types: !204)
!204 = !{null, !180}
!205 = !DILocalVariable(name: "lockname", arg: 1, scope: !202, file: !2, line: 89, type: !180)
!206 = !DILocation(line: 89, column: 17, scope: !202)
!207 = !DILocation(line: 91, column: 1, scope: !202)
!208 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !203, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!209 = !DILocalVariable(name: "str", arg: 1, scope: !208, file: !2, line: 93, type: !180)
!210 = !DILocation(line: 93, column: 18, scope: !208)
!211 = !DILocation(line: 94, column: 18, scope: !208)
!212 = !DILocation(line: 94, column: 3, scope: !208)
!213 = !DILocation(line: 95, column: 3, scope: !208)
!214 = !DILocation(line: 96, column: 3, scope: !208)
!215 = !DILocation(line: 97, column: 1, scope: !208)
!216 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !217, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!217 = !DISubroutineType(types: !218)
!218 = !{!22, !219}
!219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!220 = !DILocalVariable(name: "p", arg: 1, scope: !216, file: !2, line: 100, type: !219)
!221 = !DILocation(line: 100, column: 24, scope: !216)
!222 = !DILocation(line: 101, column: 6, scope: !216)
!223 = !DILocation(line: 101, column: 8, scope: !216)
!224 = !DILocation(line: 102, column: 1, scope: !216)
!225 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !217, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!226 = !DILocalVariable(name: "p", arg: 1, scope: !225, file: !2, line: 104, type: !219)
!227 = !DILocation(line: 104, column: 20, scope: !225)
!228 = !DILocation(line: 105, column: 6, scope: !225)
!229 = !DILocation(line: 105, column: 8, scope: !225)
!230 = !DILocation(line: 106, column: 1, scope: !225)
!231 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !217, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!232 = !DILocalVariable(name: "p", arg: 1, scope: !231, file: !2, line: 110, type: !219)
!233 = !DILocation(line: 110, column: 22, scope: !231)
!234 = !DILocation(line: 111, column: 10, scope: !231)
!235 = !DILocation(line: 111, column: 5, scope: !231)
!236 = !DILocation(line: 112, column: 1, scope: !231)
!237 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !217, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!238 = !DILocalVariable(name: "p", arg: 1, scope: !237, file: !2, line: 115, type: !219)
!239 = !DILocation(line: 115, column: 24, scope: !237)
!240 = !DILocation(line: 116, column: 10, scope: !237)
!241 = !DILocation(line: 116, column: 5, scope: !237)
!242 = !DILocation(line: 117, column: 1, scope: !237)
!243 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !244, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!244 = !DISubroutineType(types: !245)
!245 = !{null}
!246 = !DILocation(line: 135, column: 20, scope: !243)
!247 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_struct_21_bad", scope: !35, file: !35, line: 36, type: !244, scopeLine: 37, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!248 = !DILocalVariable(name: "data", scope: !247, file: !35, line: 38, type: !23)
!249 = !DILocation(line: 38, column: 21, scope: !247)
!250 = !DILocation(line: 40, column: 10, scope: !247)
!251 = !DILocation(line: 41, column: 29, scope: !247)
!252 = !DILocation(line: 41, column: 10, scope: !247)
!253 = !DILocation(line: 42, column: 9, scope: !254)
!254 = distinct !DILexicalBlock(scope: !247, file: !35, line: 42, column: 9)
!255 = !DILocation(line: 42, column: 14, scope: !254)
!256 = !DILocation(line: 42, column: 9, scope: !247)
!257 = !DILocation(line: 42, column: 24, scope: !258)
!258 = distinct !DILexicalBlock(scope: !254, file: !35, line: 42, column: 23)
!259 = !DILocation(line: 44, column: 14, scope: !247)
!260 = !DILocation(line: 44, column: 5, scope: !247)
!261 = !DILocation(line: 45, column: 15, scope: !247)
!262 = !DILocation(line: 46, column: 13, scope: !247)
!263 = !DILocation(line: 46, column: 5, scope: !247)
!264 = !DILocation(line: 47, column: 1, scope: !247)
!265 = distinct !DISubprogram(name: "badSink", scope: !35, file: !35, line: 27, type: !266, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !76)
!266 = !DISubroutineType(types: !267)
!267 = !{null, !23}
!268 = !DILocalVariable(name: "data", arg: 1, scope: !265, file: !35, line: 27, type: !23)
!269 = !DILocation(line: 27, column: 37, scope: !265)
!270 = !DILocation(line: 29, column: 8, scope: !271)
!271 = distinct !DILexicalBlock(scope: !265, file: !35, line: 29, column: 8)
!272 = !DILocation(line: 29, column: 8, scope: !265)
!273 = !DILocation(line: 32, column: 20, scope: !274)
!274 = distinct !DILexicalBlock(scope: !271, file: !35, line: 30, column: 5)
!275 = !DILocation(line: 32, column: 9, scope: !274)
!276 = !DILocation(line: 33, column: 5, scope: !274)
!277 = !DILocation(line: 34, column: 1, scope: !265)
!278 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_struct_21_good", scope: !35, file: !35, line: 133, type: !244, scopeLine: 134, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!279 = !DILocation(line: 135, column: 5, scope: !278)
!280 = !DILocation(line: 136, column: 5, scope: !278)
!281 = !DILocation(line: 137, column: 5, scope: !278)
!282 = !DILocation(line: 138, column: 1, scope: !278)
!283 = distinct !DISubprogram(name: "main", scope: !35, file: !35, line: 149, type: !284, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !76)
!284 = !DISubroutineType(types: !285)
!285 = !{!29, !29, !286}
!286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !180, size: 64)
!287 = !DILocalVariable(name: "argc", arg: 1, scope: !283, file: !35, line: 149, type: !29)
!288 = !DILocation(line: 149, column: 14, scope: !283)
!289 = !DILocalVariable(name: "argv", arg: 2, scope: !283, file: !35, line: 149, type: !286)
!290 = !DILocation(line: 149, column: 27, scope: !283)
!291 = !DILocation(line: 152, column: 22, scope: !283)
!292 = !DILocation(line: 152, column: 12, scope: !283)
!293 = !DILocation(line: 152, column: 5, scope: !283)
!294 = !DILocation(line: 154, column: 5, scope: !283)
!295 = !DILocation(line: 155, column: 5, scope: !283)
!296 = !DILocation(line: 156, column: 5, scope: !283)
!297 = !DILocation(line: 159, column: 5, scope: !283)
!298 = !DILocation(line: 160, column: 5, scope: !283)
!299 = !DILocation(line: 161, column: 5, scope: !283)
!300 = !DILocation(line: 163, column: 5, scope: !283)
!301 = distinct !DISubprogram(name: "goodB2G1", scope: !35, file: !35, line: 74, type: !244, scopeLine: 75, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !76)
!302 = !DILocalVariable(name: "data", scope: !301, file: !35, line: 76, type: !23)
!303 = !DILocation(line: 76, column: 21, scope: !301)
!304 = !DILocation(line: 78, column: 10, scope: !301)
!305 = !DILocation(line: 79, column: 29, scope: !301)
!306 = !DILocation(line: 79, column: 10, scope: !301)
!307 = !DILocation(line: 80, column: 9, scope: !308)
!308 = distinct !DILexicalBlock(scope: !301, file: !35, line: 80, column: 9)
!309 = !DILocation(line: 80, column: 14, scope: !308)
!310 = !DILocation(line: 80, column: 9, scope: !301)
!311 = !DILocation(line: 80, column: 24, scope: !312)
!312 = distinct !DILexicalBlock(scope: !308, file: !35, line: 80, column: 23)
!313 = !DILocation(line: 82, column: 14, scope: !301)
!314 = !DILocation(line: 82, column: 5, scope: !301)
!315 = !DILocation(line: 83, column: 20, scope: !301)
!316 = !DILocation(line: 84, column: 18, scope: !301)
!317 = !DILocation(line: 84, column: 5, scope: !301)
!318 = !DILocation(line: 85, column: 1, scope: !301)
!319 = distinct !DISubprogram(name: "goodB2G1Sink", scope: !35, file: !35, line: 59, type: !266, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !76)
!320 = !DILocalVariable(name: "data", arg: 1, scope: !319, file: !35, line: 59, type: !23)
!321 = !DILocation(line: 59, column: 42, scope: !319)
!322 = !DILocation(line: 61, column: 8, scope: !323)
!323 = distinct !DILexicalBlock(scope: !319, file: !35, line: 61, column: 8)
!324 = !DILocation(line: 61, column: 8, scope: !319)
!325 = !DILocation(line: 64, column: 9, scope: !326)
!326 = distinct !DILexicalBlock(scope: !323, file: !35, line: 62, column: 5)
!327 = !DILocation(line: 65, column: 5, scope: !326)
!328 = !DILocation(line: 72, column: 1, scope: !319)
!329 = distinct !DISubprogram(name: "goodB2G2", scope: !35, file: !35, line: 98, type: !244, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !76)
!330 = !DILocalVariable(name: "data", scope: !329, file: !35, line: 100, type: !23)
!331 = !DILocation(line: 100, column: 21, scope: !329)
!332 = !DILocation(line: 102, column: 10, scope: !329)
!333 = !DILocation(line: 103, column: 29, scope: !329)
!334 = !DILocation(line: 103, column: 10, scope: !329)
!335 = !DILocation(line: 104, column: 9, scope: !336)
!336 = distinct !DILexicalBlock(scope: !329, file: !35, line: 104, column: 9)
!337 = !DILocation(line: 104, column: 14, scope: !336)
!338 = !DILocation(line: 104, column: 9, scope: !329)
!339 = !DILocation(line: 104, column: 24, scope: !340)
!340 = distinct !DILexicalBlock(scope: !336, file: !35, line: 104, column: 23)
!341 = !DILocation(line: 106, column: 14, scope: !329)
!342 = !DILocation(line: 106, column: 5, scope: !329)
!343 = !DILocation(line: 107, column: 20, scope: !329)
!344 = !DILocation(line: 108, column: 18, scope: !329)
!345 = !DILocation(line: 108, column: 5, scope: !329)
!346 = !DILocation(line: 109, column: 1, scope: !329)
!347 = distinct !DISubprogram(name: "goodB2G2Sink", scope: !35, file: !35, line: 88, type: !266, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !76)
!348 = !DILocalVariable(name: "data", arg: 1, scope: !347, file: !35, line: 88, type: !23)
!349 = !DILocation(line: 88, column: 42, scope: !347)
!350 = !DILocation(line: 90, column: 8, scope: !351)
!351 = distinct !DILexicalBlock(scope: !347, file: !35, line: 90, column: 8)
!352 = !DILocation(line: 90, column: 8, scope: !347)
!353 = !DILocation(line: 95, column: 5, scope: !354)
!354 = distinct !DILexicalBlock(scope: !351, file: !35, line: 91, column: 5)
!355 = !DILocation(line: 96, column: 1, scope: !347)
!356 = distinct !DISubprogram(name: "goodG2B", scope: !35, file: !35, line: 121, type: !244, scopeLine: 122, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !76)
!357 = !DILocalVariable(name: "data", scope: !356, file: !35, line: 123, type: !23)
!358 = !DILocation(line: 123, column: 21, scope: !356)
!359 = !DILocation(line: 125, column: 10, scope: !356)
!360 = !DILocation(line: 126, column: 29, scope: !356)
!361 = !DILocation(line: 126, column: 10, scope: !356)
!362 = !DILocation(line: 127, column: 9, scope: !363)
!363 = distinct !DILexicalBlock(scope: !356, file: !35, line: 127, column: 9)
!364 = !DILocation(line: 127, column: 14, scope: !363)
!365 = !DILocation(line: 127, column: 9, scope: !356)
!366 = !DILocation(line: 127, column: 24, scope: !367)
!367 = distinct !DILexicalBlock(scope: !363, file: !35, line: 127, column: 23)
!368 = !DILocation(line: 129, column: 19, scope: !356)
!369 = !DILocation(line: 130, column: 17, scope: !356)
!370 = !DILocation(line: 130, column: 5, scope: !356)
!371 = !DILocation(line: 131, column: 1, scope: !356)
!372 = distinct !DISubprogram(name: "goodG2BSink", scope: !35, file: !35, line: 112, type: !266, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !76)
!373 = !DILocalVariable(name: "data", arg: 1, scope: !372, file: !35, line: 112, type: !23)
!374 = !DILocation(line: 112, column: 41, scope: !372)
!375 = !DILocation(line: 114, column: 8, scope: !376)
!376 = distinct !DILexicalBlock(scope: !372, file: !35, line: 114, column: 8)
!377 = !DILocation(line: 114, column: 8, scope: !372)
!378 = !DILocation(line: 117, column: 18, scope: !379)
!379 = distinct !DILexicalBlock(scope: !376, file: !35, line: 115, column: 5)
!380 = !DILocation(line: 117, column: 9, scope: !379)
!381 = !DILocation(line: 118, column: 5, scope: !379)
!382 = !DILocation(line: 119, column: 1, scope: !372)
