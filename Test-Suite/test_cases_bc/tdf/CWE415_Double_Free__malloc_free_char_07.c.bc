; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tdf/CWE415_Double_Free__malloc_free_char_07.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tdf/CWE415_Double_Free__malloc_free_char_07.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@staticFive = internal global i32 5, align 4, !dbg !17
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !26
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !32
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !37
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !42
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !47

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !61 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !65, metadata !DIExpression()), !dbg !66
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !71 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !72, metadata !DIExpression()), !dbg !73
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !76
  ret void, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !78 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !79, metadata !DIExpression()), !dbg !80
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !83
  ret void, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !85 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !86, metadata !DIExpression()), !dbg !87
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !90
  ret void, !dbg !91
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !92 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !93, metadata !DIExpression()), !dbg !94
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !95, metadata !DIExpression()), !dbg !96
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !97
  ret void, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !99 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !100, metadata !DIExpression()), !dbg !101
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !102, metadata !DIExpression()), !dbg !103
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !104
  ret void, !dbg !105
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !106 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !109, metadata !DIExpression()), !dbg !110
  %0 = load i32, ptr %n.addr, align 4, !dbg !111
  %conv = sext i32 %0 to i64, !dbg !111
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !112
  ret ptr %call, !dbg !113
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !114 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %0 = load i32, ptr %n.addr, align 4, !dbg !117
  %conv = sext i32 %0 to i64, !dbg !117
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !118
  ret ptr %call, !dbg !119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !120 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !121, metadata !DIExpression()), !dbg !122
  %0 = load i32, ptr %n.addr, align 4, !dbg !123
  %conv = sext i32 %0 to i64, !dbg !123
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !124
  ret ptr %call, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !126 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !127, metadata !DIExpression()), !dbg !128
  %0 = load i32, ptr %n.addr, align 4, !dbg !129
  %conv = sext i32 %0 to i64, !dbg !129
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !130
  ret ptr %call, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !132 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !133, metadata !DIExpression()), !dbg !134
  %0 = load i32, ptr %n.addr, align 4, !dbg !135
  %conv = sext i32 %0 to i64, !dbg !135
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !136
  ret ptr %call, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !138 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !139, metadata !DIExpression()), !dbg !140
  %0 = load i32, ptr %n.addr, align 4, !dbg !141
  %conv = sext i32 %0 to i64, !dbg !141
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !142
  ret ptr %call, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !144 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !145, metadata !DIExpression()), !dbg !146
  %0 = load i32, ptr %n.addr, align 4, !dbg !147
  %conv = sext i32 %0 to i64, !dbg !147
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !148
  ret ptr %call, !dbg !149
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !150 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !151, metadata !DIExpression()), !dbg !152
  %0 = load i32, ptr %n.addr, align 4, !dbg !153
  %conv = sext i32 %0 to i64, !dbg !153
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !154
  ret ptr %call, !dbg !155
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !156 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !159, metadata !DIExpression()), !dbg !160
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !161, metadata !DIExpression()), !dbg !162
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !163
  ret void, !dbg !164
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !165 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !168, metadata !DIExpression()), !dbg !169
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !170, metadata !DIExpression()), !dbg !171
  ret void, !dbg !172
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !173 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !174, metadata !DIExpression()), !dbg !175
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !176, metadata !DIExpression()), !dbg !177
  ret void, !dbg !178
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !179 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !182, metadata !DIExpression()), !dbg !183
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !184, metadata !DIExpression()), !dbg !185
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !186, metadata !DIExpression()), !dbg !187
  ret void, !dbg !188
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !189 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !192, metadata !DIExpression()), !dbg !193
  ret void, !dbg !194
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !195 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !196, metadata !DIExpression()), !dbg !197
  %0 = load ptr, ptr %str.addr, align 8, !dbg !198
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !199
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !200
  %call2 = call i32 @getchar(), !dbg !201
  ret void, !dbg !202
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !203 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !207, metadata !DIExpression()), !dbg !208
  %0 = load ptr, ptr %p.addr, align 8, !dbg !209
  store i32 0, ptr %0, align 4, !dbg !210
  %1 = load ptr, ptr %retval, align 8, !dbg !211
  ret ptr %1, !dbg !211
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !212 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !213, metadata !DIExpression()), !dbg !214
  %0 = load ptr, ptr %p.addr, align 8, !dbg !215
  store i32 0, ptr %0, align 4, !dbg !216
  %1 = load ptr, ptr %retval, align 8, !dbg !217
  ret ptr %1, !dbg !217
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !218 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !219, metadata !DIExpression()), !dbg !220
  %0 = load ptr, ptr %p.addr, align 8, !dbg !221
  call void @free(ptr noundef %0) #7, !dbg !222
  %1 = load ptr, ptr %retval, align 8, !dbg !223
  ret ptr %1, !dbg !223
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !224 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !225, metadata !DIExpression()), !dbg !226
  %0 = load ptr, ptr %p.addr, align 8, !dbg !227
  call void @free(ptr noundef %0) #7, !dbg !228
  %1 = load ptr, ptr %retval, align 8, !dbg !229
  ret ptr %1, !dbg !229
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !230 {
entry:
  ret void, !dbg !233
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_char_07_bad() #0 !dbg !234 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !235, metadata !DIExpression()), !dbg !236
  store ptr null, ptr %data, align 8, !dbg !237
  %0 = load i32, ptr @staticFive, align 4, !dbg !238
  %cmp = icmp eq i32 %0, 5, !dbg !240
  br i1 %cmp, label %if.then, label %if.end4, !dbg !241

if.then:                                          ; preds = %entry
  %call = call ptr @DOUBLEFREEMALLOC(i32 noundef 100), !dbg !242
  store ptr %call, ptr %data, align 8, !dbg !244
  %1 = load ptr, ptr %data, align 8, !dbg !245
  %cmp1 = icmp eq ptr %1, null, !dbg !247
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !248

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !249
  unreachable, !dbg !249

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !251
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !252
  br label %if.end4, !dbg !253

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !254
  %cmp5 = icmp eq i32 %3, 5, !dbg !256
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !257

if.then6:                                         ; preds = %if.end4
  %4 = load ptr, ptr %data, align 8, !dbg !258
  %call7 = call ptr @DOUBLEFREE(ptr noundef %4), !dbg !260
  br label %if.end8, !dbg !261

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !262
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_char_07_good() #0 !dbg !263 {
entry:
  call void @goodB2G1(), !dbg !264
  call void @goodB2G2(), !dbg !265
  call void @goodG2B1(), !dbg !266
  call void @goodG2B2(), !dbg !267
  ret void, !dbg !268
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !269 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !273, metadata !DIExpression()), !dbg !274
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !275, metadata !DIExpression()), !dbg !276
  %call = call i64 @time(ptr noundef null) #7, !dbg !277
  %conv = trunc i64 %call to i32, !dbg !278
  call void @srand(i32 noundef %conv) #7, !dbg !279
  call void @printLine(ptr noundef @.str.3), !dbg !280
  call void @CWE415_Double_Free__malloc_free_char_07_good(), !dbg !281
  call void @printLine(ptr noundef @.str.4), !dbg !282
  call void @printLine(ptr noundef @.str.5), !dbg !283
  call void @CWE415_Double_Free__malloc_free_char_07_bad(), !dbg !284
  call void @printLine(ptr noundef @.str.6), !dbg !285
  ret i32 0, !dbg !286
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !287 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !288, metadata !DIExpression()), !dbg !289
  store ptr null, ptr %data, align 8, !dbg !290
  %0 = load i32, ptr @staticFive, align 4, !dbg !291
  %cmp = icmp eq i32 %0, 5, !dbg !293
  br i1 %cmp, label %if.then, label %if.end4, !dbg !294

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !295
  store ptr %call, ptr %data, align 8, !dbg !297
  %1 = load ptr, ptr %data, align 8, !dbg !298
  %cmp1 = icmp eq ptr %1, null, !dbg !300
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !301

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !302
  unreachable, !dbg !302

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !304
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !305
  br label %if.end4, !dbg !306

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !307
  %cmp5 = icmp ne i32 %3, 5, !dbg !309
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !310

if.then6:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.7), !dbg !311
  br label %if.end7, !dbg !313

if.else:                                          ; preds = %if.end4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void, !dbg !314
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !315 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !316, metadata !DIExpression()), !dbg !317
  store ptr null, ptr %data, align 8, !dbg !318
  %0 = load i32, ptr @staticFive, align 4, !dbg !319
  %cmp = icmp eq i32 %0, 5, !dbg !321
  br i1 %cmp, label %if.then, label %if.end4, !dbg !322

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !323
  store ptr %call, ptr %data, align 8, !dbg !325
  %1 = load ptr, ptr %data, align 8, !dbg !326
  %cmp1 = icmp eq ptr %1, null, !dbg !328
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !329

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !330
  unreachable, !dbg !330

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !332
  %call3 = call ptr @SAFEFREE(ptr noundef %2), !dbg !333
  br label %if.end4, !dbg !334

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4, !dbg !335
  %cmp5 = icmp eq i32 %3, 5, !dbg !337
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !338

if.then6:                                         ; preds = %if.end4
  br label %if.end7, !dbg !339

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !341
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !342 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !343, metadata !DIExpression()), !dbg !344
  store ptr null, ptr %data, align 8, !dbg !345
  %0 = load i32, ptr @staticFive, align 4, !dbg !346
  %cmp = icmp ne i32 %0, 5, !dbg !348
  br i1 %cmp, label %if.then, label %if.else, !dbg !349

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !350
  br label %if.end3, !dbg !352

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !353
  store ptr %call, ptr %data, align 8, !dbg !355
  %1 = load ptr, ptr %data, align 8, !dbg !356
  %cmp1 = icmp eq ptr %1, null, !dbg !358
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !359

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !360
  unreachable, !dbg !360

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %2 = load i32, ptr @staticFive, align 4, !dbg !362
  %cmp4 = icmp eq i32 %2, 5, !dbg !364
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !365

if.then5:                                         ; preds = %if.end3
  %3 = load ptr, ptr %data, align 8, !dbg !366
  %call6 = call ptr @SAFEFREE(ptr noundef %3), !dbg !368
  br label %if.end7, !dbg !369

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !370
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !371 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !372, metadata !DIExpression()), !dbg !373
  store ptr null, ptr %data, align 8, !dbg !374
  %0 = load i32, ptr @staticFive, align 4, !dbg !375
  %cmp = icmp eq i32 %0, 5, !dbg !377
  br i1 %cmp, label %if.then, label %if.end3, !dbg !378

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !379
  store ptr %call, ptr %data, align 8, !dbg !381
  %1 = load ptr, ptr %data, align 8, !dbg !382
  %cmp1 = icmp eq ptr %1, null, !dbg !384
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !385

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !386
  unreachable, !dbg !386

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !388

if.end3:                                          ; preds = %if.end, %entry
  %2 = load i32, ptr @staticFive, align 4, !dbg !389
  %cmp4 = icmp eq i32 %2, 5, !dbg !391
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !392

if.then5:                                         ; preds = %if.end3
  %3 = load ptr, ptr %data, align 8, !dbg !393
  %call6 = call ptr @SAFEFREE(ptr noundef %3), !dbg !395
  br label %if.end7, !dbg !396

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !397
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!53, !54, !55, !56, !57, !58, !59}
!llvm.ident = !{!60}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "staticFive", scope: !19, file: !28, line: 25, type: !52, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !25, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tdf/CWE415_Double_Free__malloc_free_char_07.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "2ce2196ef222b42b5d9e4af8dc956cd9")
!21 = !{!22, !23, !24}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!24 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!25 = !{!0, !7, !12, !26, !32, !37, !42, !17, !47}
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(scope: null, file: !28, line: 164, type: !29, isLocal: true, isDefinition: true)
!28 = !DIFile(filename: "src/tdf/CWE415_Double_Free__malloc_free_char_07.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "2ce2196ef222b42b5d9e4af8dc956cd9")
!29 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !30)
!30 = !{!31}
!31 = !DISubrange(count: 18)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(scope: null, file: !28, line: 166, type: !34, isLocal: true, isDefinition: true)
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !35)
!35 = !{!36}
!36 = !DISubrange(count: 16)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(scope: null, file: !28, line: 169, type: !39, isLocal: true, isDefinition: true)
!39 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !40)
!40 = !{!41}
!41 = !DISubrange(count: 17)
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(scope: null, file: !28, line: 171, type: !44, isLocal: true, isDefinition: true)
!44 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !45)
!45 = !{!46}
!46 = !DISubrange(count: 15)
!47 = !DIGlobalVariableExpression(var: !48, expr: !DIExpression())
!48 = distinct !DIGlobalVariable(scope: null, file: !28, line: 68, type: !49, isLocal: true, isDefinition: true)
!49 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !50)
!50 = !{!51}
!51 = !DISubrange(count: 21)
!52 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!53 = !{i32 7, !"Dwarf Version", i32 5}
!54 = !{i32 2, !"Debug Info Version", i32 3}
!55 = !{i32 1, !"wchar_size", i32 4}
!56 = !{i32 8, !"PIC Level", i32 2}
!57 = !{i32 7, !"PIE Level", i32 2}
!58 = !{i32 7, !"uwtable", i32 2}
!59 = !{i32 7, !"frame-pointer", i32 2}
!60 = !{!"clang version 16.0.0"}
!61 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !62, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!62 = !DISubroutineType(types: !63)
!63 = !{null, !22, !22}
!64 = !{}
!65 = !DILocalVariable(name: "p", arg: 1, scope: !61, file: !2, line: 4, type: !22)
!66 = !DILocation(line: 4, column: 22, scope: !61)
!67 = !DILocalVariable(name: "q", arg: 2, scope: !61, file: !2, line: 4, type: !22)
!68 = !DILocation(line: 4, column: 31, scope: !61)
!69 = !DILocation(line: 5, column: 3, scope: !61)
!70 = !DILocation(line: 6, column: 1, scope: !61)
!71 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !62, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!72 = !DILocalVariable(name: "p", arg: 1, scope: !71, file: !2, line: 8, type: !22)
!73 = !DILocation(line: 8, column: 25, scope: !71)
!74 = !DILocalVariable(name: "q", arg: 2, scope: !71, file: !2, line: 8, type: !22)
!75 = !DILocation(line: 8, column: 34, scope: !71)
!76 = !DILocation(line: 9, column: 3, scope: !71)
!77 = !DILocation(line: 10, column: 1, scope: !71)
!78 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !62, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!79 = !DILocalVariable(name: "p", arg: 1, scope: !78, file: !2, line: 12, type: !22)
!80 = !DILocation(line: 12, column: 21, scope: !78)
!81 = !DILocalVariable(name: "q", arg: 2, scope: !78, file: !2, line: 12, type: !22)
!82 = !DILocation(line: 12, column: 30, scope: !78)
!83 = !DILocation(line: 13, column: 3, scope: !78)
!84 = !DILocation(line: 14, column: 1, scope: !78)
!85 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !62, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!86 = !DILocalVariable(name: "p", arg: 1, scope: !85, file: !2, line: 16, type: !22)
!87 = !DILocation(line: 16, column: 20, scope: !85)
!88 = !DILocalVariable(name: "q", arg: 2, scope: !85, file: !2, line: 16, type: !22)
!89 = !DILocation(line: 16, column: 29, scope: !85)
!90 = !DILocation(line: 17, column: 3, scope: !85)
!91 = !DILocation(line: 18, column: 1, scope: !85)
!92 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !62, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!93 = !DILocalVariable(name: "p", arg: 1, scope: !92, file: !2, line: 20, type: !22)
!94 = !DILocation(line: 20, column: 34, scope: !92)
!95 = !DILocalVariable(name: "q", arg: 2, scope: !92, file: !2, line: 20, type: !22)
!96 = !DILocation(line: 20, column: 43, scope: !92)
!97 = !DILocation(line: 21, column: 3, scope: !92)
!98 = !DILocation(line: 22, column: 1, scope: !92)
!99 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !62, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!100 = !DILocalVariable(name: "p", arg: 1, scope: !99, file: !2, line: 24, type: !22)
!101 = !DILocation(line: 24, column: 33, scope: !99)
!102 = !DILocalVariable(name: "q", arg: 2, scope: !99, file: !2, line: 24, type: !22)
!103 = !DILocation(line: 24, column: 42, scope: !99)
!104 = !DILocation(line: 25, column: 3, scope: !99)
!105 = !DILocation(line: 26, column: 1, scope: !99)
!106 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !107, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!107 = !DISubroutineType(types: !108)
!108 = !{!22, !52}
!109 = !DILocalVariable(name: "n", arg: 1, scope: !106, file: !2, line: 29, type: !52)
!110 = !DILocation(line: 29, column: 22, scope: !106)
!111 = !DILocation(line: 30, column: 17, scope: !106)
!112 = !DILocation(line: 30, column: 10, scope: !106)
!113 = !DILocation(line: 30, column: 3, scope: !106)
!114 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !107, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!115 = !DILocalVariable(name: "n", arg: 1, scope: !114, file: !2, line: 33, type: !52)
!116 = !DILocation(line: 33, column: 28, scope: !114)
!117 = !DILocation(line: 34, column: 19, scope: !114)
!118 = !DILocation(line: 34, column: 12, scope: !114)
!119 = !DILocation(line: 34, column: 5, scope: !114)
!120 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !107, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!121 = !DILocalVariable(name: "n", arg: 1, scope: !120, file: !2, line: 37, type: !52)
!122 = !DILocation(line: 37, column: 21, scope: !120)
!123 = !DILocation(line: 38, column: 17, scope: !120)
!124 = !DILocation(line: 38, column: 10, scope: !120)
!125 = !DILocation(line: 38, column: 3, scope: !120)
!126 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !107, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!127 = !DILocalVariable(name: "n", arg: 1, scope: !126, file: !2, line: 41, type: !52)
!128 = !DILocation(line: 41, column: 21, scope: !126)
!129 = !DILocation(line: 42, column: 17, scope: !126)
!130 = !DILocation(line: 42, column: 10, scope: !126)
!131 = !DILocation(line: 42, column: 3, scope: !126)
!132 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !107, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!133 = !DILocalVariable(name: "n", arg: 1, scope: !132, file: !2, line: 45, type: !52)
!134 = !DILocation(line: 45, column: 21, scope: !132)
!135 = !DILocation(line: 46, column: 17, scope: !132)
!136 = !DILocation(line: 46, column: 10, scope: !132)
!137 = !DILocation(line: 46, column: 3, scope: !132)
!138 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !107, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!139 = !DILocalVariable(name: "n", arg: 1, scope: !138, file: !2, line: 49, type: !52)
!140 = !DILocation(line: 49, column: 21, scope: !138)
!141 = !DILocation(line: 50, column: 17, scope: !138)
!142 = !DILocation(line: 50, column: 10, scope: !138)
!143 = !DILocation(line: 50, column: 3, scope: !138)
!144 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !107, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!145 = !DILocalVariable(name: "n", arg: 1, scope: !144, file: !2, line: 53, type: !52)
!146 = !DILocation(line: 53, column: 21, scope: !144)
!147 = !DILocation(line: 54, column: 17, scope: !144)
!148 = !DILocation(line: 54, column: 10, scope: !144)
!149 = !DILocation(line: 54, column: 3, scope: !144)
!150 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !107, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!151 = !DILocalVariable(name: "n", arg: 1, scope: !150, file: !2, line: 57, type: !52)
!152 = !DILocation(line: 57, column: 18, scope: !150)
!153 = !DILocation(line: 58, column: 17, scope: !150)
!154 = !DILocation(line: 58, column: 10, scope: !150)
!155 = !DILocation(line: 58, column: 3, scope: !150)
!156 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !157, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!157 = !DISubroutineType(types: !158)
!158 = !{null, !52, !52}
!159 = !DILocalVariable(name: "id", arg: 1, scope: !156, file: !2, line: 67, type: !52)
!160 = !DILocation(line: 67, column: 20, scope: !156)
!161 = !DILocalVariable(name: "flags", arg: 2, scope: !156, file: !2, line: 67, type: !52)
!162 = !DILocation(line: 67, column: 28, scope: !156)
!163 = !DILocation(line: 68, column: 3, scope: !156)
!164 = !DILocation(line: 69, column: 1, scope: !156)
!165 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !166, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!166 = !DISubroutineType(types: !167)
!167 = !{null, !52, !23}
!168 = !DILocalVariable(name: "thdid", arg: 1, scope: !165, file: !2, line: 79, type: !52)
!169 = !DILocation(line: 79, column: 21, scope: !165)
!170 = !DILocalVariable(name: "cxt", arg: 2, scope: !165, file: !2, line: 79, type: !23)
!171 = !DILocation(line: 79, column: 34, scope: !165)
!172 = !DILocation(line: 81, column: 1, scope: !165)
!173 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !166, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!174 = !DILocalVariable(name: "thdid", arg: 1, scope: !173, file: !2, line: 82, type: !52)
!175 = !DILocation(line: 82, column: 21, scope: !173)
!176 = !DILocalVariable(name: "cxt", arg: 2, scope: !173, file: !2, line: 82, type: !23)
!177 = !DILocation(line: 82, column: 33, scope: !173)
!178 = !DILocation(line: 84, column: 1, scope: !173)
!179 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !180, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!180 = !DISubroutineType(types: !181)
!181 = !{null, !52, !23, !23}
!182 = !DILocalVariable(name: "thdid", arg: 1, scope: !179, file: !2, line: 85, type: !52)
!183 = !DILocation(line: 85, column: 26, scope: !179)
!184 = !DILocalVariable(name: "cxt", arg: 2, scope: !179, file: !2, line: 85, type: !23)
!185 = !DILocation(line: 85, column: 38, scope: !179)
!186 = !DILocalVariable(name: "lev", arg: 3, scope: !179, file: !2, line: 85, type: !23)
!187 = !DILocation(line: 85, column: 49, scope: !179)
!188 = !DILocation(line: 87, column: 1, scope: !179)
!189 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !190, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!190 = !DISubroutineType(types: !191)
!191 = !{null, !23}
!192 = !DILocalVariable(name: "lockname", arg: 1, scope: !189, file: !2, line: 89, type: !23)
!193 = !DILocation(line: 89, column: 17, scope: !189)
!194 = !DILocation(line: 91, column: 1, scope: !189)
!195 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !190, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!196 = !DILocalVariable(name: "str", arg: 1, scope: !195, file: !2, line: 93, type: !23)
!197 = !DILocation(line: 93, column: 18, scope: !195)
!198 = !DILocation(line: 94, column: 18, scope: !195)
!199 = !DILocation(line: 94, column: 3, scope: !195)
!200 = !DILocation(line: 95, column: 3, scope: !195)
!201 = !DILocation(line: 96, column: 3, scope: !195)
!202 = !DILocation(line: 97, column: 1, scope: !195)
!203 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !204, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!204 = !DISubroutineType(types: !205)
!205 = !{!22, !206}
!206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!207 = !DILocalVariable(name: "p", arg: 1, scope: !203, file: !2, line: 100, type: !206)
!208 = !DILocation(line: 100, column: 24, scope: !203)
!209 = !DILocation(line: 101, column: 6, scope: !203)
!210 = !DILocation(line: 101, column: 8, scope: !203)
!211 = !DILocation(line: 102, column: 1, scope: !203)
!212 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !204, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!213 = !DILocalVariable(name: "p", arg: 1, scope: !212, file: !2, line: 104, type: !206)
!214 = !DILocation(line: 104, column: 20, scope: !212)
!215 = !DILocation(line: 105, column: 6, scope: !212)
!216 = !DILocation(line: 105, column: 8, scope: !212)
!217 = !DILocation(line: 106, column: 1, scope: !212)
!218 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !204, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!219 = !DILocalVariable(name: "p", arg: 1, scope: !218, file: !2, line: 110, type: !206)
!220 = !DILocation(line: 110, column: 22, scope: !218)
!221 = !DILocation(line: 111, column: 10, scope: !218)
!222 = !DILocation(line: 111, column: 5, scope: !218)
!223 = !DILocation(line: 112, column: 1, scope: !218)
!224 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !204, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!225 = !DILocalVariable(name: "p", arg: 1, scope: !224, file: !2, line: 115, type: !206)
!226 = !DILocation(line: 115, column: 24, scope: !224)
!227 = !DILocation(line: 116, column: 10, scope: !224)
!228 = !DILocation(line: 116, column: 5, scope: !224)
!229 = !DILocation(line: 117, column: 1, scope: !224)
!230 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !231, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!231 = !DISubroutineType(types: !232)
!232 = !{null}
!233 = !DILocation(line: 135, column: 20, scope: !230)
!234 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_char_07_bad", scope: !28, file: !28, line: 29, type: !231, scopeLine: 30, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!235 = !DILocalVariable(name: "data", scope: !234, file: !28, line: 31, type: !23)
!236 = !DILocation(line: 31, column: 12, scope: !234)
!237 = !DILocation(line: 33, column: 10, scope: !234)
!238 = !DILocation(line: 34, column: 8, scope: !239)
!239 = distinct !DILexicalBlock(scope: !234, file: !28, line: 34, column: 8)
!240 = !DILocation(line: 34, column: 18, scope: !239)
!241 = !DILocation(line: 34, column: 8, scope: !234)
!242 = !DILocation(line: 36, column: 24, scope: !243)
!243 = distinct !DILexicalBlock(scope: !239, file: !28, line: 35, column: 5)
!244 = !DILocation(line: 36, column: 14, scope: !243)
!245 = !DILocation(line: 37, column: 13, scope: !246)
!246 = distinct !DILexicalBlock(scope: !243, file: !28, line: 37, column: 13)
!247 = !DILocation(line: 37, column: 18, scope: !246)
!248 = !DILocation(line: 37, column: 13, scope: !243)
!249 = !DILocation(line: 37, column: 28, scope: !250)
!250 = distinct !DILexicalBlock(scope: !246, file: !28, line: 37, column: 27)
!251 = !DILocation(line: 39, column: 18, scope: !243)
!252 = !DILocation(line: 39, column: 9, scope: !243)
!253 = !DILocation(line: 40, column: 5, scope: !243)
!254 = !DILocation(line: 41, column: 8, scope: !255)
!255 = distinct !DILexicalBlock(scope: !234, file: !28, line: 41, column: 8)
!256 = !DILocation(line: 41, column: 18, scope: !255)
!257 = !DILocation(line: 41, column: 8, scope: !234)
!258 = !DILocation(line: 44, column: 20, scope: !259)
!259 = distinct !DILexicalBlock(scope: !255, file: !28, line: 42, column: 5)
!260 = !DILocation(line: 44, column: 9, scope: !259)
!261 = !DILocation(line: 45, column: 5, scope: !259)
!262 = !DILocation(line: 46, column: 1, scope: !234)
!263 = distinct !DISubprogram(name: "CWE415_Double_Free__malloc_free_char_07_good", scope: !28, file: !28, line: 142, type: !231, scopeLine: 143, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!264 = !DILocation(line: 144, column: 5, scope: !263)
!265 = !DILocation(line: 145, column: 5, scope: !263)
!266 = !DILocation(line: 146, column: 5, scope: !263)
!267 = !DILocation(line: 147, column: 5, scope: !263)
!268 = !DILocation(line: 148, column: 1, scope: !263)
!269 = distinct !DISubprogram(name: "main", scope: !28, file: !28, line: 159, type: !270, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !64)
!270 = !DISubroutineType(types: !271)
!271 = !{!52, !52, !272}
!272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!273 = !DILocalVariable(name: "argc", arg: 1, scope: !269, file: !28, line: 159, type: !52)
!274 = !DILocation(line: 159, column: 14, scope: !269)
!275 = !DILocalVariable(name: "argv", arg: 2, scope: !269, file: !28, line: 159, type: !272)
!276 = !DILocation(line: 159, column: 27, scope: !269)
!277 = !DILocation(line: 162, column: 22, scope: !269)
!278 = !DILocation(line: 162, column: 12, scope: !269)
!279 = !DILocation(line: 162, column: 5, scope: !269)
!280 = !DILocation(line: 164, column: 5, scope: !269)
!281 = !DILocation(line: 165, column: 5, scope: !269)
!282 = !DILocation(line: 166, column: 5, scope: !269)
!283 = !DILocation(line: 169, column: 5, scope: !269)
!284 = !DILocation(line: 170, column: 5, scope: !269)
!285 = !DILocation(line: 171, column: 5, scope: !269)
!286 = !DILocation(line: 173, column: 5, scope: !269)
!287 = distinct !DISubprogram(name: "goodB2G1", scope: !28, file: !28, line: 53, type: !231, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !64)
!288 = !DILocalVariable(name: "data", scope: !287, file: !28, line: 55, type: !23)
!289 = !DILocation(line: 55, column: 12, scope: !287)
!290 = !DILocation(line: 57, column: 10, scope: !287)
!291 = !DILocation(line: 58, column: 8, scope: !292)
!292 = distinct !DILexicalBlock(scope: !287, file: !28, line: 58, column: 8)
!293 = !DILocation(line: 58, column: 18, scope: !292)
!294 = !DILocation(line: 58, column: 8, scope: !287)
!295 = !DILocation(line: 60, column: 24, scope: !296)
!296 = distinct !DILexicalBlock(scope: !292, file: !28, line: 59, column: 5)
!297 = !DILocation(line: 60, column: 14, scope: !296)
!298 = !DILocation(line: 61, column: 13, scope: !299)
!299 = distinct !DILexicalBlock(scope: !296, file: !28, line: 61, column: 13)
!300 = !DILocation(line: 61, column: 18, scope: !299)
!301 = !DILocation(line: 61, column: 13, scope: !296)
!302 = !DILocation(line: 61, column: 28, scope: !303)
!303 = distinct !DILexicalBlock(scope: !299, file: !28, line: 61, column: 27)
!304 = !DILocation(line: 63, column: 18, scope: !296)
!305 = !DILocation(line: 63, column: 9, scope: !296)
!306 = !DILocation(line: 64, column: 5, scope: !296)
!307 = !DILocation(line: 65, column: 8, scope: !308)
!308 = distinct !DILexicalBlock(scope: !287, file: !28, line: 65, column: 8)
!309 = !DILocation(line: 65, column: 18, scope: !308)
!310 = !DILocation(line: 65, column: 8, scope: !287)
!311 = !DILocation(line: 68, column: 9, scope: !312)
!312 = distinct !DILexicalBlock(scope: !308, file: !28, line: 66, column: 5)
!313 = !DILocation(line: 69, column: 5, scope: !312)
!314 = !DILocation(line: 76, column: 1, scope: !287)
!315 = distinct !DISubprogram(name: "goodB2G2", scope: !28, file: !28, line: 79, type: !231, scopeLine: 80, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !64)
!316 = !DILocalVariable(name: "data", scope: !315, file: !28, line: 81, type: !23)
!317 = !DILocation(line: 81, column: 12, scope: !315)
!318 = !DILocation(line: 83, column: 10, scope: !315)
!319 = !DILocation(line: 84, column: 8, scope: !320)
!320 = distinct !DILexicalBlock(scope: !315, file: !28, line: 84, column: 8)
!321 = !DILocation(line: 84, column: 18, scope: !320)
!322 = !DILocation(line: 84, column: 8, scope: !315)
!323 = !DILocation(line: 86, column: 24, scope: !324)
!324 = distinct !DILexicalBlock(scope: !320, file: !28, line: 85, column: 5)
!325 = !DILocation(line: 86, column: 14, scope: !324)
!326 = !DILocation(line: 87, column: 13, scope: !327)
!327 = distinct !DILexicalBlock(scope: !324, file: !28, line: 87, column: 13)
!328 = !DILocation(line: 87, column: 18, scope: !327)
!329 = !DILocation(line: 87, column: 13, scope: !324)
!330 = !DILocation(line: 87, column: 28, scope: !331)
!331 = distinct !DILexicalBlock(scope: !327, file: !28, line: 87, column: 27)
!332 = !DILocation(line: 89, column: 18, scope: !324)
!333 = !DILocation(line: 89, column: 9, scope: !324)
!334 = !DILocation(line: 90, column: 5, scope: !324)
!335 = !DILocation(line: 91, column: 8, scope: !336)
!336 = distinct !DILexicalBlock(scope: !315, file: !28, line: 91, column: 8)
!337 = !DILocation(line: 91, column: 18, scope: !336)
!338 = !DILocation(line: 91, column: 8, scope: !315)
!339 = !DILocation(line: 96, column: 5, scope: !340)
!340 = distinct !DILexicalBlock(scope: !336, file: !28, line: 92, column: 5)
!341 = !DILocation(line: 97, column: 1, scope: !315)
!342 = distinct !DISubprogram(name: "goodG2B1", scope: !28, file: !28, line: 100, type: !231, scopeLine: 101, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !64)
!343 = !DILocalVariable(name: "data", scope: !342, file: !28, line: 102, type: !23)
!344 = !DILocation(line: 102, column: 12, scope: !342)
!345 = !DILocation(line: 104, column: 10, scope: !342)
!346 = !DILocation(line: 105, column: 8, scope: !347)
!347 = distinct !DILexicalBlock(scope: !342, file: !28, line: 105, column: 8)
!348 = !DILocation(line: 105, column: 18, scope: !347)
!349 = !DILocation(line: 105, column: 8, scope: !342)
!350 = !DILocation(line: 108, column: 9, scope: !351)
!351 = distinct !DILexicalBlock(scope: !347, file: !28, line: 106, column: 5)
!352 = !DILocation(line: 109, column: 5, scope: !351)
!353 = !DILocation(line: 112, column: 24, scope: !354)
!354 = distinct !DILexicalBlock(scope: !347, file: !28, line: 111, column: 5)
!355 = !DILocation(line: 112, column: 14, scope: !354)
!356 = !DILocation(line: 113, column: 13, scope: !357)
!357 = distinct !DILexicalBlock(scope: !354, file: !28, line: 113, column: 13)
!358 = !DILocation(line: 113, column: 18, scope: !357)
!359 = !DILocation(line: 113, column: 13, scope: !354)
!360 = !DILocation(line: 113, column: 28, scope: !361)
!361 = distinct !DILexicalBlock(scope: !357, file: !28, line: 113, column: 27)
!362 = !DILocation(line: 116, column: 8, scope: !363)
!363 = distinct !DILexicalBlock(scope: !342, file: !28, line: 116, column: 8)
!364 = !DILocation(line: 116, column: 18, scope: !363)
!365 = !DILocation(line: 116, column: 8, scope: !342)
!366 = !DILocation(line: 119, column: 18, scope: !367)
!367 = distinct !DILexicalBlock(scope: !363, file: !28, line: 117, column: 5)
!368 = !DILocation(line: 119, column: 9, scope: !367)
!369 = !DILocation(line: 120, column: 5, scope: !367)
!370 = !DILocation(line: 121, column: 1, scope: !342)
!371 = distinct !DISubprogram(name: "goodG2B2", scope: !28, file: !28, line: 124, type: !231, scopeLine: 125, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !64)
!372 = !DILocalVariable(name: "data", scope: !371, file: !28, line: 126, type: !23)
!373 = !DILocation(line: 126, column: 12, scope: !371)
!374 = !DILocation(line: 128, column: 10, scope: !371)
!375 = !DILocation(line: 129, column: 8, scope: !376)
!376 = distinct !DILexicalBlock(scope: !371, file: !28, line: 129, column: 8)
!377 = !DILocation(line: 129, column: 18, scope: !376)
!378 = !DILocation(line: 129, column: 8, scope: !371)
!379 = !DILocation(line: 131, column: 24, scope: !380)
!380 = distinct !DILexicalBlock(scope: !376, file: !28, line: 130, column: 5)
!381 = !DILocation(line: 131, column: 14, scope: !380)
!382 = !DILocation(line: 132, column: 13, scope: !383)
!383 = distinct !DILexicalBlock(scope: !380, file: !28, line: 132, column: 13)
!384 = !DILocation(line: 132, column: 18, scope: !383)
!385 = !DILocation(line: 132, column: 13, scope: !380)
!386 = !DILocation(line: 132, column: 28, scope: !387)
!387 = distinct !DILexicalBlock(scope: !383, file: !28, line: 132, column: 27)
!388 = !DILocation(line: 134, column: 5, scope: !380)
!389 = !DILocation(line: 135, column: 8, scope: !390)
!390 = distinct !DILexicalBlock(scope: !371, file: !28, line: 135, column: 8)
!391 = !DILocation(line: 135, column: 18, scope: !390)
!392 = !DILocation(line: 135, column: 8, scope: !371)
!393 = !DILocation(line: 138, column: 18, scope: !394)
!394 = distinct !DILexicalBlock(scope: !390, file: !28, line: 136, column: 5)
!395 = !DILocation(line: 138, column: 9, scope: !394)
!396 = !DILocation(line: 139, column: 5, scope: !394)
!397 = !DILocation(line: 140, column: 1, scope: !371)
