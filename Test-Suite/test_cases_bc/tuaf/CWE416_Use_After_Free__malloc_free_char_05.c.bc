; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tuaf/CWE416_Use_After_Free__malloc_free_char_05.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_char_05.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@staticTrue = internal global i32 1, align 4, !dbg !17
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !26
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !32
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !37
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !42
@staticFalse = internal global i32 0, align 4, !dbg !52
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !47

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !63 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !67, metadata !DIExpression()), !dbg !68
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !69, metadata !DIExpression()), !dbg !70
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !71
  ret void, !dbg !72
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !73 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !74, metadata !DIExpression()), !dbg !75
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !76, metadata !DIExpression()), !dbg !77
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !78
  ret void, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !80 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !81, metadata !DIExpression()), !dbg !82
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !85
  ret void, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !87 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !88, metadata !DIExpression()), !dbg !89
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !90, metadata !DIExpression()), !dbg !91
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !92
  ret void, !dbg !93
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !94 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !95, metadata !DIExpression()), !dbg !96
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !99
  ret void, !dbg !100
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !101 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !102, metadata !DIExpression()), !dbg !103
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !104, metadata !DIExpression()), !dbg !105
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !106
  ret void, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !108 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !111, metadata !DIExpression()), !dbg !112
  %0 = load i32, ptr %n.addr, align 4, !dbg !113
  %conv = sext i32 %0 to i64, !dbg !113
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !114
  ret ptr %call, !dbg !115
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !116 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !117, metadata !DIExpression()), !dbg !118
  %0 = load i32, ptr %n.addr, align 4, !dbg !119
  %conv = sext i32 %0 to i64, !dbg !119
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !120
  ret ptr %call, !dbg !121
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !122 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !123, metadata !DIExpression()), !dbg !124
  %0 = load i32, ptr %n.addr, align 4, !dbg !125
  %conv = sext i32 %0 to i64, !dbg !125
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !126
  ret ptr %call, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !128 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !129, metadata !DIExpression()), !dbg !130
  %0 = load i32, ptr %n.addr, align 4, !dbg !131
  %conv = sext i32 %0 to i64, !dbg !131
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !132
  ret ptr %call, !dbg !133
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !134 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !135, metadata !DIExpression()), !dbg !136
  %0 = load i32, ptr %n.addr, align 4, !dbg !137
  %conv = sext i32 %0 to i64, !dbg !137
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !138
  ret ptr %call, !dbg !139
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !140 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !141, metadata !DIExpression()), !dbg !142
  %0 = load i32, ptr %n.addr, align 4, !dbg !143
  %conv = sext i32 %0 to i64, !dbg !143
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !144
  ret ptr %call, !dbg !145
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !146 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !147, metadata !DIExpression()), !dbg !148
  %0 = load i32, ptr %n.addr, align 4, !dbg !149
  %conv = sext i32 %0 to i64, !dbg !149
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !150
  ret ptr %call, !dbg !151
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !152 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !153, metadata !DIExpression()), !dbg !154
  %0 = load i32, ptr %n.addr, align 4, !dbg !155
  %conv = sext i32 %0 to i64, !dbg !155
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !156
  ret ptr %call, !dbg !157
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !158 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !161, metadata !DIExpression()), !dbg !162
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !163, metadata !DIExpression()), !dbg !164
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !165
  ret void, !dbg !166
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !167 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !170, metadata !DIExpression()), !dbg !171
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !172, metadata !DIExpression()), !dbg !173
  ret void, !dbg !174
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !175 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !176, metadata !DIExpression()), !dbg !177
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !178, metadata !DIExpression()), !dbg !179
  ret void, !dbg !180
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !181 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !184, metadata !DIExpression()), !dbg !185
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !186, metadata !DIExpression()), !dbg !187
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !188, metadata !DIExpression()), !dbg !189
  ret void, !dbg !190
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !191 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !194, metadata !DIExpression()), !dbg !195
  ret void, !dbg !196
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !197 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !198, metadata !DIExpression()), !dbg !199
  %0 = load ptr, ptr %str.addr, align 8, !dbg !200
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !201
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !202
  %call2 = call i32 @getchar(), !dbg !203
  ret void, !dbg !204
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !205 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !209, metadata !DIExpression()), !dbg !210
  %0 = load ptr, ptr %p.addr, align 8, !dbg !211
  store i32 0, ptr %0, align 4, !dbg !212
  %1 = load ptr, ptr %retval, align 8, !dbg !213
  ret ptr %1, !dbg !213
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !214 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !215, metadata !DIExpression()), !dbg !216
  %0 = load ptr, ptr %p.addr, align 8, !dbg !217
  store i32 0, ptr %0, align 4, !dbg !218
  %1 = load ptr, ptr %retval, align 8, !dbg !219
  ret ptr %1, !dbg !219
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !220 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !221, metadata !DIExpression()), !dbg !222
  %0 = load ptr, ptr %p.addr, align 8, !dbg !223
  call void @free(ptr noundef %0) #8, !dbg !224
  %1 = load ptr, ptr %retval, align 8, !dbg !225
  ret ptr %1, !dbg !225
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !226 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !227, metadata !DIExpression()), !dbg !228
  %0 = load ptr, ptr %p.addr, align 8, !dbg !229
  call void @free(ptr noundef %0) #8, !dbg !230
  %1 = load ptr, ptr %retval, align 8, !dbg !231
  ret ptr %1, !dbg !231
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !232 {
entry:
  ret void, !dbg !235
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_char_05_bad() #0 !dbg !236 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !237, metadata !DIExpression()), !dbg !238
  store ptr null, ptr %data, align 8, !dbg !239
  %0 = load i32, ptr @staticTrue, align 4, !dbg !240
  %tobool = icmp ne i32 %0, 0, !dbg !240
  br i1 %tobool, label %if.then, label %if.end2, !dbg !242

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !243
  store ptr %call, ptr %data, align 8, !dbg !245
  %1 = load ptr, ptr %data, align 8, !dbg !246
  %cmp = icmp eq ptr %1, null, !dbg !248
  br i1 %cmp, label %if.then1, label %if.end, !dbg !249

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #9, !dbg !250
  unreachable, !dbg !250

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !252
  call void @llvm.memset.p0.i64(ptr align 1 %2, i8 65, i64 99, i1 false), !dbg !253
  %3 = load ptr, ptr %data, align 8, !dbg !254
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 99, !dbg !254
  store i8 0, ptr %arrayidx, align 1, !dbg !255
  %4 = load ptr, ptr %data, align 8, !dbg !256
  call void @free(ptr noundef %4) #8, !dbg !257
  br label %if.end2, !dbg !258

if.end2:                                          ; preds = %if.end, %entry
  %5 = load i32, ptr @staticTrue, align 4, !dbg !259
  %tobool3 = icmp ne i32 %5, 0, !dbg !259
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !261

if.then4:                                         ; preds = %if.end2
  %6 = load ptr, ptr %data, align 8, !dbg !262
  %call5 = call ptr @UAFFUNC(ptr noundef %6), !dbg !264
  br label %if.end6, !dbg !265

if.end6:                                          ; preds = %if.then4, %if.end2
  ret void, !dbg !266
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_char_05_good() #0 !dbg !267 {
entry:
  call void @goodB2G1(), !dbg !268
  call void @goodB2G2(), !dbg !269
  call void @goodG2B1(), !dbg !270
  call void @goodG2B2(), !dbg !271
  ret void, !dbg !272
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !273 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !277, metadata !DIExpression()), !dbg !278
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !279, metadata !DIExpression()), !dbg !280
  %call = call i64 @time(ptr noundef null) #8, !dbg !281
  %conv = trunc i64 %call to i32, !dbg !282
  call void @srand(i32 noundef %conv) #8, !dbg !283
  call void @printLine(ptr noundef @.str.3), !dbg !284
  call void @CWE416_Use_After_Free__malloc_free_char_05_good(), !dbg !285
  call void @printLine(ptr noundef @.str.4), !dbg !286
  call void @printLine(ptr noundef @.str.5), !dbg !287
  call void @CWE416_Use_After_Free__malloc_free_char_05_bad(), !dbg !288
  call void @printLine(ptr noundef @.str.6), !dbg !289
  ret i32 0, !dbg !290
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !291 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !292, metadata !DIExpression()), !dbg !293
  store ptr null, ptr %data, align 8, !dbg !294
  %0 = load i32, ptr @staticTrue, align 4, !dbg !295
  %tobool = icmp ne i32 %0, 0, !dbg !295
  br i1 %tobool, label %if.then, label %if.end2, !dbg !297

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !298
  store ptr %call, ptr %data, align 8, !dbg !300
  %1 = load ptr, ptr %data, align 8, !dbg !301
  %cmp = icmp eq ptr %1, null, !dbg !303
  br i1 %cmp, label %if.then1, label %if.end, !dbg !304

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #9, !dbg !305
  unreachable, !dbg !305

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !307
  call void @llvm.memset.p0.i64(ptr align 1 %2, i8 65, i64 99, i1 false), !dbg !308
  %3 = load ptr, ptr %data, align 8, !dbg !309
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 99, !dbg !309
  store i8 0, ptr %arrayidx, align 1, !dbg !310
  %4 = load ptr, ptr %data, align 8, !dbg !311
  call void @free(ptr noundef %4) #8, !dbg !312
  br label %if.end2, !dbg !313

if.end2:                                          ; preds = %if.end, %entry
  %5 = load i32, ptr @staticFalse, align 4, !dbg !314
  %tobool3 = icmp ne i32 %5, 0, !dbg !314
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !316

if.then4:                                         ; preds = %if.end2
  call void @printLine(ptr noundef @.str.7), !dbg !317
  br label %if.end5, !dbg !319

if.else:                                          ; preds = %if.end2
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then4
  ret void, !dbg !320
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !321 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !322, metadata !DIExpression()), !dbg !323
  store ptr null, ptr %data, align 8, !dbg !324
  %0 = load i32, ptr @staticTrue, align 4, !dbg !325
  %tobool = icmp ne i32 %0, 0, !dbg !325
  br i1 %tobool, label %if.then, label %if.end2, !dbg !327

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !328
  store ptr %call, ptr %data, align 8, !dbg !330
  %1 = load ptr, ptr %data, align 8, !dbg !331
  %cmp = icmp eq ptr %1, null, !dbg !333
  br i1 %cmp, label %if.then1, label %if.end, !dbg !334

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #9, !dbg !335
  unreachable, !dbg !335

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !337
  call void @llvm.memset.p0.i64(ptr align 1 %2, i8 65, i64 99, i1 false), !dbg !338
  %3 = load ptr, ptr %data, align 8, !dbg !339
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 99, !dbg !339
  store i8 0, ptr %arrayidx, align 1, !dbg !340
  %4 = load ptr, ptr %data, align 8, !dbg !341
  call void @free(ptr noundef %4) #8, !dbg !342
  br label %if.end2, !dbg !343

if.end2:                                          ; preds = %if.end, %entry
  %5 = load i32, ptr @staticTrue, align 4, !dbg !344
  %tobool3 = icmp ne i32 %5, 0, !dbg !344
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !346

if.then4:                                         ; preds = %if.end2
  br label %if.end5, !dbg !347

if.end5:                                          ; preds = %if.then4, %if.end2
  ret void, !dbg !349
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !350 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !351, metadata !DIExpression()), !dbg !352
  store ptr null, ptr %data, align 8, !dbg !353
  %0 = load i32, ptr @staticFalse, align 4, !dbg !354
  %tobool = icmp ne i32 %0, 0, !dbg !354
  br i1 %tobool, label %if.then, label %if.else, !dbg !356

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !357
  br label %if.end2, !dbg !359

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !360
  store ptr %call, ptr %data, align 8, !dbg !362
  %1 = load ptr, ptr %data, align 8, !dbg !363
  %cmp = icmp eq ptr %1, null, !dbg !365
  br i1 %cmp, label %if.then1, label %if.end, !dbg !366

if.then1:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #9, !dbg !367
  unreachable, !dbg !367

if.end:                                           ; preds = %if.else
  %2 = load ptr, ptr %data, align 8, !dbg !369
  call void @llvm.memset.p0.i64(ptr align 1 %2, i8 65, i64 99, i1 false), !dbg !370
  %3 = load ptr, ptr %data, align 8, !dbg !371
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 99, !dbg !371
  store i8 0, ptr %arrayidx, align 1, !dbg !372
  br label %if.end2

if.end2:                                          ; preds = %if.end, %if.then
  %4 = load i32, ptr @staticTrue, align 4, !dbg !373
  %tobool3 = icmp ne i32 %4, 0, !dbg !373
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !375

if.then4:                                         ; preds = %if.end2
  %5 = load ptr, ptr %data, align 8, !dbg !376
  %call5 = call ptr @SAFEUAFFUNC(ptr noundef %5), !dbg !378
  br label %if.end6, !dbg !379

if.end6:                                          ; preds = %if.then4, %if.end2
  ret void, !dbg !380
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !381 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !382, metadata !DIExpression()), !dbg !383
  store ptr null, ptr %data, align 8, !dbg !384
  %0 = load i32, ptr @staticTrue, align 4, !dbg !385
  %tobool = icmp ne i32 %0, 0, !dbg !385
  br i1 %tobool, label %if.then, label %if.end2, !dbg !387

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !388
  store ptr %call, ptr %data, align 8, !dbg !390
  %1 = load ptr, ptr %data, align 8, !dbg !391
  %cmp = icmp eq ptr %1, null, !dbg !393
  br i1 %cmp, label %if.then1, label %if.end, !dbg !394

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #9, !dbg !395
  unreachable, !dbg !395

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !397
  call void @llvm.memset.p0.i64(ptr align 1 %2, i8 65, i64 99, i1 false), !dbg !398
  %3 = load ptr, ptr %data, align 8, !dbg !399
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 99, !dbg !399
  store i8 0, ptr %arrayidx, align 1, !dbg !400
  br label %if.end2, !dbg !401

if.end2:                                          ; preds = %if.end, %entry
  %4 = load i32, ptr @staticTrue, align 4, !dbg !402
  %tobool3 = icmp ne i32 %4, 0, !dbg !402
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !404

if.then4:                                         ; preds = %if.end2
  %5 = load ptr, ptr %data, align 8, !dbg !405
  %call5 = call ptr @SAFEUAFFUNC(ptr noundef %5), !dbg !407
  br label %if.end6, !dbg !408

if.end6:                                          ; preds = %if.then4, %if.end2
  ret void, !dbg !409
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #7 = { nounwind allocsize(0) }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!55, !56, !57, !58, !59, !60, !61}
!llvm.ident = !{!62}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "staticTrue", scope: !19, file: !28, line: 25, type: !54, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !25, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_char_05.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "75ed77926578d2fb7a933e62e364055e")
!21 = !{!22, !23, !24}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!24 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!25 = !{!0, !7, !12, !26, !32, !37, !42, !17, !47, !52}
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(scope: null, file: !28, line: 180, type: !29, isLocal: true, isDefinition: true)
!28 = !DIFile(filename: "src/tuaf/CWE416_Use_After_Free__malloc_free_char_05.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "75ed77926578d2fb7a933e62e364055e")
!29 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !30)
!30 = !{!31}
!31 = !DISubrange(count: 18)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(scope: null, file: !28, line: 182, type: !34, isLocal: true, isDefinition: true)
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !35)
!35 = !{!36}
!36 = !DISubrange(count: 16)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(scope: null, file: !28, line: 185, type: !39, isLocal: true, isDefinition: true)
!39 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !40)
!40 = !{!41}
!41 = !DISubrange(count: 17)
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(scope: null, file: !28, line: 187, type: !44, isLocal: true, isDefinition: true)
!44 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !45)
!45 = !{!46}
!46 = !DISubrange(count: 15)
!47 = !DIGlobalVariableExpression(var: !48, expr: !DIExpression())
!48 = distinct !DIGlobalVariable(scope: null, file: !28, line: 74, type: !49, isLocal: true, isDefinition: true)
!49 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !50)
!50 = !{!51}
!51 = !DISubrange(count: 21)
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "staticFalse", scope: !19, file: !28, line: 26, type: !54, isLocal: true, isDefinition: true)
!54 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!55 = !{i32 7, !"Dwarf Version", i32 5}
!56 = !{i32 2, !"Debug Info Version", i32 3}
!57 = !{i32 1, !"wchar_size", i32 4}
!58 = !{i32 8, !"PIC Level", i32 2}
!59 = !{i32 7, !"PIE Level", i32 2}
!60 = !{i32 7, !"uwtable", i32 2}
!61 = !{i32 7, !"frame-pointer", i32 2}
!62 = !{!"clang version 16.0.0"}
!63 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !64, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!64 = !DISubroutineType(types: !65)
!65 = !{null, !22, !22}
!66 = !{}
!67 = !DILocalVariable(name: "p", arg: 1, scope: !63, file: !2, line: 4, type: !22)
!68 = !DILocation(line: 4, column: 22, scope: !63)
!69 = !DILocalVariable(name: "q", arg: 2, scope: !63, file: !2, line: 4, type: !22)
!70 = !DILocation(line: 4, column: 31, scope: !63)
!71 = !DILocation(line: 5, column: 3, scope: !63)
!72 = !DILocation(line: 6, column: 1, scope: !63)
!73 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !64, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!74 = !DILocalVariable(name: "p", arg: 1, scope: !73, file: !2, line: 8, type: !22)
!75 = !DILocation(line: 8, column: 25, scope: !73)
!76 = !DILocalVariable(name: "q", arg: 2, scope: !73, file: !2, line: 8, type: !22)
!77 = !DILocation(line: 8, column: 34, scope: !73)
!78 = !DILocation(line: 9, column: 3, scope: !73)
!79 = !DILocation(line: 10, column: 1, scope: !73)
!80 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !64, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!81 = !DILocalVariable(name: "p", arg: 1, scope: !80, file: !2, line: 12, type: !22)
!82 = !DILocation(line: 12, column: 21, scope: !80)
!83 = !DILocalVariable(name: "q", arg: 2, scope: !80, file: !2, line: 12, type: !22)
!84 = !DILocation(line: 12, column: 30, scope: !80)
!85 = !DILocation(line: 13, column: 3, scope: !80)
!86 = !DILocation(line: 14, column: 1, scope: !80)
!87 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !64, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!88 = !DILocalVariable(name: "p", arg: 1, scope: !87, file: !2, line: 16, type: !22)
!89 = !DILocation(line: 16, column: 20, scope: !87)
!90 = !DILocalVariable(name: "q", arg: 2, scope: !87, file: !2, line: 16, type: !22)
!91 = !DILocation(line: 16, column: 29, scope: !87)
!92 = !DILocation(line: 17, column: 3, scope: !87)
!93 = !DILocation(line: 18, column: 1, scope: !87)
!94 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !64, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!95 = !DILocalVariable(name: "p", arg: 1, scope: !94, file: !2, line: 20, type: !22)
!96 = !DILocation(line: 20, column: 34, scope: !94)
!97 = !DILocalVariable(name: "q", arg: 2, scope: !94, file: !2, line: 20, type: !22)
!98 = !DILocation(line: 20, column: 43, scope: !94)
!99 = !DILocation(line: 21, column: 3, scope: !94)
!100 = !DILocation(line: 22, column: 1, scope: !94)
!101 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !64, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!102 = !DILocalVariable(name: "p", arg: 1, scope: !101, file: !2, line: 24, type: !22)
!103 = !DILocation(line: 24, column: 33, scope: !101)
!104 = !DILocalVariable(name: "q", arg: 2, scope: !101, file: !2, line: 24, type: !22)
!105 = !DILocation(line: 24, column: 42, scope: !101)
!106 = !DILocation(line: 25, column: 3, scope: !101)
!107 = !DILocation(line: 26, column: 1, scope: !101)
!108 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !109, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!109 = !DISubroutineType(types: !110)
!110 = !{!22, !54}
!111 = !DILocalVariable(name: "n", arg: 1, scope: !108, file: !2, line: 29, type: !54)
!112 = !DILocation(line: 29, column: 22, scope: !108)
!113 = !DILocation(line: 30, column: 17, scope: !108)
!114 = !DILocation(line: 30, column: 10, scope: !108)
!115 = !DILocation(line: 30, column: 3, scope: !108)
!116 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !109, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!117 = !DILocalVariable(name: "n", arg: 1, scope: !116, file: !2, line: 33, type: !54)
!118 = !DILocation(line: 33, column: 28, scope: !116)
!119 = !DILocation(line: 34, column: 19, scope: !116)
!120 = !DILocation(line: 34, column: 12, scope: !116)
!121 = !DILocation(line: 34, column: 5, scope: !116)
!122 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !109, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!123 = !DILocalVariable(name: "n", arg: 1, scope: !122, file: !2, line: 37, type: !54)
!124 = !DILocation(line: 37, column: 21, scope: !122)
!125 = !DILocation(line: 38, column: 17, scope: !122)
!126 = !DILocation(line: 38, column: 10, scope: !122)
!127 = !DILocation(line: 38, column: 3, scope: !122)
!128 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !109, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!129 = !DILocalVariable(name: "n", arg: 1, scope: !128, file: !2, line: 41, type: !54)
!130 = !DILocation(line: 41, column: 21, scope: !128)
!131 = !DILocation(line: 42, column: 17, scope: !128)
!132 = !DILocation(line: 42, column: 10, scope: !128)
!133 = !DILocation(line: 42, column: 3, scope: !128)
!134 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !109, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!135 = !DILocalVariable(name: "n", arg: 1, scope: !134, file: !2, line: 45, type: !54)
!136 = !DILocation(line: 45, column: 21, scope: !134)
!137 = !DILocation(line: 46, column: 17, scope: !134)
!138 = !DILocation(line: 46, column: 10, scope: !134)
!139 = !DILocation(line: 46, column: 3, scope: !134)
!140 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !109, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!141 = !DILocalVariable(name: "n", arg: 1, scope: !140, file: !2, line: 49, type: !54)
!142 = !DILocation(line: 49, column: 21, scope: !140)
!143 = !DILocation(line: 50, column: 17, scope: !140)
!144 = !DILocation(line: 50, column: 10, scope: !140)
!145 = !DILocation(line: 50, column: 3, scope: !140)
!146 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !109, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!147 = !DILocalVariable(name: "n", arg: 1, scope: !146, file: !2, line: 53, type: !54)
!148 = !DILocation(line: 53, column: 21, scope: !146)
!149 = !DILocation(line: 54, column: 17, scope: !146)
!150 = !DILocation(line: 54, column: 10, scope: !146)
!151 = !DILocation(line: 54, column: 3, scope: !146)
!152 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !109, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!153 = !DILocalVariable(name: "n", arg: 1, scope: !152, file: !2, line: 57, type: !54)
!154 = !DILocation(line: 57, column: 18, scope: !152)
!155 = !DILocation(line: 58, column: 17, scope: !152)
!156 = !DILocation(line: 58, column: 10, scope: !152)
!157 = !DILocation(line: 58, column: 3, scope: !152)
!158 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !159, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!159 = !DISubroutineType(types: !160)
!160 = !{null, !54, !54}
!161 = !DILocalVariable(name: "id", arg: 1, scope: !158, file: !2, line: 67, type: !54)
!162 = !DILocation(line: 67, column: 20, scope: !158)
!163 = !DILocalVariable(name: "flags", arg: 2, scope: !158, file: !2, line: 67, type: !54)
!164 = !DILocation(line: 67, column: 28, scope: !158)
!165 = !DILocation(line: 68, column: 3, scope: !158)
!166 = !DILocation(line: 69, column: 1, scope: !158)
!167 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !168, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!168 = !DISubroutineType(types: !169)
!169 = !{null, !54, !23}
!170 = !DILocalVariable(name: "thdid", arg: 1, scope: !167, file: !2, line: 79, type: !54)
!171 = !DILocation(line: 79, column: 21, scope: !167)
!172 = !DILocalVariable(name: "cxt", arg: 2, scope: !167, file: !2, line: 79, type: !23)
!173 = !DILocation(line: 79, column: 34, scope: !167)
!174 = !DILocation(line: 81, column: 1, scope: !167)
!175 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !168, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!176 = !DILocalVariable(name: "thdid", arg: 1, scope: !175, file: !2, line: 82, type: !54)
!177 = !DILocation(line: 82, column: 21, scope: !175)
!178 = !DILocalVariable(name: "cxt", arg: 2, scope: !175, file: !2, line: 82, type: !23)
!179 = !DILocation(line: 82, column: 33, scope: !175)
!180 = !DILocation(line: 84, column: 1, scope: !175)
!181 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !182, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!182 = !DISubroutineType(types: !183)
!183 = !{null, !54, !23, !23}
!184 = !DILocalVariable(name: "thdid", arg: 1, scope: !181, file: !2, line: 85, type: !54)
!185 = !DILocation(line: 85, column: 26, scope: !181)
!186 = !DILocalVariable(name: "cxt", arg: 2, scope: !181, file: !2, line: 85, type: !23)
!187 = !DILocation(line: 85, column: 38, scope: !181)
!188 = !DILocalVariable(name: "lev", arg: 3, scope: !181, file: !2, line: 85, type: !23)
!189 = !DILocation(line: 85, column: 49, scope: !181)
!190 = !DILocation(line: 87, column: 1, scope: !181)
!191 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !192, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!192 = !DISubroutineType(types: !193)
!193 = !{null, !23}
!194 = !DILocalVariable(name: "lockname", arg: 1, scope: !191, file: !2, line: 89, type: !23)
!195 = !DILocation(line: 89, column: 17, scope: !191)
!196 = !DILocation(line: 91, column: 1, scope: !191)
!197 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !192, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!198 = !DILocalVariable(name: "str", arg: 1, scope: !197, file: !2, line: 93, type: !23)
!199 = !DILocation(line: 93, column: 18, scope: !197)
!200 = !DILocation(line: 94, column: 18, scope: !197)
!201 = !DILocation(line: 94, column: 3, scope: !197)
!202 = !DILocation(line: 95, column: 3, scope: !197)
!203 = !DILocation(line: 96, column: 3, scope: !197)
!204 = !DILocation(line: 97, column: 1, scope: !197)
!205 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !206, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!206 = !DISubroutineType(types: !207)
!207 = !{!22, !208}
!208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !54, size: 64)
!209 = !DILocalVariable(name: "p", arg: 1, scope: !205, file: !2, line: 100, type: !208)
!210 = !DILocation(line: 100, column: 24, scope: !205)
!211 = !DILocation(line: 101, column: 6, scope: !205)
!212 = !DILocation(line: 101, column: 8, scope: !205)
!213 = !DILocation(line: 102, column: 1, scope: !205)
!214 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !206, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!215 = !DILocalVariable(name: "p", arg: 1, scope: !214, file: !2, line: 104, type: !208)
!216 = !DILocation(line: 104, column: 20, scope: !214)
!217 = !DILocation(line: 105, column: 6, scope: !214)
!218 = !DILocation(line: 105, column: 8, scope: !214)
!219 = !DILocation(line: 106, column: 1, scope: !214)
!220 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !206, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!221 = !DILocalVariable(name: "p", arg: 1, scope: !220, file: !2, line: 110, type: !208)
!222 = !DILocation(line: 110, column: 22, scope: !220)
!223 = !DILocation(line: 111, column: 10, scope: !220)
!224 = !DILocation(line: 111, column: 5, scope: !220)
!225 = !DILocation(line: 112, column: 1, scope: !220)
!226 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !206, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!227 = !DILocalVariable(name: "p", arg: 1, scope: !226, file: !2, line: 115, type: !208)
!228 = !DILocation(line: 115, column: 24, scope: !226)
!229 = !DILocation(line: 116, column: 10, scope: !226)
!230 = !DILocation(line: 116, column: 5, scope: !226)
!231 = !DILocation(line: 117, column: 1, scope: !226)
!232 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !233, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!233 = !DISubroutineType(types: !234)
!234 = !{null}
!235 = !DILocation(line: 135, column: 20, scope: !232)
!236 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_char_05_bad", scope: !28, file: !28, line: 30, type: !233, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!237 = !DILocalVariable(name: "data", scope: !236, file: !28, line: 32, type: !23)
!238 = !DILocation(line: 32, column: 12, scope: !236)
!239 = !DILocation(line: 34, column: 10, scope: !236)
!240 = !DILocation(line: 35, column: 8, scope: !241)
!241 = distinct !DILexicalBlock(scope: !236, file: !28, line: 35, column: 8)
!242 = !DILocation(line: 35, column: 8, scope: !236)
!243 = !DILocation(line: 37, column: 24, scope: !244)
!244 = distinct !DILexicalBlock(scope: !241, file: !28, line: 36, column: 5)
!245 = !DILocation(line: 37, column: 14, scope: !244)
!246 = !DILocation(line: 38, column: 13, scope: !247)
!247 = distinct !DILexicalBlock(scope: !244, file: !28, line: 38, column: 13)
!248 = !DILocation(line: 38, column: 18, scope: !247)
!249 = !DILocation(line: 38, column: 13, scope: !244)
!250 = !DILocation(line: 38, column: 28, scope: !251)
!251 = distinct !DILexicalBlock(scope: !247, file: !28, line: 38, column: 27)
!252 = !DILocation(line: 39, column: 16, scope: !244)
!253 = !DILocation(line: 39, column: 9, scope: !244)
!254 = !DILocation(line: 40, column: 9, scope: !244)
!255 = !DILocation(line: 40, column: 21, scope: !244)
!256 = !DILocation(line: 42, column: 14, scope: !244)
!257 = !DILocation(line: 42, column: 9, scope: !244)
!258 = !DILocation(line: 43, column: 5, scope: !244)
!259 = !DILocation(line: 44, column: 8, scope: !260)
!260 = distinct !DILexicalBlock(scope: !236, file: !28, line: 44, column: 8)
!261 = !DILocation(line: 44, column: 8, scope: !236)
!262 = !DILocation(line: 47, column: 17, scope: !263)
!263 = distinct !DILexicalBlock(scope: !260, file: !28, line: 45, column: 5)
!264 = !DILocation(line: 47, column: 9, scope: !263)
!265 = !DILocation(line: 49, column: 5, scope: !263)
!266 = !DILocation(line: 50, column: 1, scope: !236)
!267 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_char_05_good", scope: !28, file: !28, line: 158, type: !233, scopeLine: 159, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!268 = !DILocation(line: 160, column: 5, scope: !267)
!269 = !DILocation(line: 161, column: 5, scope: !267)
!270 = !DILocation(line: 162, column: 5, scope: !267)
!271 = !DILocation(line: 163, column: 5, scope: !267)
!272 = !DILocation(line: 164, column: 1, scope: !267)
!273 = distinct !DISubprogram(name: "main", scope: !28, file: !28, line: 175, type: !274, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !66)
!274 = !DISubroutineType(types: !275)
!275 = !{!54, !54, !276}
!276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!277 = !DILocalVariable(name: "argc", arg: 1, scope: !273, file: !28, line: 175, type: !54)
!278 = !DILocation(line: 175, column: 14, scope: !273)
!279 = !DILocalVariable(name: "argv", arg: 2, scope: !273, file: !28, line: 175, type: !276)
!280 = !DILocation(line: 175, column: 27, scope: !273)
!281 = !DILocation(line: 178, column: 22, scope: !273)
!282 = !DILocation(line: 178, column: 12, scope: !273)
!283 = !DILocation(line: 178, column: 5, scope: !273)
!284 = !DILocation(line: 180, column: 5, scope: !273)
!285 = !DILocation(line: 181, column: 5, scope: !273)
!286 = !DILocation(line: 182, column: 5, scope: !273)
!287 = !DILocation(line: 185, column: 5, scope: !273)
!288 = !DILocation(line: 186, column: 5, scope: !273)
!289 = !DILocation(line: 187, column: 5, scope: !273)
!290 = !DILocation(line: 189, column: 5, scope: !273)
!291 = distinct !DISubprogram(name: "goodB2G1", scope: !28, file: !28, line: 57, type: !233, scopeLine: 58, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !66)
!292 = !DILocalVariable(name: "data", scope: !291, file: !28, line: 59, type: !23)
!293 = !DILocation(line: 59, column: 12, scope: !291)
!294 = !DILocation(line: 61, column: 10, scope: !291)
!295 = !DILocation(line: 62, column: 8, scope: !296)
!296 = distinct !DILexicalBlock(scope: !291, file: !28, line: 62, column: 8)
!297 = !DILocation(line: 62, column: 8, scope: !291)
!298 = !DILocation(line: 64, column: 24, scope: !299)
!299 = distinct !DILexicalBlock(scope: !296, file: !28, line: 63, column: 5)
!300 = !DILocation(line: 64, column: 14, scope: !299)
!301 = !DILocation(line: 65, column: 13, scope: !302)
!302 = distinct !DILexicalBlock(scope: !299, file: !28, line: 65, column: 13)
!303 = !DILocation(line: 65, column: 18, scope: !302)
!304 = !DILocation(line: 65, column: 13, scope: !299)
!305 = !DILocation(line: 65, column: 28, scope: !306)
!306 = distinct !DILexicalBlock(scope: !302, file: !28, line: 65, column: 27)
!307 = !DILocation(line: 66, column: 16, scope: !299)
!308 = !DILocation(line: 66, column: 9, scope: !299)
!309 = !DILocation(line: 67, column: 9, scope: !299)
!310 = !DILocation(line: 67, column: 21, scope: !299)
!311 = !DILocation(line: 69, column: 14, scope: !299)
!312 = !DILocation(line: 69, column: 9, scope: !299)
!313 = !DILocation(line: 70, column: 5, scope: !299)
!314 = !DILocation(line: 71, column: 8, scope: !315)
!315 = distinct !DILexicalBlock(scope: !291, file: !28, line: 71, column: 8)
!316 = !DILocation(line: 71, column: 8, scope: !291)
!317 = !DILocation(line: 74, column: 9, scope: !318)
!318 = distinct !DILexicalBlock(scope: !315, file: !28, line: 72, column: 5)
!319 = !DILocation(line: 75, column: 5, scope: !318)
!320 = !DILocation(line: 83, column: 1, scope: !291)
!321 = distinct !DISubprogram(name: "goodB2G2", scope: !28, file: !28, line: 86, type: !233, scopeLine: 87, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !66)
!322 = !DILocalVariable(name: "data", scope: !321, file: !28, line: 88, type: !23)
!323 = !DILocation(line: 88, column: 12, scope: !321)
!324 = !DILocation(line: 90, column: 10, scope: !321)
!325 = !DILocation(line: 91, column: 8, scope: !326)
!326 = distinct !DILexicalBlock(scope: !321, file: !28, line: 91, column: 8)
!327 = !DILocation(line: 91, column: 8, scope: !321)
!328 = !DILocation(line: 93, column: 24, scope: !329)
!329 = distinct !DILexicalBlock(scope: !326, file: !28, line: 92, column: 5)
!330 = !DILocation(line: 93, column: 14, scope: !329)
!331 = !DILocation(line: 94, column: 13, scope: !332)
!332 = distinct !DILexicalBlock(scope: !329, file: !28, line: 94, column: 13)
!333 = !DILocation(line: 94, column: 18, scope: !332)
!334 = !DILocation(line: 94, column: 13, scope: !329)
!335 = !DILocation(line: 94, column: 28, scope: !336)
!336 = distinct !DILexicalBlock(scope: !332, file: !28, line: 94, column: 27)
!337 = !DILocation(line: 95, column: 16, scope: !329)
!338 = !DILocation(line: 95, column: 9, scope: !329)
!339 = !DILocation(line: 96, column: 9, scope: !329)
!340 = !DILocation(line: 96, column: 21, scope: !329)
!341 = !DILocation(line: 98, column: 14, scope: !329)
!342 = !DILocation(line: 98, column: 9, scope: !329)
!343 = !DILocation(line: 99, column: 5, scope: !329)
!344 = !DILocation(line: 100, column: 8, scope: !345)
!345 = distinct !DILexicalBlock(scope: !321, file: !28, line: 100, column: 8)
!346 = !DILocation(line: 100, column: 8, scope: !321)
!347 = !DILocation(line: 106, column: 5, scope: !348)
!348 = distinct !DILexicalBlock(scope: !345, file: !28, line: 101, column: 5)
!349 = !DILocation(line: 107, column: 1, scope: !321)
!350 = distinct !DISubprogram(name: "goodG2B1", scope: !28, file: !28, line: 110, type: !233, scopeLine: 111, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !66)
!351 = !DILocalVariable(name: "data", scope: !350, file: !28, line: 112, type: !23)
!352 = !DILocation(line: 112, column: 12, scope: !350)
!353 = !DILocation(line: 114, column: 10, scope: !350)
!354 = !DILocation(line: 115, column: 8, scope: !355)
!355 = distinct !DILexicalBlock(scope: !350, file: !28, line: 115, column: 8)
!356 = !DILocation(line: 115, column: 8, scope: !350)
!357 = !DILocation(line: 118, column: 9, scope: !358)
!358 = distinct !DILexicalBlock(scope: !355, file: !28, line: 116, column: 5)
!359 = !DILocation(line: 119, column: 5, scope: !358)
!360 = !DILocation(line: 122, column: 24, scope: !361)
!361 = distinct !DILexicalBlock(scope: !355, file: !28, line: 121, column: 5)
!362 = !DILocation(line: 122, column: 14, scope: !361)
!363 = !DILocation(line: 123, column: 13, scope: !364)
!364 = distinct !DILexicalBlock(scope: !361, file: !28, line: 123, column: 13)
!365 = !DILocation(line: 123, column: 18, scope: !364)
!366 = !DILocation(line: 123, column: 13, scope: !361)
!367 = !DILocation(line: 123, column: 28, scope: !368)
!368 = distinct !DILexicalBlock(scope: !364, file: !28, line: 123, column: 27)
!369 = !DILocation(line: 124, column: 16, scope: !361)
!370 = !DILocation(line: 124, column: 9, scope: !361)
!371 = !DILocation(line: 125, column: 9, scope: !361)
!372 = !DILocation(line: 125, column: 21, scope: !361)
!373 = !DILocation(line: 128, column: 8, scope: !374)
!374 = distinct !DILexicalBlock(scope: !350, file: !28, line: 128, column: 8)
!375 = !DILocation(line: 128, column: 8, scope: !350)
!376 = !DILocation(line: 131, column: 21, scope: !377)
!377 = distinct !DILexicalBlock(scope: !374, file: !28, line: 129, column: 5)
!378 = !DILocation(line: 131, column: 9, scope: !377)
!379 = !DILocation(line: 133, column: 5, scope: !377)
!380 = !DILocation(line: 134, column: 1, scope: !350)
!381 = distinct !DISubprogram(name: "goodG2B2", scope: !28, file: !28, line: 137, type: !233, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !66)
!382 = !DILocalVariable(name: "data", scope: !381, file: !28, line: 139, type: !23)
!383 = !DILocation(line: 139, column: 12, scope: !381)
!384 = !DILocation(line: 141, column: 10, scope: !381)
!385 = !DILocation(line: 142, column: 8, scope: !386)
!386 = distinct !DILexicalBlock(scope: !381, file: !28, line: 142, column: 8)
!387 = !DILocation(line: 142, column: 8, scope: !381)
!388 = !DILocation(line: 144, column: 24, scope: !389)
!389 = distinct !DILexicalBlock(scope: !386, file: !28, line: 143, column: 5)
!390 = !DILocation(line: 144, column: 14, scope: !389)
!391 = !DILocation(line: 145, column: 13, scope: !392)
!392 = distinct !DILexicalBlock(scope: !389, file: !28, line: 145, column: 13)
!393 = !DILocation(line: 145, column: 18, scope: !392)
!394 = !DILocation(line: 145, column: 13, scope: !389)
!395 = !DILocation(line: 145, column: 28, scope: !396)
!396 = distinct !DILexicalBlock(scope: !392, file: !28, line: 145, column: 27)
!397 = !DILocation(line: 146, column: 16, scope: !389)
!398 = !DILocation(line: 146, column: 9, scope: !389)
!399 = !DILocation(line: 147, column: 9, scope: !389)
!400 = !DILocation(line: 147, column: 21, scope: !389)
!401 = !DILocation(line: 149, column: 5, scope: !389)
!402 = !DILocation(line: 150, column: 8, scope: !403)
!403 = distinct !DILexicalBlock(scope: !381, file: !28, line: 150, column: 8)
!404 = !DILocation(line: 150, column: 8, scope: !381)
!405 = !DILocation(line: 153, column: 21, scope: !406)
!406 = distinct !DILexicalBlock(scope: !403, file: !28, line: 151, column: 5)
!407 = !DILocation(line: 153, column: 9, scope: !406)
!408 = !DILocation(line: 155, column: 5, scope: !406)
!409 = !DILocation(line: 156, column: 1, scope: !381)
