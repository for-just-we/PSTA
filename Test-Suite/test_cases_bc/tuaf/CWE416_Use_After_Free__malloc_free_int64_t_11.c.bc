; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tuaf/CWE416_Use_After_Free__malloc_free_int64_t_11.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_int64_t_11.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !33
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !38

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !63 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !67, metadata !DIExpression()), !dbg !68
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !69, metadata !DIExpression()), !dbg !70
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !71
  ret void, !dbg !72
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !73 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !74, metadata !DIExpression()), !dbg !75
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !76, metadata !DIExpression()), !dbg !77
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !78
  ret void, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !80 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !81, metadata !DIExpression()), !dbg !82
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !85
  ret void, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !87 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !88, metadata !DIExpression()), !dbg !89
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !90, metadata !DIExpression()), !dbg !91
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !92
  ret void, !dbg !93
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !94 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !95, metadata !DIExpression()), !dbg !96
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !99
  ret void, !dbg !100
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !101 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !102, metadata !DIExpression()), !dbg !103
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !104, metadata !DIExpression()), !dbg !105
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !106
  ret void, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !108 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !112, metadata !DIExpression()), !dbg !113
  %0 = load i32, ptr %n.addr, align 4, !dbg !114
  %conv = sext i32 %0 to i64, !dbg !114
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !115
  ret ptr %call, !dbg !116
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !117 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !118, metadata !DIExpression()), !dbg !119
  %0 = load i32, ptr %n.addr, align 4, !dbg !120
  %conv = sext i32 %0 to i64, !dbg !120
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !121
  ret ptr %call, !dbg !122
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !123 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !124, metadata !DIExpression()), !dbg !125
  %0 = load i32, ptr %n.addr, align 4, !dbg !126
  %conv = sext i32 %0 to i64, !dbg !126
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !127
  ret ptr %call, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !129 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !130, metadata !DIExpression()), !dbg !131
  %0 = load i32, ptr %n.addr, align 4, !dbg !132
  %conv = sext i32 %0 to i64, !dbg !132
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !133
  ret ptr %call, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !135 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !136, metadata !DIExpression()), !dbg !137
  %0 = load i32, ptr %n.addr, align 4, !dbg !138
  %conv = sext i32 %0 to i64, !dbg !138
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !139
  ret ptr %call, !dbg !140
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !141 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !142, metadata !DIExpression()), !dbg !143
  %0 = load i32, ptr %n.addr, align 4, !dbg !144
  %conv = sext i32 %0 to i64, !dbg !144
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !145
  ret ptr %call, !dbg !146
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !147 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !148, metadata !DIExpression()), !dbg !149
  %0 = load i32, ptr %n.addr, align 4, !dbg !150
  %conv = sext i32 %0 to i64, !dbg !150
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !151
  ret ptr %call, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !153 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !154, metadata !DIExpression()), !dbg !155
  %0 = load i32, ptr %n.addr, align 4, !dbg !156
  %conv = sext i32 %0 to i64, !dbg !156
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !157
  ret ptr %call, !dbg !158
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !159 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !162, metadata !DIExpression()), !dbg !163
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !164, metadata !DIExpression()), !dbg !165
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !166
  ret void, !dbg !167
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !168 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !172, metadata !DIExpression()), !dbg !173
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !174, metadata !DIExpression()), !dbg !175
  ret void, !dbg !176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !177 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !178, metadata !DIExpression()), !dbg !179
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !180, metadata !DIExpression()), !dbg !181
  ret void, !dbg !182
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !183 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !186, metadata !DIExpression()), !dbg !187
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !188, metadata !DIExpression()), !dbg !189
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !190, metadata !DIExpression()), !dbg !191
  ret void, !dbg !192
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !193 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !196, metadata !DIExpression()), !dbg !197
  ret void, !dbg !198
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !199 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !200, metadata !DIExpression()), !dbg !201
  %0 = load ptr, ptr %str.addr, align 8, !dbg !202
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !203
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !204
  %call2 = call i32 @getchar(), !dbg !205
  ret void, !dbg !206
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !207 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !211, metadata !DIExpression()), !dbg !212
  %0 = load ptr, ptr %p.addr, align 8, !dbg !213
  store i32 0, ptr %0, align 4, !dbg !214
  %1 = load ptr, ptr %retval, align 8, !dbg !215
  ret ptr %1, !dbg !215
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !216 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !217, metadata !DIExpression()), !dbg !218
  %0 = load ptr, ptr %p.addr, align 8, !dbg !219
  store i32 0, ptr %0, align 4, !dbg !220
  %1 = load ptr, ptr %retval, align 8, !dbg !221
  ret ptr %1, !dbg !221
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !222 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !223, metadata !DIExpression()), !dbg !224
  %0 = load ptr, ptr %p.addr, align 8, !dbg !225
  call void @free(ptr noundef %0) #7, !dbg !226
  %1 = load ptr, ptr %retval, align 8, !dbg !227
  ret ptr %1, !dbg !227
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !228 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !229, metadata !DIExpression()), !dbg !230
  %0 = load ptr, ptr %p.addr, align 8, !dbg !231
  call void @free(ptr noundef %0) #7, !dbg !232
  %1 = load ptr, ptr %retval, align 8, !dbg !233
  ret ptr %1, !dbg !233
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !234 {
entry:
  ret void, !dbg !237
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_int64_t_11_bad() #0 !dbg !238 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !239, metadata !DIExpression()), !dbg !240
  store ptr null, ptr %data, align 8, !dbg !241
  %call = call i32 (...) @globalReturnsTrue(), !dbg !242
  %tobool = icmp ne i32 %call, 0, !dbg !242
  br i1 %tobool, label %if.then, label %if.end4, !dbg !244

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !245
  store ptr %call1, ptr %data, align 8, !dbg !247
  %0 = load ptr, ptr %data, align 8, !dbg !248
  %cmp = icmp eq ptr %0, null, !dbg !250
  br i1 %cmp, label %if.then2, label %if.end, !dbg !251

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !252
  unreachable, !dbg !252

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !254, metadata !DIExpression()), !dbg !259
  store i64 0, ptr %i, align 8, !dbg !260
  br label %for.cond, !dbg !262

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !263
  %cmp3 = icmp ult i64 %1, 100, !dbg !265
  br i1 %cmp3, label %for.body, label %for.end, !dbg !266

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !267
  %3 = load i64, ptr %i, align 8, !dbg !269
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !267
  store i64 5, ptr %arrayidx, align 8, !dbg !270
  br label %for.inc, !dbg !271

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !272
  %inc = add i64 %4, 1, !dbg !272
  store i64 %inc, ptr %i, align 8, !dbg !272
  br label %for.cond, !dbg !273, !llvm.loop !274

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !277
  call void @free(ptr noundef %5) #7, !dbg !278
  br label %if.end4, !dbg !279

if.end4:                                          ; preds = %for.end, %entry
  %call5 = call i32 (...) @globalReturnsTrue(), !dbg !280
  %tobool6 = icmp ne i32 %call5, 0, !dbg !280
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !282

if.then7:                                         ; preds = %if.end4
  %6 = load ptr, ptr %data, align 8, !dbg !283
  %arrayidx8 = getelementptr inbounds i64, ptr %6, i64 0, !dbg !283
  %7 = load i64, ptr %arrayidx8, align 8, !dbg !283
  %8 = inttoptr i64 %7 to ptr, !dbg !283
  %call9 = call ptr @UAFFUNC(ptr noundef %8), !dbg !285
  br label %if.end10, !dbg !286

if.end10:                                         ; preds = %if.then7, %if.end4
  ret void, !dbg !287
}

declare i32 @globalReturnsTrue(...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_int64_t_11_good() #0 !dbg !288 {
entry:
  call void @goodB2G1(), !dbg !289
  call void @goodB2G2(), !dbg !290
  call void @goodG2B1(), !dbg !291
  call void @goodG2B2(), !dbg !292
  ret void, !dbg !293
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !294 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !298, metadata !DIExpression()), !dbg !299
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !300, metadata !DIExpression()), !dbg !301
  %call = call i64 @time(ptr noundef null) #7, !dbg !302
  %conv = trunc i64 %call to i32, !dbg !303
  call void @srand(i32 noundef %conv) #7, !dbg !304
  call void @printLine(ptr noundef @.str.3), !dbg !305
  call void @CWE416_Use_After_Free__malloc_free_int64_t_11_good(), !dbg !306
  call void @printLine(ptr noundef @.str.4), !dbg !307
  call void @printLine(ptr noundef @.str.5), !dbg !308
  call void @CWE416_Use_After_Free__malloc_free_int64_t_11_bad(), !dbg !309
  call void @printLine(ptr noundef @.str.6), !dbg !310
  ret i32 0, !dbg !311
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !312 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !313, metadata !DIExpression()), !dbg !314
  store ptr null, ptr %data, align 8, !dbg !315
  %call = call i32 (...) @globalReturnsTrue(), !dbg !316
  %tobool = icmp ne i32 %call, 0, !dbg !316
  br i1 %tobool, label %if.then, label %if.end4, !dbg !318

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !319
  store ptr %call1, ptr %data, align 8, !dbg !321
  %0 = load ptr, ptr %data, align 8, !dbg !322
  %cmp = icmp eq ptr %0, null, !dbg !324
  br i1 %cmp, label %if.then2, label %if.end, !dbg !325

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !326
  unreachable, !dbg !326

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !328, metadata !DIExpression()), !dbg !330
  store i64 0, ptr %i, align 8, !dbg !331
  br label %for.cond, !dbg !333

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !334
  %cmp3 = icmp ult i64 %1, 100, !dbg !336
  br i1 %cmp3, label %for.body, label %for.end, !dbg !337

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !338
  %3 = load i64, ptr %i, align 8, !dbg !340
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !338
  store i64 5, ptr %arrayidx, align 8, !dbg !341
  br label %for.inc, !dbg !342

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !343
  %inc = add i64 %4, 1, !dbg !343
  store i64 %inc, ptr %i, align 8, !dbg !343
  br label %for.cond, !dbg !344, !llvm.loop !345

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !347
  call void @free(ptr noundef %5) #7, !dbg !348
  br label %if.end4, !dbg !349

if.end4:                                          ; preds = %for.end, %entry
  %call5 = call i32 (...) @globalReturnsFalse(), !dbg !350
  %tobool6 = icmp ne i32 %call5, 0, !dbg !350
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !352

if.then7:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.7), !dbg !353
  br label %if.end8, !dbg !355

if.else:                                          ; preds = %if.end4
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then7
  ret void, !dbg !356
}

declare i32 @globalReturnsFalse(...) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !357 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !358, metadata !DIExpression()), !dbg !359
  store ptr null, ptr %data, align 8, !dbg !360
  %call = call i32 (...) @globalReturnsTrue(), !dbg !361
  %tobool = icmp ne i32 %call, 0, !dbg !361
  br i1 %tobool, label %if.then, label %if.end4, !dbg !363

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !364
  store ptr %call1, ptr %data, align 8, !dbg !366
  %0 = load ptr, ptr %data, align 8, !dbg !367
  %cmp = icmp eq ptr %0, null, !dbg !369
  br i1 %cmp, label %if.then2, label %if.end, !dbg !370

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !371
  unreachable, !dbg !371

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !373, metadata !DIExpression()), !dbg !375
  store i64 0, ptr %i, align 8, !dbg !376
  br label %for.cond, !dbg !378

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !379
  %cmp3 = icmp ult i64 %1, 100, !dbg !381
  br i1 %cmp3, label %for.body, label %for.end, !dbg !382

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !383
  %3 = load i64, ptr %i, align 8, !dbg !385
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !383
  store i64 5, ptr %arrayidx, align 8, !dbg !386
  br label %for.inc, !dbg !387

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !388
  %inc = add i64 %4, 1, !dbg !388
  store i64 %inc, ptr %i, align 8, !dbg !388
  br label %for.cond, !dbg !389, !llvm.loop !390

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !392
  call void @free(ptr noundef %5) #7, !dbg !393
  br label %if.end4, !dbg !394

if.end4:                                          ; preds = %for.end, %entry
  %call5 = call i32 (...) @globalReturnsTrue(), !dbg !395
  %tobool6 = icmp ne i32 %call5, 0, !dbg !395
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !397

if.then7:                                         ; preds = %if.end4
  br label %if.end8, !dbg !398

if.end8:                                          ; preds = %if.then7, %if.end4
  ret void, !dbg !400
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !401 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !402, metadata !DIExpression()), !dbg !403
  store ptr null, ptr %data, align 8, !dbg !404
  %call = call i32 (...) @globalReturnsFalse(), !dbg !405
  %tobool = icmp ne i32 %call, 0, !dbg !405
  br i1 %tobool, label %if.then, label %if.else, !dbg !407

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !408
  br label %if.end4, !dbg !410

if.else:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !411
  store ptr %call1, ptr %data, align 8, !dbg !413
  %0 = load ptr, ptr %data, align 8, !dbg !414
  %cmp = icmp eq ptr %0, null, !dbg !416
  br i1 %cmp, label %if.then2, label %if.end, !dbg !417

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !418
  unreachable, !dbg !418

if.end:                                           ; preds = %if.else
  call void @llvm.dbg.declare(metadata ptr %i, metadata !420, metadata !DIExpression()), !dbg !422
  store i64 0, ptr %i, align 8, !dbg !423
  br label %for.cond, !dbg !425

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !426
  %cmp3 = icmp ult i64 %1, 100, !dbg !428
  br i1 %cmp3, label %for.body, label %for.end, !dbg !429

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !430
  %3 = load i64, ptr %i, align 8, !dbg !432
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !430
  store i64 5, ptr %arrayidx, align 8, !dbg !433
  br label %for.inc, !dbg !434

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !435
  %inc = add i64 %4, 1, !dbg !435
  store i64 %inc, ptr %i, align 8, !dbg !435
  br label %for.cond, !dbg !436, !llvm.loop !437

for.end:                                          ; preds = %for.cond
  br label %if.end4

if.end4:                                          ; preds = %for.end, %if.then
  %call5 = call i32 (...) @globalReturnsTrue(), !dbg !439
  %tobool6 = icmp ne i32 %call5, 0, !dbg !439
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !441

if.then7:                                         ; preds = %if.end4
  %5 = load ptr, ptr %data, align 8, !dbg !442
  %arrayidx8 = getelementptr inbounds i64, ptr %5, i64 0, !dbg !442
  %6 = load i64, ptr %arrayidx8, align 8, !dbg !442
  %7 = inttoptr i64 %6 to ptr, !dbg !442
  %call9 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !444
  br label %if.end10, !dbg !445

if.end10:                                         ; preds = %if.then7, %if.end4
  ret void, !dbg !446
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !447 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !448, metadata !DIExpression()), !dbg !449
  store ptr null, ptr %data, align 8, !dbg !450
  %call = call i32 (...) @globalReturnsTrue(), !dbg !451
  %tobool = icmp ne i32 %call, 0, !dbg !451
  br i1 %tobool, label %if.then, label %if.end4, !dbg !453

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !454
  store ptr %call1, ptr %data, align 8, !dbg !456
  %0 = load ptr, ptr %data, align 8, !dbg !457
  %cmp = icmp eq ptr %0, null, !dbg !459
  br i1 %cmp, label %if.then2, label %if.end, !dbg !460

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !461
  unreachable, !dbg !461

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !463, metadata !DIExpression()), !dbg !465
  store i64 0, ptr %i, align 8, !dbg !466
  br label %for.cond, !dbg !468

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !469
  %cmp3 = icmp ult i64 %1, 100, !dbg !471
  br i1 %cmp3, label %for.body, label %for.end, !dbg !472

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !473
  %3 = load i64, ptr %i, align 8, !dbg !475
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !473
  store i64 5, ptr %arrayidx, align 8, !dbg !476
  br label %for.inc, !dbg !477

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !478
  %inc = add i64 %4, 1, !dbg !478
  store i64 %inc, ptr %i, align 8, !dbg !478
  br label %for.cond, !dbg !479, !llvm.loop !480

for.end:                                          ; preds = %for.cond
  br label %if.end4, !dbg !482

if.end4:                                          ; preds = %for.end, %entry
  %call5 = call i32 (...) @globalReturnsTrue(), !dbg !483
  %tobool6 = icmp ne i32 %call5, 0, !dbg !483
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !485

if.then7:                                         ; preds = %if.end4
  %5 = load ptr, ptr %data, align 8, !dbg !486
  %arrayidx8 = getelementptr inbounds i64, ptr %5, i64 0, !dbg !486
  %6 = load i64, ptr %arrayidx8, align 8, !dbg !486
  %7 = inttoptr i64 %6 to ptr, !dbg !486
  %call9 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !488
  br label %if.end10, !dbg !489

if.end10:                                         ; preds = %if.then7, %if.end4
  ret void, !dbg !490
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!43}
!llvm.module.flags = !{!55, !56, !57, !58, !59, !60, !61}
!llvm.ident = !{!62}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 199, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tuaf/CWE416_Use_After_Free__malloc_free_int64_t_11.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "76f1a8f362157084aa111a0d83a6ebe4")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 18)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 201, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 16)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 204, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 17)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 206, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 15)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(scope: null, file: !19, line: 78, type: !40, isLocal: true, isDefinition: true)
!40 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !41)
!41 = !{!42}
!42 = !DISubrange(count: 21)
!43 = distinct !DICompileUnit(language: DW_LANG_C11, file: !44, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !45, globals: !54, splitDebugInlining: false, nameTableKind: None)
!44 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_int64_t_11.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "76f1a8f362157084aa111a0d83a6ebe4")
!45 = !{!46, !47, !53}
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !49, line: 27, baseType: !50)
!49 = !DIFile(filename: "/usr/include/bits/stdint-intn.h", directory: "", checksumkind: CSK_MD5, checksum: "457547631e07cd24d9a14c8410e28e57")
!50 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !51, line: 43, baseType: !52)
!51 = !DIFile(filename: "/usr/include/bits/types.h", directory: "", checksumkind: CSK_MD5, checksum: "eac2c46b20ddc2be81186b6ffebfd845")
!52 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!53 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!54 = !{!0, !7, !12, !17, !23, !28, !33, !38}
!55 = !{i32 7, !"Dwarf Version", i32 5}
!56 = !{i32 2, !"Debug Info Version", i32 3}
!57 = !{i32 1, !"wchar_size", i32 4}
!58 = !{i32 8, !"PIC Level", i32 2}
!59 = !{i32 7, !"PIE Level", i32 2}
!60 = !{i32 7, !"uwtable", i32 2}
!61 = !{i32 7, !"frame-pointer", i32 2}
!62 = !{!"clang version 16.0.0"}
!63 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !64, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!64 = !DISubroutineType(types: !65)
!65 = !{null, !46, !46}
!66 = !{}
!67 = !DILocalVariable(name: "p", arg: 1, scope: !63, file: !2, line: 4, type: !46)
!68 = !DILocation(line: 4, column: 22, scope: !63)
!69 = !DILocalVariable(name: "q", arg: 2, scope: !63, file: !2, line: 4, type: !46)
!70 = !DILocation(line: 4, column: 31, scope: !63)
!71 = !DILocation(line: 5, column: 3, scope: !63)
!72 = !DILocation(line: 6, column: 1, scope: !63)
!73 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !64, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!74 = !DILocalVariable(name: "p", arg: 1, scope: !73, file: !2, line: 8, type: !46)
!75 = !DILocation(line: 8, column: 25, scope: !73)
!76 = !DILocalVariable(name: "q", arg: 2, scope: !73, file: !2, line: 8, type: !46)
!77 = !DILocation(line: 8, column: 34, scope: !73)
!78 = !DILocation(line: 9, column: 3, scope: !73)
!79 = !DILocation(line: 10, column: 1, scope: !73)
!80 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !64, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!81 = !DILocalVariable(name: "p", arg: 1, scope: !80, file: !2, line: 12, type: !46)
!82 = !DILocation(line: 12, column: 21, scope: !80)
!83 = !DILocalVariable(name: "q", arg: 2, scope: !80, file: !2, line: 12, type: !46)
!84 = !DILocation(line: 12, column: 30, scope: !80)
!85 = !DILocation(line: 13, column: 3, scope: !80)
!86 = !DILocation(line: 14, column: 1, scope: !80)
!87 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !64, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!88 = !DILocalVariable(name: "p", arg: 1, scope: !87, file: !2, line: 16, type: !46)
!89 = !DILocation(line: 16, column: 20, scope: !87)
!90 = !DILocalVariable(name: "q", arg: 2, scope: !87, file: !2, line: 16, type: !46)
!91 = !DILocation(line: 16, column: 29, scope: !87)
!92 = !DILocation(line: 17, column: 3, scope: !87)
!93 = !DILocation(line: 18, column: 1, scope: !87)
!94 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !64, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!95 = !DILocalVariable(name: "p", arg: 1, scope: !94, file: !2, line: 20, type: !46)
!96 = !DILocation(line: 20, column: 34, scope: !94)
!97 = !DILocalVariable(name: "q", arg: 2, scope: !94, file: !2, line: 20, type: !46)
!98 = !DILocation(line: 20, column: 43, scope: !94)
!99 = !DILocation(line: 21, column: 3, scope: !94)
!100 = !DILocation(line: 22, column: 1, scope: !94)
!101 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !64, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!102 = !DILocalVariable(name: "p", arg: 1, scope: !101, file: !2, line: 24, type: !46)
!103 = !DILocation(line: 24, column: 33, scope: !101)
!104 = !DILocalVariable(name: "q", arg: 2, scope: !101, file: !2, line: 24, type: !46)
!105 = !DILocation(line: 24, column: 42, scope: !101)
!106 = !DILocation(line: 25, column: 3, scope: !101)
!107 = !DILocation(line: 26, column: 1, scope: !101)
!108 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !109, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!109 = !DISubroutineType(types: !110)
!110 = !{!46, !111}
!111 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!112 = !DILocalVariable(name: "n", arg: 1, scope: !108, file: !2, line: 29, type: !111)
!113 = !DILocation(line: 29, column: 22, scope: !108)
!114 = !DILocation(line: 30, column: 17, scope: !108)
!115 = !DILocation(line: 30, column: 10, scope: !108)
!116 = !DILocation(line: 30, column: 3, scope: !108)
!117 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !109, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!118 = !DILocalVariable(name: "n", arg: 1, scope: !117, file: !2, line: 33, type: !111)
!119 = !DILocation(line: 33, column: 28, scope: !117)
!120 = !DILocation(line: 34, column: 19, scope: !117)
!121 = !DILocation(line: 34, column: 12, scope: !117)
!122 = !DILocation(line: 34, column: 5, scope: !117)
!123 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !109, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!124 = !DILocalVariable(name: "n", arg: 1, scope: !123, file: !2, line: 37, type: !111)
!125 = !DILocation(line: 37, column: 21, scope: !123)
!126 = !DILocation(line: 38, column: 17, scope: !123)
!127 = !DILocation(line: 38, column: 10, scope: !123)
!128 = !DILocation(line: 38, column: 3, scope: !123)
!129 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !109, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!130 = !DILocalVariable(name: "n", arg: 1, scope: !129, file: !2, line: 41, type: !111)
!131 = !DILocation(line: 41, column: 21, scope: !129)
!132 = !DILocation(line: 42, column: 17, scope: !129)
!133 = !DILocation(line: 42, column: 10, scope: !129)
!134 = !DILocation(line: 42, column: 3, scope: !129)
!135 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !109, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!136 = !DILocalVariable(name: "n", arg: 1, scope: !135, file: !2, line: 45, type: !111)
!137 = !DILocation(line: 45, column: 21, scope: !135)
!138 = !DILocation(line: 46, column: 17, scope: !135)
!139 = !DILocation(line: 46, column: 10, scope: !135)
!140 = !DILocation(line: 46, column: 3, scope: !135)
!141 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !109, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!142 = !DILocalVariable(name: "n", arg: 1, scope: !141, file: !2, line: 49, type: !111)
!143 = !DILocation(line: 49, column: 21, scope: !141)
!144 = !DILocation(line: 50, column: 17, scope: !141)
!145 = !DILocation(line: 50, column: 10, scope: !141)
!146 = !DILocation(line: 50, column: 3, scope: !141)
!147 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !109, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!148 = !DILocalVariable(name: "n", arg: 1, scope: !147, file: !2, line: 53, type: !111)
!149 = !DILocation(line: 53, column: 21, scope: !147)
!150 = !DILocation(line: 54, column: 17, scope: !147)
!151 = !DILocation(line: 54, column: 10, scope: !147)
!152 = !DILocation(line: 54, column: 3, scope: !147)
!153 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !109, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!154 = !DILocalVariable(name: "n", arg: 1, scope: !153, file: !2, line: 57, type: !111)
!155 = !DILocation(line: 57, column: 18, scope: !153)
!156 = !DILocation(line: 58, column: 17, scope: !153)
!157 = !DILocation(line: 58, column: 10, scope: !153)
!158 = !DILocation(line: 58, column: 3, scope: !153)
!159 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !160, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!160 = !DISubroutineType(types: !161)
!161 = !{null, !111, !111}
!162 = !DILocalVariable(name: "id", arg: 1, scope: !159, file: !2, line: 67, type: !111)
!163 = !DILocation(line: 67, column: 20, scope: !159)
!164 = !DILocalVariable(name: "flags", arg: 2, scope: !159, file: !2, line: 67, type: !111)
!165 = !DILocation(line: 67, column: 28, scope: !159)
!166 = !DILocation(line: 68, column: 3, scope: !159)
!167 = !DILocation(line: 69, column: 1, scope: !159)
!168 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !169, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!169 = !DISubroutineType(types: !170)
!170 = !{null, !111, !171}
!171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!172 = !DILocalVariable(name: "thdid", arg: 1, scope: !168, file: !2, line: 79, type: !111)
!173 = !DILocation(line: 79, column: 21, scope: !168)
!174 = !DILocalVariable(name: "cxt", arg: 2, scope: !168, file: !2, line: 79, type: !171)
!175 = !DILocation(line: 79, column: 34, scope: !168)
!176 = !DILocation(line: 81, column: 1, scope: !168)
!177 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !169, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!178 = !DILocalVariable(name: "thdid", arg: 1, scope: !177, file: !2, line: 82, type: !111)
!179 = !DILocation(line: 82, column: 21, scope: !177)
!180 = !DILocalVariable(name: "cxt", arg: 2, scope: !177, file: !2, line: 82, type: !171)
!181 = !DILocation(line: 82, column: 33, scope: !177)
!182 = !DILocation(line: 84, column: 1, scope: !177)
!183 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !184, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!184 = !DISubroutineType(types: !185)
!185 = !{null, !111, !171, !171}
!186 = !DILocalVariable(name: "thdid", arg: 1, scope: !183, file: !2, line: 85, type: !111)
!187 = !DILocation(line: 85, column: 26, scope: !183)
!188 = !DILocalVariable(name: "cxt", arg: 2, scope: !183, file: !2, line: 85, type: !171)
!189 = !DILocation(line: 85, column: 38, scope: !183)
!190 = !DILocalVariable(name: "lev", arg: 3, scope: !183, file: !2, line: 85, type: !171)
!191 = !DILocation(line: 85, column: 49, scope: !183)
!192 = !DILocation(line: 87, column: 1, scope: !183)
!193 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !194, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!194 = !DISubroutineType(types: !195)
!195 = !{null, !171}
!196 = !DILocalVariable(name: "lockname", arg: 1, scope: !193, file: !2, line: 89, type: !171)
!197 = !DILocation(line: 89, column: 17, scope: !193)
!198 = !DILocation(line: 91, column: 1, scope: !193)
!199 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !194, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!200 = !DILocalVariable(name: "str", arg: 1, scope: !199, file: !2, line: 93, type: !171)
!201 = !DILocation(line: 93, column: 18, scope: !199)
!202 = !DILocation(line: 94, column: 18, scope: !199)
!203 = !DILocation(line: 94, column: 3, scope: !199)
!204 = !DILocation(line: 95, column: 3, scope: !199)
!205 = !DILocation(line: 96, column: 3, scope: !199)
!206 = !DILocation(line: 97, column: 1, scope: !199)
!207 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !208, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!208 = !DISubroutineType(types: !209)
!209 = !{!46, !210}
!210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!211 = !DILocalVariable(name: "p", arg: 1, scope: !207, file: !2, line: 100, type: !210)
!212 = !DILocation(line: 100, column: 24, scope: !207)
!213 = !DILocation(line: 101, column: 6, scope: !207)
!214 = !DILocation(line: 101, column: 8, scope: !207)
!215 = !DILocation(line: 102, column: 1, scope: !207)
!216 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !208, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!217 = !DILocalVariable(name: "p", arg: 1, scope: !216, file: !2, line: 104, type: !210)
!218 = !DILocation(line: 104, column: 20, scope: !216)
!219 = !DILocation(line: 105, column: 6, scope: !216)
!220 = !DILocation(line: 105, column: 8, scope: !216)
!221 = !DILocation(line: 106, column: 1, scope: !216)
!222 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !208, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!223 = !DILocalVariable(name: "p", arg: 1, scope: !222, file: !2, line: 110, type: !210)
!224 = !DILocation(line: 110, column: 22, scope: !222)
!225 = !DILocation(line: 111, column: 10, scope: !222)
!226 = !DILocation(line: 111, column: 5, scope: !222)
!227 = !DILocation(line: 112, column: 1, scope: !222)
!228 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !208, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!229 = !DILocalVariable(name: "p", arg: 1, scope: !228, file: !2, line: 115, type: !210)
!230 = !DILocation(line: 115, column: 24, scope: !228)
!231 = !DILocation(line: 116, column: 10, scope: !228)
!232 = !DILocation(line: 116, column: 5, scope: !228)
!233 = !DILocation(line: 117, column: 1, scope: !228)
!234 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !235, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!235 = !DISubroutineType(types: !236)
!236 = !{null}
!237 = !DILocation(line: 135, column: 20, scope: !234)
!238 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_int64_t_11_bad", scope: !19, file: !19, line: 24, type: !235, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!239 = !DILocalVariable(name: "data", scope: !238, file: !19, line: 26, type: !47)
!240 = !DILocation(line: 26, column: 15, scope: !238)
!241 = !DILocation(line: 28, column: 10, scope: !238)
!242 = !DILocation(line: 29, column: 8, scope: !243)
!243 = distinct !DILexicalBlock(scope: !238, file: !19, line: 29, column: 8)
!244 = !DILocation(line: 29, column: 8, scope: !238)
!245 = !DILocation(line: 31, column: 27, scope: !246)
!246 = distinct !DILexicalBlock(scope: !243, file: !19, line: 30, column: 5)
!247 = !DILocation(line: 31, column: 14, scope: !246)
!248 = !DILocation(line: 32, column: 13, scope: !249)
!249 = distinct !DILexicalBlock(scope: !246, file: !19, line: 32, column: 13)
!250 = !DILocation(line: 32, column: 18, scope: !249)
!251 = !DILocation(line: 32, column: 13, scope: !246)
!252 = !DILocation(line: 32, column: 28, scope: !253)
!253 = distinct !DILexicalBlock(scope: !249, file: !19, line: 32, column: 27)
!254 = !DILocalVariable(name: "i", scope: !255, file: !19, line: 34, type: !256)
!255 = distinct !DILexicalBlock(scope: !246, file: !19, line: 33, column: 9)
!256 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !257, line: 46, baseType: !258)
!257 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!258 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!259 = !DILocation(line: 34, column: 20, scope: !255)
!260 = !DILocation(line: 35, column: 19, scope: !261)
!261 = distinct !DILexicalBlock(scope: !255, file: !19, line: 35, column: 13)
!262 = !DILocation(line: 35, column: 17, scope: !261)
!263 = !DILocation(line: 35, column: 24, scope: !264)
!264 = distinct !DILexicalBlock(scope: !261, file: !19, line: 35, column: 13)
!265 = !DILocation(line: 35, column: 26, scope: !264)
!266 = !DILocation(line: 35, column: 13, scope: !261)
!267 = !DILocation(line: 37, column: 17, scope: !268)
!268 = distinct !DILexicalBlock(scope: !264, file: !19, line: 36, column: 13)
!269 = !DILocation(line: 37, column: 22, scope: !268)
!270 = !DILocation(line: 37, column: 25, scope: !268)
!271 = !DILocation(line: 38, column: 13, scope: !268)
!272 = !DILocation(line: 35, column: 34, scope: !264)
!273 = !DILocation(line: 35, column: 13, scope: !264)
!274 = distinct !{!274, !266, !275, !276}
!275 = !DILocation(line: 38, column: 13, scope: !261)
!276 = !{!"llvm.loop.mustprogress"}
!277 = !DILocation(line: 41, column: 14, scope: !246)
!278 = !DILocation(line: 41, column: 9, scope: !246)
!279 = !DILocation(line: 42, column: 5, scope: !246)
!280 = !DILocation(line: 43, column: 8, scope: !281)
!281 = distinct !DILexicalBlock(scope: !238, file: !19, line: 43, column: 8)
!282 = !DILocation(line: 43, column: 8, scope: !238)
!283 = !DILocation(line: 46, column: 17, scope: !284)
!284 = distinct !DILexicalBlock(scope: !281, file: !19, line: 44, column: 5)
!285 = !DILocation(line: 46, column: 9, scope: !284)
!286 = !DILocation(line: 48, column: 5, scope: !284)
!287 = !DILocation(line: 49, column: 1, scope: !238)
!288 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_int64_t_11_good", scope: !19, file: !19, line: 177, type: !235, scopeLine: 178, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!289 = !DILocation(line: 179, column: 5, scope: !288)
!290 = !DILocation(line: 180, column: 5, scope: !288)
!291 = !DILocation(line: 181, column: 5, scope: !288)
!292 = !DILocation(line: 182, column: 5, scope: !288)
!293 = !DILocation(line: 183, column: 1, scope: !288)
!294 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 194, type: !295, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !66)
!295 = !DISubroutineType(types: !296)
!296 = !{!111, !111, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !171, size: 64)
!298 = !DILocalVariable(name: "argc", arg: 1, scope: !294, file: !19, line: 194, type: !111)
!299 = !DILocation(line: 194, column: 14, scope: !294)
!300 = !DILocalVariable(name: "argv", arg: 2, scope: !294, file: !19, line: 194, type: !297)
!301 = !DILocation(line: 194, column: 27, scope: !294)
!302 = !DILocation(line: 197, column: 22, scope: !294)
!303 = !DILocation(line: 197, column: 12, scope: !294)
!304 = !DILocation(line: 197, column: 5, scope: !294)
!305 = !DILocation(line: 199, column: 5, scope: !294)
!306 = !DILocation(line: 200, column: 5, scope: !294)
!307 = !DILocation(line: 201, column: 5, scope: !294)
!308 = !DILocation(line: 204, column: 5, scope: !294)
!309 = !DILocation(line: 205, column: 5, scope: !294)
!310 = !DILocation(line: 206, column: 5, scope: !294)
!311 = !DILocation(line: 208, column: 5, scope: !294)
!312 = distinct !DISubprogram(name: "goodB2G1", scope: !19, file: !19, line: 56, type: !235, scopeLine: 57, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !66)
!313 = !DILocalVariable(name: "data", scope: !312, file: !19, line: 58, type: !47)
!314 = !DILocation(line: 58, column: 15, scope: !312)
!315 = !DILocation(line: 60, column: 10, scope: !312)
!316 = !DILocation(line: 61, column: 8, scope: !317)
!317 = distinct !DILexicalBlock(scope: !312, file: !19, line: 61, column: 8)
!318 = !DILocation(line: 61, column: 8, scope: !312)
!319 = !DILocation(line: 63, column: 27, scope: !320)
!320 = distinct !DILexicalBlock(scope: !317, file: !19, line: 62, column: 5)
!321 = !DILocation(line: 63, column: 14, scope: !320)
!322 = !DILocation(line: 64, column: 13, scope: !323)
!323 = distinct !DILexicalBlock(scope: !320, file: !19, line: 64, column: 13)
!324 = !DILocation(line: 64, column: 18, scope: !323)
!325 = !DILocation(line: 64, column: 13, scope: !320)
!326 = !DILocation(line: 64, column: 28, scope: !327)
!327 = distinct !DILexicalBlock(scope: !323, file: !19, line: 64, column: 27)
!328 = !DILocalVariable(name: "i", scope: !329, file: !19, line: 66, type: !256)
!329 = distinct !DILexicalBlock(scope: !320, file: !19, line: 65, column: 9)
!330 = !DILocation(line: 66, column: 20, scope: !329)
!331 = !DILocation(line: 67, column: 19, scope: !332)
!332 = distinct !DILexicalBlock(scope: !329, file: !19, line: 67, column: 13)
!333 = !DILocation(line: 67, column: 17, scope: !332)
!334 = !DILocation(line: 67, column: 24, scope: !335)
!335 = distinct !DILexicalBlock(scope: !332, file: !19, line: 67, column: 13)
!336 = !DILocation(line: 67, column: 26, scope: !335)
!337 = !DILocation(line: 67, column: 13, scope: !332)
!338 = !DILocation(line: 69, column: 17, scope: !339)
!339 = distinct !DILexicalBlock(scope: !335, file: !19, line: 68, column: 13)
!340 = !DILocation(line: 69, column: 22, scope: !339)
!341 = !DILocation(line: 69, column: 25, scope: !339)
!342 = !DILocation(line: 70, column: 13, scope: !339)
!343 = !DILocation(line: 67, column: 34, scope: !335)
!344 = !DILocation(line: 67, column: 13, scope: !335)
!345 = distinct !{!345, !337, !346, !276}
!346 = !DILocation(line: 70, column: 13, scope: !332)
!347 = !DILocation(line: 73, column: 14, scope: !320)
!348 = !DILocation(line: 73, column: 9, scope: !320)
!349 = !DILocation(line: 74, column: 5, scope: !320)
!350 = !DILocation(line: 75, column: 8, scope: !351)
!351 = distinct !DILexicalBlock(scope: !312, file: !19, line: 75, column: 8)
!352 = !DILocation(line: 75, column: 8, scope: !312)
!353 = !DILocation(line: 78, column: 9, scope: !354)
!354 = distinct !DILexicalBlock(scope: !351, file: !19, line: 76, column: 5)
!355 = !DILocation(line: 79, column: 5, scope: !354)
!356 = !DILocation(line: 87, column: 1, scope: !312)
!357 = distinct !DISubprogram(name: "goodB2G2", scope: !19, file: !19, line: 90, type: !235, scopeLine: 91, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !66)
!358 = !DILocalVariable(name: "data", scope: !357, file: !19, line: 92, type: !47)
!359 = !DILocation(line: 92, column: 15, scope: !357)
!360 = !DILocation(line: 94, column: 10, scope: !357)
!361 = !DILocation(line: 95, column: 8, scope: !362)
!362 = distinct !DILexicalBlock(scope: !357, file: !19, line: 95, column: 8)
!363 = !DILocation(line: 95, column: 8, scope: !357)
!364 = !DILocation(line: 97, column: 27, scope: !365)
!365 = distinct !DILexicalBlock(scope: !362, file: !19, line: 96, column: 5)
!366 = !DILocation(line: 97, column: 14, scope: !365)
!367 = !DILocation(line: 98, column: 13, scope: !368)
!368 = distinct !DILexicalBlock(scope: !365, file: !19, line: 98, column: 13)
!369 = !DILocation(line: 98, column: 18, scope: !368)
!370 = !DILocation(line: 98, column: 13, scope: !365)
!371 = !DILocation(line: 98, column: 28, scope: !372)
!372 = distinct !DILexicalBlock(scope: !368, file: !19, line: 98, column: 27)
!373 = !DILocalVariable(name: "i", scope: !374, file: !19, line: 100, type: !256)
!374 = distinct !DILexicalBlock(scope: !365, file: !19, line: 99, column: 9)
!375 = !DILocation(line: 100, column: 20, scope: !374)
!376 = !DILocation(line: 101, column: 19, scope: !377)
!377 = distinct !DILexicalBlock(scope: !374, file: !19, line: 101, column: 13)
!378 = !DILocation(line: 101, column: 17, scope: !377)
!379 = !DILocation(line: 101, column: 24, scope: !380)
!380 = distinct !DILexicalBlock(scope: !377, file: !19, line: 101, column: 13)
!381 = !DILocation(line: 101, column: 26, scope: !380)
!382 = !DILocation(line: 101, column: 13, scope: !377)
!383 = !DILocation(line: 103, column: 17, scope: !384)
!384 = distinct !DILexicalBlock(scope: !380, file: !19, line: 102, column: 13)
!385 = !DILocation(line: 103, column: 22, scope: !384)
!386 = !DILocation(line: 103, column: 25, scope: !384)
!387 = !DILocation(line: 104, column: 13, scope: !384)
!388 = !DILocation(line: 101, column: 34, scope: !380)
!389 = !DILocation(line: 101, column: 13, scope: !380)
!390 = distinct !{!390, !382, !391, !276}
!391 = !DILocation(line: 104, column: 13, scope: !377)
!392 = !DILocation(line: 107, column: 14, scope: !365)
!393 = !DILocation(line: 107, column: 9, scope: !365)
!394 = !DILocation(line: 108, column: 5, scope: !365)
!395 = !DILocation(line: 109, column: 8, scope: !396)
!396 = distinct !DILexicalBlock(scope: !357, file: !19, line: 109, column: 8)
!397 = !DILocation(line: 109, column: 8, scope: !357)
!398 = !DILocation(line: 115, column: 5, scope: !399)
!399 = distinct !DILexicalBlock(scope: !396, file: !19, line: 110, column: 5)
!400 = !DILocation(line: 116, column: 1, scope: !357)
!401 = distinct !DISubprogram(name: "goodG2B1", scope: !19, file: !19, line: 119, type: !235, scopeLine: 120, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !66)
!402 = !DILocalVariable(name: "data", scope: !401, file: !19, line: 121, type: !47)
!403 = !DILocation(line: 121, column: 15, scope: !401)
!404 = !DILocation(line: 123, column: 10, scope: !401)
!405 = !DILocation(line: 124, column: 8, scope: !406)
!406 = distinct !DILexicalBlock(scope: !401, file: !19, line: 124, column: 8)
!407 = !DILocation(line: 124, column: 8, scope: !401)
!408 = !DILocation(line: 127, column: 9, scope: !409)
!409 = distinct !DILexicalBlock(scope: !406, file: !19, line: 125, column: 5)
!410 = !DILocation(line: 128, column: 5, scope: !409)
!411 = !DILocation(line: 131, column: 27, scope: !412)
!412 = distinct !DILexicalBlock(scope: !406, file: !19, line: 130, column: 5)
!413 = !DILocation(line: 131, column: 14, scope: !412)
!414 = !DILocation(line: 132, column: 13, scope: !415)
!415 = distinct !DILexicalBlock(scope: !412, file: !19, line: 132, column: 13)
!416 = !DILocation(line: 132, column: 18, scope: !415)
!417 = !DILocation(line: 132, column: 13, scope: !412)
!418 = !DILocation(line: 132, column: 28, scope: !419)
!419 = distinct !DILexicalBlock(scope: !415, file: !19, line: 132, column: 27)
!420 = !DILocalVariable(name: "i", scope: !421, file: !19, line: 134, type: !256)
!421 = distinct !DILexicalBlock(scope: !412, file: !19, line: 133, column: 9)
!422 = !DILocation(line: 134, column: 20, scope: !421)
!423 = !DILocation(line: 135, column: 19, scope: !424)
!424 = distinct !DILexicalBlock(scope: !421, file: !19, line: 135, column: 13)
!425 = !DILocation(line: 135, column: 17, scope: !424)
!426 = !DILocation(line: 135, column: 24, scope: !427)
!427 = distinct !DILexicalBlock(scope: !424, file: !19, line: 135, column: 13)
!428 = !DILocation(line: 135, column: 26, scope: !427)
!429 = !DILocation(line: 135, column: 13, scope: !424)
!430 = !DILocation(line: 137, column: 17, scope: !431)
!431 = distinct !DILexicalBlock(scope: !427, file: !19, line: 136, column: 13)
!432 = !DILocation(line: 137, column: 22, scope: !431)
!433 = !DILocation(line: 137, column: 25, scope: !431)
!434 = !DILocation(line: 138, column: 13, scope: !431)
!435 = !DILocation(line: 135, column: 34, scope: !427)
!436 = !DILocation(line: 135, column: 13, scope: !427)
!437 = distinct !{!437, !429, !438, !276}
!438 = !DILocation(line: 138, column: 13, scope: !424)
!439 = !DILocation(line: 142, column: 8, scope: !440)
!440 = distinct !DILexicalBlock(scope: !401, file: !19, line: 142, column: 8)
!441 = !DILocation(line: 142, column: 8, scope: !401)
!442 = !DILocation(line: 145, column: 21, scope: !443)
!443 = distinct !DILexicalBlock(scope: !440, file: !19, line: 143, column: 5)
!444 = !DILocation(line: 145, column: 9, scope: !443)
!445 = !DILocation(line: 147, column: 5, scope: !443)
!446 = !DILocation(line: 148, column: 1, scope: !401)
!447 = distinct !DISubprogram(name: "goodG2B2", scope: !19, file: !19, line: 151, type: !235, scopeLine: 152, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !66)
!448 = !DILocalVariable(name: "data", scope: !447, file: !19, line: 153, type: !47)
!449 = !DILocation(line: 153, column: 15, scope: !447)
!450 = !DILocation(line: 155, column: 10, scope: !447)
!451 = !DILocation(line: 156, column: 8, scope: !452)
!452 = distinct !DILexicalBlock(scope: !447, file: !19, line: 156, column: 8)
!453 = !DILocation(line: 156, column: 8, scope: !447)
!454 = !DILocation(line: 158, column: 27, scope: !455)
!455 = distinct !DILexicalBlock(scope: !452, file: !19, line: 157, column: 5)
!456 = !DILocation(line: 158, column: 14, scope: !455)
!457 = !DILocation(line: 159, column: 13, scope: !458)
!458 = distinct !DILexicalBlock(scope: !455, file: !19, line: 159, column: 13)
!459 = !DILocation(line: 159, column: 18, scope: !458)
!460 = !DILocation(line: 159, column: 13, scope: !455)
!461 = !DILocation(line: 159, column: 28, scope: !462)
!462 = distinct !DILexicalBlock(scope: !458, file: !19, line: 159, column: 27)
!463 = !DILocalVariable(name: "i", scope: !464, file: !19, line: 161, type: !256)
!464 = distinct !DILexicalBlock(scope: !455, file: !19, line: 160, column: 9)
!465 = !DILocation(line: 161, column: 20, scope: !464)
!466 = !DILocation(line: 162, column: 19, scope: !467)
!467 = distinct !DILexicalBlock(scope: !464, file: !19, line: 162, column: 13)
!468 = !DILocation(line: 162, column: 17, scope: !467)
!469 = !DILocation(line: 162, column: 24, scope: !470)
!470 = distinct !DILexicalBlock(scope: !467, file: !19, line: 162, column: 13)
!471 = !DILocation(line: 162, column: 26, scope: !470)
!472 = !DILocation(line: 162, column: 13, scope: !467)
!473 = !DILocation(line: 164, column: 17, scope: !474)
!474 = distinct !DILexicalBlock(scope: !470, file: !19, line: 163, column: 13)
!475 = !DILocation(line: 164, column: 22, scope: !474)
!476 = !DILocation(line: 164, column: 25, scope: !474)
!477 = !DILocation(line: 165, column: 13, scope: !474)
!478 = !DILocation(line: 162, column: 34, scope: !470)
!479 = !DILocation(line: 162, column: 13, scope: !470)
!480 = distinct !{!480, !472, !481, !276}
!481 = !DILocation(line: 165, column: 13, scope: !467)
!482 = !DILocation(line: 168, column: 5, scope: !455)
!483 = !DILocation(line: 169, column: 8, scope: !484)
!484 = distinct !DILexicalBlock(scope: !447, file: !19, line: 169, column: 8)
!485 = !DILocation(line: 169, column: 8, scope: !447)
!486 = !DILocation(line: 172, column: 21, scope: !487)
!487 = distinct !DILexicalBlock(scope: !484, file: !19, line: 170, column: 5)
!488 = !DILocation(line: 172, column: 9, scope: !487)
!489 = !DILocation(line: 174, column: 5, scope: !487)
!490 = !DILocation(line: 175, column: 1, scope: !447)
