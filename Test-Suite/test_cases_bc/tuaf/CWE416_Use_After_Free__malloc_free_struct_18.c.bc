; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tuaf/CWE416_Use_After_Free__malloc_free_struct_18.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_struct_18.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !33

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !60 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !64, metadata !DIExpression()), !dbg !65
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !66, metadata !DIExpression()), !dbg !67
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !68
  ret void, !dbg !69
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !70 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !71, metadata !DIExpression()), !dbg !72
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !75
  ret void, !dbg !76
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !77 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !78, metadata !DIExpression()), !dbg !79
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !82
  ret void, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !84 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !85, metadata !DIExpression()), !dbg !86
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !87, metadata !DIExpression()), !dbg !88
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !89
  ret void, !dbg !90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !91 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !92, metadata !DIExpression()), !dbg !93
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !96
  ret void, !dbg !97
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !98 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !99, metadata !DIExpression()), !dbg !100
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !101, metadata !DIExpression()), !dbg !102
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !103
  ret void, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !105 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !108, metadata !DIExpression()), !dbg !109
  %0 = load i32, ptr %n.addr, align 4, !dbg !110
  %conv = sext i32 %0 to i64, !dbg !110
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !111
  ret ptr %call, !dbg !112
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !113 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %0 = load i32, ptr %n.addr, align 4, !dbg !116
  %conv = sext i32 %0 to i64, !dbg !116
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !117
  ret ptr %call, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !119 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !120, metadata !DIExpression()), !dbg !121
  %0 = load i32, ptr %n.addr, align 4, !dbg !122
  %conv = sext i32 %0 to i64, !dbg !122
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !123
  ret ptr %call, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !125 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !126, metadata !DIExpression()), !dbg !127
  %0 = load i32, ptr %n.addr, align 4, !dbg !128
  %conv = sext i32 %0 to i64, !dbg !128
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !129
  ret ptr %call, !dbg !130
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !131 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !132, metadata !DIExpression()), !dbg !133
  %0 = load i32, ptr %n.addr, align 4, !dbg !134
  %conv = sext i32 %0 to i64, !dbg !134
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !135
  ret ptr %call, !dbg !136
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !137 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !138, metadata !DIExpression()), !dbg !139
  %0 = load i32, ptr %n.addr, align 4, !dbg !140
  %conv = sext i32 %0 to i64, !dbg !140
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !141
  ret ptr %call, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !143 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !144, metadata !DIExpression()), !dbg !145
  %0 = load i32, ptr %n.addr, align 4, !dbg !146
  %conv = sext i32 %0 to i64, !dbg !146
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !147
  ret ptr %call, !dbg !148
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !149 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !150, metadata !DIExpression()), !dbg !151
  %0 = load i32, ptr %n.addr, align 4, !dbg !152
  %conv = sext i32 %0 to i64, !dbg !152
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !153
  ret ptr %call, !dbg !154
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !155 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !158, metadata !DIExpression()), !dbg !159
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !160, metadata !DIExpression()), !dbg !161
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !162
  ret void, !dbg !163
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !164 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !168, metadata !DIExpression()), !dbg !169
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !170, metadata !DIExpression()), !dbg !171
  ret void, !dbg !172
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !173 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !174, metadata !DIExpression()), !dbg !175
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !176, metadata !DIExpression()), !dbg !177
  ret void, !dbg !178
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !179 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !182, metadata !DIExpression()), !dbg !183
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !184, metadata !DIExpression()), !dbg !185
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !186, metadata !DIExpression()), !dbg !187
  ret void, !dbg !188
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !189 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !192, metadata !DIExpression()), !dbg !193
  ret void, !dbg !194
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !195 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !196, metadata !DIExpression()), !dbg !197
  %0 = load ptr, ptr %str.addr, align 8, !dbg !198
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !199
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !200
  %call2 = call i32 @getchar(), !dbg !201
  ret void, !dbg !202
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !203 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !207, metadata !DIExpression()), !dbg !208
  %0 = load ptr, ptr %p.addr, align 8, !dbg !209
  store i32 0, ptr %0, align 4, !dbg !210
  %1 = load ptr, ptr %retval, align 8, !dbg !211
  ret ptr %1, !dbg !211
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !212 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !213, metadata !DIExpression()), !dbg !214
  %0 = load ptr, ptr %p.addr, align 8, !dbg !215
  store i32 0, ptr %0, align 4, !dbg !216
  %1 = load ptr, ptr %retval, align 8, !dbg !217
  ret ptr %1, !dbg !217
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !218 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !219, metadata !DIExpression()), !dbg !220
  %0 = load ptr, ptr %p.addr, align 8, !dbg !221
  call void @free(ptr noundef %0) #7, !dbg !222
  %1 = load ptr, ptr %retval, align 8, !dbg !223
  ret ptr %1, !dbg !223
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !224 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !225, metadata !DIExpression()), !dbg !226
  %0 = load ptr, ptr %p.addr, align 8, !dbg !227
  call void @free(ptr noundef %0) #7, !dbg !228
  %1 = load ptr, ptr %retval, align 8, !dbg !229
  ret ptr %1, !dbg !229
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !230 {
entry:
  ret void, !dbg !233
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_18_bad() #0 !dbg !234 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !235, metadata !DIExpression()), !dbg !236
  store ptr null, ptr %data, align 8, !dbg !237
  br label %source, !dbg !238

source:                                           ; preds = %entry
  call void @llvm.dbg.label(metadata !239), !dbg !240
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !241
  store ptr %call, ptr %data, align 8, !dbg !242
  %0 = load ptr, ptr %data, align 8, !dbg !243
  %cmp = icmp eq ptr %0, null, !dbg !245
  br i1 %cmp, label %if.then, label %if.end, !dbg !246

if.then:                                          ; preds = %source
  call void @exit(i32 noundef -1) #8, !dbg !247
  unreachable, !dbg !247

if.end:                                           ; preds = %source
  call void @llvm.dbg.declare(metadata ptr %i, metadata !249, metadata !DIExpression()), !dbg !254
  store i64 0, ptr %i, align 8, !dbg !255
  br label %for.cond, !dbg !257

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !258
  %cmp1 = icmp ult i64 %1, 100, !dbg !260
  br i1 %cmp1, label %for.body, label %for.end, !dbg !261

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !262
  %3 = load i64, ptr %i, align 8, !dbg !264
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !262
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !265
  store i32 1, ptr %intOne, align 4, !dbg !266
  %4 = load ptr, ptr %data, align 8, !dbg !267
  %5 = load i64, ptr %i, align 8, !dbg !268
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !267
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx2, i32 0, i32 1, !dbg !269
  store i32 2, ptr %intTwo, align 4, !dbg !270
  br label %for.inc, !dbg !271

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !272
  %inc = add i64 %6, 1, !dbg !272
  store i64 %inc, ptr %i, align 8, !dbg !272
  br label %for.cond, !dbg !273, !llvm.loop !274

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !277
  call void @free(ptr noundef %7) #7, !dbg !278
  br label %sink, !dbg !279

sink:                                             ; preds = %for.end
  call void @llvm.dbg.label(metadata !280), !dbg !281
  %8 = load ptr, ptr %data, align 8, !dbg !282
  %arrayidx3 = getelementptr inbounds %struct._twoIntsStruct, ptr %8, i64 0, !dbg !282
  %call4 = call ptr @UAFFUNC(ptr noundef %arrayidx3), !dbg !283
  ret void, !dbg !284
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_18_good() #0 !dbg !285 {
entry:
  call void @goodB2G(), !dbg !286
  call void @goodG2B(), !dbg !287
  ret void, !dbg !288
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !289 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !293, metadata !DIExpression()), !dbg !294
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !295, metadata !DIExpression()), !dbg !296
  %call = call i64 @time(ptr noundef null) #7, !dbg !297
  %conv = trunc i64 %call to i32, !dbg !298
  call void @srand(i32 noundef %conv) #7, !dbg !299
  call void @printLine(ptr noundef @.str.3), !dbg !300
  call void @CWE416_Use_After_Free__malloc_free_struct_18_good(), !dbg !301
  call void @printLine(ptr noundef @.str.4), !dbg !302
  call void @printLine(ptr noundef @.str.5), !dbg !303
  call void @CWE416_Use_After_Free__malloc_free_struct_18_bad(), !dbg !304
  call void @printLine(ptr noundef @.str.6), !dbg !305
  ret i32 0, !dbg !306
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !307 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !308, metadata !DIExpression()), !dbg !309
  store ptr null, ptr %data, align 8, !dbg !310
  br label %source, !dbg !311

source:                                           ; preds = %entry
  call void @llvm.dbg.label(metadata !312), !dbg !313
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !314
  store ptr %call, ptr %data, align 8, !dbg !315
  %0 = load ptr, ptr %data, align 8, !dbg !316
  %cmp = icmp eq ptr %0, null, !dbg !318
  br i1 %cmp, label %if.then, label %if.end, !dbg !319

if.then:                                          ; preds = %source
  call void @exit(i32 noundef -1) #8, !dbg !320
  unreachable, !dbg !320

if.end:                                           ; preds = %source
  call void @llvm.dbg.declare(metadata ptr %i, metadata !322, metadata !DIExpression()), !dbg !324
  store i64 0, ptr %i, align 8, !dbg !325
  br label %for.cond, !dbg !327

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !328
  %cmp1 = icmp ult i64 %1, 100, !dbg !330
  br i1 %cmp1, label %for.body, label %for.end, !dbg !331

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !332
  %3 = load i64, ptr %i, align 8, !dbg !334
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !332
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !335
  store i32 1, ptr %intOne, align 4, !dbg !336
  %4 = load ptr, ptr %data, align 8, !dbg !337
  %5 = load i64, ptr %i, align 8, !dbg !338
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !337
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx2, i32 0, i32 1, !dbg !339
  store i32 2, ptr %intTwo, align 4, !dbg !340
  br label %for.inc, !dbg !341

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !342
  %inc = add i64 %6, 1, !dbg !342
  store i64 %inc, ptr %i, align 8, !dbg !342
  br label %for.cond, !dbg !343, !llvm.loop !344

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !346
  call void @free(ptr noundef %7) #7, !dbg !347
  br label %sink, !dbg !348

sink:                                             ; preds = %for.end
  call void @llvm.dbg.label(metadata !349), !dbg !350
  ret void, !dbg !351
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !352 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !353, metadata !DIExpression()), !dbg !354
  store ptr null, ptr %data, align 8, !dbg !355
  br label %source, !dbg !356

source:                                           ; preds = %entry
  call void @llvm.dbg.label(metadata !357), !dbg !358
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !359
  store ptr %call, ptr %data, align 8, !dbg !360
  %0 = load ptr, ptr %data, align 8, !dbg !361
  %cmp = icmp eq ptr %0, null, !dbg !363
  br i1 %cmp, label %if.then, label %if.end, !dbg !364

if.then:                                          ; preds = %source
  call void @exit(i32 noundef -1) #8, !dbg !365
  unreachable, !dbg !365

if.end:                                           ; preds = %source
  call void @llvm.dbg.declare(metadata ptr %i, metadata !367, metadata !DIExpression()), !dbg !369
  store i64 0, ptr %i, align 8, !dbg !370
  br label %for.cond, !dbg !372

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !373
  %cmp1 = icmp ult i64 %1, 100, !dbg !375
  br i1 %cmp1, label %for.body, label %for.end, !dbg !376

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !377
  %3 = load i64, ptr %i, align 8, !dbg !379
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !377
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !380
  store i32 1, ptr %intOne, align 4, !dbg !381
  %4 = load ptr, ptr %data, align 8, !dbg !382
  %5 = load i64, ptr %i, align 8, !dbg !383
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !382
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx2, i32 0, i32 1, !dbg !384
  store i32 2, ptr %intTwo, align 4, !dbg !385
  br label %for.inc, !dbg !386

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !387
  %inc = add i64 %6, 1, !dbg !387
  store i64 %inc, ptr %i, align 8, !dbg !387
  br label %for.cond, !dbg !388, !llvm.loop !389

for.end:                                          ; preds = %for.cond
  br label %sink, !dbg !391

sink:                                             ; preds = %for.end
  call void @llvm.dbg.label(metadata !392), !dbg !393
  %7 = load ptr, ptr %data, align 8, !dbg !394
  %arrayidx3 = getelementptr inbounds %struct._twoIntsStruct, ptr %7, i64 0, !dbg !394
  %call4 = call ptr @SAFEUAFFUNC(ptr noundef %arrayidx3), !dbg !395
  ret void, !dbg !396
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!38}
!llvm.module.flags = !{!52, !53, !54, !55, !56, !57, !58}
!llvm.ident = !{!59}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 128, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tuaf/CWE416_Use_After_Free__malloc_free_struct_18.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "455148d31bffbd0599e3992e83e72c3d")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 18)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 130, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 16)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 133, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 17)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 135, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 15)
!38 = distinct !DICompileUnit(language: DW_LANG_C11, file: !39, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !40, globals: !51, splitDebugInlining: false, nameTableKind: None)
!39 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_struct_18.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "455148d31bffbd0599e3992e83e72c3d")
!40 = !{!41, !42, !50}
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64)
!43 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !44, line: 100, baseType: !45)
!44 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!45 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !44, line: 96, size: 64, elements: !46)
!46 = !{!47, !49}
!47 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !45, file: !44, line: 98, baseType: !48, size: 32)
!48 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !45, file: !44, line: 99, baseType: !48, size: 32, offset: 32)
!50 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!51 = !{!0, !7, !12, !17, !23, !28, !33}
!52 = !{i32 7, !"Dwarf Version", i32 5}
!53 = !{i32 2, !"Debug Info Version", i32 3}
!54 = !{i32 1, !"wchar_size", i32 4}
!55 = !{i32 8, !"PIC Level", i32 2}
!56 = !{i32 7, !"PIE Level", i32 2}
!57 = !{i32 7, !"uwtable", i32 2}
!58 = !{i32 7, !"frame-pointer", i32 2}
!59 = !{!"clang version 16.0.0"}
!60 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !61, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!61 = !DISubroutineType(types: !62)
!62 = !{null, !41, !41}
!63 = !{}
!64 = !DILocalVariable(name: "p", arg: 1, scope: !60, file: !2, line: 4, type: !41)
!65 = !DILocation(line: 4, column: 22, scope: !60)
!66 = !DILocalVariable(name: "q", arg: 2, scope: !60, file: !2, line: 4, type: !41)
!67 = !DILocation(line: 4, column: 31, scope: !60)
!68 = !DILocation(line: 5, column: 3, scope: !60)
!69 = !DILocation(line: 6, column: 1, scope: !60)
!70 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !61, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!71 = !DILocalVariable(name: "p", arg: 1, scope: !70, file: !2, line: 8, type: !41)
!72 = !DILocation(line: 8, column: 25, scope: !70)
!73 = !DILocalVariable(name: "q", arg: 2, scope: !70, file: !2, line: 8, type: !41)
!74 = !DILocation(line: 8, column: 34, scope: !70)
!75 = !DILocation(line: 9, column: 3, scope: !70)
!76 = !DILocation(line: 10, column: 1, scope: !70)
!77 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !61, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!78 = !DILocalVariable(name: "p", arg: 1, scope: !77, file: !2, line: 12, type: !41)
!79 = !DILocation(line: 12, column: 21, scope: !77)
!80 = !DILocalVariable(name: "q", arg: 2, scope: !77, file: !2, line: 12, type: !41)
!81 = !DILocation(line: 12, column: 30, scope: !77)
!82 = !DILocation(line: 13, column: 3, scope: !77)
!83 = !DILocation(line: 14, column: 1, scope: !77)
!84 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !61, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!85 = !DILocalVariable(name: "p", arg: 1, scope: !84, file: !2, line: 16, type: !41)
!86 = !DILocation(line: 16, column: 20, scope: !84)
!87 = !DILocalVariable(name: "q", arg: 2, scope: !84, file: !2, line: 16, type: !41)
!88 = !DILocation(line: 16, column: 29, scope: !84)
!89 = !DILocation(line: 17, column: 3, scope: !84)
!90 = !DILocation(line: 18, column: 1, scope: !84)
!91 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !61, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!92 = !DILocalVariable(name: "p", arg: 1, scope: !91, file: !2, line: 20, type: !41)
!93 = !DILocation(line: 20, column: 34, scope: !91)
!94 = !DILocalVariable(name: "q", arg: 2, scope: !91, file: !2, line: 20, type: !41)
!95 = !DILocation(line: 20, column: 43, scope: !91)
!96 = !DILocation(line: 21, column: 3, scope: !91)
!97 = !DILocation(line: 22, column: 1, scope: !91)
!98 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !61, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!99 = !DILocalVariable(name: "p", arg: 1, scope: !98, file: !2, line: 24, type: !41)
!100 = !DILocation(line: 24, column: 33, scope: !98)
!101 = !DILocalVariable(name: "q", arg: 2, scope: !98, file: !2, line: 24, type: !41)
!102 = !DILocation(line: 24, column: 42, scope: !98)
!103 = !DILocation(line: 25, column: 3, scope: !98)
!104 = !DILocation(line: 26, column: 1, scope: !98)
!105 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !106, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!106 = !DISubroutineType(types: !107)
!107 = !{!41, !48}
!108 = !DILocalVariable(name: "n", arg: 1, scope: !105, file: !2, line: 29, type: !48)
!109 = !DILocation(line: 29, column: 22, scope: !105)
!110 = !DILocation(line: 30, column: 17, scope: !105)
!111 = !DILocation(line: 30, column: 10, scope: !105)
!112 = !DILocation(line: 30, column: 3, scope: !105)
!113 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !106, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!114 = !DILocalVariable(name: "n", arg: 1, scope: !113, file: !2, line: 33, type: !48)
!115 = !DILocation(line: 33, column: 28, scope: !113)
!116 = !DILocation(line: 34, column: 19, scope: !113)
!117 = !DILocation(line: 34, column: 12, scope: !113)
!118 = !DILocation(line: 34, column: 5, scope: !113)
!119 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !106, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!120 = !DILocalVariable(name: "n", arg: 1, scope: !119, file: !2, line: 37, type: !48)
!121 = !DILocation(line: 37, column: 21, scope: !119)
!122 = !DILocation(line: 38, column: 17, scope: !119)
!123 = !DILocation(line: 38, column: 10, scope: !119)
!124 = !DILocation(line: 38, column: 3, scope: !119)
!125 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !106, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!126 = !DILocalVariable(name: "n", arg: 1, scope: !125, file: !2, line: 41, type: !48)
!127 = !DILocation(line: 41, column: 21, scope: !125)
!128 = !DILocation(line: 42, column: 17, scope: !125)
!129 = !DILocation(line: 42, column: 10, scope: !125)
!130 = !DILocation(line: 42, column: 3, scope: !125)
!131 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !106, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!132 = !DILocalVariable(name: "n", arg: 1, scope: !131, file: !2, line: 45, type: !48)
!133 = !DILocation(line: 45, column: 21, scope: !131)
!134 = !DILocation(line: 46, column: 17, scope: !131)
!135 = !DILocation(line: 46, column: 10, scope: !131)
!136 = !DILocation(line: 46, column: 3, scope: !131)
!137 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !106, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!138 = !DILocalVariable(name: "n", arg: 1, scope: !137, file: !2, line: 49, type: !48)
!139 = !DILocation(line: 49, column: 21, scope: !137)
!140 = !DILocation(line: 50, column: 17, scope: !137)
!141 = !DILocation(line: 50, column: 10, scope: !137)
!142 = !DILocation(line: 50, column: 3, scope: !137)
!143 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !106, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!144 = !DILocalVariable(name: "n", arg: 1, scope: !143, file: !2, line: 53, type: !48)
!145 = !DILocation(line: 53, column: 21, scope: !143)
!146 = !DILocation(line: 54, column: 17, scope: !143)
!147 = !DILocation(line: 54, column: 10, scope: !143)
!148 = !DILocation(line: 54, column: 3, scope: !143)
!149 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !106, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!150 = !DILocalVariable(name: "n", arg: 1, scope: !149, file: !2, line: 57, type: !48)
!151 = !DILocation(line: 57, column: 18, scope: !149)
!152 = !DILocation(line: 58, column: 17, scope: !149)
!153 = !DILocation(line: 58, column: 10, scope: !149)
!154 = !DILocation(line: 58, column: 3, scope: !149)
!155 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !156, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!156 = !DISubroutineType(types: !157)
!157 = !{null, !48, !48}
!158 = !DILocalVariable(name: "id", arg: 1, scope: !155, file: !2, line: 67, type: !48)
!159 = !DILocation(line: 67, column: 20, scope: !155)
!160 = !DILocalVariable(name: "flags", arg: 2, scope: !155, file: !2, line: 67, type: !48)
!161 = !DILocation(line: 67, column: 28, scope: !155)
!162 = !DILocation(line: 68, column: 3, scope: !155)
!163 = !DILocation(line: 69, column: 1, scope: !155)
!164 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !165, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!165 = !DISubroutineType(types: !166)
!166 = !{null, !48, !167}
!167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!168 = !DILocalVariable(name: "thdid", arg: 1, scope: !164, file: !2, line: 79, type: !48)
!169 = !DILocation(line: 79, column: 21, scope: !164)
!170 = !DILocalVariable(name: "cxt", arg: 2, scope: !164, file: !2, line: 79, type: !167)
!171 = !DILocation(line: 79, column: 34, scope: !164)
!172 = !DILocation(line: 81, column: 1, scope: !164)
!173 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !165, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!174 = !DILocalVariable(name: "thdid", arg: 1, scope: !173, file: !2, line: 82, type: !48)
!175 = !DILocation(line: 82, column: 21, scope: !173)
!176 = !DILocalVariable(name: "cxt", arg: 2, scope: !173, file: !2, line: 82, type: !167)
!177 = !DILocation(line: 82, column: 33, scope: !173)
!178 = !DILocation(line: 84, column: 1, scope: !173)
!179 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !180, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!180 = !DISubroutineType(types: !181)
!181 = !{null, !48, !167, !167}
!182 = !DILocalVariable(name: "thdid", arg: 1, scope: !179, file: !2, line: 85, type: !48)
!183 = !DILocation(line: 85, column: 26, scope: !179)
!184 = !DILocalVariable(name: "cxt", arg: 2, scope: !179, file: !2, line: 85, type: !167)
!185 = !DILocation(line: 85, column: 38, scope: !179)
!186 = !DILocalVariable(name: "lev", arg: 3, scope: !179, file: !2, line: 85, type: !167)
!187 = !DILocation(line: 85, column: 49, scope: !179)
!188 = !DILocation(line: 87, column: 1, scope: !179)
!189 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !190, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!190 = !DISubroutineType(types: !191)
!191 = !{null, !167}
!192 = !DILocalVariable(name: "lockname", arg: 1, scope: !189, file: !2, line: 89, type: !167)
!193 = !DILocation(line: 89, column: 17, scope: !189)
!194 = !DILocation(line: 91, column: 1, scope: !189)
!195 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !190, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!196 = !DILocalVariable(name: "str", arg: 1, scope: !195, file: !2, line: 93, type: !167)
!197 = !DILocation(line: 93, column: 18, scope: !195)
!198 = !DILocation(line: 94, column: 18, scope: !195)
!199 = !DILocation(line: 94, column: 3, scope: !195)
!200 = !DILocation(line: 95, column: 3, scope: !195)
!201 = !DILocation(line: 96, column: 3, scope: !195)
!202 = !DILocation(line: 97, column: 1, scope: !195)
!203 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !204, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!204 = !DISubroutineType(types: !205)
!205 = !{!41, !206}
!206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!207 = !DILocalVariable(name: "p", arg: 1, scope: !203, file: !2, line: 100, type: !206)
!208 = !DILocation(line: 100, column: 24, scope: !203)
!209 = !DILocation(line: 101, column: 6, scope: !203)
!210 = !DILocation(line: 101, column: 8, scope: !203)
!211 = !DILocation(line: 102, column: 1, scope: !203)
!212 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !204, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!213 = !DILocalVariable(name: "p", arg: 1, scope: !212, file: !2, line: 104, type: !206)
!214 = !DILocation(line: 104, column: 20, scope: !212)
!215 = !DILocation(line: 105, column: 6, scope: !212)
!216 = !DILocation(line: 105, column: 8, scope: !212)
!217 = !DILocation(line: 106, column: 1, scope: !212)
!218 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !204, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!219 = !DILocalVariable(name: "p", arg: 1, scope: !218, file: !2, line: 110, type: !206)
!220 = !DILocation(line: 110, column: 22, scope: !218)
!221 = !DILocation(line: 111, column: 10, scope: !218)
!222 = !DILocation(line: 111, column: 5, scope: !218)
!223 = !DILocation(line: 112, column: 1, scope: !218)
!224 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !204, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!225 = !DILocalVariable(name: "p", arg: 1, scope: !224, file: !2, line: 115, type: !206)
!226 = !DILocation(line: 115, column: 24, scope: !224)
!227 = !DILocation(line: 116, column: 10, scope: !224)
!228 = !DILocation(line: 116, column: 5, scope: !224)
!229 = !DILocation(line: 117, column: 1, scope: !224)
!230 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !231, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!231 = !DISubroutineType(types: !232)
!232 = !{null}
!233 = !DILocation(line: 135, column: 20, scope: !230)
!234 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_18_bad", scope: !19, file: !19, line: 24, type: !231, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!235 = !DILocalVariable(name: "data", scope: !234, file: !19, line: 26, type: !42)
!236 = !DILocation(line: 26, column: 21, scope: !234)
!237 = !DILocation(line: 28, column: 10, scope: !234)
!238 = !DILocation(line: 29, column: 5, scope: !234)
!239 = !DILabel(scope: !234, name: "source", file: !19, line: 30)
!240 = !DILocation(line: 30, column: 1, scope: !234)
!241 = !DILocation(line: 31, column: 29, scope: !234)
!242 = !DILocation(line: 31, column: 10, scope: !234)
!243 = !DILocation(line: 32, column: 9, scope: !244)
!244 = distinct !DILexicalBlock(scope: !234, file: !19, line: 32, column: 9)
!245 = !DILocation(line: 32, column: 14, scope: !244)
!246 = !DILocation(line: 32, column: 9, scope: !234)
!247 = !DILocation(line: 32, column: 24, scope: !248)
!248 = distinct !DILexicalBlock(scope: !244, file: !19, line: 32, column: 23)
!249 = !DILocalVariable(name: "i", scope: !250, file: !19, line: 34, type: !251)
!250 = distinct !DILexicalBlock(scope: !234, file: !19, line: 33, column: 5)
!251 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !252, line: 46, baseType: !253)
!252 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!253 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!254 = !DILocation(line: 34, column: 16, scope: !250)
!255 = !DILocation(line: 35, column: 15, scope: !256)
!256 = distinct !DILexicalBlock(scope: !250, file: !19, line: 35, column: 9)
!257 = !DILocation(line: 35, column: 13, scope: !256)
!258 = !DILocation(line: 35, column: 20, scope: !259)
!259 = distinct !DILexicalBlock(scope: !256, file: !19, line: 35, column: 9)
!260 = !DILocation(line: 35, column: 22, scope: !259)
!261 = !DILocation(line: 35, column: 9, scope: !256)
!262 = !DILocation(line: 37, column: 13, scope: !263)
!263 = distinct !DILexicalBlock(scope: !259, file: !19, line: 36, column: 9)
!264 = !DILocation(line: 37, column: 18, scope: !263)
!265 = !DILocation(line: 37, column: 21, scope: !263)
!266 = !DILocation(line: 37, column: 28, scope: !263)
!267 = !DILocation(line: 38, column: 13, scope: !263)
!268 = !DILocation(line: 38, column: 18, scope: !263)
!269 = !DILocation(line: 38, column: 21, scope: !263)
!270 = !DILocation(line: 38, column: 28, scope: !263)
!271 = !DILocation(line: 39, column: 9, scope: !263)
!272 = !DILocation(line: 35, column: 30, scope: !259)
!273 = !DILocation(line: 35, column: 9, scope: !259)
!274 = distinct !{!274, !261, !275, !276}
!275 = !DILocation(line: 39, column: 9, scope: !256)
!276 = !{!"llvm.loop.mustprogress"}
!277 = !DILocation(line: 42, column: 10, scope: !234)
!278 = !DILocation(line: 42, column: 5, scope: !234)
!279 = !DILocation(line: 43, column: 5, scope: !234)
!280 = !DILabel(scope: !234, name: "sink", file: !19, line: 44)
!281 = !DILocation(line: 44, column: 1, scope: !234)
!282 = !DILocation(line: 46, column: 14, scope: !234)
!283 = !DILocation(line: 46, column: 5, scope: !234)
!284 = !DILocation(line: 48, column: 1, scope: !234)
!285 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_18_good", scope: !19, file: !19, line: 108, type: !231, scopeLine: 109, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!286 = !DILocation(line: 110, column: 5, scope: !285)
!287 = !DILocation(line: 111, column: 5, scope: !285)
!288 = !DILocation(line: 112, column: 1, scope: !285)
!289 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 123, type: !290, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !63)
!290 = !DISubroutineType(types: !291)
!291 = !{!48, !48, !292}
!292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !167, size: 64)
!293 = !DILocalVariable(name: "argc", arg: 1, scope: !289, file: !19, line: 123, type: !48)
!294 = !DILocation(line: 123, column: 14, scope: !289)
!295 = !DILocalVariable(name: "argv", arg: 2, scope: !289, file: !19, line: 123, type: !292)
!296 = !DILocation(line: 123, column: 27, scope: !289)
!297 = !DILocation(line: 126, column: 22, scope: !289)
!298 = !DILocation(line: 126, column: 12, scope: !289)
!299 = !DILocation(line: 126, column: 5, scope: !289)
!300 = !DILocation(line: 128, column: 5, scope: !289)
!301 = !DILocation(line: 129, column: 5, scope: !289)
!302 = !DILocation(line: 130, column: 5, scope: !289)
!303 = !DILocation(line: 133, column: 5, scope: !289)
!304 = !DILocation(line: 134, column: 5, scope: !289)
!305 = !DILocation(line: 135, column: 5, scope: !289)
!306 = !DILocation(line: 137, column: 5, scope: !289)
!307 = distinct !DISubprogram(name: "goodB2G", scope: !19, file: !19, line: 55, type: !231, scopeLine: 56, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !63)
!308 = !DILocalVariable(name: "data", scope: !307, file: !19, line: 57, type: !42)
!309 = !DILocation(line: 57, column: 21, scope: !307)
!310 = !DILocation(line: 59, column: 10, scope: !307)
!311 = !DILocation(line: 60, column: 5, scope: !307)
!312 = !DILabel(scope: !307, name: "source", file: !19, line: 61)
!313 = !DILocation(line: 61, column: 1, scope: !307)
!314 = !DILocation(line: 62, column: 29, scope: !307)
!315 = !DILocation(line: 62, column: 10, scope: !307)
!316 = !DILocation(line: 63, column: 9, scope: !317)
!317 = distinct !DILexicalBlock(scope: !307, file: !19, line: 63, column: 9)
!318 = !DILocation(line: 63, column: 14, scope: !317)
!319 = !DILocation(line: 63, column: 9, scope: !307)
!320 = !DILocation(line: 63, column: 24, scope: !321)
!321 = distinct !DILexicalBlock(scope: !317, file: !19, line: 63, column: 23)
!322 = !DILocalVariable(name: "i", scope: !323, file: !19, line: 65, type: !251)
!323 = distinct !DILexicalBlock(scope: !307, file: !19, line: 64, column: 5)
!324 = !DILocation(line: 65, column: 16, scope: !323)
!325 = !DILocation(line: 66, column: 15, scope: !326)
!326 = distinct !DILexicalBlock(scope: !323, file: !19, line: 66, column: 9)
!327 = !DILocation(line: 66, column: 13, scope: !326)
!328 = !DILocation(line: 66, column: 20, scope: !329)
!329 = distinct !DILexicalBlock(scope: !326, file: !19, line: 66, column: 9)
!330 = !DILocation(line: 66, column: 22, scope: !329)
!331 = !DILocation(line: 66, column: 9, scope: !326)
!332 = !DILocation(line: 68, column: 13, scope: !333)
!333 = distinct !DILexicalBlock(scope: !329, file: !19, line: 67, column: 9)
!334 = !DILocation(line: 68, column: 18, scope: !333)
!335 = !DILocation(line: 68, column: 21, scope: !333)
!336 = !DILocation(line: 68, column: 28, scope: !333)
!337 = !DILocation(line: 69, column: 13, scope: !333)
!338 = !DILocation(line: 69, column: 18, scope: !333)
!339 = !DILocation(line: 69, column: 21, scope: !333)
!340 = !DILocation(line: 69, column: 28, scope: !333)
!341 = !DILocation(line: 70, column: 9, scope: !333)
!342 = !DILocation(line: 66, column: 30, scope: !329)
!343 = !DILocation(line: 66, column: 9, scope: !329)
!344 = distinct !{!344, !331, !345, !276}
!345 = !DILocation(line: 70, column: 9, scope: !326)
!346 = !DILocation(line: 73, column: 10, scope: !307)
!347 = !DILocation(line: 73, column: 5, scope: !307)
!348 = !DILocation(line: 74, column: 5, scope: !307)
!349 = !DILabel(scope: !307, name: "sink", file: !19, line: 75)
!350 = !DILocation(line: 75, column: 1, scope: !307)
!351 = !DILocation(line: 80, column: 1, scope: !307)
!352 = distinct !DISubprogram(name: "goodG2B", scope: !19, file: !19, line: 83, type: !231, scopeLine: 84, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !63)
!353 = !DILocalVariable(name: "data", scope: !352, file: !19, line: 85, type: !42)
!354 = !DILocation(line: 85, column: 21, scope: !352)
!355 = !DILocation(line: 87, column: 10, scope: !352)
!356 = !DILocation(line: 88, column: 5, scope: !352)
!357 = !DILabel(scope: !352, name: "source", file: !19, line: 89)
!358 = !DILocation(line: 89, column: 1, scope: !352)
!359 = !DILocation(line: 90, column: 29, scope: !352)
!360 = !DILocation(line: 90, column: 10, scope: !352)
!361 = !DILocation(line: 91, column: 9, scope: !362)
!362 = distinct !DILexicalBlock(scope: !352, file: !19, line: 91, column: 9)
!363 = !DILocation(line: 91, column: 14, scope: !362)
!364 = !DILocation(line: 91, column: 9, scope: !352)
!365 = !DILocation(line: 91, column: 24, scope: !366)
!366 = distinct !DILexicalBlock(scope: !362, file: !19, line: 91, column: 23)
!367 = !DILocalVariable(name: "i", scope: !368, file: !19, line: 93, type: !251)
!368 = distinct !DILexicalBlock(scope: !352, file: !19, line: 92, column: 5)
!369 = !DILocation(line: 93, column: 16, scope: !368)
!370 = !DILocation(line: 94, column: 15, scope: !371)
!371 = distinct !DILexicalBlock(scope: !368, file: !19, line: 94, column: 9)
!372 = !DILocation(line: 94, column: 13, scope: !371)
!373 = !DILocation(line: 94, column: 20, scope: !374)
!374 = distinct !DILexicalBlock(scope: !371, file: !19, line: 94, column: 9)
!375 = !DILocation(line: 94, column: 22, scope: !374)
!376 = !DILocation(line: 94, column: 9, scope: !371)
!377 = !DILocation(line: 96, column: 13, scope: !378)
!378 = distinct !DILexicalBlock(scope: !374, file: !19, line: 95, column: 9)
!379 = !DILocation(line: 96, column: 18, scope: !378)
!380 = !DILocation(line: 96, column: 21, scope: !378)
!381 = !DILocation(line: 96, column: 28, scope: !378)
!382 = !DILocation(line: 97, column: 13, scope: !378)
!383 = !DILocation(line: 97, column: 18, scope: !378)
!384 = !DILocation(line: 97, column: 21, scope: !378)
!385 = !DILocation(line: 97, column: 28, scope: !378)
!386 = !DILocation(line: 98, column: 9, scope: !378)
!387 = !DILocation(line: 94, column: 30, scope: !374)
!388 = !DILocation(line: 94, column: 9, scope: !374)
!389 = distinct !{!389, !376, !390, !276}
!390 = !DILocation(line: 98, column: 9, scope: !371)
!391 = !DILocation(line: 101, column: 5, scope: !352)
!392 = !DILabel(scope: !352, name: "sink", file: !19, line: 102)
!393 = !DILocation(line: 102, column: 1, scope: !352)
!394 = !DILocation(line: 104, column: 18, scope: !352)
!395 = !DILocation(line: 104, column: 5, scope: !352)
!396 = !DILocation(line: 106, column: 1, scope: !352)
