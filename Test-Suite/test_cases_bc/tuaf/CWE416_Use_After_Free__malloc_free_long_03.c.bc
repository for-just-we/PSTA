; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tuaf/CWE416_Use_After_Free__malloc_free_long_03.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_long_03.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !33

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !54 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !58, metadata !DIExpression()), !dbg !59
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !60, metadata !DIExpression()), !dbg !61
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !62
  ret void, !dbg !63
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !64 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !65, metadata !DIExpression()), !dbg !66
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !71 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !72, metadata !DIExpression()), !dbg !73
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !76
  ret void, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !78 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !79, metadata !DIExpression()), !dbg !80
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !83
  ret void, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !85 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !86, metadata !DIExpression()), !dbg !87
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !90
  ret void, !dbg !91
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !92 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !93, metadata !DIExpression()), !dbg !94
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !95, metadata !DIExpression()), !dbg !96
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !97
  ret void, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %0 = load i32, ptr %n.addr, align 4, !dbg !105
  %conv = sext i32 %0 to i64, !dbg !105
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !106
  ret ptr %call, !dbg !107
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !108 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !109, metadata !DIExpression()), !dbg !110
  %0 = load i32, ptr %n.addr, align 4, !dbg !111
  %conv = sext i32 %0 to i64, !dbg !111
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !112
  ret ptr %call, !dbg !113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !114 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %0 = load i32, ptr %n.addr, align 4, !dbg !117
  %conv = sext i32 %0 to i64, !dbg !117
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !118
  ret ptr %call, !dbg !119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !120 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !121, metadata !DIExpression()), !dbg !122
  %0 = load i32, ptr %n.addr, align 4, !dbg !123
  %conv = sext i32 %0 to i64, !dbg !123
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !124
  ret ptr %call, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !126 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !127, metadata !DIExpression()), !dbg !128
  %0 = load i32, ptr %n.addr, align 4, !dbg !129
  %conv = sext i32 %0 to i64, !dbg !129
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !130
  ret ptr %call, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !132 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !133, metadata !DIExpression()), !dbg !134
  %0 = load i32, ptr %n.addr, align 4, !dbg !135
  %conv = sext i32 %0 to i64, !dbg !135
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !136
  ret ptr %call, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !138 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !139, metadata !DIExpression()), !dbg !140
  %0 = load i32, ptr %n.addr, align 4, !dbg !141
  %conv = sext i32 %0 to i64, !dbg !141
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !142
  ret ptr %call, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !144 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !145, metadata !DIExpression()), !dbg !146
  %0 = load i32, ptr %n.addr, align 4, !dbg !147
  %conv = sext i32 %0 to i64, !dbg !147
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !148
  ret ptr %call, !dbg !149
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !150 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !153, metadata !DIExpression()), !dbg !154
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !155, metadata !DIExpression()), !dbg !156
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !157
  ret void, !dbg !158
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !159 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !163, metadata !DIExpression()), !dbg !164
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !165, metadata !DIExpression()), !dbg !166
  ret void, !dbg !167
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !168 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !169, metadata !DIExpression()), !dbg !170
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !171, metadata !DIExpression()), !dbg !172
  ret void, !dbg !173
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !174 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !177, metadata !DIExpression()), !dbg !178
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !179, metadata !DIExpression()), !dbg !180
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !181, metadata !DIExpression()), !dbg !182
  ret void, !dbg !183
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !184 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !187, metadata !DIExpression()), !dbg !188
  ret void, !dbg !189
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !190 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !191, metadata !DIExpression()), !dbg !192
  %0 = load ptr, ptr %str.addr, align 8, !dbg !193
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !194
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !195
  %call2 = call i32 @getchar(), !dbg !196
  ret void, !dbg !197
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !198 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !202, metadata !DIExpression()), !dbg !203
  %0 = load ptr, ptr %p.addr, align 8, !dbg !204
  store i32 0, ptr %0, align 4, !dbg !205
  %1 = load ptr, ptr %retval, align 8, !dbg !206
  ret ptr %1, !dbg !206
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !207 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !208, metadata !DIExpression()), !dbg !209
  %0 = load ptr, ptr %p.addr, align 8, !dbg !210
  store i32 0, ptr %0, align 4, !dbg !211
  %1 = load ptr, ptr %retval, align 8, !dbg !212
  ret ptr %1, !dbg !212
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !213 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !214, metadata !DIExpression()), !dbg !215
  %0 = load ptr, ptr %p.addr, align 8, !dbg !216
  call void @free(ptr noundef %0) #7, !dbg !217
  %1 = load ptr, ptr %retval, align 8, !dbg !218
  ret ptr %1, !dbg !218
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !219 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !220, metadata !DIExpression()), !dbg !221
  %0 = load ptr, ptr %p.addr, align 8, !dbg !222
  call void @free(ptr noundef %0) #7, !dbg !223
  %1 = load ptr, ptr %retval, align 8, !dbg !224
  ret ptr %1, !dbg !224
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !225 {
entry:
  ret void, !dbg !228
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_long_03_bad() #0 !dbg !229 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !230, metadata !DIExpression()), !dbg !231
  store ptr null, ptr %data, align 8, !dbg !232
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !233
  store ptr %call, ptr %data, align 8, !dbg !236
  %0 = load ptr, ptr %data, align 8, !dbg !237
  %cmp = icmp eq ptr %0, null, !dbg !239
  br i1 %cmp, label %if.then, label %if.end, !dbg !240

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !241
  unreachable, !dbg !241

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %i, metadata !243, metadata !DIExpression()), !dbg !248
  store i64 0, ptr %i, align 8, !dbg !249
  br label %for.cond, !dbg !251

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !252
  %cmp1 = icmp ult i64 %1, 100, !dbg !254
  br i1 %cmp1, label %for.body, label %for.end, !dbg !255

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !256
  %3 = load i64, ptr %i, align 8, !dbg !258
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !256
  store i64 5, ptr %arrayidx, align 8, !dbg !259
  br label %for.inc, !dbg !260

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !261
  %inc = add i64 %4, 1, !dbg !261
  store i64 %inc, ptr %i, align 8, !dbg !261
  br label %for.cond, !dbg !262, !llvm.loop !263

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !266
  call void @free(ptr noundef %5) #7, !dbg !267
  %6 = load ptr, ptr %data, align 8, !dbg !268
  %arrayidx2 = getelementptr inbounds i64, ptr %6, i64 0, !dbg !268
  %7 = load i64, ptr %arrayidx2, align 8, !dbg !268
  %8 = inttoptr i64 %7 to ptr, !dbg !268
  %call3 = call ptr @UAFFUNC(ptr noundef %8), !dbg !271
  ret void, !dbg !272
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_long_03_good() #0 !dbg !273 {
entry:
  call void @goodB2G1(), !dbg !274
  call void @goodB2G2(), !dbg !275
  call void @goodG2B1(), !dbg !276
  call void @goodG2B2(), !dbg !277
  ret void, !dbg !278
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !279 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !283, metadata !DIExpression()), !dbg !284
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !285, metadata !DIExpression()), !dbg !286
  %call = call i64 @time(ptr noundef null) #7, !dbg !287
  %conv = trunc i64 %call to i32, !dbg !288
  call void @srand(i32 noundef %conv) #7, !dbg !289
  call void @printLine(ptr noundef @.str.3), !dbg !290
  call void @CWE416_Use_After_Free__malloc_free_long_03_good(), !dbg !291
  call void @printLine(ptr noundef @.str.4), !dbg !292
  call void @printLine(ptr noundef @.str.5), !dbg !293
  call void @CWE416_Use_After_Free__malloc_free_long_03_bad(), !dbg !294
  call void @printLine(ptr noundef @.str.6), !dbg !295
  ret i32 0, !dbg !296
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !297 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !298, metadata !DIExpression()), !dbg !299
  store ptr null, ptr %data, align 8, !dbg !300
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !301
  store ptr %call, ptr %data, align 8, !dbg !304
  %0 = load ptr, ptr %data, align 8, !dbg !305
  %cmp = icmp eq ptr %0, null, !dbg !307
  br i1 %cmp, label %if.then, label %if.end, !dbg !308

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !309
  unreachable, !dbg !309

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %i, metadata !311, metadata !DIExpression()), !dbg !313
  store i64 0, ptr %i, align 8, !dbg !314
  br label %for.cond, !dbg !316

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !317
  %cmp1 = icmp ult i64 %1, 100, !dbg !319
  br i1 %cmp1, label %for.body, label %for.end, !dbg !320

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !321
  %3 = load i64, ptr %i, align 8, !dbg !323
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !321
  store i64 5, ptr %arrayidx, align 8, !dbg !324
  br label %for.inc, !dbg !325

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !326
  %inc = add i64 %4, 1, !dbg !326
  store i64 %inc, ptr %i, align 8, !dbg !326
  br label %for.cond, !dbg !327, !llvm.loop !328

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !330
  call void @free(ptr noundef %5) #7, !dbg !331
  ret void, !dbg !332
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !333 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !334, metadata !DIExpression()), !dbg !335
  store ptr null, ptr %data, align 8, !dbg !336
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !337
  store ptr %call, ptr %data, align 8, !dbg !340
  %0 = load ptr, ptr %data, align 8, !dbg !341
  %cmp = icmp eq ptr %0, null, !dbg !343
  br i1 %cmp, label %if.then, label %if.end, !dbg !344

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !345
  unreachable, !dbg !345

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %i, metadata !347, metadata !DIExpression()), !dbg !349
  store i64 0, ptr %i, align 8, !dbg !350
  br label %for.cond, !dbg !352

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !353
  %cmp1 = icmp ult i64 %1, 100, !dbg !355
  br i1 %cmp1, label %for.body, label %for.end, !dbg !356

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !357
  %3 = load i64, ptr %i, align 8, !dbg !359
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !357
  store i64 5, ptr %arrayidx, align 8, !dbg !360
  br label %for.inc, !dbg !361

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !362
  %inc = add i64 %4, 1, !dbg !362
  store i64 %inc, ptr %i, align 8, !dbg !362
  br label %for.cond, !dbg !363, !llvm.loop !364

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !366
  call void @free(ptr noundef %5) #7, !dbg !367
  ret void, !dbg !368
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !369 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !370, metadata !DIExpression()), !dbg !371
  store ptr null, ptr %data, align 8, !dbg !372
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !373
  store ptr %call, ptr %data, align 8, !dbg !376
  %0 = load ptr, ptr %data, align 8, !dbg !377
  %cmp = icmp eq ptr %0, null, !dbg !379
  br i1 %cmp, label %if.then, label %if.end, !dbg !380

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !381
  unreachable, !dbg !381

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %i, metadata !383, metadata !DIExpression()), !dbg !385
  store i64 0, ptr %i, align 8, !dbg !386
  br label %for.cond, !dbg !388

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !389
  %cmp1 = icmp ult i64 %1, 100, !dbg !391
  br i1 %cmp1, label %for.body, label %for.end, !dbg !392

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !393
  %3 = load i64, ptr %i, align 8, !dbg !395
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !393
  store i64 5, ptr %arrayidx, align 8, !dbg !396
  br label %for.inc, !dbg !397

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !398
  %inc = add i64 %4, 1, !dbg !398
  store i64 %inc, ptr %i, align 8, !dbg !398
  br label %for.cond, !dbg !399, !llvm.loop !400

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !402
  %arrayidx2 = getelementptr inbounds i64, ptr %5, i64 0, !dbg !402
  %6 = load i64, ptr %arrayidx2, align 8, !dbg !402
  %7 = inttoptr i64 %6 to ptr, !dbg !402
  %call3 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !405
  ret void, !dbg !406
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !407 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !408, metadata !DIExpression()), !dbg !409
  store ptr null, ptr %data, align 8, !dbg !410
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !411
  store ptr %call, ptr %data, align 8, !dbg !414
  %0 = load ptr, ptr %data, align 8, !dbg !415
  %cmp = icmp eq ptr %0, null, !dbg !417
  br i1 %cmp, label %if.then, label %if.end, !dbg !418

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !419
  unreachable, !dbg !419

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %i, metadata !421, metadata !DIExpression()), !dbg !423
  store i64 0, ptr %i, align 8, !dbg !424
  br label %for.cond, !dbg !426

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !427
  %cmp1 = icmp ult i64 %1, 100, !dbg !429
  br i1 %cmp1, label %for.body, label %for.end, !dbg !430

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !431
  %3 = load i64, ptr %i, align 8, !dbg !433
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !431
  store i64 5, ptr %arrayidx, align 8, !dbg !434
  br label %for.inc, !dbg !435

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !436
  %inc = add i64 %4, 1, !dbg !436
  store i64 %inc, ptr %i, align 8, !dbg !436
  br label %for.cond, !dbg !437, !llvm.loop !438

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !440
  %arrayidx2 = getelementptr inbounds i64, ptr %5, i64 0, !dbg !440
  %6 = load i64, ptr %arrayidx2, align 8, !dbg !440
  %7 = inttoptr i64 %6 to ptr, !dbg !440
  %call3 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !443
  ret void, !dbg !444
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!38}
!llvm.module.flags = !{!46, !47, !48, !49, !50, !51, !52}
!llvm.ident = !{!53}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 199, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tuaf/CWE416_Use_After_Free__malloc_free_long_03.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "756a948d551f6e3874eeef3e78ab5409")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 18)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 201, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 16)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 204, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 17)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 206, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 15)
!38 = distinct !DICompileUnit(language: DW_LANG_C11, file: !39, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !40, globals: !45, splitDebugInlining: false, nameTableKind: None)
!39 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_long_03.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "756a948d551f6e3874eeef3e78ab5409")
!40 = !{!41, !42, !44}
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64)
!43 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!44 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!45 = !{!0, !7, !12, !17, !23, !28, !33}
!46 = !{i32 7, !"Dwarf Version", i32 5}
!47 = !{i32 2, !"Debug Info Version", i32 3}
!48 = !{i32 1, !"wchar_size", i32 4}
!49 = !{i32 8, !"PIC Level", i32 2}
!50 = !{i32 7, !"PIE Level", i32 2}
!51 = !{i32 7, !"uwtable", i32 2}
!52 = !{i32 7, !"frame-pointer", i32 2}
!53 = !{!"clang version 16.0.0"}
!54 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !55, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!55 = !DISubroutineType(types: !56)
!56 = !{null, !41, !41}
!57 = !{}
!58 = !DILocalVariable(name: "p", arg: 1, scope: !54, file: !2, line: 4, type: !41)
!59 = !DILocation(line: 4, column: 22, scope: !54)
!60 = !DILocalVariable(name: "q", arg: 2, scope: !54, file: !2, line: 4, type: !41)
!61 = !DILocation(line: 4, column: 31, scope: !54)
!62 = !DILocation(line: 5, column: 3, scope: !54)
!63 = !DILocation(line: 6, column: 1, scope: !54)
!64 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !55, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!65 = !DILocalVariable(name: "p", arg: 1, scope: !64, file: !2, line: 8, type: !41)
!66 = !DILocation(line: 8, column: 25, scope: !64)
!67 = !DILocalVariable(name: "q", arg: 2, scope: !64, file: !2, line: 8, type: !41)
!68 = !DILocation(line: 8, column: 34, scope: !64)
!69 = !DILocation(line: 9, column: 3, scope: !64)
!70 = !DILocation(line: 10, column: 1, scope: !64)
!71 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !55, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!72 = !DILocalVariable(name: "p", arg: 1, scope: !71, file: !2, line: 12, type: !41)
!73 = !DILocation(line: 12, column: 21, scope: !71)
!74 = !DILocalVariable(name: "q", arg: 2, scope: !71, file: !2, line: 12, type: !41)
!75 = !DILocation(line: 12, column: 30, scope: !71)
!76 = !DILocation(line: 13, column: 3, scope: !71)
!77 = !DILocation(line: 14, column: 1, scope: !71)
!78 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !55, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!79 = !DILocalVariable(name: "p", arg: 1, scope: !78, file: !2, line: 16, type: !41)
!80 = !DILocation(line: 16, column: 20, scope: !78)
!81 = !DILocalVariable(name: "q", arg: 2, scope: !78, file: !2, line: 16, type: !41)
!82 = !DILocation(line: 16, column: 29, scope: !78)
!83 = !DILocation(line: 17, column: 3, scope: !78)
!84 = !DILocation(line: 18, column: 1, scope: !78)
!85 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !55, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!86 = !DILocalVariable(name: "p", arg: 1, scope: !85, file: !2, line: 20, type: !41)
!87 = !DILocation(line: 20, column: 34, scope: !85)
!88 = !DILocalVariable(name: "q", arg: 2, scope: !85, file: !2, line: 20, type: !41)
!89 = !DILocation(line: 20, column: 43, scope: !85)
!90 = !DILocation(line: 21, column: 3, scope: !85)
!91 = !DILocation(line: 22, column: 1, scope: !85)
!92 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !55, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!93 = !DILocalVariable(name: "p", arg: 1, scope: !92, file: !2, line: 24, type: !41)
!94 = !DILocation(line: 24, column: 33, scope: !92)
!95 = !DILocalVariable(name: "q", arg: 2, scope: !92, file: !2, line: 24, type: !41)
!96 = !DILocation(line: 24, column: 42, scope: !92)
!97 = !DILocation(line: 25, column: 3, scope: !92)
!98 = !DILocation(line: 26, column: 1, scope: !92)
!99 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !100, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!100 = !DISubroutineType(types: !101)
!101 = !{!41, !102}
!102 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!103 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !2, line: 29, type: !102)
!104 = !DILocation(line: 29, column: 22, scope: !99)
!105 = !DILocation(line: 30, column: 17, scope: !99)
!106 = !DILocation(line: 30, column: 10, scope: !99)
!107 = !DILocation(line: 30, column: 3, scope: !99)
!108 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !100, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!109 = !DILocalVariable(name: "n", arg: 1, scope: !108, file: !2, line: 33, type: !102)
!110 = !DILocation(line: 33, column: 28, scope: !108)
!111 = !DILocation(line: 34, column: 19, scope: !108)
!112 = !DILocation(line: 34, column: 12, scope: !108)
!113 = !DILocation(line: 34, column: 5, scope: !108)
!114 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !100, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!115 = !DILocalVariable(name: "n", arg: 1, scope: !114, file: !2, line: 37, type: !102)
!116 = !DILocation(line: 37, column: 21, scope: !114)
!117 = !DILocation(line: 38, column: 17, scope: !114)
!118 = !DILocation(line: 38, column: 10, scope: !114)
!119 = !DILocation(line: 38, column: 3, scope: !114)
!120 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !100, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!121 = !DILocalVariable(name: "n", arg: 1, scope: !120, file: !2, line: 41, type: !102)
!122 = !DILocation(line: 41, column: 21, scope: !120)
!123 = !DILocation(line: 42, column: 17, scope: !120)
!124 = !DILocation(line: 42, column: 10, scope: !120)
!125 = !DILocation(line: 42, column: 3, scope: !120)
!126 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !100, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!127 = !DILocalVariable(name: "n", arg: 1, scope: !126, file: !2, line: 45, type: !102)
!128 = !DILocation(line: 45, column: 21, scope: !126)
!129 = !DILocation(line: 46, column: 17, scope: !126)
!130 = !DILocation(line: 46, column: 10, scope: !126)
!131 = !DILocation(line: 46, column: 3, scope: !126)
!132 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !100, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!133 = !DILocalVariable(name: "n", arg: 1, scope: !132, file: !2, line: 49, type: !102)
!134 = !DILocation(line: 49, column: 21, scope: !132)
!135 = !DILocation(line: 50, column: 17, scope: !132)
!136 = !DILocation(line: 50, column: 10, scope: !132)
!137 = !DILocation(line: 50, column: 3, scope: !132)
!138 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !100, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!139 = !DILocalVariable(name: "n", arg: 1, scope: !138, file: !2, line: 53, type: !102)
!140 = !DILocation(line: 53, column: 21, scope: !138)
!141 = !DILocation(line: 54, column: 17, scope: !138)
!142 = !DILocation(line: 54, column: 10, scope: !138)
!143 = !DILocation(line: 54, column: 3, scope: !138)
!144 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !100, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!145 = !DILocalVariable(name: "n", arg: 1, scope: !144, file: !2, line: 57, type: !102)
!146 = !DILocation(line: 57, column: 18, scope: !144)
!147 = !DILocation(line: 58, column: 17, scope: !144)
!148 = !DILocation(line: 58, column: 10, scope: !144)
!149 = !DILocation(line: 58, column: 3, scope: !144)
!150 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !151, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!151 = !DISubroutineType(types: !152)
!152 = !{null, !102, !102}
!153 = !DILocalVariable(name: "id", arg: 1, scope: !150, file: !2, line: 67, type: !102)
!154 = !DILocation(line: 67, column: 20, scope: !150)
!155 = !DILocalVariable(name: "flags", arg: 2, scope: !150, file: !2, line: 67, type: !102)
!156 = !DILocation(line: 67, column: 28, scope: !150)
!157 = !DILocation(line: 68, column: 3, scope: !150)
!158 = !DILocation(line: 69, column: 1, scope: !150)
!159 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !160, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!160 = !DISubroutineType(types: !161)
!161 = !{null, !102, !162}
!162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!163 = !DILocalVariable(name: "thdid", arg: 1, scope: !159, file: !2, line: 79, type: !102)
!164 = !DILocation(line: 79, column: 21, scope: !159)
!165 = !DILocalVariable(name: "cxt", arg: 2, scope: !159, file: !2, line: 79, type: !162)
!166 = !DILocation(line: 79, column: 34, scope: !159)
!167 = !DILocation(line: 81, column: 1, scope: !159)
!168 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !160, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!169 = !DILocalVariable(name: "thdid", arg: 1, scope: !168, file: !2, line: 82, type: !102)
!170 = !DILocation(line: 82, column: 21, scope: !168)
!171 = !DILocalVariable(name: "cxt", arg: 2, scope: !168, file: !2, line: 82, type: !162)
!172 = !DILocation(line: 82, column: 33, scope: !168)
!173 = !DILocation(line: 84, column: 1, scope: !168)
!174 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !175, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!175 = !DISubroutineType(types: !176)
!176 = !{null, !102, !162, !162}
!177 = !DILocalVariable(name: "thdid", arg: 1, scope: !174, file: !2, line: 85, type: !102)
!178 = !DILocation(line: 85, column: 26, scope: !174)
!179 = !DILocalVariable(name: "cxt", arg: 2, scope: !174, file: !2, line: 85, type: !162)
!180 = !DILocation(line: 85, column: 38, scope: !174)
!181 = !DILocalVariable(name: "lev", arg: 3, scope: !174, file: !2, line: 85, type: !162)
!182 = !DILocation(line: 85, column: 49, scope: !174)
!183 = !DILocation(line: 87, column: 1, scope: !174)
!184 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !185, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!185 = !DISubroutineType(types: !186)
!186 = !{null, !162}
!187 = !DILocalVariable(name: "lockname", arg: 1, scope: !184, file: !2, line: 89, type: !162)
!188 = !DILocation(line: 89, column: 17, scope: !184)
!189 = !DILocation(line: 91, column: 1, scope: !184)
!190 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !185, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!191 = !DILocalVariable(name: "str", arg: 1, scope: !190, file: !2, line: 93, type: !162)
!192 = !DILocation(line: 93, column: 18, scope: !190)
!193 = !DILocation(line: 94, column: 18, scope: !190)
!194 = !DILocation(line: 94, column: 3, scope: !190)
!195 = !DILocation(line: 95, column: 3, scope: !190)
!196 = !DILocation(line: 96, column: 3, scope: !190)
!197 = !DILocation(line: 97, column: 1, scope: !190)
!198 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !199, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!199 = !DISubroutineType(types: !200)
!200 = !{!41, !201}
!201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !102, size: 64)
!202 = !DILocalVariable(name: "p", arg: 1, scope: !198, file: !2, line: 100, type: !201)
!203 = !DILocation(line: 100, column: 24, scope: !198)
!204 = !DILocation(line: 101, column: 6, scope: !198)
!205 = !DILocation(line: 101, column: 8, scope: !198)
!206 = !DILocation(line: 102, column: 1, scope: !198)
!207 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !199, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!208 = !DILocalVariable(name: "p", arg: 1, scope: !207, file: !2, line: 104, type: !201)
!209 = !DILocation(line: 104, column: 20, scope: !207)
!210 = !DILocation(line: 105, column: 6, scope: !207)
!211 = !DILocation(line: 105, column: 8, scope: !207)
!212 = !DILocation(line: 106, column: 1, scope: !207)
!213 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !199, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!214 = !DILocalVariable(name: "p", arg: 1, scope: !213, file: !2, line: 110, type: !201)
!215 = !DILocation(line: 110, column: 22, scope: !213)
!216 = !DILocation(line: 111, column: 10, scope: !213)
!217 = !DILocation(line: 111, column: 5, scope: !213)
!218 = !DILocation(line: 112, column: 1, scope: !213)
!219 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !199, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!220 = !DILocalVariable(name: "p", arg: 1, scope: !219, file: !2, line: 115, type: !201)
!221 = !DILocation(line: 115, column: 24, scope: !219)
!222 = !DILocation(line: 116, column: 10, scope: !219)
!223 = !DILocation(line: 116, column: 5, scope: !219)
!224 = !DILocation(line: 117, column: 1, scope: !219)
!225 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !226, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!226 = !DISubroutineType(types: !227)
!227 = !{null}
!228 = !DILocation(line: 135, column: 20, scope: !225)
!229 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_long_03_bad", scope: !19, file: !19, line: 24, type: !226, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!230 = !DILocalVariable(name: "data", scope: !229, file: !19, line: 26, type: !42)
!231 = !DILocation(line: 26, column: 12, scope: !229)
!232 = !DILocation(line: 28, column: 10, scope: !229)
!233 = !DILocation(line: 31, column: 24, scope: !234)
!234 = distinct !DILexicalBlock(scope: !235, file: !19, line: 30, column: 5)
!235 = distinct !DILexicalBlock(scope: !229, file: !19, line: 29, column: 8)
!236 = !DILocation(line: 31, column: 14, scope: !234)
!237 = !DILocation(line: 32, column: 13, scope: !238)
!238 = distinct !DILexicalBlock(scope: !234, file: !19, line: 32, column: 13)
!239 = !DILocation(line: 32, column: 18, scope: !238)
!240 = !DILocation(line: 32, column: 13, scope: !234)
!241 = !DILocation(line: 32, column: 28, scope: !242)
!242 = distinct !DILexicalBlock(scope: !238, file: !19, line: 32, column: 27)
!243 = !DILocalVariable(name: "i", scope: !244, file: !19, line: 34, type: !245)
!244 = distinct !DILexicalBlock(scope: !234, file: !19, line: 33, column: 9)
!245 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !246, line: 46, baseType: !247)
!246 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!247 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!248 = !DILocation(line: 34, column: 20, scope: !244)
!249 = !DILocation(line: 35, column: 19, scope: !250)
!250 = distinct !DILexicalBlock(scope: !244, file: !19, line: 35, column: 13)
!251 = !DILocation(line: 35, column: 17, scope: !250)
!252 = !DILocation(line: 35, column: 24, scope: !253)
!253 = distinct !DILexicalBlock(scope: !250, file: !19, line: 35, column: 13)
!254 = !DILocation(line: 35, column: 26, scope: !253)
!255 = !DILocation(line: 35, column: 13, scope: !250)
!256 = !DILocation(line: 37, column: 17, scope: !257)
!257 = distinct !DILexicalBlock(scope: !253, file: !19, line: 36, column: 13)
!258 = !DILocation(line: 37, column: 22, scope: !257)
!259 = !DILocation(line: 37, column: 25, scope: !257)
!260 = !DILocation(line: 38, column: 13, scope: !257)
!261 = !DILocation(line: 35, column: 34, scope: !253)
!262 = !DILocation(line: 35, column: 13, scope: !253)
!263 = distinct !{!263, !255, !264, !265}
!264 = !DILocation(line: 38, column: 13, scope: !250)
!265 = !{!"llvm.loop.mustprogress"}
!266 = !DILocation(line: 41, column: 14, scope: !234)
!267 = !DILocation(line: 41, column: 9, scope: !234)
!268 = !DILocation(line: 46, column: 17, scope: !269)
!269 = distinct !DILexicalBlock(scope: !270, file: !19, line: 44, column: 5)
!270 = distinct !DILexicalBlock(scope: !229, file: !19, line: 43, column: 8)
!271 = !DILocation(line: 46, column: 9, scope: !269)
!272 = !DILocation(line: 49, column: 1, scope: !229)
!273 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_long_03_good", scope: !19, file: !19, line: 177, type: !226, scopeLine: 178, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!274 = !DILocation(line: 179, column: 5, scope: !273)
!275 = !DILocation(line: 180, column: 5, scope: !273)
!276 = !DILocation(line: 181, column: 5, scope: !273)
!277 = !DILocation(line: 182, column: 5, scope: !273)
!278 = !DILocation(line: 183, column: 1, scope: !273)
!279 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 194, type: !280, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!280 = !DISubroutineType(types: !281)
!281 = !{!102, !102, !282}
!282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !162, size: 64)
!283 = !DILocalVariable(name: "argc", arg: 1, scope: !279, file: !19, line: 194, type: !102)
!284 = !DILocation(line: 194, column: 14, scope: !279)
!285 = !DILocalVariable(name: "argv", arg: 2, scope: !279, file: !19, line: 194, type: !282)
!286 = !DILocation(line: 194, column: 27, scope: !279)
!287 = !DILocation(line: 197, column: 22, scope: !279)
!288 = !DILocation(line: 197, column: 12, scope: !279)
!289 = !DILocation(line: 197, column: 5, scope: !279)
!290 = !DILocation(line: 199, column: 5, scope: !279)
!291 = !DILocation(line: 200, column: 5, scope: !279)
!292 = !DILocation(line: 201, column: 5, scope: !279)
!293 = !DILocation(line: 204, column: 5, scope: !279)
!294 = !DILocation(line: 205, column: 5, scope: !279)
!295 = !DILocation(line: 206, column: 5, scope: !279)
!296 = !DILocation(line: 208, column: 5, scope: !279)
!297 = distinct !DISubprogram(name: "goodB2G1", scope: !19, file: !19, line: 56, type: !226, scopeLine: 57, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !57)
!298 = !DILocalVariable(name: "data", scope: !297, file: !19, line: 58, type: !42)
!299 = !DILocation(line: 58, column: 12, scope: !297)
!300 = !DILocation(line: 60, column: 10, scope: !297)
!301 = !DILocation(line: 63, column: 24, scope: !302)
!302 = distinct !DILexicalBlock(scope: !303, file: !19, line: 62, column: 5)
!303 = distinct !DILexicalBlock(scope: !297, file: !19, line: 61, column: 8)
!304 = !DILocation(line: 63, column: 14, scope: !302)
!305 = !DILocation(line: 64, column: 13, scope: !306)
!306 = distinct !DILexicalBlock(scope: !302, file: !19, line: 64, column: 13)
!307 = !DILocation(line: 64, column: 18, scope: !306)
!308 = !DILocation(line: 64, column: 13, scope: !302)
!309 = !DILocation(line: 64, column: 28, scope: !310)
!310 = distinct !DILexicalBlock(scope: !306, file: !19, line: 64, column: 27)
!311 = !DILocalVariable(name: "i", scope: !312, file: !19, line: 66, type: !245)
!312 = distinct !DILexicalBlock(scope: !302, file: !19, line: 65, column: 9)
!313 = !DILocation(line: 66, column: 20, scope: !312)
!314 = !DILocation(line: 67, column: 19, scope: !315)
!315 = distinct !DILexicalBlock(scope: !312, file: !19, line: 67, column: 13)
!316 = !DILocation(line: 67, column: 17, scope: !315)
!317 = !DILocation(line: 67, column: 24, scope: !318)
!318 = distinct !DILexicalBlock(scope: !315, file: !19, line: 67, column: 13)
!319 = !DILocation(line: 67, column: 26, scope: !318)
!320 = !DILocation(line: 67, column: 13, scope: !315)
!321 = !DILocation(line: 69, column: 17, scope: !322)
!322 = distinct !DILexicalBlock(scope: !318, file: !19, line: 68, column: 13)
!323 = !DILocation(line: 69, column: 22, scope: !322)
!324 = !DILocation(line: 69, column: 25, scope: !322)
!325 = !DILocation(line: 70, column: 13, scope: !322)
!326 = !DILocation(line: 67, column: 34, scope: !318)
!327 = !DILocation(line: 67, column: 13, scope: !318)
!328 = distinct !{!328, !320, !329, !265}
!329 = !DILocation(line: 70, column: 13, scope: !315)
!330 = !DILocation(line: 73, column: 14, scope: !302)
!331 = !DILocation(line: 73, column: 9, scope: !302)
!332 = !DILocation(line: 87, column: 1, scope: !297)
!333 = distinct !DISubprogram(name: "goodB2G2", scope: !19, file: !19, line: 90, type: !226, scopeLine: 91, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !57)
!334 = !DILocalVariable(name: "data", scope: !333, file: !19, line: 92, type: !42)
!335 = !DILocation(line: 92, column: 12, scope: !333)
!336 = !DILocation(line: 94, column: 10, scope: !333)
!337 = !DILocation(line: 97, column: 24, scope: !338)
!338 = distinct !DILexicalBlock(scope: !339, file: !19, line: 96, column: 5)
!339 = distinct !DILexicalBlock(scope: !333, file: !19, line: 95, column: 8)
!340 = !DILocation(line: 97, column: 14, scope: !338)
!341 = !DILocation(line: 98, column: 13, scope: !342)
!342 = distinct !DILexicalBlock(scope: !338, file: !19, line: 98, column: 13)
!343 = !DILocation(line: 98, column: 18, scope: !342)
!344 = !DILocation(line: 98, column: 13, scope: !338)
!345 = !DILocation(line: 98, column: 28, scope: !346)
!346 = distinct !DILexicalBlock(scope: !342, file: !19, line: 98, column: 27)
!347 = !DILocalVariable(name: "i", scope: !348, file: !19, line: 100, type: !245)
!348 = distinct !DILexicalBlock(scope: !338, file: !19, line: 99, column: 9)
!349 = !DILocation(line: 100, column: 20, scope: !348)
!350 = !DILocation(line: 101, column: 19, scope: !351)
!351 = distinct !DILexicalBlock(scope: !348, file: !19, line: 101, column: 13)
!352 = !DILocation(line: 101, column: 17, scope: !351)
!353 = !DILocation(line: 101, column: 24, scope: !354)
!354 = distinct !DILexicalBlock(scope: !351, file: !19, line: 101, column: 13)
!355 = !DILocation(line: 101, column: 26, scope: !354)
!356 = !DILocation(line: 101, column: 13, scope: !351)
!357 = !DILocation(line: 103, column: 17, scope: !358)
!358 = distinct !DILexicalBlock(scope: !354, file: !19, line: 102, column: 13)
!359 = !DILocation(line: 103, column: 22, scope: !358)
!360 = !DILocation(line: 103, column: 25, scope: !358)
!361 = !DILocation(line: 104, column: 13, scope: !358)
!362 = !DILocation(line: 101, column: 34, scope: !354)
!363 = !DILocation(line: 101, column: 13, scope: !354)
!364 = distinct !{!364, !356, !365, !265}
!365 = !DILocation(line: 104, column: 13, scope: !351)
!366 = !DILocation(line: 107, column: 14, scope: !338)
!367 = !DILocation(line: 107, column: 9, scope: !338)
!368 = !DILocation(line: 116, column: 1, scope: !333)
!369 = distinct !DISubprogram(name: "goodG2B1", scope: !19, file: !19, line: 119, type: !226, scopeLine: 120, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !57)
!370 = !DILocalVariable(name: "data", scope: !369, file: !19, line: 121, type: !42)
!371 = !DILocation(line: 121, column: 12, scope: !369)
!372 = !DILocation(line: 123, column: 10, scope: !369)
!373 = !DILocation(line: 131, column: 24, scope: !374)
!374 = distinct !DILexicalBlock(scope: !375, file: !19, line: 130, column: 5)
!375 = distinct !DILexicalBlock(scope: !369, file: !19, line: 124, column: 8)
!376 = !DILocation(line: 131, column: 14, scope: !374)
!377 = !DILocation(line: 132, column: 13, scope: !378)
!378 = distinct !DILexicalBlock(scope: !374, file: !19, line: 132, column: 13)
!379 = !DILocation(line: 132, column: 18, scope: !378)
!380 = !DILocation(line: 132, column: 13, scope: !374)
!381 = !DILocation(line: 132, column: 28, scope: !382)
!382 = distinct !DILexicalBlock(scope: !378, file: !19, line: 132, column: 27)
!383 = !DILocalVariable(name: "i", scope: !384, file: !19, line: 134, type: !245)
!384 = distinct !DILexicalBlock(scope: !374, file: !19, line: 133, column: 9)
!385 = !DILocation(line: 134, column: 20, scope: !384)
!386 = !DILocation(line: 135, column: 19, scope: !387)
!387 = distinct !DILexicalBlock(scope: !384, file: !19, line: 135, column: 13)
!388 = !DILocation(line: 135, column: 17, scope: !387)
!389 = !DILocation(line: 135, column: 24, scope: !390)
!390 = distinct !DILexicalBlock(scope: !387, file: !19, line: 135, column: 13)
!391 = !DILocation(line: 135, column: 26, scope: !390)
!392 = !DILocation(line: 135, column: 13, scope: !387)
!393 = !DILocation(line: 137, column: 17, scope: !394)
!394 = distinct !DILexicalBlock(scope: !390, file: !19, line: 136, column: 13)
!395 = !DILocation(line: 137, column: 22, scope: !394)
!396 = !DILocation(line: 137, column: 25, scope: !394)
!397 = !DILocation(line: 138, column: 13, scope: !394)
!398 = !DILocation(line: 135, column: 34, scope: !390)
!399 = !DILocation(line: 135, column: 13, scope: !390)
!400 = distinct !{!400, !392, !401, !265}
!401 = !DILocation(line: 138, column: 13, scope: !387)
!402 = !DILocation(line: 145, column: 21, scope: !403)
!403 = distinct !DILexicalBlock(scope: !404, file: !19, line: 143, column: 5)
!404 = distinct !DILexicalBlock(scope: !369, file: !19, line: 142, column: 8)
!405 = !DILocation(line: 145, column: 9, scope: !403)
!406 = !DILocation(line: 148, column: 1, scope: !369)
!407 = distinct !DISubprogram(name: "goodG2B2", scope: !19, file: !19, line: 151, type: !226, scopeLine: 152, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !57)
!408 = !DILocalVariable(name: "data", scope: !407, file: !19, line: 153, type: !42)
!409 = !DILocation(line: 153, column: 12, scope: !407)
!410 = !DILocation(line: 155, column: 10, scope: !407)
!411 = !DILocation(line: 158, column: 24, scope: !412)
!412 = distinct !DILexicalBlock(scope: !413, file: !19, line: 157, column: 5)
!413 = distinct !DILexicalBlock(scope: !407, file: !19, line: 156, column: 8)
!414 = !DILocation(line: 158, column: 14, scope: !412)
!415 = !DILocation(line: 159, column: 13, scope: !416)
!416 = distinct !DILexicalBlock(scope: !412, file: !19, line: 159, column: 13)
!417 = !DILocation(line: 159, column: 18, scope: !416)
!418 = !DILocation(line: 159, column: 13, scope: !412)
!419 = !DILocation(line: 159, column: 28, scope: !420)
!420 = distinct !DILexicalBlock(scope: !416, file: !19, line: 159, column: 27)
!421 = !DILocalVariable(name: "i", scope: !422, file: !19, line: 161, type: !245)
!422 = distinct !DILexicalBlock(scope: !412, file: !19, line: 160, column: 9)
!423 = !DILocation(line: 161, column: 20, scope: !422)
!424 = !DILocation(line: 162, column: 19, scope: !425)
!425 = distinct !DILexicalBlock(scope: !422, file: !19, line: 162, column: 13)
!426 = !DILocation(line: 162, column: 17, scope: !425)
!427 = !DILocation(line: 162, column: 24, scope: !428)
!428 = distinct !DILexicalBlock(scope: !425, file: !19, line: 162, column: 13)
!429 = !DILocation(line: 162, column: 26, scope: !428)
!430 = !DILocation(line: 162, column: 13, scope: !425)
!431 = !DILocation(line: 164, column: 17, scope: !432)
!432 = distinct !DILexicalBlock(scope: !428, file: !19, line: 163, column: 13)
!433 = !DILocation(line: 164, column: 22, scope: !432)
!434 = !DILocation(line: 164, column: 25, scope: !432)
!435 = !DILocation(line: 165, column: 13, scope: !432)
!436 = !DILocation(line: 162, column: 34, scope: !428)
!437 = !DILocation(line: 162, column: 13, scope: !428)
!438 = distinct !{!438, !430, !439, !265}
!439 = !DILocation(line: 165, column: 13, scope: !425)
!440 = !DILocation(line: 172, column: 21, scope: !441)
!441 = distinct !DILexicalBlock(scope: !442, file: !19, line: 170, column: 5)
!442 = distinct !DILexicalBlock(scope: !407, file: !19, line: 169, column: 8)
!443 = !DILocation(line: 172, column: 9, scope: !441)
!444 = !DILocation(line: 175, column: 1, scope: !407)
