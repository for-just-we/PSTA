; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tuaf/CWE416_Use_After_Free__return_freed_ptr_07.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__return_freed_ptr_07.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@staticFive = internal global i32 5, align 4, !dbg !0
@.str = private unnamed_addr constant [8 x i8] c"BadSink\00", align 1, !dbg !10
@.str.1 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !16
@.str.2 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !21
@.str.3 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !26
@.str.4 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !31
@.str.5 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !36
@.str.6 = private unnamed_addr constant [9 x i8] c"GoodSink\00", align 1, !dbg !41

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__return_freed_ptr_07_bad() #0 !dbg !55 {
entry:
  %reversedString = alloca ptr, align 8
  %0 = load i32, ptr @staticFive, align 4, !dbg !59
  %cmp = icmp eq i32 %0, 5, !dbg !61
  br i1 %cmp, label %if.then, label %if.end, !dbg !62

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !63, metadata !DIExpression()), !dbg !66
  %call = call ptr @helperBad(ptr noundef @.str), !dbg !67
  store ptr %call, ptr %reversedString, align 8, !dbg !66
  %1 = load ptr, ptr %reversedString, align 8, !dbg !68
  %call1 = call i32 (ptr, ...) @UAFFUNC(ptr noundef %1), !dbg !69
  br label %if.end, !dbg !70

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !71
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @helperBad(ptr noundef %aString) #0 !dbg !72 {
entry:
  %retval = alloca ptr, align 8
  %aString.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %reversedString = alloca ptr, align 8
  store ptr %aString, ptr %aString.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %aString.addr, metadata !75, metadata !DIExpression()), !dbg !76
  call void @llvm.dbg.declare(metadata ptr %i, metadata !77, metadata !DIExpression()), !dbg !81
  store i64 0, ptr %i, align 8, !dbg !81
  call void @llvm.dbg.declare(metadata ptr %j, metadata !82, metadata !DIExpression()), !dbg !83
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !84, metadata !DIExpression()), !dbg !85
  store ptr null, ptr %reversedString, align 8, !dbg !85
  %0 = load ptr, ptr %aString.addr, align 8, !dbg !86
  %cmp = icmp ne ptr %0, null, !dbg !88
  br i1 %cmp, label %if.then, label %if.else, !dbg !89

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %aString.addr, align 8, !dbg !90
  %call = call i64 @strlen(ptr noundef %1) #6, !dbg !92
  store i64 %call, ptr %i, align 8, !dbg !93
  %2 = load i64, ptr %i, align 8, !dbg !94
  %add = add i64 %2, 1, !dbg !95
  %call1 = call i32 (i64, ...) @SAFEMALLOC(i64 noundef %add), !dbg !96
  %conv = sext i32 %call1 to i64, !dbg !97
  %3 = inttoptr i64 %conv to ptr, !dbg !97
  store ptr %3, ptr %reversedString, align 8, !dbg !98
  %4 = load ptr, ptr %reversedString, align 8, !dbg !99
  %cmp2 = icmp eq ptr %4, null, !dbg !101
  br i1 %cmp2, label %if.then4, label %if.end, !dbg !102

if.then4:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #7, !dbg !103
  unreachable, !dbg !103

if.end:                                           ; preds = %if.then
  store i64 0, ptr %j, align 8, !dbg !105
  br label %for.cond, !dbg !107

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i64, ptr %j, align 8, !dbg !108
  %6 = load i64, ptr %i, align 8, !dbg !110
  %cmp5 = icmp ult i64 %5, %6, !dbg !111
  br i1 %cmp5, label %for.body, label %for.end, !dbg !112

for.body:                                         ; preds = %for.cond
  %7 = load ptr, ptr %aString.addr, align 8, !dbg !113
  %8 = load i64, ptr %i, align 8, !dbg !115
  %9 = load i64, ptr %j, align 8, !dbg !116
  %sub = sub i64 %8, %9, !dbg !117
  %sub7 = sub i64 %sub, 1, !dbg !118
  %arrayidx = getelementptr inbounds i8, ptr %7, i64 %sub7, !dbg !113
  %10 = load i8, ptr %arrayidx, align 1, !dbg !113
  %11 = load ptr, ptr %reversedString, align 8, !dbg !119
  %12 = load i64, ptr %j, align 8, !dbg !120
  %arrayidx8 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !119
  store i8 %10, ptr %arrayidx8, align 1, !dbg !121
  br label %for.inc, !dbg !122

for.inc:                                          ; preds = %for.body
  %13 = load i64, ptr %j, align 8, !dbg !123
  %inc = add i64 %13, 1, !dbg !123
  store i64 %inc, ptr %j, align 8, !dbg !123
  br label %for.cond, !dbg !124, !llvm.loop !125

for.end:                                          ; preds = %for.cond
  %14 = load ptr, ptr %reversedString, align 8, !dbg !128
  %15 = load i64, ptr %i, align 8, !dbg !129
  %arrayidx9 = getelementptr inbounds i8, ptr %14, i64 %15, !dbg !128
  store i8 0, ptr %arrayidx9, align 1, !dbg !130
  %16 = load ptr, ptr %reversedString, align 8, !dbg !131
  call void @free(ptr noundef %16) #8, !dbg !132
  %17 = load ptr, ptr %reversedString, align 8, !dbg !133
  store ptr %17, ptr %retval, align 8, !dbg !134
  br label %return, !dbg !134

if.else:                                          ; preds = %entry
  store ptr null, ptr %retval, align 8, !dbg !135
  br label %return, !dbg !135

return:                                           ; preds = %if.else, %for.end
  %18 = load ptr, ptr %retval, align 8, !dbg !137
  ret ptr %18, !dbg !137
}

declare i32 @UAFFUNC(...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__return_freed_ptr_07_good() #0 !dbg !138 {
entry:
  call void @good1(), !dbg !139
  call void @good2(), !dbg !140
  ret void, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !142 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !146, metadata !DIExpression()), !dbg !147
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !148, metadata !DIExpression()), !dbg !149
  %call = call i64 @time(ptr noundef null) #8, !dbg !150
  %conv = trunc i64 %call to i32, !dbg !151
  call void @srand(i32 noundef %conv) #8, !dbg !152
  call void @printLine(ptr noundef @.str.1), !dbg !153
  call void @CWE416_Use_After_Free__return_freed_ptr_07_good(), !dbg !154
  call void @printLine(ptr noundef @.str.2), !dbg !155
  call void @printLine(ptr noundef @.str.3), !dbg !156
  call void @CWE416_Use_After_Free__return_freed_ptr_07_bad(), !dbg !157
  call void @printLine(ptr noundef @.str.4), !dbg !158
  ret i32 0, !dbg !159
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #3

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #3

declare void @printLine(ptr noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #4

declare i32 @SAFEMALLOC(...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: nounwind
declare void @free(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @good1() #0 !dbg !160 {
entry:
  %reversedString = alloca ptr, align 8
  %0 = load i32, ptr @staticFive, align 4, !dbg !161
  %cmp = icmp ne i32 %0, 5, !dbg !163
  br i1 %cmp, label %if.then, label %if.else, !dbg !164

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.5), !dbg !165
  br label %if.end, !dbg !167

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !168, metadata !DIExpression()), !dbg !171
  %call = call ptr @helperGood(ptr noundef @.str.6), !dbg !172
  store ptr %call, ptr %reversedString, align 8, !dbg !171
  %1 = load ptr, ptr %reversedString, align 8, !dbg !173
  %call1 = call i32 (ptr, ...) @SAFEUAFFUNC(ptr noundef %1), !dbg !174
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !175
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @helperGood(ptr noundef %aString) #0 !dbg !176 {
entry:
  %retval = alloca ptr, align 8
  %aString.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %reversedString = alloca ptr, align 8
  store ptr %aString, ptr %aString.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %aString.addr, metadata !177, metadata !DIExpression()), !dbg !178
  call void @llvm.dbg.declare(metadata ptr %i, metadata !179, metadata !DIExpression()), !dbg !180
  store i64 0, ptr %i, align 8, !dbg !180
  call void @llvm.dbg.declare(metadata ptr %j, metadata !181, metadata !DIExpression()), !dbg !182
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !183, metadata !DIExpression()), !dbg !184
  store ptr null, ptr %reversedString, align 8, !dbg !184
  %0 = load ptr, ptr %aString.addr, align 8, !dbg !185
  %cmp = icmp ne ptr %0, null, !dbg !187
  br i1 %cmp, label %if.then, label %if.else, !dbg !188

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %aString.addr, align 8, !dbg !189
  %call = call i64 @strlen(ptr noundef %1) #6, !dbg !191
  store i64 %call, ptr %i, align 8, !dbg !192
  %2 = load i64, ptr %i, align 8, !dbg !193
  %add = add i64 %2, 1, !dbg !194
  %call1 = call i32 (i64, ...) @SAFEMALLOC(i64 noundef %add), !dbg !195
  %conv = sext i32 %call1 to i64, !dbg !196
  %3 = inttoptr i64 %conv to ptr, !dbg !196
  store ptr %3, ptr %reversedString, align 8, !dbg !197
  %4 = load ptr, ptr %reversedString, align 8, !dbg !198
  %cmp2 = icmp eq ptr %4, null, !dbg !200
  br i1 %cmp2, label %if.then4, label %if.end, !dbg !201

if.then4:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #7, !dbg !202
  unreachable, !dbg !202

if.end:                                           ; preds = %if.then
  store i64 0, ptr %j, align 8, !dbg !204
  br label %for.cond, !dbg !206

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i64, ptr %j, align 8, !dbg !207
  %6 = load i64, ptr %i, align 8, !dbg !209
  %cmp5 = icmp ult i64 %5, %6, !dbg !210
  br i1 %cmp5, label %for.body, label %for.end, !dbg !211

for.body:                                         ; preds = %for.cond
  %7 = load ptr, ptr %aString.addr, align 8, !dbg !212
  %8 = load i64, ptr %i, align 8, !dbg !214
  %9 = load i64, ptr %j, align 8, !dbg !215
  %sub = sub i64 %8, %9, !dbg !216
  %sub7 = sub i64 %sub, 1, !dbg !217
  %arrayidx = getelementptr inbounds i8, ptr %7, i64 %sub7, !dbg !212
  %10 = load i8, ptr %arrayidx, align 1, !dbg !212
  %11 = load ptr, ptr %reversedString, align 8, !dbg !218
  %12 = load i64, ptr %j, align 8, !dbg !219
  %arrayidx8 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !218
  store i8 %10, ptr %arrayidx8, align 1, !dbg !220
  br label %for.inc, !dbg !221

for.inc:                                          ; preds = %for.body
  %13 = load i64, ptr %j, align 8, !dbg !222
  %inc = add i64 %13, 1, !dbg !222
  store i64 %inc, ptr %j, align 8, !dbg !222
  br label %for.cond, !dbg !223, !llvm.loop !224

for.end:                                          ; preds = %for.cond
  %14 = load ptr, ptr %reversedString, align 8, !dbg !226
  %15 = load i64, ptr %i, align 8, !dbg !227
  %arrayidx9 = getelementptr inbounds i8, ptr %14, i64 %15, !dbg !226
  store i8 0, ptr %arrayidx9, align 1, !dbg !228
  %16 = load ptr, ptr %reversedString, align 8, !dbg !229
  store ptr %16, ptr %retval, align 8, !dbg !230
  br label %return, !dbg !230

if.else:                                          ; preds = %entry
  store ptr null, ptr %retval, align 8, !dbg !231
  br label %return, !dbg !231

return:                                           ; preds = %if.else, %for.end
  %17 = load ptr, ptr %retval, align 8, !dbg !233
  ret ptr %17, !dbg !233
}

declare i32 @SAFEUAFFUNC(...) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @good2() #0 !dbg !234 {
entry:
  %reversedString = alloca ptr, align 8
  %0 = load i32, ptr @staticFive, align 4, !dbg !235
  %cmp = icmp eq i32 %0, 5, !dbg !237
  br i1 %cmp, label %if.then, label %if.end, !dbg !238

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !239, metadata !DIExpression()), !dbg !242
  %call = call ptr @helperGood(ptr noundef @.str.6), !dbg !243
  store ptr %call, ptr %reversedString, align 8, !dbg !242
  %1 = load ptr, ptr %reversedString, align 8, !dbg !244
  %call1 = call i32 (ptr, ...) @SAFEUAFFUNC(ptr noundef %1), !dbg !245
  br label %if.end, !dbg !246

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !247
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind willreturn memory(read) }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!47, !48, !49, !50, !51, !52, !53}
!llvm.ident = !{!54}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "staticFive", scope: !2, file: !12, line: 70, type: !46, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !4, globals: !9, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__return_freed_ptr_07.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "9b16ab11c57f7a26b0fdcc350c3d1729")
!4 = !{!5, !6, !7}
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !{!10, !16, !21, !26, !31, !0, !36, !41}
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(scope: null, file: !12, line: 80, type: !13, isLocal: true, isDefinition: true)
!12 = !DIFile(filename: "src/tuaf/CWE416_Use_After_Free__return_freed_ptr_07.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "9b16ab11c57f7a26b0fdcc350c3d1729")
!13 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !14)
!14 = !{!15}
!15 = !DISubrange(count: 8)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(scope: null, file: !12, line: 153, type: !18, isLocal: true, isDefinition: true)
!18 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 144, elements: !19)
!19 = !{!20}
!20 = !DISubrange(count: 18)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(scope: null, file: !12, line: 155, type: !23, isLocal: true, isDefinition: true)
!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !24)
!24 = !{!25}
!25 = !DISubrange(count: 16)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(scope: null, file: !12, line: 158, type: !28, isLocal: true, isDefinition: true)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 136, elements: !29)
!29 = !{!30}
!30 = !DISubrange(count: 17)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(scope: null, file: !12, line: 160, type: !33, isLocal: true, isDefinition: true)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 120, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 15)
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(scope: null, file: !12, line: 100, type: !38, isLocal: true, isDefinition: true)
!38 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 168, elements: !39)
!39 = !{!40}
!40 = !DISubrange(count: 21)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(scope: null, file: !12, line: 106, type: !43, isLocal: true, isDefinition: true)
!43 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 72, elements: !44)
!44 = !{!45}
!45 = !DISubrange(count: 9)
!46 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!47 = !{i32 7, !"Dwarf Version", i32 5}
!48 = !{i32 2, !"Debug Info Version", i32 3}
!49 = !{i32 1, !"wchar_size", i32 4}
!50 = !{i32 8, !"PIC Level", i32 2}
!51 = !{i32 7, !"PIE Level", i32 2}
!52 = !{i32 7, !"uwtable", i32 2}
!53 = !{i32 7, !"frame-pointer", i32 2}
!54 = !{!"clang version 16.0.0"}
!55 = distinct !DISubprogram(name: "CWE416_Use_After_Free__return_freed_ptr_07_bad", scope: !12, file: !12, line: 74, type: !56, scopeLine: 75, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !58)
!56 = !DISubroutineType(types: !57)
!57 = !{null}
!58 = !{}
!59 = !DILocation(line: 76, column: 8, scope: !60)
!60 = distinct !DILexicalBlock(scope: !55, file: !12, line: 76, column: 8)
!61 = !DILocation(line: 76, column: 18, scope: !60)
!62 = !DILocation(line: 76, column: 8, scope: !55)
!63 = !DILocalVariable(name: "reversedString", scope: !64, file: !12, line: 80, type: !7)
!64 = distinct !DILexicalBlock(scope: !65, file: !12, line: 78, column: 9)
!65 = distinct !DILexicalBlock(scope: !60, file: !12, line: 77, column: 5)
!66 = !DILocation(line: 80, column: 20, scope: !64)
!67 = !DILocation(line: 80, column: 37, scope: !64)
!68 = !DILocation(line: 81, column: 21, scope: !64)
!69 = !DILocation(line: 81, column: 13, scope: !64)
!70 = !DILocation(line: 87, column: 5, scope: !65)
!71 = !DILocation(line: 88, column: 1, scope: !55)
!72 = distinct !DISubprogram(name: "helperBad", scope: !12, file: !12, line: 18, type: !73, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !58)
!73 = !DISubroutineType(types: !74)
!74 = !{!7, !7}
!75 = !DILocalVariable(name: "aString", arg: 1, scope: !72, file: !12, line: 18, type: !7)
!76 = !DILocation(line: 18, column: 32, scope: !72)
!77 = !DILocalVariable(name: "i", scope: !72, file: !12, line: 20, type: !78)
!78 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !79, line: 46, baseType: !80)
!79 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!80 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!81 = !DILocation(line: 20, column: 12, scope: !72)
!82 = !DILocalVariable(name: "j", scope: !72, file: !12, line: 21, type: !78)
!83 = !DILocation(line: 21, column: 12, scope: !72)
!84 = !DILocalVariable(name: "reversedString", scope: !72, file: !12, line: 22, type: !7)
!85 = !DILocation(line: 22, column: 12, scope: !72)
!86 = !DILocation(line: 23, column: 9, scope: !87)
!87 = distinct !DILexicalBlock(scope: !72, file: !12, line: 23, column: 9)
!88 = !DILocation(line: 23, column: 17, scope: !87)
!89 = !DILocation(line: 23, column: 9, scope: !72)
!90 = !DILocation(line: 25, column: 20, scope: !91)
!91 = distinct !DILexicalBlock(scope: !87, file: !12, line: 24, column: 5)
!92 = !DILocation(line: 25, column: 13, scope: !91)
!93 = !DILocation(line: 25, column: 11, scope: !91)
!94 = !DILocation(line: 26, column: 46, scope: !91)
!95 = !DILocation(line: 26, column: 47, scope: !91)
!96 = !DILocation(line: 26, column: 35, scope: !91)
!97 = !DILocation(line: 26, column: 26, scope: !91)
!98 = !DILocation(line: 26, column: 24, scope: !91)
!99 = !DILocation(line: 27, column: 13, scope: !100)
!100 = distinct !DILexicalBlock(scope: !91, file: !12, line: 27, column: 13)
!101 = !DILocation(line: 27, column: 28, scope: !100)
!102 = !DILocation(line: 27, column: 13, scope: !91)
!103 = !DILocation(line: 27, column: 38, scope: !104)
!104 = distinct !DILexicalBlock(scope: !100, file: !12, line: 27, column: 37)
!105 = !DILocation(line: 28, column: 16, scope: !106)
!106 = distinct !DILexicalBlock(scope: !91, file: !12, line: 28, column: 9)
!107 = !DILocation(line: 28, column: 14, scope: !106)
!108 = !DILocation(line: 28, column: 21, scope: !109)
!109 = distinct !DILexicalBlock(scope: !106, file: !12, line: 28, column: 9)
!110 = !DILocation(line: 28, column: 25, scope: !109)
!111 = !DILocation(line: 28, column: 23, scope: !109)
!112 = !DILocation(line: 28, column: 9, scope: !106)
!113 = !DILocation(line: 30, column: 33, scope: !114)
!114 = distinct !DILexicalBlock(scope: !109, file: !12, line: 29, column: 9)
!115 = !DILocation(line: 30, column: 41, scope: !114)
!116 = !DILocation(line: 30, column: 43, scope: !114)
!117 = !DILocation(line: 30, column: 42, scope: !114)
!118 = !DILocation(line: 30, column: 44, scope: !114)
!119 = !DILocation(line: 30, column: 13, scope: !114)
!120 = !DILocation(line: 30, column: 28, scope: !114)
!121 = !DILocation(line: 30, column: 31, scope: !114)
!122 = !DILocation(line: 31, column: 9, scope: !114)
!123 = !DILocation(line: 28, column: 29, scope: !109)
!124 = !DILocation(line: 28, column: 9, scope: !109)
!125 = distinct !{!125, !112, !126, !127}
!126 = !DILocation(line: 31, column: 9, scope: !106)
!127 = !{!"llvm.loop.mustprogress"}
!128 = !DILocation(line: 32, column: 9, scope: !91)
!129 = !DILocation(line: 32, column: 24, scope: !91)
!130 = !DILocation(line: 32, column: 27, scope: !91)
!131 = !DILocation(line: 34, column: 14, scope: !91)
!132 = !DILocation(line: 34, column: 9, scope: !91)
!133 = !DILocation(line: 35, column: 16, scope: !91)
!134 = !DILocation(line: 35, column: 9, scope: !91)
!135 = !DILocation(line: 39, column: 9, scope: !136)
!136 = distinct !DILexicalBlock(scope: !87, file: !12, line: 38, column: 5)
!137 = !DILocation(line: 41, column: 1, scope: !72)
!138 = distinct !DISubprogram(name: "CWE416_Use_After_Free__return_freed_ptr_07_good", scope: !12, file: !12, line: 133, type: !56, scopeLine: 134, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !58)
!139 = !DILocation(line: 135, column: 5, scope: !138)
!140 = !DILocation(line: 136, column: 5, scope: !138)
!141 = !DILocation(line: 137, column: 1, scope: !138)
!142 = distinct !DISubprogram(name: "main", scope: !12, file: !12, line: 148, type: !143, scopeLine: 149, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !58)
!143 = !DISubroutineType(types: !144)
!144 = !{!46, !46, !145}
!145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!146 = !DILocalVariable(name: "argc", arg: 1, scope: !142, file: !12, line: 148, type: !46)
!147 = !DILocation(line: 148, column: 14, scope: !142)
!148 = !DILocalVariable(name: "argv", arg: 2, scope: !142, file: !12, line: 148, type: !145)
!149 = !DILocation(line: 148, column: 27, scope: !142)
!150 = !DILocation(line: 151, column: 22, scope: !142)
!151 = !DILocation(line: 151, column: 12, scope: !142)
!152 = !DILocation(line: 151, column: 5, scope: !142)
!153 = !DILocation(line: 153, column: 5, scope: !142)
!154 = !DILocation(line: 154, column: 5, scope: !142)
!155 = !DILocation(line: 155, column: 5, scope: !142)
!156 = !DILocation(line: 158, column: 5, scope: !142)
!157 = !DILocation(line: 159, column: 5, scope: !142)
!158 = !DILocation(line: 160, column: 5, scope: !142)
!159 = !DILocation(line: 162, column: 5, scope: !142)
!160 = distinct !DISubprogram(name: "good1", scope: !12, file: !12, line: 95, type: !56, scopeLine: 96, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !58)
!161 = !DILocation(line: 97, column: 8, scope: !162)
!162 = distinct !DILexicalBlock(scope: !160, file: !12, line: 97, column: 8)
!163 = !DILocation(line: 97, column: 18, scope: !162)
!164 = !DILocation(line: 97, column: 8, scope: !160)
!165 = !DILocation(line: 100, column: 9, scope: !166)
!166 = distinct !DILexicalBlock(scope: !162, file: !12, line: 98, column: 5)
!167 = !DILocation(line: 101, column: 5, scope: !166)
!168 = !DILocalVariable(name: "reversedString", scope: !169, file: !12, line: 106, type: !7)
!169 = distinct !DILexicalBlock(scope: !170, file: !12, line: 104, column: 9)
!170 = distinct !DILexicalBlock(scope: !162, file: !12, line: 103, column: 5)
!171 = !DILocation(line: 106, column: 20, scope: !169)
!172 = !DILocation(line: 106, column: 37, scope: !169)
!173 = !DILocation(line: 107, column: 25, scope: !169)
!174 = !DILocation(line: 107, column: 13, scope: !169)
!175 = !DILocation(line: 114, column: 1, scope: !160)
!176 = distinct !DISubprogram(name: "helperGood", scope: !12, file: !12, line: 43, type: !73, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !58)
!177 = !DILocalVariable(name: "aString", arg: 1, scope: !176, file: !12, line: 43, type: !7)
!178 = !DILocation(line: 43, column: 33, scope: !176)
!179 = !DILocalVariable(name: "i", scope: !176, file: !12, line: 45, type: !78)
!180 = !DILocation(line: 45, column: 12, scope: !176)
!181 = !DILocalVariable(name: "j", scope: !176, file: !12, line: 46, type: !78)
!182 = !DILocation(line: 46, column: 12, scope: !176)
!183 = !DILocalVariable(name: "reversedString", scope: !176, file: !12, line: 47, type: !7)
!184 = !DILocation(line: 47, column: 12, scope: !176)
!185 = !DILocation(line: 48, column: 9, scope: !186)
!186 = distinct !DILexicalBlock(scope: !176, file: !12, line: 48, column: 9)
!187 = !DILocation(line: 48, column: 17, scope: !186)
!188 = !DILocation(line: 48, column: 9, scope: !176)
!189 = !DILocation(line: 50, column: 20, scope: !190)
!190 = distinct !DILexicalBlock(scope: !186, file: !12, line: 49, column: 5)
!191 = !DILocation(line: 50, column: 13, scope: !190)
!192 = !DILocation(line: 50, column: 11, scope: !190)
!193 = !DILocation(line: 51, column: 46, scope: !190)
!194 = !DILocation(line: 51, column: 47, scope: !190)
!195 = !DILocation(line: 51, column: 35, scope: !190)
!196 = !DILocation(line: 51, column: 26, scope: !190)
!197 = !DILocation(line: 51, column: 24, scope: !190)
!198 = !DILocation(line: 52, column: 13, scope: !199)
!199 = distinct !DILexicalBlock(scope: !190, file: !12, line: 52, column: 13)
!200 = !DILocation(line: 52, column: 28, scope: !199)
!201 = !DILocation(line: 52, column: 13, scope: !190)
!202 = !DILocation(line: 52, column: 38, scope: !203)
!203 = distinct !DILexicalBlock(scope: !199, file: !12, line: 52, column: 37)
!204 = !DILocation(line: 53, column: 16, scope: !205)
!205 = distinct !DILexicalBlock(scope: !190, file: !12, line: 53, column: 9)
!206 = !DILocation(line: 53, column: 14, scope: !205)
!207 = !DILocation(line: 53, column: 21, scope: !208)
!208 = distinct !DILexicalBlock(scope: !205, file: !12, line: 53, column: 9)
!209 = !DILocation(line: 53, column: 25, scope: !208)
!210 = !DILocation(line: 53, column: 23, scope: !208)
!211 = !DILocation(line: 53, column: 9, scope: !205)
!212 = !DILocation(line: 55, column: 33, scope: !213)
!213 = distinct !DILexicalBlock(scope: !208, file: !12, line: 54, column: 9)
!214 = !DILocation(line: 55, column: 41, scope: !213)
!215 = !DILocation(line: 55, column: 43, scope: !213)
!216 = !DILocation(line: 55, column: 42, scope: !213)
!217 = !DILocation(line: 55, column: 44, scope: !213)
!218 = !DILocation(line: 55, column: 13, scope: !213)
!219 = !DILocation(line: 55, column: 28, scope: !213)
!220 = !DILocation(line: 55, column: 31, scope: !213)
!221 = !DILocation(line: 56, column: 9, scope: !213)
!222 = !DILocation(line: 53, column: 29, scope: !208)
!223 = !DILocation(line: 53, column: 9, scope: !208)
!224 = distinct !{!224, !211, !225, !127}
!225 = !DILocation(line: 56, column: 9, scope: !205)
!226 = !DILocation(line: 57, column: 9, scope: !190)
!227 = !DILocation(line: 57, column: 24, scope: !190)
!228 = !DILocation(line: 57, column: 27, scope: !190)
!229 = !DILocation(line: 59, column: 16, scope: !190)
!230 = !DILocation(line: 59, column: 9, scope: !190)
!231 = !DILocation(line: 63, column: 9, scope: !232)
!232 = distinct !DILexicalBlock(scope: !186, file: !12, line: 62, column: 5)
!233 = !DILocation(line: 65, column: 1, scope: !176)
!234 = distinct !DISubprogram(name: "good2", scope: !12, file: !12, line: 117, type: !56, scopeLine: 118, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !58)
!235 = !DILocation(line: 119, column: 8, scope: !236)
!236 = distinct !DILexicalBlock(scope: !234, file: !12, line: 119, column: 8)
!237 = !DILocation(line: 119, column: 18, scope: !236)
!238 = !DILocation(line: 119, column: 8, scope: !234)
!239 = !DILocalVariable(name: "reversedString", scope: !240, file: !12, line: 123, type: !7)
!240 = distinct !DILexicalBlock(scope: !241, file: !12, line: 121, column: 9)
!241 = distinct !DILexicalBlock(scope: !236, file: !12, line: 120, column: 5)
!242 = !DILocation(line: 123, column: 20, scope: !240)
!243 = !DILocation(line: 123, column: 37, scope: !240)
!244 = !DILocation(line: 124, column: 25, scope: !240)
!245 = !DILocation(line: 124, column: 13, scope: !240)
!246 = !DILocation(line: 130, column: 5, scope: !241)
!247 = !DILocation(line: 131, column: 1, scope: !234)
