; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tuaf/CWE416_Use_After_Free__malloc_free_long_07.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_long_07.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@staticFive = internal global i32 5, align 4, !dbg !17
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !27
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !33
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !38
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !43
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !48

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !62 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !66, metadata !DIExpression()), !dbg !67
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !68, metadata !DIExpression()), !dbg !69
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !70
  ret void, !dbg !71
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !72 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !73, metadata !DIExpression()), !dbg !74
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !75, metadata !DIExpression()), !dbg !76
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !77
  ret void, !dbg !78
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !79 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !80, metadata !DIExpression()), !dbg !81
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !84
  ret void, !dbg !85
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !86 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !87, metadata !DIExpression()), !dbg !88
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !89, metadata !DIExpression()), !dbg !90
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !91
  ret void, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !93 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !94, metadata !DIExpression()), !dbg !95
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !96, metadata !DIExpression()), !dbg !97
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !98
  ret void, !dbg !99
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !100 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !101, metadata !DIExpression()), !dbg !102
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !105
  ret void, !dbg !106
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !107 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !110, metadata !DIExpression()), !dbg !111
  %0 = load i32, ptr %n.addr, align 4, !dbg !112
  %conv = sext i32 %0 to i64, !dbg !112
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !113
  ret ptr %call, !dbg !114
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !115 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !116, metadata !DIExpression()), !dbg !117
  %0 = load i32, ptr %n.addr, align 4, !dbg !118
  %conv = sext i32 %0 to i64, !dbg !118
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !119
  ret ptr %call, !dbg !120
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !121 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !122, metadata !DIExpression()), !dbg !123
  %0 = load i32, ptr %n.addr, align 4, !dbg !124
  %conv = sext i32 %0 to i64, !dbg !124
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !125
  ret ptr %call, !dbg !126
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !127 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !128, metadata !DIExpression()), !dbg !129
  %0 = load i32, ptr %n.addr, align 4, !dbg !130
  %conv = sext i32 %0 to i64, !dbg !130
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !131
  ret ptr %call, !dbg !132
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !133 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !134, metadata !DIExpression()), !dbg !135
  %0 = load i32, ptr %n.addr, align 4, !dbg !136
  %conv = sext i32 %0 to i64, !dbg !136
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !137
  ret ptr %call, !dbg !138
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !139 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !140, metadata !DIExpression()), !dbg !141
  %0 = load i32, ptr %n.addr, align 4, !dbg !142
  %conv = sext i32 %0 to i64, !dbg !142
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !143
  ret ptr %call, !dbg !144
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !145 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !146, metadata !DIExpression()), !dbg !147
  %0 = load i32, ptr %n.addr, align 4, !dbg !148
  %conv = sext i32 %0 to i64, !dbg !148
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !149
  ret ptr %call, !dbg !150
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !151 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !152, metadata !DIExpression()), !dbg !153
  %0 = load i32, ptr %n.addr, align 4, !dbg !154
  %conv = sext i32 %0 to i64, !dbg !154
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !155
  ret ptr %call, !dbg !156
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !157 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !160, metadata !DIExpression()), !dbg !161
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !162, metadata !DIExpression()), !dbg !163
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !164
  ret void, !dbg !165
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !166 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !170, metadata !DIExpression()), !dbg !171
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !172, metadata !DIExpression()), !dbg !173
  ret void, !dbg !174
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !175 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !176, metadata !DIExpression()), !dbg !177
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !178, metadata !DIExpression()), !dbg !179
  ret void, !dbg !180
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !181 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !184, metadata !DIExpression()), !dbg !185
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !186, metadata !DIExpression()), !dbg !187
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !188, metadata !DIExpression()), !dbg !189
  ret void, !dbg !190
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !191 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !194, metadata !DIExpression()), !dbg !195
  ret void, !dbg !196
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !197 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !198, metadata !DIExpression()), !dbg !199
  %0 = load ptr, ptr %str.addr, align 8, !dbg !200
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !201
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !202
  %call2 = call i32 @getchar(), !dbg !203
  ret void, !dbg !204
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !205 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !209, metadata !DIExpression()), !dbg !210
  %0 = load ptr, ptr %p.addr, align 8, !dbg !211
  store i32 0, ptr %0, align 4, !dbg !212
  %1 = load ptr, ptr %retval, align 8, !dbg !213
  ret ptr %1, !dbg !213
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !214 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !215, metadata !DIExpression()), !dbg !216
  %0 = load ptr, ptr %p.addr, align 8, !dbg !217
  store i32 0, ptr %0, align 4, !dbg !218
  %1 = load ptr, ptr %retval, align 8, !dbg !219
  ret ptr %1, !dbg !219
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !220 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !221, metadata !DIExpression()), !dbg !222
  %0 = load ptr, ptr %p.addr, align 8, !dbg !223
  call void @free(ptr noundef %0) #7, !dbg !224
  %1 = load ptr, ptr %retval, align 8, !dbg !225
  ret ptr %1, !dbg !225
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !226 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !227, metadata !DIExpression()), !dbg !228
  %0 = load ptr, ptr %p.addr, align 8, !dbg !229
  call void @free(ptr noundef %0) #7, !dbg !230
  %1 = load ptr, ptr %retval, align 8, !dbg !231
  ret ptr %1, !dbg !231
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !232 {
entry:
  ret void, !dbg !235
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_long_07_bad() #0 !dbg !236 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !237, metadata !DIExpression()), !dbg !238
  store ptr null, ptr %data, align 8, !dbg !239
  %0 = load i32, ptr @staticFive, align 4, !dbg !240
  %cmp = icmp eq i32 %0, 5, !dbg !242
  br i1 %cmp, label %if.then, label %if.end4, !dbg !243

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !244
  store ptr %call, ptr %data, align 8, !dbg !246
  %1 = load ptr, ptr %data, align 8, !dbg !247
  %cmp1 = icmp eq ptr %1, null, !dbg !249
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !250

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !251
  unreachable, !dbg !251

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !253, metadata !DIExpression()), !dbg !258
  store i64 0, ptr %i, align 8, !dbg !259
  br label %for.cond, !dbg !261

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !262
  %cmp3 = icmp ult i64 %2, 100, !dbg !264
  br i1 %cmp3, label %for.body, label %for.end, !dbg !265

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !266
  %4 = load i64, ptr %i, align 8, !dbg !268
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !266
  store i64 5, ptr %arrayidx, align 8, !dbg !269
  br label %for.inc, !dbg !270

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8, !dbg !271
  %inc = add i64 %5, 1, !dbg !271
  store i64 %inc, ptr %i, align 8, !dbg !271
  br label %for.cond, !dbg !272, !llvm.loop !273

for.end:                                          ; preds = %for.cond
  %6 = load ptr, ptr %data, align 8, !dbg !276
  call void @free(ptr noundef %6) #7, !dbg !277
  br label %if.end4, !dbg !278

if.end4:                                          ; preds = %for.end, %entry
  %7 = load i32, ptr @staticFive, align 4, !dbg !279
  %cmp5 = icmp eq i32 %7, 5, !dbg !281
  br i1 %cmp5, label %if.then6, label %if.end9, !dbg !282

if.then6:                                         ; preds = %if.end4
  %8 = load ptr, ptr %data, align 8, !dbg !283
  %arrayidx7 = getelementptr inbounds i64, ptr %8, i64 0, !dbg !283
  %9 = load i64, ptr %arrayidx7, align 8, !dbg !283
  %10 = inttoptr i64 %9 to ptr, !dbg !283
  %call8 = call ptr @UAFFUNC(ptr noundef %10), !dbg !285
  br label %if.end9, !dbg !286

if.end9:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !287
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_long_07_good() #0 !dbg !288 {
entry:
  call void @goodB2G1(), !dbg !289
  call void @goodB2G2(), !dbg !290
  call void @goodG2B1(), !dbg !291
  call void @goodG2B2(), !dbg !292
  ret void, !dbg !293
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !294 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !298, metadata !DIExpression()), !dbg !299
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !300, metadata !DIExpression()), !dbg !301
  %call = call i64 @time(ptr noundef null) #7, !dbg !302
  %conv = trunc i64 %call to i32, !dbg !303
  call void @srand(i32 noundef %conv) #7, !dbg !304
  call void @printLine(ptr noundef @.str.3), !dbg !305
  call void @CWE416_Use_After_Free__malloc_free_long_07_good(), !dbg !306
  call void @printLine(ptr noundef @.str.4), !dbg !307
  call void @printLine(ptr noundef @.str.5), !dbg !308
  call void @CWE416_Use_After_Free__malloc_free_long_07_bad(), !dbg !309
  call void @printLine(ptr noundef @.str.6), !dbg !310
  ret i32 0, !dbg !311
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !312 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !313, metadata !DIExpression()), !dbg !314
  store ptr null, ptr %data, align 8, !dbg !315
  %0 = load i32, ptr @staticFive, align 4, !dbg !316
  %cmp = icmp eq i32 %0, 5, !dbg !318
  br i1 %cmp, label %if.then, label %if.end4, !dbg !319

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !320
  store ptr %call, ptr %data, align 8, !dbg !322
  %1 = load ptr, ptr %data, align 8, !dbg !323
  %cmp1 = icmp eq ptr %1, null, !dbg !325
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !326

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !327
  unreachable, !dbg !327

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !329, metadata !DIExpression()), !dbg !331
  store i64 0, ptr %i, align 8, !dbg !332
  br label %for.cond, !dbg !334

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !335
  %cmp3 = icmp ult i64 %2, 100, !dbg !337
  br i1 %cmp3, label %for.body, label %for.end, !dbg !338

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !339
  %4 = load i64, ptr %i, align 8, !dbg !341
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !339
  store i64 5, ptr %arrayidx, align 8, !dbg !342
  br label %for.inc, !dbg !343

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8, !dbg !344
  %inc = add i64 %5, 1, !dbg !344
  store i64 %inc, ptr %i, align 8, !dbg !344
  br label %for.cond, !dbg !345, !llvm.loop !346

for.end:                                          ; preds = %for.cond
  %6 = load ptr, ptr %data, align 8, !dbg !348
  call void @free(ptr noundef %6) #7, !dbg !349
  br label %if.end4, !dbg !350

if.end4:                                          ; preds = %for.end, %entry
  %7 = load i32, ptr @staticFive, align 4, !dbg !351
  %cmp5 = icmp ne i32 %7, 5, !dbg !353
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !354

if.then6:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.7), !dbg !355
  br label %if.end7, !dbg !357

if.else:                                          ; preds = %if.end4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void, !dbg !358
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !359 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !360, metadata !DIExpression()), !dbg !361
  store ptr null, ptr %data, align 8, !dbg !362
  %0 = load i32, ptr @staticFive, align 4, !dbg !363
  %cmp = icmp eq i32 %0, 5, !dbg !365
  br i1 %cmp, label %if.then, label %if.end4, !dbg !366

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !367
  store ptr %call, ptr %data, align 8, !dbg !369
  %1 = load ptr, ptr %data, align 8, !dbg !370
  %cmp1 = icmp eq ptr %1, null, !dbg !372
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !373

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !374
  unreachable, !dbg !374

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !376, metadata !DIExpression()), !dbg !378
  store i64 0, ptr %i, align 8, !dbg !379
  br label %for.cond, !dbg !381

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !382
  %cmp3 = icmp ult i64 %2, 100, !dbg !384
  br i1 %cmp3, label %for.body, label %for.end, !dbg !385

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !386
  %4 = load i64, ptr %i, align 8, !dbg !388
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !386
  store i64 5, ptr %arrayidx, align 8, !dbg !389
  br label %for.inc, !dbg !390

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8, !dbg !391
  %inc = add i64 %5, 1, !dbg !391
  store i64 %inc, ptr %i, align 8, !dbg !391
  br label %for.cond, !dbg !392, !llvm.loop !393

for.end:                                          ; preds = %for.cond
  %6 = load ptr, ptr %data, align 8, !dbg !395
  call void @free(ptr noundef %6) #7, !dbg !396
  br label %if.end4, !dbg !397

if.end4:                                          ; preds = %for.end, %entry
  %7 = load i32, ptr @staticFive, align 4, !dbg !398
  %cmp5 = icmp eq i32 %7, 5, !dbg !400
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !401

if.then6:                                         ; preds = %if.end4
  br label %if.end7, !dbg !402

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !404
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !405 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !406, metadata !DIExpression()), !dbg !407
  store ptr null, ptr %data, align 8, !dbg !408
  %0 = load i32, ptr @staticFive, align 4, !dbg !409
  %cmp = icmp ne i32 %0, 5, !dbg !411
  br i1 %cmp, label %if.then, label %if.else, !dbg !412

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !413
  br label %if.end4, !dbg !415

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !416
  store ptr %call, ptr %data, align 8, !dbg !418
  %1 = load ptr, ptr %data, align 8, !dbg !419
  %cmp1 = icmp eq ptr %1, null, !dbg !421
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !422

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !423
  unreachable, !dbg !423

if.end:                                           ; preds = %if.else
  call void @llvm.dbg.declare(metadata ptr %i, metadata !425, metadata !DIExpression()), !dbg !427
  store i64 0, ptr %i, align 8, !dbg !428
  br label %for.cond, !dbg !430

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !431
  %cmp3 = icmp ult i64 %2, 100, !dbg !433
  br i1 %cmp3, label %for.body, label %for.end, !dbg !434

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !435
  %4 = load i64, ptr %i, align 8, !dbg !437
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !435
  store i64 5, ptr %arrayidx, align 8, !dbg !438
  br label %for.inc, !dbg !439

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8, !dbg !440
  %inc = add i64 %5, 1, !dbg !440
  store i64 %inc, ptr %i, align 8, !dbg !440
  br label %for.cond, !dbg !441, !llvm.loop !442

for.end:                                          ; preds = %for.cond
  br label %if.end4

if.end4:                                          ; preds = %for.end, %if.then
  %6 = load i32, ptr @staticFive, align 4, !dbg !444
  %cmp5 = icmp eq i32 %6, 5, !dbg !446
  br i1 %cmp5, label %if.then6, label %if.end9, !dbg !447

if.then6:                                         ; preds = %if.end4
  %7 = load ptr, ptr %data, align 8, !dbg !448
  %arrayidx7 = getelementptr inbounds i64, ptr %7, i64 0, !dbg !448
  %8 = load i64, ptr %arrayidx7, align 8, !dbg !448
  %9 = inttoptr i64 %8 to ptr, !dbg !448
  %call8 = call ptr @SAFEUAFFUNC(ptr noundef %9), !dbg !450
  br label %if.end9, !dbg !451

if.end9:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !452
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !453 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !454, metadata !DIExpression()), !dbg !455
  store ptr null, ptr %data, align 8, !dbg !456
  %0 = load i32, ptr @staticFive, align 4, !dbg !457
  %cmp = icmp eq i32 %0, 5, !dbg !459
  br i1 %cmp, label %if.then, label %if.end4, !dbg !460

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !461
  store ptr %call, ptr %data, align 8, !dbg !463
  %1 = load ptr, ptr %data, align 8, !dbg !464
  %cmp1 = icmp eq ptr %1, null, !dbg !466
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !467

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !468
  unreachable, !dbg !468

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !470, metadata !DIExpression()), !dbg !472
  store i64 0, ptr %i, align 8, !dbg !473
  br label %for.cond, !dbg !475

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !476
  %cmp3 = icmp ult i64 %2, 100, !dbg !478
  br i1 %cmp3, label %for.body, label %for.end, !dbg !479

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !480
  %4 = load i64, ptr %i, align 8, !dbg !482
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !480
  store i64 5, ptr %arrayidx, align 8, !dbg !483
  br label %for.inc, !dbg !484

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8, !dbg !485
  %inc = add i64 %5, 1, !dbg !485
  store i64 %inc, ptr %i, align 8, !dbg !485
  br label %for.cond, !dbg !486, !llvm.loop !487

for.end:                                          ; preds = %for.cond
  br label %if.end4, !dbg !489

if.end4:                                          ; preds = %for.end, %entry
  %6 = load i32, ptr @staticFive, align 4, !dbg !490
  %cmp5 = icmp eq i32 %6, 5, !dbg !492
  br i1 %cmp5, label %if.then6, label %if.end9, !dbg !493

if.then6:                                         ; preds = %if.end4
  %7 = load ptr, ptr %data, align 8, !dbg !494
  %arrayidx7 = getelementptr inbounds i64, ptr %7, i64 0, !dbg !494
  %8 = load i64, ptr %arrayidx7, align 8, !dbg !494
  %9 = inttoptr i64 %8 to ptr, !dbg !494
  %call8 = call ptr @SAFEUAFFUNC(ptr noundef %9), !dbg !496
  br label %if.end9, !dbg !497

if.end9:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !498
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!54, !55, !56, !57, !58, !59, !60}
!llvm.ident = !{!61}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "staticFive", scope: !19, file: !29, line: 25, type: !53, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !26, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_long_07.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "c94450959965c00f18f5f0f591e45e7b")
!21 = !{!22, !23, !25}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!25 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!26 = !{!0, !7, !12, !27, !33, !38, !43, !17, !48}
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(scope: null, file: !29, line: 204, type: !30, isLocal: true, isDefinition: true)
!29 = !DIFile(filename: "src/tuaf/CWE416_Use_After_Free__malloc_free_long_07.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "c94450959965c00f18f5f0f591e45e7b")
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 18)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !29, line: 206, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 16)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(scope: null, file: !29, line: 209, type: !40, isLocal: true, isDefinition: true)
!40 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !41)
!41 = !{!42}
!42 = !DISubrange(count: 17)
!43 = !DIGlobalVariableExpression(var: !44, expr: !DIExpression())
!44 = distinct !DIGlobalVariable(scope: null, file: !29, line: 211, type: !45, isLocal: true, isDefinition: true)
!45 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !46)
!46 = !{!47}
!47 = !DISubrange(count: 15)
!48 = !DIGlobalVariableExpression(var: !49, expr: !DIExpression())
!49 = distinct !DIGlobalVariable(scope: null, file: !29, line: 83, type: !50, isLocal: true, isDefinition: true)
!50 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !51)
!51 = !{!52}
!52 = !DISubrange(count: 21)
!53 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!54 = !{i32 7, !"Dwarf Version", i32 5}
!55 = !{i32 2, !"Debug Info Version", i32 3}
!56 = !{i32 1, !"wchar_size", i32 4}
!57 = !{i32 8, !"PIC Level", i32 2}
!58 = !{i32 7, !"PIE Level", i32 2}
!59 = !{i32 7, !"uwtable", i32 2}
!60 = !{i32 7, !"frame-pointer", i32 2}
!61 = !{!"clang version 16.0.0"}
!62 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !63, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!63 = !DISubroutineType(types: !64)
!64 = !{null, !22, !22}
!65 = !{}
!66 = !DILocalVariable(name: "p", arg: 1, scope: !62, file: !2, line: 4, type: !22)
!67 = !DILocation(line: 4, column: 22, scope: !62)
!68 = !DILocalVariable(name: "q", arg: 2, scope: !62, file: !2, line: 4, type: !22)
!69 = !DILocation(line: 4, column: 31, scope: !62)
!70 = !DILocation(line: 5, column: 3, scope: !62)
!71 = !DILocation(line: 6, column: 1, scope: !62)
!72 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !63, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!73 = !DILocalVariable(name: "p", arg: 1, scope: !72, file: !2, line: 8, type: !22)
!74 = !DILocation(line: 8, column: 25, scope: !72)
!75 = !DILocalVariable(name: "q", arg: 2, scope: !72, file: !2, line: 8, type: !22)
!76 = !DILocation(line: 8, column: 34, scope: !72)
!77 = !DILocation(line: 9, column: 3, scope: !72)
!78 = !DILocation(line: 10, column: 1, scope: !72)
!79 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !63, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!80 = !DILocalVariable(name: "p", arg: 1, scope: !79, file: !2, line: 12, type: !22)
!81 = !DILocation(line: 12, column: 21, scope: !79)
!82 = !DILocalVariable(name: "q", arg: 2, scope: !79, file: !2, line: 12, type: !22)
!83 = !DILocation(line: 12, column: 30, scope: !79)
!84 = !DILocation(line: 13, column: 3, scope: !79)
!85 = !DILocation(line: 14, column: 1, scope: !79)
!86 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !63, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!87 = !DILocalVariable(name: "p", arg: 1, scope: !86, file: !2, line: 16, type: !22)
!88 = !DILocation(line: 16, column: 20, scope: !86)
!89 = !DILocalVariable(name: "q", arg: 2, scope: !86, file: !2, line: 16, type: !22)
!90 = !DILocation(line: 16, column: 29, scope: !86)
!91 = !DILocation(line: 17, column: 3, scope: !86)
!92 = !DILocation(line: 18, column: 1, scope: !86)
!93 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !63, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!94 = !DILocalVariable(name: "p", arg: 1, scope: !93, file: !2, line: 20, type: !22)
!95 = !DILocation(line: 20, column: 34, scope: !93)
!96 = !DILocalVariable(name: "q", arg: 2, scope: !93, file: !2, line: 20, type: !22)
!97 = !DILocation(line: 20, column: 43, scope: !93)
!98 = !DILocation(line: 21, column: 3, scope: !93)
!99 = !DILocation(line: 22, column: 1, scope: !93)
!100 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !63, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!101 = !DILocalVariable(name: "p", arg: 1, scope: !100, file: !2, line: 24, type: !22)
!102 = !DILocation(line: 24, column: 33, scope: !100)
!103 = !DILocalVariable(name: "q", arg: 2, scope: !100, file: !2, line: 24, type: !22)
!104 = !DILocation(line: 24, column: 42, scope: !100)
!105 = !DILocation(line: 25, column: 3, scope: !100)
!106 = !DILocation(line: 26, column: 1, scope: !100)
!107 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !108, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!108 = !DISubroutineType(types: !109)
!109 = !{!22, !53}
!110 = !DILocalVariable(name: "n", arg: 1, scope: !107, file: !2, line: 29, type: !53)
!111 = !DILocation(line: 29, column: 22, scope: !107)
!112 = !DILocation(line: 30, column: 17, scope: !107)
!113 = !DILocation(line: 30, column: 10, scope: !107)
!114 = !DILocation(line: 30, column: 3, scope: !107)
!115 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !108, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!116 = !DILocalVariable(name: "n", arg: 1, scope: !115, file: !2, line: 33, type: !53)
!117 = !DILocation(line: 33, column: 28, scope: !115)
!118 = !DILocation(line: 34, column: 19, scope: !115)
!119 = !DILocation(line: 34, column: 12, scope: !115)
!120 = !DILocation(line: 34, column: 5, scope: !115)
!121 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !108, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!122 = !DILocalVariable(name: "n", arg: 1, scope: !121, file: !2, line: 37, type: !53)
!123 = !DILocation(line: 37, column: 21, scope: !121)
!124 = !DILocation(line: 38, column: 17, scope: !121)
!125 = !DILocation(line: 38, column: 10, scope: !121)
!126 = !DILocation(line: 38, column: 3, scope: !121)
!127 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !108, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!128 = !DILocalVariable(name: "n", arg: 1, scope: !127, file: !2, line: 41, type: !53)
!129 = !DILocation(line: 41, column: 21, scope: !127)
!130 = !DILocation(line: 42, column: 17, scope: !127)
!131 = !DILocation(line: 42, column: 10, scope: !127)
!132 = !DILocation(line: 42, column: 3, scope: !127)
!133 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !108, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!134 = !DILocalVariable(name: "n", arg: 1, scope: !133, file: !2, line: 45, type: !53)
!135 = !DILocation(line: 45, column: 21, scope: !133)
!136 = !DILocation(line: 46, column: 17, scope: !133)
!137 = !DILocation(line: 46, column: 10, scope: !133)
!138 = !DILocation(line: 46, column: 3, scope: !133)
!139 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !108, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!140 = !DILocalVariable(name: "n", arg: 1, scope: !139, file: !2, line: 49, type: !53)
!141 = !DILocation(line: 49, column: 21, scope: !139)
!142 = !DILocation(line: 50, column: 17, scope: !139)
!143 = !DILocation(line: 50, column: 10, scope: !139)
!144 = !DILocation(line: 50, column: 3, scope: !139)
!145 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !108, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!146 = !DILocalVariable(name: "n", arg: 1, scope: !145, file: !2, line: 53, type: !53)
!147 = !DILocation(line: 53, column: 21, scope: !145)
!148 = !DILocation(line: 54, column: 17, scope: !145)
!149 = !DILocation(line: 54, column: 10, scope: !145)
!150 = !DILocation(line: 54, column: 3, scope: !145)
!151 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !108, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!152 = !DILocalVariable(name: "n", arg: 1, scope: !151, file: !2, line: 57, type: !53)
!153 = !DILocation(line: 57, column: 18, scope: !151)
!154 = !DILocation(line: 58, column: 17, scope: !151)
!155 = !DILocation(line: 58, column: 10, scope: !151)
!156 = !DILocation(line: 58, column: 3, scope: !151)
!157 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !158, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!158 = !DISubroutineType(types: !159)
!159 = !{null, !53, !53}
!160 = !DILocalVariable(name: "id", arg: 1, scope: !157, file: !2, line: 67, type: !53)
!161 = !DILocation(line: 67, column: 20, scope: !157)
!162 = !DILocalVariable(name: "flags", arg: 2, scope: !157, file: !2, line: 67, type: !53)
!163 = !DILocation(line: 67, column: 28, scope: !157)
!164 = !DILocation(line: 68, column: 3, scope: !157)
!165 = !DILocation(line: 69, column: 1, scope: !157)
!166 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !167, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!167 = !DISubroutineType(types: !168)
!168 = !{null, !53, !169}
!169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!170 = !DILocalVariable(name: "thdid", arg: 1, scope: !166, file: !2, line: 79, type: !53)
!171 = !DILocation(line: 79, column: 21, scope: !166)
!172 = !DILocalVariable(name: "cxt", arg: 2, scope: !166, file: !2, line: 79, type: !169)
!173 = !DILocation(line: 79, column: 34, scope: !166)
!174 = !DILocation(line: 81, column: 1, scope: !166)
!175 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !167, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!176 = !DILocalVariable(name: "thdid", arg: 1, scope: !175, file: !2, line: 82, type: !53)
!177 = !DILocation(line: 82, column: 21, scope: !175)
!178 = !DILocalVariable(name: "cxt", arg: 2, scope: !175, file: !2, line: 82, type: !169)
!179 = !DILocation(line: 82, column: 33, scope: !175)
!180 = !DILocation(line: 84, column: 1, scope: !175)
!181 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !182, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!182 = !DISubroutineType(types: !183)
!183 = !{null, !53, !169, !169}
!184 = !DILocalVariable(name: "thdid", arg: 1, scope: !181, file: !2, line: 85, type: !53)
!185 = !DILocation(line: 85, column: 26, scope: !181)
!186 = !DILocalVariable(name: "cxt", arg: 2, scope: !181, file: !2, line: 85, type: !169)
!187 = !DILocation(line: 85, column: 38, scope: !181)
!188 = !DILocalVariable(name: "lev", arg: 3, scope: !181, file: !2, line: 85, type: !169)
!189 = !DILocation(line: 85, column: 49, scope: !181)
!190 = !DILocation(line: 87, column: 1, scope: !181)
!191 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !192, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!192 = !DISubroutineType(types: !193)
!193 = !{null, !169}
!194 = !DILocalVariable(name: "lockname", arg: 1, scope: !191, file: !2, line: 89, type: !169)
!195 = !DILocation(line: 89, column: 17, scope: !191)
!196 = !DILocation(line: 91, column: 1, scope: !191)
!197 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !192, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!198 = !DILocalVariable(name: "str", arg: 1, scope: !197, file: !2, line: 93, type: !169)
!199 = !DILocation(line: 93, column: 18, scope: !197)
!200 = !DILocation(line: 94, column: 18, scope: !197)
!201 = !DILocation(line: 94, column: 3, scope: !197)
!202 = !DILocation(line: 95, column: 3, scope: !197)
!203 = !DILocation(line: 96, column: 3, scope: !197)
!204 = !DILocation(line: 97, column: 1, scope: !197)
!205 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !206, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!206 = !DISubroutineType(types: !207)
!207 = !{!22, !208}
!208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!209 = !DILocalVariable(name: "p", arg: 1, scope: !205, file: !2, line: 100, type: !208)
!210 = !DILocation(line: 100, column: 24, scope: !205)
!211 = !DILocation(line: 101, column: 6, scope: !205)
!212 = !DILocation(line: 101, column: 8, scope: !205)
!213 = !DILocation(line: 102, column: 1, scope: !205)
!214 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !206, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!215 = !DILocalVariable(name: "p", arg: 1, scope: !214, file: !2, line: 104, type: !208)
!216 = !DILocation(line: 104, column: 20, scope: !214)
!217 = !DILocation(line: 105, column: 6, scope: !214)
!218 = !DILocation(line: 105, column: 8, scope: !214)
!219 = !DILocation(line: 106, column: 1, scope: !214)
!220 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !206, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!221 = !DILocalVariable(name: "p", arg: 1, scope: !220, file: !2, line: 110, type: !208)
!222 = !DILocation(line: 110, column: 22, scope: !220)
!223 = !DILocation(line: 111, column: 10, scope: !220)
!224 = !DILocation(line: 111, column: 5, scope: !220)
!225 = !DILocation(line: 112, column: 1, scope: !220)
!226 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !206, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!227 = !DILocalVariable(name: "p", arg: 1, scope: !226, file: !2, line: 115, type: !208)
!228 = !DILocation(line: 115, column: 24, scope: !226)
!229 = !DILocation(line: 116, column: 10, scope: !226)
!230 = !DILocation(line: 116, column: 5, scope: !226)
!231 = !DILocation(line: 117, column: 1, scope: !226)
!232 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !233, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!233 = !DISubroutineType(types: !234)
!234 = !{null}
!235 = !DILocation(line: 135, column: 20, scope: !232)
!236 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_long_07_bad", scope: !29, file: !29, line: 29, type: !233, scopeLine: 30, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!237 = !DILocalVariable(name: "data", scope: !236, file: !29, line: 31, type: !23)
!238 = !DILocation(line: 31, column: 12, scope: !236)
!239 = !DILocation(line: 33, column: 10, scope: !236)
!240 = !DILocation(line: 34, column: 8, scope: !241)
!241 = distinct !DILexicalBlock(scope: !236, file: !29, line: 34, column: 8)
!242 = !DILocation(line: 34, column: 18, scope: !241)
!243 = !DILocation(line: 34, column: 8, scope: !236)
!244 = !DILocation(line: 36, column: 24, scope: !245)
!245 = distinct !DILexicalBlock(scope: !241, file: !29, line: 35, column: 5)
!246 = !DILocation(line: 36, column: 14, scope: !245)
!247 = !DILocation(line: 37, column: 13, scope: !248)
!248 = distinct !DILexicalBlock(scope: !245, file: !29, line: 37, column: 13)
!249 = !DILocation(line: 37, column: 18, scope: !248)
!250 = !DILocation(line: 37, column: 13, scope: !245)
!251 = !DILocation(line: 37, column: 28, scope: !252)
!252 = distinct !DILexicalBlock(scope: !248, file: !29, line: 37, column: 27)
!253 = !DILocalVariable(name: "i", scope: !254, file: !29, line: 39, type: !255)
!254 = distinct !DILexicalBlock(scope: !245, file: !29, line: 38, column: 9)
!255 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !256, line: 46, baseType: !257)
!256 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!257 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!258 = !DILocation(line: 39, column: 20, scope: !254)
!259 = !DILocation(line: 40, column: 19, scope: !260)
!260 = distinct !DILexicalBlock(scope: !254, file: !29, line: 40, column: 13)
!261 = !DILocation(line: 40, column: 17, scope: !260)
!262 = !DILocation(line: 40, column: 24, scope: !263)
!263 = distinct !DILexicalBlock(scope: !260, file: !29, line: 40, column: 13)
!264 = !DILocation(line: 40, column: 26, scope: !263)
!265 = !DILocation(line: 40, column: 13, scope: !260)
!266 = !DILocation(line: 42, column: 17, scope: !267)
!267 = distinct !DILexicalBlock(scope: !263, file: !29, line: 41, column: 13)
!268 = !DILocation(line: 42, column: 22, scope: !267)
!269 = !DILocation(line: 42, column: 25, scope: !267)
!270 = !DILocation(line: 43, column: 13, scope: !267)
!271 = !DILocation(line: 40, column: 34, scope: !263)
!272 = !DILocation(line: 40, column: 13, scope: !263)
!273 = distinct !{!273, !265, !274, !275}
!274 = !DILocation(line: 43, column: 13, scope: !260)
!275 = !{!"llvm.loop.mustprogress"}
!276 = !DILocation(line: 46, column: 14, scope: !245)
!277 = !DILocation(line: 46, column: 9, scope: !245)
!278 = !DILocation(line: 47, column: 5, scope: !245)
!279 = !DILocation(line: 48, column: 8, scope: !280)
!280 = distinct !DILexicalBlock(scope: !236, file: !29, line: 48, column: 8)
!281 = !DILocation(line: 48, column: 18, scope: !280)
!282 = !DILocation(line: 48, column: 8, scope: !236)
!283 = !DILocation(line: 51, column: 17, scope: !284)
!284 = distinct !DILexicalBlock(scope: !280, file: !29, line: 49, column: 5)
!285 = !DILocation(line: 51, column: 9, scope: !284)
!286 = !DILocation(line: 53, column: 5, scope: !284)
!287 = !DILocation(line: 54, column: 1, scope: !236)
!288 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_long_07_good", scope: !29, file: !29, line: 182, type: !233, scopeLine: 183, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!289 = !DILocation(line: 184, column: 5, scope: !288)
!290 = !DILocation(line: 185, column: 5, scope: !288)
!291 = !DILocation(line: 186, column: 5, scope: !288)
!292 = !DILocation(line: 187, column: 5, scope: !288)
!293 = !DILocation(line: 188, column: 1, scope: !288)
!294 = distinct !DISubprogram(name: "main", scope: !29, file: !29, line: 199, type: !295, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !65)
!295 = !DISubroutineType(types: !296)
!296 = !{!53, !53, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !169, size: 64)
!298 = !DILocalVariable(name: "argc", arg: 1, scope: !294, file: !29, line: 199, type: !53)
!299 = !DILocation(line: 199, column: 14, scope: !294)
!300 = !DILocalVariable(name: "argv", arg: 2, scope: !294, file: !29, line: 199, type: !297)
!301 = !DILocation(line: 199, column: 27, scope: !294)
!302 = !DILocation(line: 202, column: 22, scope: !294)
!303 = !DILocation(line: 202, column: 12, scope: !294)
!304 = !DILocation(line: 202, column: 5, scope: !294)
!305 = !DILocation(line: 204, column: 5, scope: !294)
!306 = !DILocation(line: 205, column: 5, scope: !294)
!307 = !DILocation(line: 206, column: 5, scope: !294)
!308 = !DILocation(line: 209, column: 5, scope: !294)
!309 = !DILocation(line: 210, column: 5, scope: !294)
!310 = !DILocation(line: 211, column: 5, scope: !294)
!311 = !DILocation(line: 213, column: 5, scope: !294)
!312 = distinct !DISubprogram(name: "goodB2G1", scope: !29, file: !29, line: 61, type: !233, scopeLine: 62, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !65)
!313 = !DILocalVariable(name: "data", scope: !312, file: !29, line: 63, type: !23)
!314 = !DILocation(line: 63, column: 12, scope: !312)
!315 = !DILocation(line: 65, column: 10, scope: !312)
!316 = !DILocation(line: 66, column: 8, scope: !317)
!317 = distinct !DILexicalBlock(scope: !312, file: !29, line: 66, column: 8)
!318 = !DILocation(line: 66, column: 18, scope: !317)
!319 = !DILocation(line: 66, column: 8, scope: !312)
!320 = !DILocation(line: 68, column: 24, scope: !321)
!321 = distinct !DILexicalBlock(scope: !317, file: !29, line: 67, column: 5)
!322 = !DILocation(line: 68, column: 14, scope: !321)
!323 = !DILocation(line: 69, column: 13, scope: !324)
!324 = distinct !DILexicalBlock(scope: !321, file: !29, line: 69, column: 13)
!325 = !DILocation(line: 69, column: 18, scope: !324)
!326 = !DILocation(line: 69, column: 13, scope: !321)
!327 = !DILocation(line: 69, column: 28, scope: !328)
!328 = distinct !DILexicalBlock(scope: !324, file: !29, line: 69, column: 27)
!329 = !DILocalVariable(name: "i", scope: !330, file: !29, line: 71, type: !255)
!330 = distinct !DILexicalBlock(scope: !321, file: !29, line: 70, column: 9)
!331 = !DILocation(line: 71, column: 20, scope: !330)
!332 = !DILocation(line: 72, column: 19, scope: !333)
!333 = distinct !DILexicalBlock(scope: !330, file: !29, line: 72, column: 13)
!334 = !DILocation(line: 72, column: 17, scope: !333)
!335 = !DILocation(line: 72, column: 24, scope: !336)
!336 = distinct !DILexicalBlock(scope: !333, file: !29, line: 72, column: 13)
!337 = !DILocation(line: 72, column: 26, scope: !336)
!338 = !DILocation(line: 72, column: 13, scope: !333)
!339 = !DILocation(line: 74, column: 17, scope: !340)
!340 = distinct !DILexicalBlock(scope: !336, file: !29, line: 73, column: 13)
!341 = !DILocation(line: 74, column: 22, scope: !340)
!342 = !DILocation(line: 74, column: 25, scope: !340)
!343 = !DILocation(line: 75, column: 13, scope: !340)
!344 = !DILocation(line: 72, column: 34, scope: !336)
!345 = !DILocation(line: 72, column: 13, scope: !336)
!346 = distinct !{!346, !338, !347, !275}
!347 = !DILocation(line: 75, column: 13, scope: !333)
!348 = !DILocation(line: 78, column: 14, scope: !321)
!349 = !DILocation(line: 78, column: 9, scope: !321)
!350 = !DILocation(line: 79, column: 5, scope: !321)
!351 = !DILocation(line: 80, column: 8, scope: !352)
!352 = distinct !DILexicalBlock(scope: !312, file: !29, line: 80, column: 8)
!353 = !DILocation(line: 80, column: 18, scope: !352)
!354 = !DILocation(line: 80, column: 8, scope: !312)
!355 = !DILocation(line: 83, column: 9, scope: !356)
!356 = distinct !DILexicalBlock(scope: !352, file: !29, line: 81, column: 5)
!357 = !DILocation(line: 84, column: 5, scope: !356)
!358 = !DILocation(line: 92, column: 1, scope: !312)
!359 = distinct !DISubprogram(name: "goodB2G2", scope: !29, file: !29, line: 95, type: !233, scopeLine: 96, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !65)
!360 = !DILocalVariable(name: "data", scope: !359, file: !29, line: 97, type: !23)
!361 = !DILocation(line: 97, column: 12, scope: !359)
!362 = !DILocation(line: 99, column: 10, scope: !359)
!363 = !DILocation(line: 100, column: 8, scope: !364)
!364 = distinct !DILexicalBlock(scope: !359, file: !29, line: 100, column: 8)
!365 = !DILocation(line: 100, column: 18, scope: !364)
!366 = !DILocation(line: 100, column: 8, scope: !359)
!367 = !DILocation(line: 102, column: 24, scope: !368)
!368 = distinct !DILexicalBlock(scope: !364, file: !29, line: 101, column: 5)
!369 = !DILocation(line: 102, column: 14, scope: !368)
!370 = !DILocation(line: 103, column: 13, scope: !371)
!371 = distinct !DILexicalBlock(scope: !368, file: !29, line: 103, column: 13)
!372 = !DILocation(line: 103, column: 18, scope: !371)
!373 = !DILocation(line: 103, column: 13, scope: !368)
!374 = !DILocation(line: 103, column: 28, scope: !375)
!375 = distinct !DILexicalBlock(scope: !371, file: !29, line: 103, column: 27)
!376 = !DILocalVariable(name: "i", scope: !377, file: !29, line: 105, type: !255)
!377 = distinct !DILexicalBlock(scope: !368, file: !29, line: 104, column: 9)
!378 = !DILocation(line: 105, column: 20, scope: !377)
!379 = !DILocation(line: 106, column: 19, scope: !380)
!380 = distinct !DILexicalBlock(scope: !377, file: !29, line: 106, column: 13)
!381 = !DILocation(line: 106, column: 17, scope: !380)
!382 = !DILocation(line: 106, column: 24, scope: !383)
!383 = distinct !DILexicalBlock(scope: !380, file: !29, line: 106, column: 13)
!384 = !DILocation(line: 106, column: 26, scope: !383)
!385 = !DILocation(line: 106, column: 13, scope: !380)
!386 = !DILocation(line: 108, column: 17, scope: !387)
!387 = distinct !DILexicalBlock(scope: !383, file: !29, line: 107, column: 13)
!388 = !DILocation(line: 108, column: 22, scope: !387)
!389 = !DILocation(line: 108, column: 25, scope: !387)
!390 = !DILocation(line: 109, column: 13, scope: !387)
!391 = !DILocation(line: 106, column: 34, scope: !383)
!392 = !DILocation(line: 106, column: 13, scope: !383)
!393 = distinct !{!393, !385, !394, !275}
!394 = !DILocation(line: 109, column: 13, scope: !380)
!395 = !DILocation(line: 112, column: 14, scope: !368)
!396 = !DILocation(line: 112, column: 9, scope: !368)
!397 = !DILocation(line: 113, column: 5, scope: !368)
!398 = !DILocation(line: 114, column: 8, scope: !399)
!399 = distinct !DILexicalBlock(scope: !359, file: !29, line: 114, column: 8)
!400 = !DILocation(line: 114, column: 18, scope: !399)
!401 = !DILocation(line: 114, column: 8, scope: !359)
!402 = !DILocation(line: 120, column: 5, scope: !403)
!403 = distinct !DILexicalBlock(scope: !399, file: !29, line: 115, column: 5)
!404 = !DILocation(line: 121, column: 1, scope: !359)
!405 = distinct !DISubprogram(name: "goodG2B1", scope: !29, file: !29, line: 124, type: !233, scopeLine: 125, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !65)
!406 = !DILocalVariable(name: "data", scope: !405, file: !29, line: 126, type: !23)
!407 = !DILocation(line: 126, column: 12, scope: !405)
!408 = !DILocation(line: 128, column: 10, scope: !405)
!409 = !DILocation(line: 129, column: 8, scope: !410)
!410 = distinct !DILexicalBlock(scope: !405, file: !29, line: 129, column: 8)
!411 = !DILocation(line: 129, column: 18, scope: !410)
!412 = !DILocation(line: 129, column: 8, scope: !405)
!413 = !DILocation(line: 132, column: 9, scope: !414)
!414 = distinct !DILexicalBlock(scope: !410, file: !29, line: 130, column: 5)
!415 = !DILocation(line: 133, column: 5, scope: !414)
!416 = !DILocation(line: 136, column: 24, scope: !417)
!417 = distinct !DILexicalBlock(scope: !410, file: !29, line: 135, column: 5)
!418 = !DILocation(line: 136, column: 14, scope: !417)
!419 = !DILocation(line: 137, column: 13, scope: !420)
!420 = distinct !DILexicalBlock(scope: !417, file: !29, line: 137, column: 13)
!421 = !DILocation(line: 137, column: 18, scope: !420)
!422 = !DILocation(line: 137, column: 13, scope: !417)
!423 = !DILocation(line: 137, column: 28, scope: !424)
!424 = distinct !DILexicalBlock(scope: !420, file: !29, line: 137, column: 27)
!425 = !DILocalVariable(name: "i", scope: !426, file: !29, line: 139, type: !255)
!426 = distinct !DILexicalBlock(scope: !417, file: !29, line: 138, column: 9)
!427 = !DILocation(line: 139, column: 20, scope: !426)
!428 = !DILocation(line: 140, column: 19, scope: !429)
!429 = distinct !DILexicalBlock(scope: !426, file: !29, line: 140, column: 13)
!430 = !DILocation(line: 140, column: 17, scope: !429)
!431 = !DILocation(line: 140, column: 24, scope: !432)
!432 = distinct !DILexicalBlock(scope: !429, file: !29, line: 140, column: 13)
!433 = !DILocation(line: 140, column: 26, scope: !432)
!434 = !DILocation(line: 140, column: 13, scope: !429)
!435 = !DILocation(line: 142, column: 17, scope: !436)
!436 = distinct !DILexicalBlock(scope: !432, file: !29, line: 141, column: 13)
!437 = !DILocation(line: 142, column: 22, scope: !436)
!438 = !DILocation(line: 142, column: 25, scope: !436)
!439 = !DILocation(line: 143, column: 13, scope: !436)
!440 = !DILocation(line: 140, column: 34, scope: !432)
!441 = !DILocation(line: 140, column: 13, scope: !432)
!442 = distinct !{!442, !434, !443, !275}
!443 = !DILocation(line: 143, column: 13, scope: !429)
!444 = !DILocation(line: 147, column: 8, scope: !445)
!445 = distinct !DILexicalBlock(scope: !405, file: !29, line: 147, column: 8)
!446 = !DILocation(line: 147, column: 18, scope: !445)
!447 = !DILocation(line: 147, column: 8, scope: !405)
!448 = !DILocation(line: 150, column: 21, scope: !449)
!449 = distinct !DILexicalBlock(scope: !445, file: !29, line: 148, column: 5)
!450 = !DILocation(line: 150, column: 9, scope: !449)
!451 = !DILocation(line: 152, column: 5, scope: !449)
!452 = !DILocation(line: 153, column: 1, scope: !405)
!453 = distinct !DISubprogram(name: "goodG2B2", scope: !29, file: !29, line: 156, type: !233, scopeLine: 157, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !65)
!454 = !DILocalVariable(name: "data", scope: !453, file: !29, line: 158, type: !23)
!455 = !DILocation(line: 158, column: 12, scope: !453)
!456 = !DILocation(line: 160, column: 10, scope: !453)
!457 = !DILocation(line: 161, column: 8, scope: !458)
!458 = distinct !DILexicalBlock(scope: !453, file: !29, line: 161, column: 8)
!459 = !DILocation(line: 161, column: 18, scope: !458)
!460 = !DILocation(line: 161, column: 8, scope: !453)
!461 = !DILocation(line: 163, column: 24, scope: !462)
!462 = distinct !DILexicalBlock(scope: !458, file: !29, line: 162, column: 5)
!463 = !DILocation(line: 163, column: 14, scope: !462)
!464 = !DILocation(line: 164, column: 13, scope: !465)
!465 = distinct !DILexicalBlock(scope: !462, file: !29, line: 164, column: 13)
!466 = !DILocation(line: 164, column: 18, scope: !465)
!467 = !DILocation(line: 164, column: 13, scope: !462)
!468 = !DILocation(line: 164, column: 28, scope: !469)
!469 = distinct !DILexicalBlock(scope: !465, file: !29, line: 164, column: 27)
!470 = !DILocalVariable(name: "i", scope: !471, file: !29, line: 166, type: !255)
!471 = distinct !DILexicalBlock(scope: !462, file: !29, line: 165, column: 9)
!472 = !DILocation(line: 166, column: 20, scope: !471)
!473 = !DILocation(line: 167, column: 19, scope: !474)
!474 = distinct !DILexicalBlock(scope: !471, file: !29, line: 167, column: 13)
!475 = !DILocation(line: 167, column: 17, scope: !474)
!476 = !DILocation(line: 167, column: 24, scope: !477)
!477 = distinct !DILexicalBlock(scope: !474, file: !29, line: 167, column: 13)
!478 = !DILocation(line: 167, column: 26, scope: !477)
!479 = !DILocation(line: 167, column: 13, scope: !474)
!480 = !DILocation(line: 169, column: 17, scope: !481)
!481 = distinct !DILexicalBlock(scope: !477, file: !29, line: 168, column: 13)
!482 = !DILocation(line: 169, column: 22, scope: !481)
!483 = !DILocation(line: 169, column: 25, scope: !481)
!484 = !DILocation(line: 170, column: 13, scope: !481)
!485 = !DILocation(line: 167, column: 34, scope: !477)
!486 = !DILocation(line: 167, column: 13, scope: !477)
!487 = distinct !{!487, !479, !488, !275}
!488 = !DILocation(line: 170, column: 13, scope: !474)
!489 = !DILocation(line: 173, column: 5, scope: !462)
!490 = !DILocation(line: 174, column: 8, scope: !491)
!491 = distinct !DILexicalBlock(scope: !453, file: !29, line: 174, column: 8)
!492 = !DILocation(line: 174, column: 18, scope: !491)
!493 = !DILocation(line: 174, column: 8, scope: !453)
!494 = !DILocation(line: 177, column: 21, scope: !495)
!495 = distinct !DILexicalBlock(scope: !491, file: !29, line: 175, column: 5)
!496 = !DILocation(line: 177, column: 9, scope: !495)
!497 = !DILocation(line: 179, column: 5, scope: !495)
!498 = !DILocation(line: 180, column: 1, scope: !453)
