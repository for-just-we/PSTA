; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tuaf/CWE416_Use_After_Free__return_freed_ptr_09.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__return_freed_ptr_09.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@GLOBAL_CONST_TRUE = external constant i32, align 4
@.str = private unnamed_addr constant [8 x i8] c"BadSink\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !22
@GLOBAL_CONST_FALSE = external constant i32, align 4
@.str.5 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !27
@.str.6 = private unnamed_addr constant [9 x i8] c"GoodSink\00", align 1, !dbg !32

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__return_freed_ptr_09_bad() #0 !dbg !52 {
entry:
  %reversedString = alloca ptr, align 8
  %0 = load i32, ptr @GLOBAL_CONST_TRUE, align 4, !dbg !56
  %tobool = icmp ne i32 %0, 0, !dbg !56
  br i1 %tobool, label %if.then, label %if.end, !dbg !58

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !59, metadata !DIExpression()), !dbg !62
  %call = call ptr @helperBad(ptr noundef @.str), !dbg !63
  store ptr %call, ptr %reversedString, align 8, !dbg !62
  %1 = load ptr, ptr %reversedString, align 8, !dbg !64
  %call1 = call i32 (ptr, ...) @UAFFUNC(ptr noundef %1), !dbg !65
  br label %if.end, !dbg !66

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !67
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @helperBad(ptr noundef %aString) #0 !dbg !68 {
entry:
  %retval = alloca ptr, align 8
  %aString.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %reversedString = alloca ptr, align 8
  store ptr %aString, ptr %aString.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %aString.addr, metadata !71, metadata !DIExpression()), !dbg !72
  call void @llvm.dbg.declare(metadata ptr %i, metadata !73, metadata !DIExpression()), !dbg !77
  store i64 0, ptr %i, align 8, !dbg !77
  call void @llvm.dbg.declare(metadata ptr %j, metadata !78, metadata !DIExpression()), !dbg !79
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !80, metadata !DIExpression()), !dbg !81
  store ptr null, ptr %reversedString, align 8, !dbg !81
  %0 = load ptr, ptr %aString.addr, align 8, !dbg !82
  %cmp = icmp ne ptr %0, null, !dbg !84
  br i1 %cmp, label %if.then, label %if.else, !dbg !85

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %aString.addr, align 8, !dbg !86
  %call = call i64 @strlen(ptr noundef %1) #6, !dbg !88
  store i64 %call, ptr %i, align 8, !dbg !89
  %2 = load i64, ptr %i, align 8, !dbg !90
  %add = add i64 %2, 1, !dbg !91
  %call1 = call i32 (i64, ...) @SAFEMALLOC(i64 noundef %add), !dbg !92
  %conv = sext i32 %call1 to i64, !dbg !93
  %3 = inttoptr i64 %conv to ptr, !dbg !93
  store ptr %3, ptr %reversedString, align 8, !dbg !94
  %4 = load ptr, ptr %reversedString, align 8, !dbg !95
  %cmp2 = icmp eq ptr %4, null, !dbg !97
  br i1 %cmp2, label %if.then4, label %if.end, !dbg !98

if.then4:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #7, !dbg !99
  unreachable, !dbg !99

if.end:                                           ; preds = %if.then
  store i64 0, ptr %j, align 8, !dbg !101
  br label %for.cond, !dbg !103

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i64, ptr %j, align 8, !dbg !104
  %6 = load i64, ptr %i, align 8, !dbg !106
  %cmp5 = icmp ult i64 %5, %6, !dbg !107
  br i1 %cmp5, label %for.body, label %for.end, !dbg !108

for.body:                                         ; preds = %for.cond
  %7 = load ptr, ptr %aString.addr, align 8, !dbg !109
  %8 = load i64, ptr %i, align 8, !dbg !111
  %9 = load i64, ptr %j, align 8, !dbg !112
  %sub = sub i64 %8, %9, !dbg !113
  %sub7 = sub i64 %sub, 1, !dbg !114
  %arrayidx = getelementptr inbounds i8, ptr %7, i64 %sub7, !dbg !109
  %10 = load i8, ptr %arrayidx, align 1, !dbg !109
  %11 = load ptr, ptr %reversedString, align 8, !dbg !115
  %12 = load i64, ptr %j, align 8, !dbg !116
  %arrayidx8 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !115
  store i8 %10, ptr %arrayidx8, align 1, !dbg !117
  br label %for.inc, !dbg !118

for.inc:                                          ; preds = %for.body
  %13 = load i64, ptr %j, align 8, !dbg !119
  %inc = add i64 %13, 1, !dbg !119
  store i64 %inc, ptr %j, align 8, !dbg !119
  br label %for.cond, !dbg !120, !llvm.loop !121

for.end:                                          ; preds = %for.cond
  %14 = load ptr, ptr %reversedString, align 8, !dbg !124
  %15 = load i64, ptr %i, align 8, !dbg !125
  %arrayidx9 = getelementptr inbounds i8, ptr %14, i64 %15, !dbg !124
  store i8 0, ptr %arrayidx9, align 1, !dbg !126
  %16 = load ptr, ptr %reversedString, align 8, !dbg !127
  call void @free(ptr noundef %16) #8, !dbg !128
  %17 = load ptr, ptr %reversedString, align 8, !dbg !129
  store ptr %17, ptr %retval, align 8, !dbg !130
  br label %return, !dbg !130

if.else:                                          ; preds = %entry
  store ptr null, ptr %retval, align 8, !dbg !131
  br label %return, !dbg !131

return:                                           ; preds = %if.else, %for.end
  %18 = load ptr, ptr %retval, align 8, !dbg !133
  ret ptr %18, !dbg !133
}

declare i32 @UAFFUNC(...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__return_freed_ptr_09_good() #0 !dbg !134 {
entry:
  call void @good1(), !dbg !135
  call void @good2(), !dbg !136
  ret void, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !138 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !143, metadata !DIExpression()), !dbg !144
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !145, metadata !DIExpression()), !dbg !146
  %call = call i64 @time(ptr noundef null) #8, !dbg !147
  %conv = trunc i64 %call to i32, !dbg !148
  call void @srand(i32 noundef %conv) #8, !dbg !149
  call void @printLine(ptr noundef @.str.1), !dbg !150
  call void @CWE416_Use_After_Free__return_freed_ptr_09_good(), !dbg !151
  call void @printLine(ptr noundef @.str.2), !dbg !152
  call void @printLine(ptr noundef @.str.3), !dbg !153
  call void @CWE416_Use_After_Free__return_freed_ptr_09_bad(), !dbg !154
  call void @printLine(ptr noundef @.str.4), !dbg !155
  ret i32 0, !dbg !156
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #3

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #3

declare void @printLine(ptr noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #4

declare i32 @SAFEMALLOC(...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: nounwind
declare void @free(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @good1() #0 !dbg !157 {
entry:
  %reversedString = alloca ptr, align 8
  %0 = load i32, ptr @GLOBAL_CONST_FALSE, align 4, !dbg !158
  %tobool = icmp ne i32 %0, 0, !dbg !158
  br i1 %tobool, label %if.then, label %if.else, !dbg !160

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.5), !dbg !161
  br label %if.end, !dbg !163

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !164, metadata !DIExpression()), !dbg !167
  %call = call ptr @helperGood(ptr noundef @.str.6), !dbg !168
  store ptr %call, ptr %reversedString, align 8, !dbg !167
  %1 = load ptr, ptr %reversedString, align 8, !dbg !169
  %call1 = call i32 (ptr, ...) @SAFEUAFFUNC(ptr noundef %1), !dbg !170
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !171
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @helperGood(ptr noundef %aString) #0 !dbg !172 {
entry:
  %retval = alloca ptr, align 8
  %aString.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %reversedString = alloca ptr, align 8
  store ptr %aString, ptr %aString.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %aString.addr, metadata !173, metadata !DIExpression()), !dbg !174
  call void @llvm.dbg.declare(metadata ptr %i, metadata !175, metadata !DIExpression()), !dbg !176
  store i64 0, ptr %i, align 8, !dbg !176
  call void @llvm.dbg.declare(metadata ptr %j, metadata !177, metadata !DIExpression()), !dbg !178
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !179, metadata !DIExpression()), !dbg !180
  store ptr null, ptr %reversedString, align 8, !dbg !180
  %0 = load ptr, ptr %aString.addr, align 8, !dbg !181
  %cmp = icmp ne ptr %0, null, !dbg !183
  br i1 %cmp, label %if.then, label %if.else, !dbg !184

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %aString.addr, align 8, !dbg !185
  %call = call i64 @strlen(ptr noundef %1) #6, !dbg !187
  store i64 %call, ptr %i, align 8, !dbg !188
  %2 = load i64, ptr %i, align 8, !dbg !189
  %add = add i64 %2, 1, !dbg !190
  %call1 = call i32 (i64, ...) @SAFEMALLOC(i64 noundef %add), !dbg !191
  %conv = sext i32 %call1 to i64, !dbg !192
  %3 = inttoptr i64 %conv to ptr, !dbg !192
  store ptr %3, ptr %reversedString, align 8, !dbg !193
  %4 = load ptr, ptr %reversedString, align 8, !dbg !194
  %cmp2 = icmp eq ptr %4, null, !dbg !196
  br i1 %cmp2, label %if.then4, label %if.end, !dbg !197

if.then4:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #7, !dbg !198
  unreachable, !dbg !198

if.end:                                           ; preds = %if.then
  store i64 0, ptr %j, align 8, !dbg !200
  br label %for.cond, !dbg !202

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i64, ptr %j, align 8, !dbg !203
  %6 = load i64, ptr %i, align 8, !dbg !205
  %cmp5 = icmp ult i64 %5, %6, !dbg !206
  br i1 %cmp5, label %for.body, label %for.end, !dbg !207

for.body:                                         ; preds = %for.cond
  %7 = load ptr, ptr %aString.addr, align 8, !dbg !208
  %8 = load i64, ptr %i, align 8, !dbg !210
  %9 = load i64, ptr %j, align 8, !dbg !211
  %sub = sub i64 %8, %9, !dbg !212
  %sub7 = sub i64 %sub, 1, !dbg !213
  %arrayidx = getelementptr inbounds i8, ptr %7, i64 %sub7, !dbg !208
  %10 = load i8, ptr %arrayidx, align 1, !dbg !208
  %11 = load ptr, ptr %reversedString, align 8, !dbg !214
  %12 = load i64, ptr %j, align 8, !dbg !215
  %arrayidx8 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !214
  store i8 %10, ptr %arrayidx8, align 1, !dbg !216
  br label %for.inc, !dbg !217

for.inc:                                          ; preds = %for.body
  %13 = load i64, ptr %j, align 8, !dbg !218
  %inc = add i64 %13, 1, !dbg !218
  store i64 %inc, ptr %j, align 8, !dbg !218
  br label %for.cond, !dbg !219, !llvm.loop !220

for.end:                                          ; preds = %for.cond
  %14 = load ptr, ptr %reversedString, align 8, !dbg !222
  %15 = load i64, ptr %i, align 8, !dbg !223
  %arrayidx9 = getelementptr inbounds i8, ptr %14, i64 %15, !dbg !222
  store i8 0, ptr %arrayidx9, align 1, !dbg !224
  %16 = load ptr, ptr %reversedString, align 8, !dbg !225
  store ptr %16, ptr %retval, align 8, !dbg !226
  br label %return, !dbg !226

if.else:                                          ; preds = %entry
  store ptr null, ptr %retval, align 8, !dbg !227
  br label %return, !dbg !227

return:                                           ; preds = %if.else, %for.end
  %17 = load ptr, ptr %retval, align 8, !dbg !229
  ret ptr %17, !dbg !229
}

declare i32 @SAFEUAFFUNC(...) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @good2() #0 !dbg !230 {
entry:
  %reversedString = alloca ptr, align 8
  %0 = load i32, ptr @GLOBAL_CONST_TRUE, align 4, !dbg !231
  %tobool = icmp ne i32 %0, 0, !dbg !231
  br i1 %tobool, label %if.then, label %if.end, !dbg !233

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !234, metadata !DIExpression()), !dbg !237
  %call = call ptr @helperGood(ptr noundef @.str.6), !dbg !238
  store ptr %call, ptr %reversedString, align 8, !dbg !237
  %1 = load ptr, ptr %reversedString, align 8, !dbg !239
  %call1 = call i32 (ptr, ...) @SAFEUAFFUNC(ptr noundef %1), !dbg !240
  br label %if.end, !dbg !241

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !242
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind willreturn memory(read) }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!37}
!llvm.module.flags = !{!44, !45, !46, !47, !48, !49, !50}
!llvm.ident = !{!51}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 75, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/tuaf/CWE416_Use_After_Free__return_freed_ptr_09.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "9ecae5f7757ed9aa813fde90b839480c")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 64, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 8)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 148, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 18)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 150, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 16)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 153, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 17)
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(scope: null, file: !2, line: 155, type: !24, isLocal: true, isDefinition: true)
!24 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !25)
!25 = !{!26}
!26 = !DISubrange(count: 15)
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !29, isLocal: true, isDefinition: true)
!29 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !30)
!30 = !{!31}
!31 = !DISubrange(count: 21)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(scope: null, file: !2, line: 101, type: !34, isLocal: true, isDefinition: true)
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 72, elements: !35)
!35 = !{!36}
!36 = !DISubrange(count: 9)
!37 = distinct !DICompileUnit(language: DW_LANG_C11, file: !38, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !39, globals: !43, splitDebugInlining: false, nameTableKind: None)
!38 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__return_freed_ptr_09.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "9ecae5f7757ed9aa813fde90b839480c")
!39 = !{!40, !41, !42}
!40 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!43 = !{!0, !7, !12, !17, !22, !27, !32}
!44 = !{i32 7, !"Dwarf Version", i32 5}
!45 = !{i32 2, !"Debug Info Version", i32 3}
!46 = !{i32 1, !"wchar_size", i32 4}
!47 = !{i32 8, !"PIC Level", i32 2}
!48 = !{i32 7, !"PIE Level", i32 2}
!49 = !{i32 7, !"uwtable", i32 2}
!50 = !{i32 7, !"frame-pointer", i32 2}
!51 = !{!"clang version 16.0.0"}
!52 = distinct !DISubprogram(name: "CWE416_Use_After_Free__return_freed_ptr_09_bad", scope: !2, file: !2, line: 69, type: !53, scopeLine: 70, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !55)
!53 = !DISubroutineType(types: !54)
!54 = !{null}
!55 = !{}
!56 = !DILocation(line: 71, column: 8, scope: !57)
!57 = distinct !DILexicalBlock(scope: !52, file: !2, line: 71, column: 8)
!58 = !DILocation(line: 71, column: 8, scope: !52)
!59 = !DILocalVariable(name: "reversedString", scope: !60, file: !2, line: 75, type: !42)
!60 = distinct !DILexicalBlock(scope: !61, file: !2, line: 73, column: 9)
!61 = distinct !DILexicalBlock(scope: !57, file: !2, line: 72, column: 5)
!62 = !DILocation(line: 75, column: 20, scope: !60)
!63 = !DILocation(line: 75, column: 37, scope: !60)
!64 = !DILocation(line: 76, column: 21, scope: !60)
!65 = !DILocation(line: 76, column: 13, scope: !60)
!66 = !DILocation(line: 82, column: 5, scope: !61)
!67 = !DILocation(line: 83, column: 1, scope: !52)
!68 = distinct !DISubprogram(name: "helperBad", scope: !2, file: !2, line: 18, type: !69, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !55)
!69 = !DISubroutineType(types: !70)
!70 = !{!42, !42}
!71 = !DILocalVariable(name: "aString", arg: 1, scope: !68, file: !2, line: 18, type: !42)
!72 = !DILocation(line: 18, column: 32, scope: !68)
!73 = !DILocalVariable(name: "i", scope: !68, file: !2, line: 20, type: !74)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !75, line: 46, baseType: !76)
!75 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!76 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!77 = !DILocation(line: 20, column: 12, scope: !68)
!78 = !DILocalVariable(name: "j", scope: !68, file: !2, line: 21, type: !74)
!79 = !DILocation(line: 21, column: 12, scope: !68)
!80 = !DILocalVariable(name: "reversedString", scope: !68, file: !2, line: 22, type: !42)
!81 = !DILocation(line: 22, column: 12, scope: !68)
!82 = !DILocation(line: 23, column: 9, scope: !83)
!83 = distinct !DILexicalBlock(scope: !68, file: !2, line: 23, column: 9)
!84 = !DILocation(line: 23, column: 17, scope: !83)
!85 = !DILocation(line: 23, column: 9, scope: !68)
!86 = !DILocation(line: 25, column: 20, scope: !87)
!87 = distinct !DILexicalBlock(scope: !83, file: !2, line: 24, column: 5)
!88 = !DILocation(line: 25, column: 13, scope: !87)
!89 = !DILocation(line: 25, column: 11, scope: !87)
!90 = !DILocation(line: 26, column: 46, scope: !87)
!91 = !DILocation(line: 26, column: 47, scope: !87)
!92 = !DILocation(line: 26, column: 35, scope: !87)
!93 = !DILocation(line: 26, column: 26, scope: !87)
!94 = !DILocation(line: 26, column: 24, scope: !87)
!95 = !DILocation(line: 27, column: 13, scope: !96)
!96 = distinct !DILexicalBlock(scope: !87, file: !2, line: 27, column: 13)
!97 = !DILocation(line: 27, column: 28, scope: !96)
!98 = !DILocation(line: 27, column: 13, scope: !87)
!99 = !DILocation(line: 27, column: 38, scope: !100)
!100 = distinct !DILexicalBlock(scope: !96, file: !2, line: 27, column: 37)
!101 = !DILocation(line: 28, column: 16, scope: !102)
!102 = distinct !DILexicalBlock(scope: !87, file: !2, line: 28, column: 9)
!103 = !DILocation(line: 28, column: 14, scope: !102)
!104 = !DILocation(line: 28, column: 21, scope: !105)
!105 = distinct !DILexicalBlock(scope: !102, file: !2, line: 28, column: 9)
!106 = !DILocation(line: 28, column: 25, scope: !105)
!107 = !DILocation(line: 28, column: 23, scope: !105)
!108 = !DILocation(line: 28, column: 9, scope: !102)
!109 = !DILocation(line: 30, column: 33, scope: !110)
!110 = distinct !DILexicalBlock(scope: !105, file: !2, line: 29, column: 9)
!111 = !DILocation(line: 30, column: 41, scope: !110)
!112 = !DILocation(line: 30, column: 43, scope: !110)
!113 = !DILocation(line: 30, column: 42, scope: !110)
!114 = !DILocation(line: 30, column: 44, scope: !110)
!115 = !DILocation(line: 30, column: 13, scope: !110)
!116 = !DILocation(line: 30, column: 28, scope: !110)
!117 = !DILocation(line: 30, column: 31, scope: !110)
!118 = !DILocation(line: 31, column: 9, scope: !110)
!119 = !DILocation(line: 28, column: 29, scope: !105)
!120 = !DILocation(line: 28, column: 9, scope: !105)
!121 = distinct !{!121, !108, !122, !123}
!122 = !DILocation(line: 31, column: 9, scope: !102)
!123 = !{!"llvm.loop.mustprogress"}
!124 = !DILocation(line: 32, column: 9, scope: !87)
!125 = !DILocation(line: 32, column: 24, scope: !87)
!126 = !DILocation(line: 32, column: 27, scope: !87)
!127 = !DILocation(line: 34, column: 14, scope: !87)
!128 = !DILocation(line: 34, column: 9, scope: !87)
!129 = !DILocation(line: 35, column: 16, scope: !87)
!130 = !DILocation(line: 35, column: 9, scope: !87)
!131 = !DILocation(line: 39, column: 9, scope: !132)
!132 = distinct !DILexicalBlock(scope: !83, file: !2, line: 38, column: 5)
!133 = !DILocation(line: 41, column: 1, scope: !68)
!134 = distinct !DISubprogram(name: "CWE416_Use_After_Free__return_freed_ptr_09_good", scope: !2, file: !2, line: 128, type: !53, scopeLine: 129, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !55)
!135 = !DILocation(line: 130, column: 5, scope: !134)
!136 = !DILocation(line: 131, column: 5, scope: !134)
!137 = !DILocation(line: 132, column: 1, scope: !134)
!138 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 143, type: !139, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !55)
!139 = !DISubroutineType(types: !140)
!140 = !{!141, !141, !142}
!141 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!143 = !DILocalVariable(name: "argc", arg: 1, scope: !138, file: !2, line: 143, type: !141)
!144 = !DILocation(line: 143, column: 14, scope: !138)
!145 = !DILocalVariable(name: "argv", arg: 2, scope: !138, file: !2, line: 143, type: !142)
!146 = !DILocation(line: 143, column: 27, scope: !138)
!147 = !DILocation(line: 146, column: 22, scope: !138)
!148 = !DILocation(line: 146, column: 12, scope: !138)
!149 = !DILocation(line: 146, column: 5, scope: !138)
!150 = !DILocation(line: 148, column: 5, scope: !138)
!151 = !DILocation(line: 149, column: 5, scope: !138)
!152 = !DILocation(line: 150, column: 5, scope: !138)
!153 = !DILocation(line: 153, column: 5, scope: !138)
!154 = !DILocation(line: 154, column: 5, scope: !138)
!155 = !DILocation(line: 155, column: 5, scope: !138)
!156 = !DILocation(line: 157, column: 5, scope: !138)
!157 = distinct !DISubprogram(name: "good1", scope: !2, file: !2, line: 90, type: !53, scopeLine: 91, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !55)
!158 = !DILocation(line: 92, column: 8, scope: !159)
!159 = distinct !DILexicalBlock(scope: !157, file: !2, line: 92, column: 8)
!160 = !DILocation(line: 92, column: 8, scope: !157)
!161 = !DILocation(line: 95, column: 9, scope: !162)
!162 = distinct !DILexicalBlock(scope: !159, file: !2, line: 93, column: 5)
!163 = !DILocation(line: 96, column: 5, scope: !162)
!164 = !DILocalVariable(name: "reversedString", scope: !165, file: !2, line: 101, type: !42)
!165 = distinct !DILexicalBlock(scope: !166, file: !2, line: 99, column: 9)
!166 = distinct !DILexicalBlock(scope: !159, file: !2, line: 98, column: 5)
!167 = !DILocation(line: 101, column: 20, scope: !165)
!168 = !DILocation(line: 101, column: 37, scope: !165)
!169 = !DILocation(line: 102, column: 25, scope: !165)
!170 = !DILocation(line: 102, column: 13, scope: !165)
!171 = !DILocation(line: 109, column: 1, scope: !157)
!172 = distinct !DISubprogram(name: "helperGood", scope: !2, file: !2, line: 43, type: !69, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !55)
!173 = !DILocalVariable(name: "aString", arg: 1, scope: !172, file: !2, line: 43, type: !42)
!174 = !DILocation(line: 43, column: 33, scope: !172)
!175 = !DILocalVariable(name: "i", scope: !172, file: !2, line: 45, type: !74)
!176 = !DILocation(line: 45, column: 12, scope: !172)
!177 = !DILocalVariable(name: "j", scope: !172, file: !2, line: 46, type: !74)
!178 = !DILocation(line: 46, column: 12, scope: !172)
!179 = !DILocalVariable(name: "reversedString", scope: !172, file: !2, line: 47, type: !42)
!180 = !DILocation(line: 47, column: 12, scope: !172)
!181 = !DILocation(line: 48, column: 9, scope: !182)
!182 = distinct !DILexicalBlock(scope: !172, file: !2, line: 48, column: 9)
!183 = !DILocation(line: 48, column: 17, scope: !182)
!184 = !DILocation(line: 48, column: 9, scope: !172)
!185 = !DILocation(line: 50, column: 20, scope: !186)
!186 = distinct !DILexicalBlock(scope: !182, file: !2, line: 49, column: 5)
!187 = !DILocation(line: 50, column: 13, scope: !186)
!188 = !DILocation(line: 50, column: 11, scope: !186)
!189 = !DILocation(line: 51, column: 46, scope: !186)
!190 = !DILocation(line: 51, column: 47, scope: !186)
!191 = !DILocation(line: 51, column: 35, scope: !186)
!192 = !DILocation(line: 51, column: 26, scope: !186)
!193 = !DILocation(line: 51, column: 24, scope: !186)
!194 = !DILocation(line: 52, column: 13, scope: !195)
!195 = distinct !DILexicalBlock(scope: !186, file: !2, line: 52, column: 13)
!196 = !DILocation(line: 52, column: 28, scope: !195)
!197 = !DILocation(line: 52, column: 13, scope: !186)
!198 = !DILocation(line: 52, column: 38, scope: !199)
!199 = distinct !DILexicalBlock(scope: !195, file: !2, line: 52, column: 37)
!200 = !DILocation(line: 53, column: 16, scope: !201)
!201 = distinct !DILexicalBlock(scope: !186, file: !2, line: 53, column: 9)
!202 = !DILocation(line: 53, column: 14, scope: !201)
!203 = !DILocation(line: 53, column: 21, scope: !204)
!204 = distinct !DILexicalBlock(scope: !201, file: !2, line: 53, column: 9)
!205 = !DILocation(line: 53, column: 25, scope: !204)
!206 = !DILocation(line: 53, column: 23, scope: !204)
!207 = !DILocation(line: 53, column: 9, scope: !201)
!208 = !DILocation(line: 55, column: 33, scope: !209)
!209 = distinct !DILexicalBlock(scope: !204, file: !2, line: 54, column: 9)
!210 = !DILocation(line: 55, column: 41, scope: !209)
!211 = !DILocation(line: 55, column: 43, scope: !209)
!212 = !DILocation(line: 55, column: 42, scope: !209)
!213 = !DILocation(line: 55, column: 44, scope: !209)
!214 = !DILocation(line: 55, column: 13, scope: !209)
!215 = !DILocation(line: 55, column: 28, scope: !209)
!216 = !DILocation(line: 55, column: 31, scope: !209)
!217 = !DILocation(line: 56, column: 9, scope: !209)
!218 = !DILocation(line: 53, column: 29, scope: !204)
!219 = !DILocation(line: 53, column: 9, scope: !204)
!220 = distinct !{!220, !207, !221, !123}
!221 = !DILocation(line: 56, column: 9, scope: !201)
!222 = !DILocation(line: 57, column: 9, scope: !186)
!223 = !DILocation(line: 57, column: 24, scope: !186)
!224 = !DILocation(line: 57, column: 27, scope: !186)
!225 = !DILocation(line: 59, column: 16, scope: !186)
!226 = !DILocation(line: 59, column: 9, scope: !186)
!227 = !DILocation(line: 63, column: 9, scope: !228)
!228 = distinct !DILexicalBlock(scope: !182, file: !2, line: 62, column: 5)
!229 = !DILocation(line: 65, column: 1, scope: !172)
!230 = distinct !DISubprogram(name: "good2", scope: !2, file: !2, line: 112, type: !53, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !55)
!231 = !DILocation(line: 114, column: 8, scope: !232)
!232 = distinct !DILexicalBlock(scope: !230, file: !2, line: 114, column: 8)
!233 = !DILocation(line: 114, column: 8, scope: !230)
!234 = !DILocalVariable(name: "reversedString", scope: !235, file: !2, line: 118, type: !42)
!235 = distinct !DILexicalBlock(scope: !236, file: !2, line: 116, column: 9)
!236 = distinct !DILexicalBlock(scope: !232, file: !2, line: 115, column: 5)
!237 = !DILocation(line: 118, column: 20, scope: !235)
!238 = !DILocation(line: 118, column: 37, scope: !235)
!239 = !DILocation(line: 119, column: 25, scope: !235)
!240 = !DILocation(line: 119, column: 13, scope: !235)
!241 = !DILocation(line: 125, column: 5, scope: !236)
!242 = !DILocation(line: 126, column: 1, scope: !230)
