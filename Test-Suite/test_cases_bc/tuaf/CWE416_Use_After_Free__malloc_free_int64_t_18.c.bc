; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tuaf/CWE416_Use_After_Free__malloc_free_int64_t_18.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_int64_t_18.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !33

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !58 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !62, metadata !DIExpression()), !dbg !63
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !66
  ret void, !dbg !67
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !68 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !69, metadata !DIExpression()), !dbg !70
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !73
  ret void, !dbg !74
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !75 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !76, metadata !DIExpression()), !dbg !77
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !82 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !83, metadata !DIExpression()), !dbg !84
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !87
  ret void, !dbg !88
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !89 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !90, metadata !DIExpression()), !dbg !91
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !94
  ret void, !dbg !95
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !96 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !97, metadata !DIExpression()), !dbg !98
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !101
  ret void, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !103 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !107, metadata !DIExpression()), !dbg !108
  %0 = load i32, ptr %n.addr, align 4, !dbg !109
  %conv = sext i32 %0 to i64, !dbg !109
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !110
  ret ptr %call, !dbg !111
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !112 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %0 = load i32, ptr %n.addr, align 4, !dbg !115
  %conv = sext i32 %0 to i64, !dbg !115
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !116
  ret ptr %call, !dbg !117
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !118 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !119, metadata !DIExpression()), !dbg !120
  %0 = load i32, ptr %n.addr, align 4, !dbg !121
  %conv = sext i32 %0 to i64, !dbg !121
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !122
  ret ptr %call, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !124 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !125, metadata !DIExpression()), !dbg !126
  %0 = load i32, ptr %n.addr, align 4, !dbg !127
  %conv = sext i32 %0 to i64, !dbg !127
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !128
  ret ptr %call, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !130 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !131, metadata !DIExpression()), !dbg !132
  %0 = load i32, ptr %n.addr, align 4, !dbg !133
  %conv = sext i32 %0 to i64, !dbg !133
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !134
  ret ptr %call, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !136 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !137, metadata !DIExpression()), !dbg !138
  %0 = load i32, ptr %n.addr, align 4, !dbg !139
  %conv = sext i32 %0 to i64, !dbg !139
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !140
  ret ptr %call, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !142 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !143, metadata !DIExpression()), !dbg !144
  %0 = load i32, ptr %n.addr, align 4, !dbg !145
  %conv = sext i32 %0 to i64, !dbg !145
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !146
  ret ptr %call, !dbg !147
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !148 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !149, metadata !DIExpression()), !dbg !150
  %0 = load i32, ptr %n.addr, align 4, !dbg !151
  %conv = sext i32 %0 to i64, !dbg !151
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !152
  ret ptr %call, !dbg !153
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !154 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !157, metadata !DIExpression()), !dbg !158
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !159, metadata !DIExpression()), !dbg !160
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !161
  ret void, !dbg !162
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !163 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !167, metadata !DIExpression()), !dbg !168
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !169, metadata !DIExpression()), !dbg !170
  ret void, !dbg !171
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !172 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !173, metadata !DIExpression()), !dbg !174
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !175, metadata !DIExpression()), !dbg !176
  ret void, !dbg !177
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !178 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !181, metadata !DIExpression()), !dbg !182
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !183, metadata !DIExpression()), !dbg !184
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !185, metadata !DIExpression()), !dbg !186
  ret void, !dbg !187
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !188 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !191, metadata !DIExpression()), !dbg !192
  ret void, !dbg !193
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !194 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !195, metadata !DIExpression()), !dbg !196
  %0 = load ptr, ptr %str.addr, align 8, !dbg !197
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !198
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !199
  %call2 = call i32 @getchar(), !dbg !200
  ret void, !dbg !201
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !202 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !206, metadata !DIExpression()), !dbg !207
  %0 = load ptr, ptr %p.addr, align 8, !dbg !208
  store i32 0, ptr %0, align 4, !dbg !209
  %1 = load ptr, ptr %retval, align 8, !dbg !210
  ret ptr %1, !dbg !210
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !211 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !212, metadata !DIExpression()), !dbg !213
  %0 = load ptr, ptr %p.addr, align 8, !dbg !214
  store i32 0, ptr %0, align 4, !dbg !215
  %1 = load ptr, ptr %retval, align 8, !dbg !216
  ret ptr %1, !dbg !216
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !217 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !218, metadata !DIExpression()), !dbg !219
  %0 = load ptr, ptr %p.addr, align 8, !dbg !220
  call void @free(ptr noundef %0) #7, !dbg !221
  %1 = load ptr, ptr %retval, align 8, !dbg !222
  ret ptr %1, !dbg !222
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !223 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !224, metadata !DIExpression()), !dbg !225
  %0 = load ptr, ptr %p.addr, align 8, !dbg !226
  call void @free(ptr noundef %0) #7, !dbg !227
  %1 = load ptr, ptr %retval, align 8, !dbg !228
  ret ptr %1, !dbg !228
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !229 {
entry:
  ret void, !dbg !232
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_int64_t_18_bad() #0 !dbg !233 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !234, metadata !DIExpression()), !dbg !235
  store ptr null, ptr %data, align 8, !dbg !236
  br label %source, !dbg !237

source:                                           ; preds = %entry
  call void @llvm.dbg.label(metadata !238), !dbg !239
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !240
  store ptr %call, ptr %data, align 8, !dbg !241
  %0 = load ptr, ptr %data, align 8, !dbg !242
  %cmp = icmp eq ptr %0, null, !dbg !244
  br i1 %cmp, label %if.then, label %if.end, !dbg !245

if.then:                                          ; preds = %source
  call void @exit(i32 noundef -1) #8, !dbg !246
  unreachable, !dbg !246

if.end:                                           ; preds = %source
  call void @llvm.dbg.declare(metadata ptr %i, metadata !248, metadata !DIExpression()), !dbg !253
  store i64 0, ptr %i, align 8, !dbg !254
  br label %for.cond, !dbg !256

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !257
  %cmp1 = icmp ult i64 %1, 100, !dbg !259
  br i1 %cmp1, label %for.body, label %for.end, !dbg !260

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !261
  %3 = load i64, ptr %i, align 8, !dbg !263
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !261
  store i64 5, ptr %arrayidx, align 8, !dbg !264
  br label %for.inc, !dbg !265

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !266
  %inc = add i64 %4, 1, !dbg !266
  store i64 %inc, ptr %i, align 8, !dbg !266
  br label %for.cond, !dbg !267, !llvm.loop !268

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !271
  call void @free(ptr noundef %5) #7, !dbg !272
  br label %sink, !dbg !273

sink:                                             ; preds = %for.end
  call void @llvm.dbg.label(metadata !274), !dbg !275
  %6 = load ptr, ptr %data, align 8, !dbg !276
  %arrayidx2 = getelementptr inbounds i64, ptr %6, i64 0, !dbg !276
  %7 = load i64, ptr %arrayidx2, align 8, !dbg !276
  %8 = inttoptr i64 %7 to ptr, !dbg !276
  %call3 = call ptr @UAFFUNC(ptr noundef %8), !dbg !277
  ret void, !dbg !278
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_int64_t_18_good() #0 !dbg !279 {
entry:
  call void @goodB2G(), !dbg !280
  call void @goodG2B(), !dbg !281
  ret void, !dbg !282
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !283 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !287, metadata !DIExpression()), !dbg !288
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !289, metadata !DIExpression()), !dbg !290
  %call = call i64 @time(ptr noundef null) #7, !dbg !291
  %conv = trunc i64 %call to i32, !dbg !292
  call void @srand(i32 noundef %conv) #7, !dbg !293
  call void @printLine(ptr noundef @.str.3), !dbg !294
  call void @CWE416_Use_After_Free__malloc_free_int64_t_18_good(), !dbg !295
  call void @printLine(ptr noundef @.str.4), !dbg !296
  call void @printLine(ptr noundef @.str.5), !dbg !297
  call void @CWE416_Use_After_Free__malloc_free_int64_t_18_bad(), !dbg !298
  call void @printLine(ptr noundef @.str.6), !dbg !299
  ret i32 0, !dbg !300
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !301 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !302, metadata !DIExpression()), !dbg !303
  store ptr null, ptr %data, align 8, !dbg !304
  br label %source, !dbg !305

source:                                           ; preds = %entry
  call void @llvm.dbg.label(metadata !306), !dbg !307
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !308
  store ptr %call, ptr %data, align 8, !dbg !309
  %0 = load ptr, ptr %data, align 8, !dbg !310
  %cmp = icmp eq ptr %0, null, !dbg !312
  br i1 %cmp, label %if.then, label %if.end, !dbg !313

if.then:                                          ; preds = %source
  call void @exit(i32 noundef -1) #8, !dbg !314
  unreachable, !dbg !314

if.end:                                           ; preds = %source
  call void @llvm.dbg.declare(metadata ptr %i, metadata !316, metadata !DIExpression()), !dbg !318
  store i64 0, ptr %i, align 8, !dbg !319
  br label %for.cond, !dbg !321

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !322
  %cmp1 = icmp ult i64 %1, 100, !dbg !324
  br i1 %cmp1, label %for.body, label %for.end, !dbg !325

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !326
  %3 = load i64, ptr %i, align 8, !dbg !328
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !326
  store i64 5, ptr %arrayidx, align 8, !dbg !329
  br label %for.inc, !dbg !330

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !331
  %inc = add i64 %4, 1, !dbg !331
  store i64 %inc, ptr %i, align 8, !dbg !331
  br label %for.cond, !dbg !332, !llvm.loop !333

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !335
  call void @free(ptr noundef %5) #7, !dbg !336
  br label %sink, !dbg !337

sink:                                             ; preds = %for.end
  call void @llvm.dbg.label(metadata !338), !dbg !339
  ret void, !dbg !340
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !341 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !342, metadata !DIExpression()), !dbg !343
  store ptr null, ptr %data, align 8, !dbg !344
  br label %source, !dbg !345

source:                                           ; preds = %entry
  call void @llvm.dbg.label(metadata !346), !dbg !347
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !348
  store ptr %call, ptr %data, align 8, !dbg !349
  %0 = load ptr, ptr %data, align 8, !dbg !350
  %cmp = icmp eq ptr %0, null, !dbg !352
  br i1 %cmp, label %if.then, label %if.end, !dbg !353

if.then:                                          ; preds = %source
  call void @exit(i32 noundef -1) #8, !dbg !354
  unreachable, !dbg !354

if.end:                                           ; preds = %source
  call void @llvm.dbg.declare(metadata ptr %i, metadata !356, metadata !DIExpression()), !dbg !358
  store i64 0, ptr %i, align 8, !dbg !359
  br label %for.cond, !dbg !361

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !362
  %cmp1 = icmp ult i64 %1, 100, !dbg !364
  br i1 %cmp1, label %for.body, label %for.end, !dbg !365

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !366
  %3 = load i64, ptr %i, align 8, !dbg !368
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 %3, !dbg !366
  store i64 5, ptr %arrayidx, align 8, !dbg !369
  br label %for.inc, !dbg !370

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !371
  %inc = add i64 %4, 1, !dbg !371
  store i64 %inc, ptr %i, align 8, !dbg !371
  br label %for.cond, !dbg !372, !llvm.loop !373

for.end:                                          ; preds = %for.cond
  br label %sink, !dbg !375

sink:                                             ; preds = %for.end
  call void @llvm.dbg.label(metadata !376), !dbg !377
  %5 = load ptr, ptr %data, align 8, !dbg !378
  %arrayidx2 = getelementptr inbounds i64, ptr %5, i64 0, !dbg !378
  %6 = load i64, ptr %arrayidx2, align 8, !dbg !378
  %7 = inttoptr i64 %6 to ptr, !dbg !378
  %call3 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !379
  ret void, !dbg !380
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!38}
!llvm.module.flags = !{!50, !51, !52, !53, !54, !55, !56}
!llvm.ident = !{!57}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 125, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tuaf/CWE416_Use_After_Free__malloc_free_int64_t_18.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "34e7ae40c98dba6294879075358b99aa")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 18)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 127, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 16)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 130, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 17)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 132, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 15)
!38 = distinct !DICompileUnit(language: DW_LANG_C11, file: !39, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !40, globals: !49, splitDebugInlining: false, nameTableKind: None)
!39 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_int64_t_18.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "34e7ae40c98dba6294879075358b99aa")
!40 = !{!41, !42, !48}
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64)
!43 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !44, line: 27, baseType: !45)
!44 = !DIFile(filename: "/usr/include/bits/stdint-intn.h", directory: "", checksumkind: CSK_MD5, checksum: "457547631e07cd24d9a14c8410e28e57")
!45 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !46, line: 43, baseType: !47)
!46 = !DIFile(filename: "/usr/include/bits/types.h", directory: "", checksumkind: CSK_MD5, checksum: "eac2c46b20ddc2be81186b6ffebfd845")
!47 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!48 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!49 = !{!0, !7, !12, !17, !23, !28, !33}
!50 = !{i32 7, !"Dwarf Version", i32 5}
!51 = !{i32 2, !"Debug Info Version", i32 3}
!52 = !{i32 1, !"wchar_size", i32 4}
!53 = !{i32 8, !"PIC Level", i32 2}
!54 = !{i32 7, !"PIE Level", i32 2}
!55 = !{i32 7, !"uwtable", i32 2}
!56 = !{i32 7, !"frame-pointer", i32 2}
!57 = !{!"clang version 16.0.0"}
!58 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !59, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!59 = !DISubroutineType(types: !60)
!60 = !{null, !41, !41}
!61 = !{}
!62 = !DILocalVariable(name: "p", arg: 1, scope: !58, file: !2, line: 4, type: !41)
!63 = !DILocation(line: 4, column: 22, scope: !58)
!64 = !DILocalVariable(name: "q", arg: 2, scope: !58, file: !2, line: 4, type: !41)
!65 = !DILocation(line: 4, column: 31, scope: !58)
!66 = !DILocation(line: 5, column: 3, scope: !58)
!67 = !DILocation(line: 6, column: 1, scope: !58)
!68 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !59, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!69 = !DILocalVariable(name: "p", arg: 1, scope: !68, file: !2, line: 8, type: !41)
!70 = !DILocation(line: 8, column: 25, scope: !68)
!71 = !DILocalVariable(name: "q", arg: 2, scope: !68, file: !2, line: 8, type: !41)
!72 = !DILocation(line: 8, column: 34, scope: !68)
!73 = !DILocation(line: 9, column: 3, scope: !68)
!74 = !DILocation(line: 10, column: 1, scope: !68)
!75 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !59, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!76 = !DILocalVariable(name: "p", arg: 1, scope: !75, file: !2, line: 12, type: !41)
!77 = !DILocation(line: 12, column: 21, scope: !75)
!78 = !DILocalVariable(name: "q", arg: 2, scope: !75, file: !2, line: 12, type: !41)
!79 = !DILocation(line: 12, column: 30, scope: !75)
!80 = !DILocation(line: 13, column: 3, scope: !75)
!81 = !DILocation(line: 14, column: 1, scope: !75)
!82 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !59, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!83 = !DILocalVariable(name: "p", arg: 1, scope: !82, file: !2, line: 16, type: !41)
!84 = !DILocation(line: 16, column: 20, scope: !82)
!85 = !DILocalVariable(name: "q", arg: 2, scope: !82, file: !2, line: 16, type: !41)
!86 = !DILocation(line: 16, column: 29, scope: !82)
!87 = !DILocation(line: 17, column: 3, scope: !82)
!88 = !DILocation(line: 18, column: 1, scope: !82)
!89 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !59, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!90 = !DILocalVariable(name: "p", arg: 1, scope: !89, file: !2, line: 20, type: !41)
!91 = !DILocation(line: 20, column: 34, scope: !89)
!92 = !DILocalVariable(name: "q", arg: 2, scope: !89, file: !2, line: 20, type: !41)
!93 = !DILocation(line: 20, column: 43, scope: !89)
!94 = !DILocation(line: 21, column: 3, scope: !89)
!95 = !DILocation(line: 22, column: 1, scope: !89)
!96 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !59, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!97 = !DILocalVariable(name: "p", arg: 1, scope: !96, file: !2, line: 24, type: !41)
!98 = !DILocation(line: 24, column: 33, scope: !96)
!99 = !DILocalVariable(name: "q", arg: 2, scope: !96, file: !2, line: 24, type: !41)
!100 = !DILocation(line: 24, column: 42, scope: !96)
!101 = !DILocation(line: 25, column: 3, scope: !96)
!102 = !DILocation(line: 26, column: 1, scope: !96)
!103 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !104, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!104 = !DISubroutineType(types: !105)
!105 = !{!41, !106}
!106 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!107 = !DILocalVariable(name: "n", arg: 1, scope: !103, file: !2, line: 29, type: !106)
!108 = !DILocation(line: 29, column: 22, scope: !103)
!109 = !DILocation(line: 30, column: 17, scope: !103)
!110 = !DILocation(line: 30, column: 10, scope: !103)
!111 = !DILocation(line: 30, column: 3, scope: !103)
!112 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !104, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!113 = !DILocalVariable(name: "n", arg: 1, scope: !112, file: !2, line: 33, type: !106)
!114 = !DILocation(line: 33, column: 28, scope: !112)
!115 = !DILocation(line: 34, column: 19, scope: !112)
!116 = !DILocation(line: 34, column: 12, scope: !112)
!117 = !DILocation(line: 34, column: 5, scope: !112)
!118 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !104, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!119 = !DILocalVariable(name: "n", arg: 1, scope: !118, file: !2, line: 37, type: !106)
!120 = !DILocation(line: 37, column: 21, scope: !118)
!121 = !DILocation(line: 38, column: 17, scope: !118)
!122 = !DILocation(line: 38, column: 10, scope: !118)
!123 = !DILocation(line: 38, column: 3, scope: !118)
!124 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !104, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!125 = !DILocalVariable(name: "n", arg: 1, scope: !124, file: !2, line: 41, type: !106)
!126 = !DILocation(line: 41, column: 21, scope: !124)
!127 = !DILocation(line: 42, column: 17, scope: !124)
!128 = !DILocation(line: 42, column: 10, scope: !124)
!129 = !DILocation(line: 42, column: 3, scope: !124)
!130 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !104, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!131 = !DILocalVariable(name: "n", arg: 1, scope: !130, file: !2, line: 45, type: !106)
!132 = !DILocation(line: 45, column: 21, scope: !130)
!133 = !DILocation(line: 46, column: 17, scope: !130)
!134 = !DILocation(line: 46, column: 10, scope: !130)
!135 = !DILocation(line: 46, column: 3, scope: !130)
!136 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !104, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!137 = !DILocalVariable(name: "n", arg: 1, scope: !136, file: !2, line: 49, type: !106)
!138 = !DILocation(line: 49, column: 21, scope: !136)
!139 = !DILocation(line: 50, column: 17, scope: !136)
!140 = !DILocation(line: 50, column: 10, scope: !136)
!141 = !DILocation(line: 50, column: 3, scope: !136)
!142 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !104, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!143 = !DILocalVariable(name: "n", arg: 1, scope: !142, file: !2, line: 53, type: !106)
!144 = !DILocation(line: 53, column: 21, scope: !142)
!145 = !DILocation(line: 54, column: 17, scope: !142)
!146 = !DILocation(line: 54, column: 10, scope: !142)
!147 = !DILocation(line: 54, column: 3, scope: !142)
!148 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !104, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!149 = !DILocalVariable(name: "n", arg: 1, scope: !148, file: !2, line: 57, type: !106)
!150 = !DILocation(line: 57, column: 18, scope: !148)
!151 = !DILocation(line: 58, column: 17, scope: !148)
!152 = !DILocation(line: 58, column: 10, scope: !148)
!153 = !DILocation(line: 58, column: 3, scope: !148)
!154 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !155, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!155 = !DISubroutineType(types: !156)
!156 = !{null, !106, !106}
!157 = !DILocalVariable(name: "id", arg: 1, scope: !154, file: !2, line: 67, type: !106)
!158 = !DILocation(line: 67, column: 20, scope: !154)
!159 = !DILocalVariable(name: "flags", arg: 2, scope: !154, file: !2, line: 67, type: !106)
!160 = !DILocation(line: 67, column: 28, scope: !154)
!161 = !DILocation(line: 68, column: 3, scope: !154)
!162 = !DILocation(line: 69, column: 1, scope: !154)
!163 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !164, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!164 = !DISubroutineType(types: !165)
!165 = !{null, !106, !166}
!166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!167 = !DILocalVariable(name: "thdid", arg: 1, scope: !163, file: !2, line: 79, type: !106)
!168 = !DILocation(line: 79, column: 21, scope: !163)
!169 = !DILocalVariable(name: "cxt", arg: 2, scope: !163, file: !2, line: 79, type: !166)
!170 = !DILocation(line: 79, column: 34, scope: !163)
!171 = !DILocation(line: 81, column: 1, scope: !163)
!172 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !164, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!173 = !DILocalVariable(name: "thdid", arg: 1, scope: !172, file: !2, line: 82, type: !106)
!174 = !DILocation(line: 82, column: 21, scope: !172)
!175 = !DILocalVariable(name: "cxt", arg: 2, scope: !172, file: !2, line: 82, type: !166)
!176 = !DILocation(line: 82, column: 33, scope: !172)
!177 = !DILocation(line: 84, column: 1, scope: !172)
!178 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !179, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!179 = !DISubroutineType(types: !180)
!180 = !{null, !106, !166, !166}
!181 = !DILocalVariable(name: "thdid", arg: 1, scope: !178, file: !2, line: 85, type: !106)
!182 = !DILocation(line: 85, column: 26, scope: !178)
!183 = !DILocalVariable(name: "cxt", arg: 2, scope: !178, file: !2, line: 85, type: !166)
!184 = !DILocation(line: 85, column: 38, scope: !178)
!185 = !DILocalVariable(name: "lev", arg: 3, scope: !178, file: !2, line: 85, type: !166)
!186 = !DILocation(line: 85, column: 49, scope: !178)
!187 = !DILocation(line: 87, column: 1, scope: !178)
!188 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !189, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!189 = !DISubroutineType(types: !190)
!190 = !{null, !166}
!191 = !DILocalVariable(name: "lockname", arg: 1, scope: !188, file: !2, line: 89, type: !166)
!192 = !DILocation(line: 89, column: 17, scope: !188)
!193 = !DILocation(line: 91, column: 1, scope: !188)
!194 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !189, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!195 = !DILocalVariable(name: "str", arg: 1, scope: !194, file: !2, line: 93, type: !166)
!196 = !DILocation(line: 93, column: 18, scope: !194)
!197 = !DILocation(line: 94, column: 18, scope: !194)
!198 = !DILocation(line: 94, column: 3, scope: !194)
!199 = !DILocation(line: 95, column: 3, scope: !194)
!200 = !DILocation(line: 96, column: 3, scope: !194)
!201 = !DILocation(line: 97, column: 1, scope: !194)
!202 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !203, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!203 = !DISubroutineType(types: !204)
!204 = !{!41, !205}
!205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64)
!206 = !DILocalVariable(name: "p", arg: 1, scope: !202, file: !2, line: 100, type: !205)
!207 = !DILocation(line: 100, column: 24, scope: !202)
!208 = !DILocation(line: 101, column: 6, scope: !202)
!209 = !DILocation(line: 101, column: 8, scope: !202)
!210 = !DILocation(line: 102, column: 1, scope: !202)
!211 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !203, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!212 = !DILocalVariable(name: "p", arg: 1, scope: !211, file: !2, line: 104, type: !205)
!213 = !DILocation(line: 104, column: 20, scope: !211)
!214 = !DILocation(line: 105, column: 6, scope: !211)
!215 = !DILocation(line: 105, column: 8, scope: !211)
!216 = !DILocation(line: 106, column: 1, scope: !211)
!217 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !203, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!218 = !DILocalVariable(name: "p", arg: 1, scope: !217, file: !2, line: 110, type: !205)
!219 = !DILocation(line: 110, column: 22, scope: !217)
!220 = !DILocation(line: 111, column: 10, scope: !217)
!221 = !DILocation(line: 111, column: 5, scope: !217)
!222 = !DILocation(line: 112, column: 1, scope: !217)
!223 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !203, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!224 = !DILocalVariable(name: "p", arg: 1, scope: !223, file: !2, line: 115, type: !205)
!225 = !DILocation(line: 115, column: 24, scope: !223)
!226 = !DILocation(line: 116, column: 10, scope: !223)
!227 = !DILocation(line: 116, column: 5, scope: !223)
!228 = !DILocation(line: 117, column: 1, scope: !223)
!229 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !230, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!230 = !DISubroutineType(types: !231)
!231 = !{null}
!232 = !DILocation(line: 135, column: 20, scope: !229)
!233 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_int64_t_18_bad", scope: !19, file: !19, line: 24, type: !230, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!234 = !DILocalVariable(name: "data", scope: !233, file: !19, line: 26, type: !42)
!235 = !DILocation(line: 26, column: 15, scope: !233)
!236 = !DILocation(line: 28, column: 10, scope: !233)
!237 = !DILocation(line: 29, column: 5, scope: !233)
!238 = !DILabel(scope: !233, name: "source", file: !19, line: 30)
!239 = !DILocation(line: 30, column: 1, scope: !233)
!240 = !DILocation(line: 31, column: 23, scope: !233)
!241 = !DILocation(line: 31, column: 10, scope: !233)
!242 = !DILocation(line: 32, column: 9, scope: !243)
!243 = distinct !DILexicalBlock(scope: !233, file: !19, line: 32, column: 9)
!244 = !DILocation(line: 32, column: 14, scope: !243)
!245 = !DILocation(line: 32, column: 9, scope: !233)
!246 = !DILocation(line: 32, column: 24, scope: !247)
!247 = distinct !DILexicalBlock(scope: !243, file: !19, line: 32, column: 23)
!248 = !DILocalVariable(name: "i", scope: !249, file: !19, line: 34, type: !250)
!249 = distinct !DILexicalBlock(scope: !233, file: !19, line: 33, column: 5)
!250 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !251, line: 46, baseType: !252)
!251 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!252 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!253 = !DILocation(line: 34, column: 16, scope: !249)
!254 = !DILocation(line: 35, column: 15, scope: !255)
!255 = distinct !DILexicalBlock(scope: !249, file: !19, line: 35, column: 9)
!256 = !DILocation(line: 35, column: 13, scope: !255)
!257 = !DILocation(line: 35, column: 20, scope: !258)
!258 = distinct !DILexicalBlock(scope: !255, file: !19, line: 35, column: 9)
!259 = !DILocation(line: 35, column: 22, scope: !258)
!260 = !DILocation(line: 35, column: 9, scope: !255)
!261 = !DILocation(line: 37, column: 13, scope: !262)
!262 = distinct !DILexicalBlock(scope: !258, file: !19, line: 36, column: 9)
!263 = !DILocation(line: 37, column: 18, scope: !262)
!264 = !DILocation(line: 37, column: 21, scope: !262)
!265 = !DILocation(line: 38, column: 9, scope: !262)
!266 = !DILocation(line: 35, column: 30, scope: !258)
!267 = !DILocation(line: 35, column: 9, scope: !258)
!268 = distinct !{!268, !260, !269, !270}
!269 = !DILocation(line: 38, column: 9, scope: !255)
!270 = !{!"llvm.loop.mustprogress"}
!271 = !DILocation(line: 41, column: 10, scope: !233)
!272 = !DILocation(line: 41, column: 5, scope: !233)
!273 = !DILocation(line: 42, column: 5, scope: !233)
!274 = !DILabel(scope: !233, name: "sink", file: !19, line: 43)
!275 = !DILocation(line: 43, column: 1, scope: !233)
!276 = !DILocation(line: 45, column: 13, scope: !233)
!277 = !DILocation(line: 45, column: 5, scope: !233)
!278 = !DILocation(line: 47, column: 1, scope: !233)
!279 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_int64_t_18_good", scope: !19, file: !19, line: 105, type: !230, scopeLine: 106, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!280 = !DILocation(line: 107, column: 5, scope: !279)
!281 = !DILocation(line: 108, column: 5, scope: !279)
!282 = !DILocation(line: 109, column: 1, scope: !279)
!283 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 120, type: !284, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !61)
!284 = !DISubroutineType(types: !285)
!285 = !{!106, !106, !286}
!286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !166, size: 64)
!287 = !DILocalVariable(name: "argc", arg: 1, scope: !283, file: !19, line: 120, type: !106)
!288 = !DILocation(line: 120, column: 14, scope: !283)
!289 = !DILocalVariable(name: "argv", arg: 2, scope: !283, file: !19, line: 120, type: !286)
!290 = !DILocation(line: 120, column: 27, scope: !283)
!291 = !DILocation(line: 123, column: 22, scope: !283)
!292 = !DILocation(line: 123, column: 12, scope: !283)
!293 = !DILocation(line: 123, column: 5, scope: !283)
!294 = !DILocation(line: 125, column: 5, scope: !283)
!295 = !DILocation(line: 126, column: 5, scope: !283)
!296 = !DILocation(line: 127, column: 5, scope: !283)
!297 = !DILocation(line: 130, column: 5, scope: !283)
!298 = !DILocation(line: 131, column: 5, scope: !283)
!299 = !DILocation(line: 132, column: 5, scope: !283)
!300 = !DILocation(line: 134, column: 5, scope: !283)
!301 = distinct !DISubprogram(name: "goodB2G", scope: !19, file: !19, line: 54, type: !230, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !61)
!302 = !DILocalVariable(name: "data", scope: !301, file: !19, line: 56, type: !42)
!303 = !DILocation(line: 56, column: 15, scope: !301)
!304 = !DILocation(line: 58, column: 10, scope: !301)
!305 = !DILocation(line: 59, column: 5, scope: !301)
!306 = !DILabel(scope: !301, name: "source", file: !19, line: 60)
!307 = !DILocation(line: 60, column: 1, scope: !301)
!308 = !DILocation(line: 61, column: 23, scope: !301)
!309 = !DILocation(line: 61, column: 10, scope: !301)
!310 = !DILocation(line: 62, column: 9, scope: !311)
!311 = distinct !DILexicalBlock(scope: !301, file: !19, line: 62, column: 9)
!312 = !DILocation(line: 62, column: 14, scope: !311)
!313 = !DILocation(line: 62, column: 9, scope: !301)
!314 = !DILocation(line: 62, column: 24, scope: !315)
!315 = distinct !DILexicalBlock(scope: !311, file: !19, line: 62, column: 23)
!316 = !DILocalVariable(name: "i", scope: !317, file: !19, line: 64, type: !250)
!317 = distinct !DILexicalBlock(scope: !301, file: !19, line: 63, column: 5)
!318 = !DILocation(line: 64, column: 16, scope: !317)
!319 = !DILocation(line: 65, column: 15, scope: !320)
!320 = distinct !DILexicalBlock(scope: !317, file: !19, line: 65, column: 9)
!321 = !DILocation(line: 65, column: 13, scope: !320)
!322 = !DILocation(line: 65, column: 20, scope: !323)
!323 = distinct !DILexicalBlock(scope: !320, file: !19, line: 65, column: 9)
!324 = !DILocation(line: 65, column: 22, scope: !323)
!325 = !DILocation(line: 65, column: 9, scope: !320)
!326 = !DILocation(line: 67, column: 13, scope: !327)
!327 = distinct !DILexicalBlock(scope: !323, file: !19, line: 66, column: 9)
!328 = !DILocation(line: 67, column: 18, scope: !327)
!329 = !DILocation(line: 67, column: 21, scope: !327)
!330 = !DILocation(line: 68, column: 9, scope: !327)
!331 = !DILocation(line: 65, column: 30, scope: !323)
!332 = !DILocation(line: 65, column: 9, scope: !323)
!333 = distinct !{!333, !325, !334, !270}
!334 = !DILocation(line: 68, column: 9, scope: !320)
!335 = !DILocation(line: 71, column: 10, scope: !301)
!336 = !DILocation(line: 71, column: 5, scope: !301)
!337 = !DILocation(line: 72, column: 5, scope: !301)
!338 = !DILabel(scope: !301, name: "sink", file: !19, line: 73)
!339 = !DILocation(line: 73, column: 1, scope: !301)
!340 = !DILocation(line: 78, column: 1, scope: !301)
!341 = distinct !DISubprogram(name: "goodG2B", scope: !19, file: !19, line: 81, type: !230, scopeLine: 82, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !61)
!342 = !DILocalVariable(name: "data", scope: !341, file: !19, line: 83, type: !42)
!343 = !DILocation(line: 83, column: 15, scope: !341)
!344 = !DILocation(line: 85, column: 10, scope: !341)
!345 = !DILocation(line: 86, column: 5, scope: !341)
!346 = !DILabel(scope: !341, name: "source", file: !19, line: 87)
!347 = !DILocation(line: 87, column: 1, scope: !341)
!348 = !DILocation(line: 88, column: 23, scope: !341)
!349 = !DILocation(line: 88, column: 10, scope: !341)
!350 = !DILocation(line: 89, column: 9, scope: !351)
!351 = distinct !DILexicalBlock(scope: !341, file: !19, line: 89, column: 9)
!352 = !DILocation(line: 89, column: 14, scope: !351)
!353 = !DILocation(line: 89, column: 9, scope: !341)
!354 = !DILocation(line: 89, column: 24, scope: !355)
!355 = distinct !DILexicalBlock(scope: !351, file: !19, line: 89, column: 23)
!356 = !DILocalVariable(name: "i", scope: !357, file: !19, line: 91, type: !250)
!357 = distinct !DILexicalBlock(scope: !341, file: !19, line: 90, column: 5)
!358 = !DILocation(line: 91, column: 16, scope: !357)
!359 = !DILocation(line: 92, column: 15, scope: !360)
!360 = distinct !DILexicalBlock(scope: !357, file: !19, line: 92, column: 9)
!361 = !DILocation(line: 92, column: 13, scope: !360)
!362 = !DILocation(line: 92, column: 20, scope: !363)
!363 = distinct !DILexicalBlock(scope: !360, file: !19, line: 92, column: 9)
!364 = !DILocation(line: 92, column: 22, scope: !363)
!365 = !DILocation(line: 92, column: 9, scope: !360)
!366 = !DILocation(line: 94, column: 13, scope: !367)
!367 = distinct !DILexicalBlock(scope: !363, file: !19, line: 93, column: 9)
!368 = !DILocation(line: 94, column: 18, scope: !367)
!369 = !DILocation(line: 94, column: 21, scope: !367)
!370 = !DILocation(line: 95, column: 9, scope: !367)
!371 = !DILocation(line: 92, column: 30, scope: !363)
!372 = !DILocation(line: 92, column: 9, scope: !363)
!373 = distinct !{!373, !365, !374, !270}
!374 = !DILocation(line: 95, column: 9, scope: !360)
!375 = !DILocation(line: 98, column: 5, scope: !341)
!376 = !DILabel(scope: !341, name: "sink", file: !19, line: 99)
!377 = !DILocation(line: 99, column: 1, scope: !341)
!378 = !DILocation(line: 101, column: 17, scope: !341)
!379 = !DILocation(line: 101, column: 5, scope: !341)
!380 = !DILocation(line: 103, column: 1, scope: !341)
