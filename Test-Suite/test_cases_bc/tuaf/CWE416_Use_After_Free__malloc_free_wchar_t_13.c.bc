; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tuaf/CWE416_Use_After_Free__malloc_free_wchar_t_13.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_wchar_t_13.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@GLOBAL_CONST_FIVE = external constant i32, align 4
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !33
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !38

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !61 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !65, metadata !DIExpression()), !dbg !66
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !71 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !72, metadata !DIExpression()), !dbg !73
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !76
  ret void, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !78 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !79, metadata !DIExpression()), !dbg !80
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !83
  ret void, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !85 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !86, metadata !DIExpression()), !dbg !87
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !90
  ret void, !dbg !91
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !92 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !93, metadata !DIExpression()), !dbg !94
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !95, metadata !DIExpression()), !dbg !96
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !97
  ret void, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !99 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !100, metadata !DIExpression()), !dbg !101
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !102, metadata !DIExpression()), !dbg !103
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !104
  ret void, !dbg !105
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !106 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !109, metadata !DIExpression()), !dbg !110
  %0 = load i32, ptr %n.addr, align 4, !dbg !111
  %conv = sext i32 %0 to i64, !dbg !111
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !112
  ret ptr %call, !dbg !113
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !114 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %0 = load i32, ptr %n.addr, align 4, !dbg !117
  %conv = sext i32 %0 to i64, !dbg !117
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !118
  ret ptr %call, !dbg !119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !120 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !121, metadata !DIExpression()), !dbg !122
  %0 = load i32, ptr %n.addr, align 4, !dbg !123
  %conv = sext i32 %0 to i64, !dbg !123
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !124
  ret ptr %call, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !126 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !127, metadata !DIExpression()), !dbg !128
  %0 = load i32, ptr %n.addr, align 4, !dbg !129
  %conv = sext i32 %0 to i64, !dbg !129
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !130
  ret ptr %call, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !132 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !133, metadata !DIExpression()), !dbg !134
  %0 = load i32, ptr %n.addr, align 4, !dbg !135
  %conv = sext i32 %0 to i64, !dbg !135
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !136
  ret ptr %call, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !138 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !139, metadata !DIExpression()), !dbg !140
  %0 = load i32, ptr %n.addr, align 4, !dbg !141
  %conv = sext i32 %0 to i64, !dbg !141
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !142
  ret ptr %call, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !144 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !145, metadata !DIExpression()), !dbg !146
  %0 = load i32, ptr %n.addr, align 4, !dbg !147
  %conv = sext i32 %0 to i64, !dbg !147
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !148
  ret ptr %call, !dbg !149
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !150 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !151, metadata !DIExpression()), !dbg !152
  %0 = load i32, ptr %n.addr, align 4, !dbg !153
  %conv = sext i32 %0 to i64, !dbg !153
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !154
  ret ptr %call, !dbg !155
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !156 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !159, metadata !DIExpression()), !dbg !160
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !161, metadata !DIExpression()), !dbg !162
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !163
  ret void, !dbg !164
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !165 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !169, metadata !DIExpression()), !dbg !170
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !171, metadata !DIExpression()), !dbg !172
  ret void, !dbg !173
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !174 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !175, metadata !DIExpression()), !dbg !176
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !177, metadata !DIExpression()), !dbg !178
  ret void, !dbg !179
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !180 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !183, metadata !DIExpression()), !dbg !184
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !185, metadata !DIExpression()), !dbg !186
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !187, metadata !DIExpression()), !dbg !188
  ret void, !dbg !189
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !190 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !193, metadata !DIExpression()), !dbg !194
  ret void, !dbg !195
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !196 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !197, metadata !DIExpression()), !dbg !198
  %0 = load ptr, ptr %str.addr, align 8, !dbg !199
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !200
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !201
  %call2 = call i32 @getchar(), !dbg !202
  ret void, !dbg !203
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !204 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !208, metadata !DIExpression()), !dbg !209
  %0 = load ptr, ptr %p.addr, align 8, !dbg !210
  store i32 0, ptr %0, align 4, !dbg !211
  %1 = load ptr, ptr %retval, align 8, !dbg !212
  ret ptr %1, !dbg !212
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !213 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !214, metadata !DIExpression()), !dbg !215
  %0 = load ptr, ptr %p.addr, align 8, !dbg !216
  store i32 0, ptr %0, align 4, !dbg !217
  %1 = load ptr, ptr %retval, align 8, !dbg !218
  ret ptr %1, !dbg !218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !219 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !220, metadata !DIExpression()), !dbg !221
  %0 = load ptr, ptr %p.addr, align 8, !dbg !222
  call void @free(ptr noundef %0) #7, !dbg !223
  %1 = load ptr, ptr %retval, align 8, !dbg !224
  ret ptr %1, !dbg !224
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !225 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !226, metadata !DIExpression()), !dbg !227
  %0 = load ptr, ptr %p.addr, align 8, !dbg !228
  call void @free(ptr noundef %0) #7, !dbg !229
  %1 = load ptr, ptr %retval, align 8, !dbg !230
  ret ptr %1, !dbg !230
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !231 {
entry:
  ret void, !dbg !234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_wchar_t_13_bad() #0 !dbg !235 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !236, metadata !DIExpression()), !dbg !237
  store ptr null, ptr %data, align 8, !dbg !238
  %0 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !239
  %cmp = icmp eq i32 %0, 5, !dbg !241
  br i1 %cmp, label %if.then, label %if.end4, !dbg !242

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !243
  store ptr %call, ptr %data, align 8, !dbg !245
  %1 = load ptr, ptr %data, align 8, !dbg !246
  %cmp1 = icmp eq ptr %1, null, !dbg !248
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !249

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !250
  unreachable, !dbg !250

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !252
  %call3 = call ptr @wmemset(ptr noundef %2, i32 noundef 65, i64 noundef 99) #7, !dbg !253
  %3 = load ptr, ptr %data, align 8, !dbg !254
  %arrayidx = getelementptr inbounds i32, ptr %3, i64 99, !dbg !254
  store i32 0, ptr %arrayidx, align 4, !dbg !255
  %4 = load ptr, ptr %data, align 8, !dbg !256
  call void @free(ptr noundef %4) #7, !dbg !257
  br label %if.end4, !dbg !258

if.end4:                                          ; preds = %if.end, %entry
  %5 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !259
  %cmp5 = icmp eq i32 %5, 5, !dbg !261
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !262

if.then6:                                         ; preds = %if.end4
  %6 = load ptr, ptr %data, align 8, !dbg !263
  %call7 = call ptr @UAFFUNC(ptr noundef %6), !dbg !265
  br label %if.end8, !dbg !266

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !267
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: nounwind
declare ptr @wmemset(ptr noundef, i32 noundef, i64 noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_wchar_t_13_good() #0 !dbg !268 {
entry:
  call void @goodB2G1(), !dbg !269
  call void @goodB2G2(), !dbg !270
  call void @goodG2B1(), !dbg !271
  call void @goodG2B2(), !dbg !272
  ret void, !dbg !273
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !274 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !278, metadata !DIExpression()), !dbg !279
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !280, metadata !DIExpression()), !dbg !281
  %call = call i64 @time(ptr noundef null) #7, !dbg !282
  %conv = trunc i64 %call to i32, !dbg !283
  call void @srand(i32 noundef %conv) #7, !dbg !284
  call void @printLine(ptr noundef @.str.3), !dbg !285
  call void @CWE416_Use_After_Free__malloc_free_wchar_t_13_good(), !dbg !286
  call void @printLine(ptr noundef @.str.4), !dbg !287
  call void @printLine(ptr noundef @.str.5), !dbg !288
  call void @CWE416_Use_After_Free__malloc_free_wchar_t_13_bad(), !dbg !289
  call void @printLine(ptr noundef @.str.6), !dbg !290
  ret i32 0, !dbg !291
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !292 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !293, metadata !DIExpression()), !dbg !294
  store ptr null, ptr %data, align 8, !dbg !295
  %0 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !296
  %cmp = icmp eq i32 %0, 5, !dbg !298
  br i1 %cmp, label %if.then, label %if.end4, !dbg !299

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !300
  store ptr %call, ptr %data, align 8, !dbg !302
  %1 = load ptr, ptr %data, align 8, !dbg !303
  %cmp1 = icmp eq ptr %1, null, !dbg !305
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !306

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !307
  unreachable, !dbg !307

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !309
  %call3 = call ptr @wmemset(ptr noundef %2, i32 noundef 65, i64 noundef 99) #7, !dbg !310
  %3 = load ptr, ptr %data, align 8, !dbg !311
  %arrayidx = getelementptr inbounds i32, ptr %3, i64 99, !dbg !311
  store i32 0, ptr %arrayidx, align 4, !dbg !312
  %4 = load ptr, ptr %data, align 8, !dbg !313
  call void @free(ptr noundef %4) #7, !dbg !314
  br label %if.end4, !dbg !315

if.end4:                                          ; preds = %if.end, %entry
  %5 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !316
  %cmp5 = icmp ne i32 %5, 5, !dbg !318
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !319

if.then6:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.7), !dbg !320
  br label %if.end7, !dbg !322

if.else:                                          ; preds = %if.end4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void, !dbg !323
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !324 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !325, metadata !DIExpression()), !dbg !326
  store ptr null, ptr %data, align 8, !dbg !327
  %0 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !328
  %cmp = icmp eq i32 %0, 5, !dbg !330
  br i1 %cmp, label %if.then, label %if.end4, !dbg !331

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !332
  store ptr %call, ptr %data, align 8, !dbg !334
  %1 = load ptr, ptr %data, align 8, !dbg !335
  %cmp1 = icmp eq ptr %1, null, !dbg !337
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !338

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !339
  unreachable, !dbg !339

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !341
  %call3 = call ptr @wmemset(ptr noundef %2, i32 noundef 65, i64 noundef 99) #7, !dbg !342
  %3 = load ptr, ptr %data, align 8, !dbg !343
  %arrayidx = getelementptr inbounds i32, ptr %3, i64 99, !dbg !343
  store i32 0, ptr %arrayidx, align 4, !dbg !344
  %4 = load ptr, ptr %data, align 8, !dbg !345
  call void @free(ptr noundef %4) #7, !dbg !346
  br label %if.end4, !dbg !347

if.end4:                                          ; preds = %if.end, %entry
  %5 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !348
  %cmp5 = icmp eq i32 %5, 5, !dbg !350
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !351

if.then6:                                         ; preds = %if.end4
  br label %if.end7, !dbg !352

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !354
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !355 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !356, metadata !DIExpression()), !dbg !357
  store ptr null, ptr %data, align 8, !dbg !358
  %0 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !359
  %cmp = icmp ne i32 %0, 5, !dbg !361
  br i1 %cmp, label %if.then, label %if.else, !dbg !362

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !363
  br label %if.end4, !dbg !365

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !366
  store ptr %call, ptr %data, align 8, !dbg !368
  %1 = load ptr, ptr %data, align 8, !dbg !369
  %cmp1 = icmp eq ptr %1, null, !dbg !371
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !372

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !373
  unreachable, !dbg !373

if.end:                                           ; preds = %if.else
  %2 = load ptr, ptr %data, align 8, !dbg !375
  %call3 = call ptr @wmemset(ptr noundef %2, i32 noundef 65, i64 noundef 99) #7, !dbg !376
  %3 = load ptr, ptr %data, align 8, !dbg !377
  %arrayidx = getelementptr inbounds i32, ptr %3, i64 99, !dbg !377
  store i32 0, ptr %arrayidx, align 4, !dbg !378
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  %4 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !379
  %cmp5 = icmp eq i32 %4, 5, !dbg !381
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !382

if.then6:                                         ; preds = %if.end4
  %5 = load ptr, ptr %data, align 8, !dbg !383
  %call7 = call ptr @SAFEUAFFUNC(ptr noundef %5), !dbg !385
  br label %if.end8, !dbg !386

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !387
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !388 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !389, metadata !DIExpression()), !dbg !390
  store ptr null, ptr %data, align 8, !dbg !391
  %0 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !392
  %cmp = icmp eq i32 %0, 5, !dbg !394
  br i1 %cmp, label %if.then, label %if.end4, !dbg !395

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !396
  store ptr %call, ptr %data, align 8, !dbg !398
  %1 = load ptr, ptr %data, align 8, !dbg !399
  %cmp1 = icmp eq ptr %1, null, !dbg !401
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !402

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !403
  unreachable, !dbg !403

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !405
  %call3 = call ptr @wmemset(ptr noundef %2, i32 noundef 65, i64 noundef 99) #7, !dbg !406
  %3 = load ptr, ptr %data, align 8, !dbg !407
  %arrayidx = getelementptr inbounds i32, ptr %3, i64 99, !dbg !407
  store i32 0, ptr %arrayidx, align 4, !dbg !408
  br label %if.end4, !dbg !409

if.end4:                                          ; preds = %if.end, %entry
  %4 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !410
  %cmp5 = icmp eq i32 %4, 5, !dbg !412
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !413

if.then6:                                         ; preds = %if.end4
  %5 = load ptr, ptr %data, align 8, !dbg !414
  %call7 = call ptr @SAFEUAFFUNC(ptr noundef %5), !dbg !416
  br label %if.end8, !dbg !417

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !418
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!43}
!llvm.module.flags = !{!53, !54, !55, !56, !57, !58, !59}
!llvm.ident = !{!60}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 174, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tuaf/CWE416_Use_After_Free__malloc_free_wchar_t_13.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "5b10c4f738fa1f21b4f3837d56a1e3e5")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 18)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 176, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 16)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 179, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 17)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 181, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 15)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(scope: null, file: !19, line: 68, type: !40, isLocal: true, isDefinition: true)
!40 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !41)
!41 = !{!42}
!42 = !DISubrange(count: 21)
!43 = distinct !DICompileUnit(language: DW_LANG_C11, file: !44, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !45, globals: !52, splitDebugInlining: false, nameTableKind: None)
!44 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tuaf/CWE416_Use_After_Free__malloc_free_wchar_t_13.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "5b10c4f738fa1f21b4f3837d56a1e3e5")
!45 = !{!46, !47, !51}
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !49, line: 74, baseType: !50)
!49 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!50 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!51 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!52 = !{!0, !7, !12, !17, !23, !28, !33, !38}
!53 = !{i32 7, !"Dwarf Version", i32 5}
!54 = !{i32 2, !"Debug Info Version", i32 3}
!55 = !{i32 1, !"wchar_size", i32 4}
!56 = !{i32 8, !"PIC Level", i32 2}
!57 = !{i32 7, !"PIE Level", i32 2}
!58 = !{i32 7, !"uwtable", i32 2}
!59 = !{i32 7, !"frame-pointer", i32 2}
!60 = !{!"clang version 16.0.0"}
!61 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !62, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!62 = !DISubroutineType(types: !63)
!63 = !{null, !46, !46}
!64 = !{}
!65 = !DILocalVariable(name: "p", arg: 1, scope: !61, file: !2, line: 4, type: !46)
!66 = !DILocation(line: 4, column: 22, scope: !61)
!67 = !DILocalVariable(name: "q", arg: 2, scope: !61, file: !2, line: 4, type: !46)
!68 = !DILocation(line: 4, column: 31, scope: !61)
!69 = !DILocation(line: 5, column: 3, scope: !61)
!70 = !DILocation(line: 6, column: 1, scope: !61)
!71 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !62, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!72 = !DILocalVariable(name: "p", arg: 1, scope: !71, file: !2, line: 8, type: !46)
!73 = !DILocation(line: 8, column: 25, scope: !71)
!74 = !DILocalVariable(name: "q", arg: 2, scope: !71, file: !2, line: 8, type: !46)
!75 = !DILocation(line: 8, column: 34, scope: !71)
!76 = !DILocation(line: 9, column: 3, scope: !71)
!77 = !DILocation(line: 10, column: 1, scope: !71)
!78 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !62, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!79 = !DILocalVariable(name: "p", arg: 1, scope: !78, file: !2, line: 12, type: !46)
!80 = !DILocation(line: 12, column: 21, scope: !78)
!81 = !DILocalVariable(name: "q", arg: 2, scope: !78, file: !2, line: 12, type: !46)
!82 = !DILocation(line: 12, column: 30, scope: !78)
!83 = !DILocation(line: 13, column: 3, scope: !78)
!84 = !DILocation(line: 14, column: 1, scope: !78)
!85 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !62, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!86 = !DILocalVariable(name: "p", arg: 1, scope: !85, file: !2, line: 16, type: !46)
!87 = !DILocation(line: 16, column: 20, scope: !85)
!88 = !DILocalVariable(name: "q", arg: 2, scope: !85, file: !2, line: 16, type: !46)
!89 = !DILocation(line: 16, column: 29, scope: !85)
!90 = !DILocation(line: 17, column: 3, scope: !85)
!91 = !DILocation(line: 18, column: 1, scope: !85)
!92 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !62, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!93 = !DILocalVariable(name: "p", arg: 1, scope: !92, file: !2, line: 20, type: !46)
!94 = !DILocation(line: 20, column: 34, scope: !92)
!95 = !DILocalVariable(name: "q", arg: 2, scope: !92, file: !2, line: 20, type: !46)
!96 = !DILocation(line: 20, column: 43, scope: !92)
!97 = !DILocation(line: 21, column: 3, scope: !92)
!98 = !DILocation(line: 22, column: 1, scope: !92)
!99 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !62, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!100 = !DILocalVariable(name: "p", arg: 1, scope: !99, file: !2, line: 24, type: !46)
!101 = !DILocation(line: 24, column: 33, scope: !99)
!102 = !DILocalVariable(name: "q", arg: 2, scope: !99, file: !2, line: 24, type: !46)
!103 = !DILocation(line: 24, column: 42, scope: !99)
!104 = !DILocation(line: 25, column: 3, scope: !99)
!105 = !DILocation(line: 26, column: 1, scope: !99)
!106 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !107, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!107 = !DISubroutineType(types: !108)
!108 = !{!46, !50}
!109 = !DILocalVariable(name: "n", arg: 1, scope: !106, file: !2, line: 29, type: !50)
!110 = !DILocation(line: 29, column: 22, scope: !106)
!111 = !DILocation(line: 30, column: 17, scope: !106)
!112 = !DILocation(line: 30, column: 10, scope: !106)
!113 = !DILocation(line: 30, column: 3, scope: !106)
!114 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !107, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!115 = !DILocalVariable(name: "n", arg: 1, scope: !114, file: !2, line: 33, type: !50)
!116 = !DILocation(line: 33, column: 28, scope: !114)
!117 = !DILocation(line: 34, column: 19, scope: !114)
!118 = !DILocation(line: 34, column: 12, scope: !114)
!119 = !DILocation(line: 34, column: 5, scope: !114)
!120 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !107, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!121 = !DILocalVariable(name: "n", arg: 1, scope: !120, file: !2, line: 37, type: !50)
!122 = !DILocation(line: 37, column: 21, scope: !120)
!123 = !DILocation(line: 38, column: 17, scope: !120)
!124 = !DILocation(line: 38, column: 10, scope: !120)
!125 = !DILocation(line: 38, column: 3, scope: !120)
!126 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !107, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!127 = !DILocalVariable(name: "n", arg: 1, scope: !126, file: !2, line: 41, type: !50)
!128 = !DILocation(line: 41, column: 21, scope: !126)
!129 = !DILocation(line: 42, column: 17, scope: !126)
!130 = !DILocation(line: 42, column: 10, scope: !126)
!131 = !DILocation(line: 42, column: 3, scope: !126)
!132 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !107, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!133 = !DILocalVariable(name: "n", arg: 1, scope: !132, file: !2, line: 45, type: !50)
!134 = !DILocation(line: 45, column: 21, scope: !132)
!135 = !DILocation(line: 46, column: 17, scope: !132)
!136 = !DILocation(line: 46, column: 10, scope: !132)
!137 = !DILocation(line: 46, column: 3, scope: !132)
!138 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !107, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!139 = !DILocalVariable(name: "n", arg: 1, scope: !138, file: !2, line: 49, type: !50)
!140 = !DILocation(line: 49, column: 21, scope: !138)
!141 = !DILocation(line: 50, column: 17, scope: !138)
!142 = !DILocation(line: 50, column: 10, scope: !138)
!143 = !DILocation(line: 50, column: 3, scope: !138)
!144 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !107, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!145 = !DILocalVariable(name: "n", arg: 1, scope: !144, file: !2, line: 53, type: !50)
!146 = !DILocation(line: 53, column: 21, scope: !144)
!147 = !DILocation(line: 54, column: 17, scope: !144)
!148 = !DILocation(line: 54, column: 10, scope: !144)
!149 = !DILocation(line: 54, column: 3, scope: !144)
!150 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !107, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!151 = !DILocalVariable(name: "n", arg: 1, scope: !150, file: !2, line: 57, type: !50)
!152 = !DILocation(line: 57, column: 18, scope: !150)
!153 = !DILocation(line: 58, column: 17, scope: !150)
!154 = !DILocation(line: 58, column: 10, scope: !150)
!155 = !DILocation(line: 58, column: 3, scope: !150)
!156 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !157, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!157 = !DISubroutineType(types: !158)
!158 = !{null, !50, !50}
!159 = !DILocalVariable(name: "id", arg: 1, scope: !156, file: !2, line: 67, type: !50)
!160 = !DILocation(line: 67, column: 20, scope: !156)
!161 = !DILocalVariable(name: "flags", arg: 2, scope: !156, file: !2, line: 67, type: !50)
!162 = !DILocation(line: 67, column: 28, scope: !156)
!163 = !DILocation(line: 68, column: 3, scope: !156)
!164 = !DILocation(line: 69, column: 1, scope: !156)
!165 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !166, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!166 = !DISubroutineType(types: !167)
!167 = !{null, !50, !168}
!168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!169 = !DILocalVariable(name: "thdid", arg: 1, scope: !165, file: !2, line: 79, type: !50)
!170 = !DILocation(line: 79, column: 21, scope: !165)
!171 = !DILocalVariable(name: "cxt", arg: 2, scope: !165, file: !2, line: 79, type: !168)
!172 = !DILocation(line: 79, column: 34, scope: !165)
!173 = !DILocation(line: 81, column: 1, scope: !165)
!174 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !166, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!175 = !DILocalVariable(name: "thdid", arg: 1, scope: !174, file: !2, line: 82, type: !50)
!176 = !DILocation(line: 82, column: 21, scope: !174)
!177 = !DILocalVariable(name: "cxt", arg: 2, scope: !174, file: !2, line: 82, type: !168)
!178 = !DILocation(line: 82, column: 33, scope: !174)
!179 = !DILocation(line: 84, column: 1, scope: !174)
!180 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !181, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!181 = !DISubroutineType(types: !182)
!182 = !{null, !50, !168, !168}
!183 = !DILocalVariable(name: "thdid", arg: 1, scope: !180, file: !2, line: 85, type: !50)
!184 = !DILocation(line: 85, column: 26, scope: !180)
!185 = !DILocalVariable(name: "cxt", arg: 2, scope: !180, file: !2, line: 85, type: !168)
!186 = !DILocation(line: 85, column: 38, scope: !180)
!187 = !DILocalVariable(name: "lev", arg: 3, scope: !180, file: !2, line: 85, type: !168)
!188 = !DILocation(line: 85, column: 49, scope: !180)
!189 = !DILocation(line: 87, column: 1, scope: !180)
!190 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !191, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!191 = !DISubroutineType(types: !192)
!192 = !{null, !168}
!193 = !DILocalVariable(name: "lockname", arg: 1, scope: !190, file: !2, line: 89, type: !168)
!194 = !DILocation(line: 89, column: 17, scope: !190)
!195 = !DILocation(line: 91, column: 1, scope: !190)
!196 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !191, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!197 = !DILocalVariable(name: "str", arg: 1, scope: !196, file: !2, line: 93, type: !168)
!198 = !DILocation(line: 93, column: 18, scope: !196)
!199 = !DILocation(line: 94, column: 18, scope: !196)
!200 = !DILocation(line: 94, column: 3, scope: !196)
!201 = !DILocation(line: 95, column: 3, scope: !196)
!202 = !DILocation(line: 96, column: 3, scope: !196)
!203 = !DILocation(line: 97, column: 1, scope: !196)
!204 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !205, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!205 = !DISubroutineType(types: !206)
!206 = !{!46, !207}
!207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!208 = !DILocalVariable(name: "p", arg: 1, scope: !204, file: !2, line: 100, type: !207)
!209 = !DILocation(line: 100, column: 24, scope: !204)
!210 = !DILocation(line: 101, column: 6, scope: !204)
!211 = !DILocation(line: 101, column: 8, scope: !204)
!212 = !DILocation(line: 102, column: 1, scope: !204)
!213 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !205, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!214 = !DILocalVariable(name: "p", arg: 1, scope: !213, file: !2, line: 104, type: !207)
!215 = !DILocation(line: 104, column: 20, scope: !213)
!216 = !DILocation(line: 105, column: 6, scope: !213)
!217 = !DILocation(line: 105, column: 8, scope: !213)
!218 = !DILocation(line: 106, column: 1, scope: !213)
!219 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !205, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!220 = !DILocalVariable(name: "p", arg: 1, scope: !219, file: !2, line: 110, type: !207)
!221 = !DILocation(line: 110, column: 22, scope: !219)
!222 = !DILocation(line: 111, column: 10, scope: !219)
!223 = !DILocation(line: 111, column: 5, scope: !219)
!224 = !DILocation(line: 112, column: 1, scope: !219)
!225 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !205, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!226 = !DILocalVariable(name: "p", arg: 1, scope: !225, file: !2, line: 115, type: !207)
!227 = !DILocation(line: 115, column: 24, scope: !225)
!228 = !DILocation(line: 116, column: 10, scope: !225)
!229 = !DILocation(line: 116, column: 5, scope: !225)
!230 = !DILocation(line: 117, column: 1, scope: !225)
!231 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !232, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!232 = !DISubroutineType(types: !233)
!233 = !{null}
!234 = !DILocation(line: 135, column: 20, scope: !231)
!235 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_wchar_t_13_bad", scope: !19, file: !19, line: 24, type: !232, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!236 = !DILocalVariable(name: "data", scope: !235, file: !19, line: 26, type: !47)
!237 = !DILocation(line: 26, column: 15, scope: !235)
!238 = !DILocation(line: 28, column: 10, scope: !235)
!239 = !DILocation(line: 29, column: 8, scope: !240)
!240 = distinct !DILexicalBlock(scope: !235, file: !19, line: 29, column: 8)
!241 = !DILocation(line: 29, column: 25, scope: !240)
!242 = !DILocation(line: 29, column: 8, scope: !235)
!243 = !DILocation(line: 31, column: 27, scope: !244)
!244 = distinct !DILexicalBlock(scope: !240, file: !19, line: 30, column: 5)
!245 = !DILocation(line: 31, column: 14, scope: !244)
!246 = !DILocation(line: 32, column: 13, scope: !247)
!247 = distinct !DILexicalBlock(scope: !244, file: !19, line: 32, column: 13)
!248 = !DILocation(line: 32, column: 18, scope: !247)
!249 = !DILocation(line: 32, column: 13, scope: !244)
!250 = !DILocation(line: 32, column: 28, scope: !251)
!251 = distinct !DILexicalBlock(scope: !247, file: !19, line: 32, column: 27)
!252 = !DILocation(line: 33, column: 17, scope: !244)
!253 = !DILocation(line: 33, column: 9, scope: !244)
!254 = !DILocation(line: 34, column: 9, scope: !244)
!255 = !DILocation(line: 34, column: 21, scope: !244)
!256 = !DILocation(line: 36, column: 14, scope: !244)
!257 = !DILocation(line: 36, column: 9, scope: !244)
!258 = !DILocation(line: 37, column: 5, scope: !244)
!259 = !DILocation(line: 38, column: 8, scope: !260)
!260 = distinct !DILexicalBlock(scope: !235, file: !19, line: 38, column: 8)
!261 = !DILocation(line: 38, column: 25, scope: !260)
!262 = !DILocation(line: 38, column: 8, scope: !235)
!263 = !DILocation(line: 41, column: 17, scope: !264)
!264 = distinct !DILexicalBlock(scope: !260, file: !19, line: 39, column: 5)
!265 = !DILocation(line: 41, column: 9, scope: !264)
!266 = !DILocation(line: 43, column: 5, scope: !264)
!267 = !DILocation(line: 44, column: 1, scope: !235)
!268 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_wchar_t_13_good", scope: !19, file: !19, line: 152, type: !232, scopeLine: 153, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!269 = !DILocation(line: 154, column: 5, scope: !268)
!270 = !DILocation(line: 155, column: 5, scope: !268)
!271 = !DILocation(line: 156, column: 5, scope: !268)
!272 = !DILocation(line: 157, column: 5, scope: !268)
!273 = !DILocation(line: 158, column: 1, scope: !268)
!274 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 169, type: !275, scopeLine: 170, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !64)
!275 = !DISubroutineType(types: !276)
!276 = !{!50, !50, !277}
!277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !168, size: 64)
!278 = !DILocalVariable(name: "argc", arg: 1, scope: !274, file: !19, line: 169, type: !50)
!279 = !DILocation(line: 169, column: 14, scope: !274)
!280 = !DILocalVariable(name: "argv", arg: 2, scope: !274, file: !19, line: 169, type: !277)
!281 = !DILocation(line: 169, column: 27, scope: !274)
!282 = !DILocation(line: 172, column: 22, scope: !274)
!283 = !DILocation(line: 172, column: 12, scope: !274)
!284 = !DILocation(line: 172, column: 5, scope: !274)
!285 = !DILocation(line: 174, column: 5, scope: !274)
!286 = !DILocation(line: 175, column: 5, scope: !274)
!287 = !DILocation(line: 176, column: 5, scope: !274)
!288 = !DILocation(line: 179, column: 5, scope: !274)
!289 = !DILocation(line: 180, column: 5, scope: !274)
!290 = !DILocation(line: 181, column: 5, scope: !274)
!291 = !DILocation(line: 183, column: 5, scope: !274)
!292 = distinct !DISubprogram(name: "goodB2G1", scope: !19, file: !19, line: 51, type: !232, scopeLine: 52, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !64)
!293 = !DILocalVariable(name: "data", scope: !292, file: !19, line: 53, type: !47)
!294 = !DILocation(line: 53, column: 15, scope: !292)
!295 = !DILocation(line: 55, column: 10, scope: !292)
!296 = !DILocation(line: 56, column: 8, scope: !297)
!297 = distinct !DILexicalBlock(scope: !292, file: !19, line: 56, column: 8)
!298 = !DILocation(line: 56, column: 25, scope: !297)
!299 = !DILocation(line: 56, column: 8, scope: !292)
!300 = !DILocation(line: 58, column: 27, scope: !301)
!301 = distinct !DILexicalBlock(scope: !297, file: !19, line: 57, column: 5)
!302 = !DILocation(line: 58, column: 14, scope: !301)
!303 = !DILocation(line: 59, column: 13, scope: !304)
!304 = distinct !DILexicalBlock(scope: !301, file: !19, line: 59, column: 13)
!305 = !DILocation(line: 59, column: 18, scope: !304)
!306 = !DILocation(line: 59, column: 13, scope: !301)
!307 = !DILocation(line: 59, column: 28, scope: !308)
!308 = distinct !DILexicalBlock(scope: !304, file: !19, line: 59, column: 27)
!309 = !DILocation(line: 60, column: 17, scope: !301)
!310 = !DILocation(line: 60, column: 9, scope: !301)
!311 = !DILocation(line: 61, column: 9, scope: !301)
!312 = !DILocation(line: 61, column: 21, scope: !301)
!313 = !DILocation(line: 63, column: 14, scope: !301)
!314 = !DILocation(line: 63, column: 9, scope: !301)
!315 = !DILocation(line: 64, column: 5, scope: !301)
!316 = !DILocation(line: 65, column: 8, scope: !317)
!317 = distinct !DILexicalBlock(scope: !292, file: !19, line: 65, column: 8)
!318 = !DILocation(line: 65, column: 25, scope: !317)
!319 = !DILocation(line: 65, column: 8, scope: !292)
!320 = !DILocation(line: 68, column: 9, scope: !321)
!321 = distinct !DILexicalBlock(scope: !317, file: !19, line: 66, column: 5)
!322 = !DILocation(line: 69, column: 5, scope: !321)
!323 = !DILocation(line: 77, column: 1, scope: !292)
!324 = distinct !DISubprogram(name: "goodB2G2", scope: !19, file: !19, line: 80, type: !232, scopeLine: 81, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !64)
!325 = !DILocalVariable(name: "data", scope: !324, file: !19, line: 82, type: !47)
!326 = !DILocation(line: 82, column: 15, scope: !324)
!327 = !DILocation(line: 84, column: 10, scope: !324)
!328 = !DILocation(line: 85, column: 8, scope: !329)
!329 = distinct !DILexicalBlock(scope: !324, file: !19, line: 85, column: 8)
!330 = !DILocation(line: 85, column: 25, scope: !329)
!331 = !DILocation(line: 85, column: 8, scope: !324)
!332 = !DILocation(line: 87, column: 27, scope: !333)
!333 = distinct !DILexicalBlock(scope: !329, file: !19, line: 86, column: 5)
!334 = !DILocation(line: 87, column: 14, scope: !333)
!335 = !DILocation(line: 88, column: 13, scope: !336)
!336 = distinct !DILexicalBlock(scope: !333, file: !19, line: 88, column: 13)
!337 = !DILocation(line: 88, column: 18, scope: !336)
!338 = !DILocation(line: 88, column: 13, scope: !333)
!339 = !DILocation(line: 88, column: 28, scope: !340)
!340 = distinct !DILexicalBlock(scope: !336, file: !19, line: 88, column: 27)
!341 = !DILocation(line: 89, column: 17, scope: !333)
!342 = !DILocation(line: 89, column: 9, scope: !333)
!343 = !DILocation(line: 90, column: 9, scope: !333)
!344 = !DILocation(line: 90, column: 21, scope: !333)
!345 = !DILocation(line: 92, column: 14, scope: !333)
!346 = !DILocation(line: 92, column: 9, scope: !333)
!347 = !DILocation(line: 93, column: 5, scope: !333)
!348 = !DILocation(line: 94, column: 8, scope: !349)
!349 = distinct !DILexicalBlock(scope: !324, file: !19, line: 94, column: 8)
!350 = !DILocation(line: 94, column: 25, scope: !349)
!351 = !DILocation(line: 94, column: 8, scope: !324)
!352 = !DILocation(line: 100, column: 5, scope: !353)
!353 = distinct !DILexicalBlock(scope: !349, file: !19, line: 95, column: 5)
!354 = !DILocation(line: 101, column: 1, scope: !324)
!355 = distinct !DISubprogram(name: "goodG2B1", scope: !19, file: !19, line: 104, type: !232, scopeLine: 105, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !64)
!356 = !DILocalVariable(name: "data", scope: !355, file: !19, line: 106, type: !47)
!357 = !DILocation(line: 106, column: 15, scope: !355)
!358 = !DILocation(line: 108, column: 10, scope: !355)
!359 = !DILocation(line: 109, column: 8, scope: !360)
!360 = distinct !DILexicalBlock(scope: !355, file: !19, line: 109, column: 8)
!361 = !DILocation(line: 109, column: 25, scope: !360)
!362 = !DILocation(line: 109, column: 8, scope: !355)
!363 = !DILocation(line: 112, column: 9, scope: !364)
!364 = distinct !DILexicalBlock(scope: !360, file: !19, line: 110, column: 5)
!365 = !DILocation(line: 113, column: 5, scope: !364)
!366 = !DILocation(line: 116, column: 27, scope: !367)
!367 = distinct !DILexicalBlock(scope: !360, file: !19, line: 115, column: 5)
!368 = !DILocation(line: 116, column: 14, scope: !367)
!369 = !DILocation(line: 117, column: 13, scope: !370)
!370 = distinct !DILexicalBlock(scope: !367, file: !19, line: 117, column: 13)
!371 = !DILocation(line: 117, column: 18, scope: !370)
!372 = !DILocation(line: 117, column: 13, scope: !367)
!373 = !DILocation(line: 117, column: 28, scope: !374)
!374 = distinct !DILexicalBlock(scope: !370, file: !19, line: 117, column: 27)
!375 = !DILocation(line: 118, column: 17, scope: !367)
!376 = !DILocation(line: 118, column: 9, scope: !367)
!377 = !DILocation(line: 119, column: 9, scope: !367)
!378 = !DILocation(line: 119, column: 21, scope: !367)
!379 = !DILocation(line: 122, column: 8, scope: !380)
!380 = distinct !DILexicalBlock(scope: !355, file: !19, line: 122, column: 8)
!381 = !DILocation(line: 122, column: 25, scope: !380)
!382 = !DILocation(line: 122, column: 8, scope: !355)
!383 = !DILocation(line: 125, column: 21, scope: !384)
!384 = distinct !DILexicalBlock(scope: !380, file: !19, line: 123, column: 5)
!385 = !DILocation(line: 125, column: 9, scope: !384)
!386 = !DILocation(line: 127, column: 5, scope: !384)
!387 = !DILocation(line: 128, column: 1, scope: !355)
!388 = distinct !DISubprogram(name: "goodG2B2", scope: !19, file: !19, line: 131, type: !232, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !64)
!389 = !DILocalVariable(name: "data", scope: !388, file: !19, line: 133, type: !47)
!390 = !DILocation(line: 133, column: 15, scope: !388)
!391 = !DILocation(line: 135, column: 10, scope: !388)
!392 = !DILocation(line: 136, column: 8, scope: !393)
!393 = distinct !DILexicalBlock(scope: !388, file: !19, line: 136, column: 8)
!394 = !DILocation(line: 136, column: 25, scope: !393)
!395 = !DILocation(line: 136, column: 8, scope: !388)
!396 = !DILocation(line: 138, column: 27, scope: !397)
!397 = distinct !DILexicalBlock(scope: !393, file: !19, line: 137, column: 5)
!398 = !DILocation(line: 138, column: 14, scope: !397)
!399 = !DILocation(line: 139, column: 13, scope: !400)
!400 = distinct !DILexicalBlock(scope: !397, file: !19, line: 139, column: 13)
!401 = !DILocation(line: 139, column: 18, scope: !400)
!402 = !DILocation(line: 139, column: 13, scope: !397)
!403 = !DILocation(line: 139, column: 28, scope: !404)
!404 = distinct !DILexicalBlock(scope: !400, file: !19, line: 139, column: 27)
!405 = !DILocation(line: 140, column: 17, scope: !397)
!406 = !DILocation(line: 140, column: 9, scope: !397)
!407 = !DILocation(line: 141, column: 9, scope: !397)
!408 = !DILocation(line: 141, column: 21, scope: !397)
!409 = !DILocation(line: 143, column: 5, scope: !397)
!410 = !DILocation(line: 144, column: 8, scope: !411)
!411 = distinct !DILexicalBlock(scope: !388, file: !19, line: 144, column: 8)
!412 = !DILocation(line: 144, column: 25, scope: !411)
!413 = !DILocation(line: 144, column: 8, scope: !388)
!414 = !DILocation(line: 147, column: 21, scope: !415)
!415 = distinct !DILexicalBlock(scope: !411, file: !19, line: 145, column: 5)
!416 = !DILocation(line: 147, column: 9, scope: !415)
!417 = !DILocation(line: 149, column: 5, scope: !415)
!418 = !DILocation(line: 150, column: 1, scope: !388)
