; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/mem_leak/sp10.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/sp10.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.List = type { ptr, ptr, ptr }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !40 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !44, metadata !DIExpression()), !dbg !45
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !48
  ret void, !dbg !49
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !50 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !51, metadata !DIExpression()), !dbg !52
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !53, metadata !DIExpression()), !dbg !54
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !55
  ret void, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !57 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !58, metadata !DIExpression()), !dbg !59
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !60, metadata !DIExpression()), !dbg !61
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !62
  ret void, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !64 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !65, metadata !DIExpression()), !dbg !66
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !71 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !72, metadata !DIExpression()), !dbg !73
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !76
  ret void, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !78 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !79, metadata !DIExpression()), !dbg !80
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !83
  ret void, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !85 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %0 = load i32, ptr %n.addr, align 4, !dbg !90
  %conv = sext i32 %0 to i64, !dbg !90
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !91
  ret ptr %call, !dbg !92
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, ptr %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !97
  ret ptr %call, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, ptr %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !103
  ret ptr %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !105 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !106, metadata !DIExpression()), !dbg !107
  %0 = load i32, ptr %n.addr, align 4, !dbg !108
  %conv = sext i32 %0 to i64, !dbg !108
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !109
  ret ptr %call, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !111 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !112, metadata !DIExpression()), !dbg !113
  %0 = load i32, ptr %n.addr, align 4, !dbg !114
  %conv = sext i32 %0 to i64, !dbg !114
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !115
  ret ptr %call, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !117 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !118, metadata !DIExpression()), !dbg !119
  %0 = load i32, ptr %n.addr, align 4, !dbg !120
  %conv = sext i32 %0 to i64, !dbg !120
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !121
  ret ptr %call, !dbg !122
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !123 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !124, metadata !DIExpression()), !dbg !125
  %0 = load i32, ptr %n.addr, align 4, !dbg !126
  %conv = sext i32 %0 to i64, !dbg !126
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !127
  ret ptr %call, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !129 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !130, metadata !DIExpression()), !dbg !131
  %0 = load i32, ptr %n.addr, align 4, !dbg !132
  %conv = sext i32 %0 to i64, !dbg !132
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !133
  ret ptr %call, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !135 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !138, metadata !DIExpression()), !dbg !139
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !140, metadata !DIExpression()), !dbg !141
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !142
  ret void, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !144 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !147, metadata !DIExpression()), !dbg !148
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !149, metadata !DIExpression()), !dbg !150
  ret void, !dbg !151
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !152 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !153, metadata !DIExpression()), !dbg !154
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !155, metadata !DIExpression()), !dbg !156
  ret void, !dbg !157
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !158 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !161, metadata !DIExpression()), !dbg !162
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !163, metadata !DIExpression()), !dbg !164
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !165, metadata !DIExpression()), !dbg !166
  ret void, !dbg !167
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !168 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !171, metadata !DIExpression()), !dbg !172
  ret void, !dbg !173
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !174 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !175, metadata !DIExpression()), !dbg !176
  %0 = load ptr, ptr %str.addr, align 8, !dbg !177
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !178
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !179
  %call2 = call i32 @getchar(), !dbg !180
  ret void, !dbg !181
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !182 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !185, metadata !DIExpression()), !dbg !186
  %0 = load ptr, ptr %p.addr, align 8, !dbg !187
  store i32 0, ptr %0, align 4, !dbg !188
  %1 = load ptr, ptr %retval, align 8, !dbg !189
  ret ptr %1, !dbg !189
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !190 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !191, metadata !DIExpression()), !dbg !192
  %0 = load ptr, ptr %p.addr, align 8, !dbg !193
  store i32 0, ptr %0, align 4, !dbg !194
  %1 = load ptr, ptr %retval, align 8, !dbg !195
  ret ptr %1, !dbg !195
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !196 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !197, metadata !DIExpression()), !dbg !198
  %0 = load ptr, ptr %p.addr, align 8, !dbg !199
  call void @free(ptr noundef %0) #6, !dbg !200
  %1 = load ptr, ptr %retval, align 8, !dbg !201
  ret ptr %1, !dbg !201
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !202 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !203, metadata !DIExpression()), !dbg !204
  %0 = load ptr, ptr %p.addr, align 8, !dbg !205
  call void @free(ptr noundef %0) #6, !dbg !206
  %1 = load ptr, ptr %retval, align 8, !dbg !207
  ret ptr %1, !dbg !207
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !208 {
entry:
  ret void, !dbg !211
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @newNode() #0 !dbg !212 {
entry:
  %node = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %node, metadata !215, metadata !DIExpression()), !dbg !216
  %call = call ptr @SAFEMALLOC(i32 noundef 24), !dbg !217
  store ptr %call, ptr %node, align 8, !dbg !218
  %call1 = call ptr @SAFEMALLOC(i32 noundef 4), !dbg !219
  %0 = load ptr, ptr %node, align 8, !dbg !220
  %a = getelementptr inbounds %struct.List, ptr %0, i32 0, i32 2, !dbg !221
  store ptr %call1, ptr %a, align 8, !dbg !222
  %1 = load ptr, ptr %node, align 8, !dbg !223
  ret ptr %1, !dbg !224
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @freeNode(ptr noundef %node) #0 !dbg !225 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca ptr, align 8
  store ptr %node, ptr %node.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %node.addr, metadata !228, metadata !DIExpression()), !dbg !229
  %0 = load ptr, ptr %node.addr, align 8, !dbg !230
  call void @free(ptr noundef %0) #6, !dbg !231
  %1 = load ptr, ptr %node.addr, align 8, !dbg !232
  %a = getelementptr inbounds %struct.List, ptr %1, i32 0, i32 2, !dbg !233
  %2 = load ptr, ptr %a, align 8, !dbg !233
  call void @free(ptr noundef %2) #6, !dbg !234
  %3 = load i32, ptr %retval, align 4, !dbg !235
  ret i32 %3, !dbg !235
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo() #0 !dbg !236 {
entry:
  %root = alloca ptr, align 8
  %a = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %root, metadata !237, metadata !DIExpression()), !dbg !238
  call void @llvm.dbg.declare(metadata ptr %a, metadata !239, metadata !DIExpression()), !dbg !240
  store i32 10, ptr %a, align 4, !dbg !240
  %call = call ptr @newNode(), !dbg !241
  store ptr %call, ptr %root, align 8, !dbg !242
  %call1 = call ptr @newNode(), !dbg !243
  %0 = load ptr, ptr %root, align 8, !dbg !244
  %next = getelementptr inbounds %struct.List, ptr %0, i32 0, i32 0, !dbg !245
  store ptr %call1, ptr %next, align 8, !dbg !246
  %1 = load ptr, ptr %root, align 8, !dbg !247
  %next2 = getelementptr inbounds %struct.List, ptr %1, i32 0, i32 0, !dbg !248
  %2 = load ptr, ptr %next2, align 8, !dbg !248
  %call3 = call i32 @freeNode(ptr noundef %2), !dbg !249
  %3 = load ptr, ptr %root, align 8, !dbg !250
  %call4 = call i32 @freeNode(ptr noundef %3), !dbg !251
  ret void, !dbg !252
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @buffer_free(ptr noundef %m) #0 !dbg !253 {
entry:
  %m.addr = alloca ptr, align 8
  store ptr %m, ptr %m.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %m.addr, metadata !257, metadata !DIExpression()), !dbg !258
  %0 = load ptr, ptr %m.addr, align 8, !dbg !259
  %1 = load ptr, ptr %0, align 8, !dbg !260
  %buf = getelementptr inbounds %struct.List, ptr %1, i32 0, i32 1, !dbg !261
  %2 = load ptr, ptr %buf, align 8, !dbg !261
  call void @free(ptr noundef %2) #6, !dbg !262
  %3 = load ptr, ptr %m.addr, align 8, !dbg !263
  %4 = load ptr, ptr %3, align 8, !dbg !264
  call void @free(ptr noundef %4) #6, !dbg !265
  ret void, !dbg !266
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @buffer_init(ptr noundef %x) #0 !dbg !267 {
entry:
  %x.addr = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %x.addr, metadata !268, metadata !DIExpression()), !dbg !269
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !270
  %0 = load ptr, ptr %x.addr, align 8, !dbg !271
  %1 = load ptr, ptr %0, align 8, !dbg !272
  %buf = getelementptr inbounds %struct.List, ptr %1, i32 0, i32 1, !dbg !273
  store ptr %call, ptr %buf, align 8, !dbg !274
  ret void, !dbg !275
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !276 {
entry:
  %m = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %m, metadata !277, metadata !DIExpression()), !dbg !278
  %call = call ptr @SAFEMALLOC(i32 noundef 24), !dbg !279
  store ptr %call, ptr %m, align 8, !dbg !280
  call void @buffer_init(ptr noundef %m), !dbg !281
  call void @buffer_free(ptr noundef %m), !dbg !282
  ret void, !dbg !283
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!17}
!llvm.module.flags = !{!32, !33, !34, !35, !36, !37, !38}
!llvm.ident = !{!39}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = distinct !DICompileUnit(language: DW_LANG_C11, file: !18, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !19, globals: !31, splitDebugInlining: false, nameTableKind: None)
!18 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/sp10.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "04f456c5dccb12b5793b158e4f090866")
!19 = !{!20, !21, !29, !27}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64)
!22 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "List", file: !23, line: 11, size: 192, elements: !24)
!23 = !DIFile(filename: "src/mem_leak/sp10.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "04f456c5dccb12b5793b158e4f090866")
!24 = !{!25, !26, !28}
!25 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !22, file: !23, line: 12, baseType: !21, size: 64)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !22, file: !23, line: 13, baseType: !27, size: 64, offset: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !22, file: !23, line: 14, baseType: !29, size: 64, offset: 128)
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!30 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!31 = !{!0, !7, !12}
!32 = !{i32 7, !"Dwarf Version", i32 5}
!33 = !{i32 2, !"Debug Info Version", i32 3}
!34 = !{i32 1, !"wchar_size", i32 4}
!35 = !{i32 8, !"PIC Level", i32 2}
!36 = !{i32 7, !"PIE Level", i32 2}
!37 = !{i32 7, !"uwtable", i32 2}
!38 = !{i32 7, !"frame-pointer", i32 2}
!39 = !{!"clang version 16.0.0"}
!40 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !41, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!41 = !DISubroutineType(types: !42)
!42 = !{null, !20, !20}
!43 = !{}
!44 = !DILocalVariable(name: "p", arg: 1, scope: !40, file: !2, line: 4, type: !20)
!45 = !DILocation(line: 4, column: 22, scope: !40)
!46 = !DILocalVariable(name: "q", arg: 2, scope: !40, file: !2, line: 4, type: !20)
!47 = !DILocation(line: 4, column: 31, scope: !40)
!48 = !DILocation(line: 5, column: 3, scope: !40)
!49 = !DILocation(line: 6, column: 1, scope: !40)
!50 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !41, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!51 = !DILocalVariable(name: "p", arg: 1, scope: !50, file: !2, line: 8, type: !20)
!52 = !DILocation(line: 8, column: 25, scope: !50)
!53 = !DILocalVariable(name: "q", arg: 2, scope: !50, file: !2, line: 8, type: !20)
!54 = !DILocation(line: 8, column: 34, scope: !50)
!55 = !DILocation(line: 9, column: 3, scope: !50)
!56 = !DILocation(line: 10, column: 1, scope: !50)
!57 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !41, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!58 = !DILocalVariable(name: "p", arg: 1, scope: !57, file: !2, line: 12, type: !20)
!59 = !DILocation(line: 12, column: 21, scope: !57)
!60 = !DILocalVariable(name: "q", arg: 2, scope: !57, file: !2, line: 12, type: !20)
!61 = !DILocation(line: 12, column: 30, scope: !57)
!62 = !DILocation(line: 13, column: 3, scope: !57)
!63 = !DILocation(line: 14, column: 1, scope: !57)
!64 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !41, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!65 = !DILocalVariable(name: "p", arg: 1, scope: !64, file: !2, line: 16, type: !20)
!66 = !DILocation(line: 16, column: 20, scope: !64)
!67 = !DILocalVariable(name: "q", arg: 2, scope: !64, file: !2, line: 16, type: !20)
!68 = !DILocation(line: 16, column: 29, scope: !64)
!69 = !DILocation(line: 17, column: 3, scope: !64)
!70 = !DILocation(line: 18, column: 1, scope: !64)
!71 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !41, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!72 = !DILocalVariable(name: "p", arg: 1, scope: !71, file: !2, line: 20, type: !20)
!73 = !DILocation(line: 20, column: 34, scope: !71)
!74 = !DILocalVariable(name: "q", arg: 2, scope: !71, file: !2, line: 20, type: !20)
!75 = !DILocation(line: 20, column: 43, scope: !71)
!76 = !DILocation(line: 21, column: 3, scope: !71)
!77 = !DILocation(line: 22, column: 1, scope: !71)
!78 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !41, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!79 = !DILocalVariable(name: "p", arg: 1, scope: !78, file: !2, line: 24, type: !20)
!80 = !DILocation(line: 24, column: 33, scope: !78)
!81 = !DILocalVariable(name: "q", arg: 2, scope: !78, file: !2, line: 24, type: !20)
!82 = !DILocation(line: 24, column: 42, scope: !78)
!83 = !DILocation(line: 25, column: 3, scope: !78)
!84 = !DILocation(line: 26, column: 1, scope: !78)
!85 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !86, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!86 = !DISubroutineType(types: !87)
!87 = !{!20, !30}
!88 = !DILocalVariable(name: "n", arg: 1, scope: !85, file: !2, line: 29, type: !30)
!89 = !DILocation(line: 29, column: 22, scope: !85)
!90 = !DILocation(line: 30, column: 17, scope: !85)
!91 = !DILocation(line: 30, column: 10, scope: !85)
!92 = !DILocation(line: 30, column: 3, scope: !85)
!93 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !86, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!94 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !2, line: 33, type: !30)
!95 = !DILocation(line: 33, column: 28, scope: !93)
!96 = !DILocation(line: 34, column: 19, scope: !93)
!97 = !DILocation(line: 34, column: 12, scope: !93)
!98 = !DILocation(line: 34, column: 5, scope: !93)
!99 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !86, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !2, line: 37, type: !30)
!101 = !DILocation(line: 37, column: 21, scope: !99)
!102 = !DILocation(line: 38, column: 17, scope: !99)
!103 = !DILocation(line: 38, column: 10, scope: !99)
!104 = !DILocation(line: 38, column: 3, scope: !99)
!105 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !86, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!106 = !DILocalVariable(name: "n", arg: 1, scope: !105, file: !2, line: 41, type: !30)
!107 = !DILocation(line: 41, column: 21, scope: !105)
!108 = !DILocation(line: 42, column: 17, scope: !105)
!109 = !DILocation(line: 42, column: 10, scope: !105)
!110 = !DILocation(line: 42, column: 3, scope: !105)
!111 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !86, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!112 = !DILocalVariable(name: "n", arg: 1, scope: !111, file: !2, line: 45, type: !30)
!113 = !DILocation(line: 45, column: 21, scope: !111)
!114 = !DILocation(line: 46, column: 17, scope: !111)
!115 = !DILocation(line: 46, column: 10, scope: !111)
!116 = !DILocation(line: 46, column: 3, scope: !111)
!117 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !86, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!118 = !DILocalVariable(name: "n", arg: 1, scope: !117, file: !2, line: 49, type: !30)
!119 = !DILocation(line: 49, column: 21, scope: !117)
!120 = !DILocation(line: 50, column: 17, scope: !117)
!121 = !DILocation(line: 50, column: 10, scope: !117)
!122 = !DILocation(line: 50, column: 3, scope: !117)
!123 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !86, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!124 = !DILocalVariable(name: "n", arg: 1, scope: !123, file: !2, line: 53, type: !30)
!125 = !DILocation(line: 53, column: 21, scope: !123)
!126 = !DILocation(line: 54, column: 17, scope: !123)
!127 = !DILocation(line: 54, column: 10, scope: !123)
!128 = !DILocation(line: 54, column: 3, scope: !123)
!129 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !86, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!130 = !DILocalVariable(name: "n", arg: 1, scope: !129, file: !2, line: 57, type: !30)
!131 = !DILocation(line: 57, column: 18, scope: !129)
!132 = !DILocation(line: 58, column: 17, scope: !129)
!133 = !DILocation(line: 58, column: 10, scope: !129)
!134 = !DILocation(line: 58, column: 3, scope: !129)
!135 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !136, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!136 = !DISubroutineType(types: !137)
!137 = !{null, !30, !30}
!138 = !DILocalVariable(name: "id", arg: 1, scope: !135, file: !2, line: 67, type: !30)
!139 = !DILocation(line: 67, column: 20, scope: !135)
!140 = !DILocalVariable(name: "flags", arg: 2, scope: !135, file: !2, line: 67, type: !30)
!141 = !DILocation(line: 67, column: 28, scope: !135)
!142 = !DILocation(line: 68, column: 3, scope: !135)
!143 = !DILocation(line: 69, column: 1, scope: !135)
!144 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !145, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!145 = !DISubroutineType(types: !146)
!146 = !{null, !30, !27}
!147 = !DILocalVariable(name: "thdid", arg: 1, scope: !144, file: !2, line: 79, type: !30)
!148 = !DILocation(line: 79, column: 21, scope: !144)
!149 = !DILocalVariable(name: "cxt", arg: 2, scope: !144, file: !2, line: 79, type: !27)
!150 = !DILocation(line: 79, column: 34, scope: !144)
!151 = !DILocation(line: 81, column: 1, scope: !144)
!152 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !145, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!153 = !DILocalVariable(name: "thdid", arg: 1, scope: !152, file: !2, line: 82, type: !30)
!154 = !DILocation(line: 82, column: 21, scope: !152)
!155 = !DILocalVariable(name: "cxt", arg: 2, scope: !152, file: !2, line: 82, type: !27)
!156 = !DILocation(line: 82, column: 33, scope: !152)
!157 = !DILocation(line: 84, column: 1, scope: !152)
!158 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !159, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!159 = !DISubroutineType(types: !160)
!160 = !{null, !30, !27, !27}
!161 = !DILocalVariable(name: "thdid", arg: 1, scope: !158, file: !2, line: 85, type: !30)
!162 = !DILocation(line: 85, column: 26, scope: !158)
!163 = !DILocalVariable(name: "cxt", arg: 2, scope: !158, file: !2, line: 85, type: !27)
!164 = !DILocation(line: 85, column: 38, scope: !158)
!165 = !DILocalVariable(name: "lev", arg: 3, scope: !158, file: !2, line: 85, type: !27)
!166 = !DILocation(line: 85, column: 49, scope: !158)
!167 = !DILocation(line: 87, column: 1, scope: !158)
!168 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !169, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!169 = !DISubroutineType(types: !170)
!170 = !{null, !27}
!171 = !DILocalVariable(name: "lockname", arg: 1, scope: !168, file: !2, line: 89, type: !27)
!172 = !DILocation(line: 89, column: 17, scope: !168)
!173 = !DILocation(line: 91, column: 1, scope: !168)
!174 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !169, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!175 = !DILocalVariable(name: "str", arg: 1, scope: !174, file: !2, line: 93, type: !27)
!176 = !DILocation(line: 93, column: 18, scope: !174)
!177 = !DILocation(line: 94, column: 18, scope: !174)
!178 = !DILocation(line: 94, column: 3, scope: !174)
!179 = !DILocation(line: 95, column: 3, scope: !174)
!180 = !DILocation(line: 96, column: 3, scope: !174)
!181 = !DILocation(line: 97, column: 1, scope: !174)
!182 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !183, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!183 = !DISubroutineType(types: !184)
!184 = !{!20, !29}
!185 = !DILocalVariable(name: "p", arg: 1, scope: !182, file: !2, line: 100, type: !29)
!186 = !DILocation(line: 100, column: 24, scope: !182)
!187 = !DILocation(line: 101, column: 6, scope: !182)
!188 = !DILocation(line: 101, column: 8, scope: !182)
!189 = !DILocation(line: 102, column: 1, scope: !182)
!190 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !183, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!191 = !DILocalVariable(name: "p", arg: 1, scope: !190, file: !2, line: 104, type: !29)
!192 = !DILocation(line: 104, column: 20, scope: !190)
!193 = !DILocation(line: 105, column: 6, scope: !190)
!194 = !DILocation(line: 105, column: 8, scope: !190)
!195 = !DILocation(line: 106, column: 1, scope: !190)
!196 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !183, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!197 = !DILocalVariable(name: "p", arg: 1, scope: !196, file: !2, line: 110, type: !29)
!198 = !DILocation(line: 110, column: 22, scope: !196)
!199 = !DILocation(line: 111, column: 10, scope: !196)
!200 = !DILocation(line: 111, column: 5, scope: !196)
!201 = !DILocation(line: 112, column: 1, scope: !196)
!202 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !183, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!203 = !DILocalVariable(name: "p", arg: 1, scope: !202, file: !2, line: 115, type: !29)
!204 = !DILocation(line: 115, column: 24, scope: !202)
!205 = !DILocation(line: 116, column: 10, scope: !202)
!206 = !DILocation(line: 116, column: 5, scope: !202)
!207 = !DILocation(line: 117, column: 1, scope: !202)
!208 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !209, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!209 = !DISubroutineType(types: !210)
!210 = !{null}
!211 = !DILocation(line: 135, column: 20, scope: !208)
!212 = distinct !DISubprogram(name: "newNode", scope: !23, file: !23, line: 17, type: !213, scopeLine: 17, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!213 = !DISubroutineType(types: !214)
!214 = !{!21}
!215 = !DILocalVariable(name: "node", scope: !212, file: !23, line: 18, type: !21)
!216 = !DILocation(line: 18, column: 16, scope: !212)
!217 = !DILocation(line: 19, column: 25, scope: !212)
!218 = !DILocation(line: 19, column: 7, scope: !212)
!219 = !DILocation(line: 20, column: 20, scope: !212)
!220 = !DILocation(line: 20, column: 2, scope: !212)
!221 = !DILocation(line: 20, column: 8, scope: !212)
!222 = !DILocation(line: 20, column: 10, scope: !212)
!223 = !DILocation(line: 21, column: 9, scope: !212)
!224 = !DILocation(line: 21, column: 2, scope: !212)
!225 = distinct !DISubprogram(name: "freeNode", scope: !23, file: !23, line: 24, type: !226, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!226 = !DISubroutineType(types: !227)
!227 = !{!30, !21}
!228 = !DILocalVariable(name: "node", arg: 1, scope: !225, file: !23, line: 24, type: !21)
!229 = !DILocation(line: 24, column: 27, scope: !225)
!230 = !DILocation(line: 25, column: 7, scope: !225)
!231 = !DILocation(line: 25, column: 2, scope: !225)
!232 = !DILocation(line: 26, column: 7, scope: !225)
!233 = !DILocation(line: 26, column: 13, scope: !225)
!234 = !DILocation(line: 26, column: 2, scope: !225)
!235 = !DILocation(line: 27, column: 1, scope: !225)
!236 = distinct !DISubprogram(name: "foo", scope: !23, file: !23, line: 29, type: !209, scopeLine: 29, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!237 = !DILocalVariable(name: "root", scope: !236, file: !23, line: 30, type: !21)
!238 = !DILocation(line: 30, column: 15, scope: !236)
!239 = !DILocalVariable(name: "a", scope: !236, file: !23, line: 31, type: !30)
!240 = !DILocation(line: 31, column: 6, scope: !236)
!241 = !DILocation(line: 32, column: 9, scope: !236)
!242 = !DILocation(line: 32, column: 7, scope: !236)
!243 = !DILocation(line: 33, column: 15, scope: !236)
!244 = !DILocation(line: 33, column: 2, scope: !236)
!245 = !DILocation(line: 33, column: 8, scope: !236)
!246 = !DILocation(line: 33, column: 13, scope: !236)
!247 = !DILocation(line: 34, column: 11, scope: !236)
!248 = !DILocation(line: 34, column: 17, scope: !236)
!249 = !DILocation(line: 34, column: 2, scope: !236)
!250 = !DILocation(line: 35, column: 11, scope: !236)
!251 = !DILocation(line: 35, column: 2, scope: !236)
!252 = !DILocation(line: 36, column: 1, scope: !236)
!253 = distinct !DISubprogram(name: "buffer_free", scope: !23, file: !23, line: 38, type: !254, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!254 = !DISubroutineType(types: !255)
!255 = !{null, !256}
!256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!257 = !DILocalVariable(name: "m", arg: 1, scope: !253, file: !23, line: 38, type: !256)
!258 = !DILocation(line: 38, column: 32, scope: !253)
!259 = !DILocation(line: 39, column: 9, scope: !253)
!260 = !DILocation(line: 39, column: 8, scope: !253)
!261 = !DILocation(line: 39, column: 13, scope: !253)
!262 = !DILocation(line: 39, column: 2, scope: !253)
!263 = !DILocation(line: 40, column: 8, scope: !253)
!264 = !DILocation(line: 40, column: 7, scope: !253)
!265 = !DILocation(line: 40, column: 2, scope: !253)
!266 = !DILocation(line: 41, column: 1, scope: !253)
!267 = distinct !DISubprogram(name: "buffer_init", scope: !23, file: !23, line: 43, type: !254, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!268 = !DILocalVariable(name: "x", arg: 1, scope: !267, file: !23, line: 43, type: !256)
!269 = !DILocation(line: 43, column: 32, scope: !267)
!270 = !DILocation(line: 44, column: 23, scope: !267)
!271 = !DILocation(line: 44, column: 4, scope: !267)
!272 = !DILocation(line: 44, column: 3, scope: !267)
!273 = !DILocation(line: 44, column: 8, scope: !267)
!274 = !DILocation(line: 44, column: 12, scope: !267)
!275 = !DILocation(line: 45, column: 1, scope: !267)
!276 = distinct !DISubprogram(name: "main", scope: !23, file: !23, line: 47, type: !209, scopeLine: 47, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !43)
!277 = !DILocalVariable(name: "m", scope: !276, file: !23, line: 48, type: !21)
!278 = !DILocation(line: 48, column: 15, scope: !276)
!279 = !DILocation(line: 49, column: 22, scope: !276)
!280 = !DILocation(line: 49, column: 4, scope: !276)
!281 = !DILocation(line: 50, column: 2, scope: !276)
!282 = !DILocation(line: 51, column: 2, scope: !276)
!283 = !DILocation(line: 52, column: 1, scope: !276)
