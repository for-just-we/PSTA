; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/mem_leak/malloc9.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/malloc9.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.s_rr_node = type { i16, i16, i16, i16, i16, i16, ptr, ptr, float, float }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@rr_node = dso_local global ptr null, align 8, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !51 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !55, metadata !DIExpression()), !dbg !56
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !57, metadata !DIExpression()), !dbg !58
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !59
  ret void, !dbg !60
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !61 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !62, metadata !DIExpression()), !dbg !63
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !66
  ret void, !dbg !67
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !68 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !69, metadata !DIExpression()), !dbg !70
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !73
  ret void, !dbg !74
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !75 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !76, metadata !DIExpression()), !dbg !77
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !82 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !83, metadata !DIExpression()), !dbg !84
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !87
  ret void, !dbg !88
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !89 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !90, metadata !DIExpression()), !dbg !91
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !94
  ret void, !dbg !95
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !96 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %0 = load i32, ptr %n.addr, align 4, !dbg !101
  %conv = sext i32 %0 to i64, !dbg !101
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !102
  ret ptr %call, !dbg !103
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !104 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %0 = load i32, ptr %n.addr, align 4, !dbg !107
  %conv = sext i32 %0 to i64, !dbg !107
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !108
  ret ptr %call, !dbg !109
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !110 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !111, metadata !DIExpression()), !dbg !112
  %0 = load i32, ptr %n.addr, align 4, !dbg !113
  %conv = sext i32 %0 to i64, !dbg !113
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !114
  ret ptr %call, !dbg !115
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !116 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !117, metadata !DIExpression()), !dbg !118
  %0 = load i32, ptr %n.addr, align 4, !dbg !119
  %conv = sext i32 %0 to i64, !dbg !119
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !120
  ret ptr %call, !dbg !121
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !122 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !123, metadata !DIExpression()), !dbg !124
  %0 = load i32, ptr %n.addr, align 4, !dbg !125
  %conv = sext i32 %0 to i64, !dbg !125
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !126
  ret ptr %call, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !128 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !129, metadata !DIExpression()), !dbg !130
  %0 = load i32, ptr %n.addr, align 4, !dbg !131
  %conv = sext i32 %0 to i64, !dbg !131
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !132
  ret ptr %call, !dbg !133
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !134 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !135, metadata !DIExpression()), !dbg !136
  %0 = load i32, ptr %n.addr, align 4, !dbg !137
  %conv = sext i32 %0 to i64, !dbg !137
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !138
  ret ptr %call, !dbg !139
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !140 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !141, metadata !DIExpression()), !dbg !142
  %0 = load i32, ptr %n.addr, align 4, !dbg !143
  %conv = sext i32 %0 to i64, !dbg !143
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !144
  ret ptr %call, !dbg !145
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !146 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !149, metadata !DIExpression()), !dbg !150
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !151, metadata !DIExpression()), !dbg !152
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !153
  ret void, !dbg !154
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !155 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !159, metadata !DIExpression()), !dbg !160
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !161, metadata !DIExpression()), !dbg !162
  ret void, !dbg !163
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !164 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !165, metadata !DIExpression()), !dbg !166
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !167, metadata !DIExpression()), !dbg !168
  ret void, !dbg !169
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !170 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !173, metadata !DIExpression()), !dbg !174
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !175, metadata !DIExpression()), !dbg !176
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !177, metadata !DIExpression()), !dbg !178
  ret void, !dbg !179
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !180 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !183, metadata !DIExpression()), !dbg !184
  ret void, !dbg !185
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !186 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !187, metadata !DIExpression()), !dbg !188
  %0 = load ptr, ptr %str.addr, align 8, !dbg !189
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !190
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !191
  %call2 = call i32 @getchar(), !dbg !192
  ret void, !dbg !193
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !194 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !197, metadata !DIExpression()), !dbg !198
  %0 = load ptr, ptr %p.addr, align 8, !dbg !199
  store i32 0, ptr %0, align 4, !dbg !200
  %1 = load ptr, ptr %retval, align 8, !dbg !201
  ret ptr %1, !dbg !201
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !202 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !203, metadata !DIExpression()), !dbg !204
  %0 = load ptr, ptr %p.addr, align 8, !dbg !205
  store i32 0, ptr %0, align 4, !dbg !206
  %1 = load ptr, ptr %retval, align 8, !dbg !207
  ret ptr %1, !dbg !207
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !208 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !209, metadata !DIExpression()), !dbg !210
  %0 = load ptr, ptr %p.addr, align 8, !dbg !211
  call void @free(ptr noundef %0) #6, !dbg !212
  %1 = load ptr, ptr %retval, align 8, !dbg !213
  ret ptr %1, !dbg !213
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !214 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !215, metadata !DIExpression()), !dbg !216
  %0 = load ptr, ptr %p.addr, align 8, !dbg !217
  call void @free(ptr noundef %0) #6, !dbg !218
  %1 = load ptr, ptr %retval, align 8, !dbg !219
  ret ptr %1, !dbg !219
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !220 {
entry:
  ret void, !dbg !223
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @alloc() #0 !dbg !224 {
entry:
  %call = call ptr @NFRMALLOC(i32 noundef 10), !dbg !227
  ret ptr %call, !dbg !228
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !229 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %i, metadata !232, metadata !DIExpression()), !dbg !233
  %call = call ptr @alloc(), !dbg !234
  %0 = load ptr, ptr @rr_node, align 8, !dbg !235
  %1 = load i32, ptr %i, align 4, !dbg !236
  %idxprom = sext i32 %1 to i64, !dbg !235
  %arrayidx = getelementptr inbounds %struct.s_rr_node, ptr %0, i64 %idxprom, !dbg !235
  %edges = getelementptr inbounds %struct.s_rr_node, ptr %arrayidx, i32 0, i32 6, !dbg !237
  store ptr %call, ptr %edges, align 8, !dbg !238
  ret i32 0, !dbg !239
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!43, !44, !45, !46, !47, !48, !49}
!llvm.ident = !{!50}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "rr_node", scope: !19, file: !24, line: 17, type: !25, isLocal: false, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !23, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/malloc9.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "981416663f1672b55ed6f11d031495f4")
!21 = !{!22}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !{!0, !7, !12, !17}
!24 = !DIFile(filename: "src/mem_leak/malloc9.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "981416663f1672b55ed6f11d031495f4")
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "s_rr_node", file: !24, line: 10, size: 320, elements: !27)
!27 = !{!28, !30, !31, !32, !33, !34, !35, !38, !40, !42}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "xlow", scope: !26, file: !24, line: 11, baseType: !29, size: 16)
!29 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "xhigh", scope: !26, file: !24, line: 11, baseType: !29, size: 16, offset: 16)
!31 = !DIDerivedType(tag: DW_TAG_member, name: "ylow", scope: !26, file: !24, line: 11, baseType: !29, size: 16, offset: 32)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "yhigh", scope: !26, file: !24, line: 11, baseType: !29, size: 16, offset: 48)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "ptc_num", scope: !26, file: !24, line: 12, baseType: !29, size: 16, offset: 64)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "num_edges", scope: !26, file: !24, line: 12, baseType: !29, size: 16, offset: 80)
!35 = !DIDerivedType(tag: DW_TAG_member, name: "edges", scope: !26, file: !24, line: 13, baseType: !36, size: 64, offset: 128)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!38 = !DIDerivedType(tag: DW_TAG_member, name: "switches", scope: !26, file: !24, line: 14, baseType: !39, size: 64, offset: 192)
!39 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!40 = !DIDerivedType(tag: DW_TAG_member, name: "R", scope: !26, file: !24, line: 14, baseType: !41, size: 32, offset: 256)
!41 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!42 = !DIDerivedType(tag: DW_TAG_member, name: "C", scope: !26, file: !24, line: 14, baseType: !41, size: 32, offset: 288)
!43 = !{i32 7, !"Dwarf Version", i32 5}
!44 = !{i32 2, !"Debug Info Version", i32 3}
!45 = !{i32 1, !"wchar_size", i32 4}
!46 = !{i32 8, !"PIC Level", i32 2}
!47 = !{i32 7, !"PIE Level", i32 2}
!48 = !{i32 7, !"uwtable", i32 2}
!49 = !{i32 7, !"frame-pointer", i32 2}
!50 = !{!"clang version 16.0.0"}
!51 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !52, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!52 = !DISubroutineType(types: !53)
!53 = !{null, !22, !22}
!54 = !{}
!55 = !DILocalVariable(name: "p", arg: 1, scope: !51, file: !2, line: 4, type: !22)
!56 = !DILocation(line: 4, column: 22, scope: !51)
!57 = !DILocalVariable(name: "q", arg: 2, scope: !51, file: !2, line: 4, type: !22)
!58 = !DILocation(line: 4, column: 31, scope: !51)
!59 = !DILocation(line: 5, column: 3, scope: !51)
!60 = !DILocation(line: 6, column: 1, scope: !51)
!61 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !52, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!62 = !DILocalVariable(name: "p", arg: 1, scope: !61, file: !2, line: 8, type: !22)
!63 = !DILocation(line: 8, column: 25, scope: !61)
!64 = !DILocalVariable(name: "q", arg: 2, scope: !61, file: !2, line: 8, type: !22)
!65 = !DILocation(line: 8, column: 34, scope: !61)
!66 = !DILocation(line: 9, column: 3, scope: !61)
!67 = !DILocation(line: 10, column: 1, scope: !61)
!68 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !52, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!69 = !DILocalVariable(name: "p", arg: 1, scope: !68, file: !2, line: 12, type: !22)
!70 = !DILocation(line: 12, column: 21, scope: !68)
!71 = !DILocalVariable(name: "q", arg: 2, scope: !68, file: !2, line: 12, type: !22)
!72 = !DILocation(line: 12, column: 30, scope: !68)
!73 = !DILocation(line: 13, column: 3, scope: !68)
!74 = !DILocation(line: 14, column: 1, scope: !68)
!75 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !52, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!76 = !DILocalVariable(name: "p", arg: 1, scope: !75, file: !2, line: 16, type: !22)
!77 = !DILocation(line: 16, column: 20, scope: !75)
!78 = !DILocalVariable(name: "q", arg: 2, scope: !75, file: !2, line: 16, type: !22)
!79 = !DILocation(line: 16, column: 29, scope: !75)
!80 = !DILocation(line: 17, column: 3, scope: !75)
!81 = !DILocation(line: 18, column: 1, scope: !75)
!82 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !52, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!83 = !DILocalVariable(name: "p", arg: 1, scope: !82, file: !2, line: 20, type: !22)
!84 = !DILocation(line: 20, column: 34, scope: !82)
!85 = !DILocalVariable(name: "q", arg: 2, scope: !82, file: !2, line: 20, type: !22)
!86 = !DILocation(line: 20, column: 43, scope: !82)
!87 = !DILocation(line: 21, column: 3, scope: !82)
!88 = !DILocation(line: 22, column: 1, scope: !82)
!89 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !52, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!90 = !DILocalVariable(name: "p", arg: 1, scope: !89, file: !2, line: 24, type: !22)
!91 = !DILocation(line: 24, column: 33, scope: !89)
!92 = !DILocalVariable(name: "q", arg: 2, scope: !89, file: !2, line: 24, type: !22)
!93 = !DILocation(line: 24, column: 42, scope: !89)
!94 = !DILocation(line: 25, column: 3, scope: !89)
!95 = !DILocation(line: 26, column: 1, scope: !89)
!96 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !97, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!97 = !DISubroutineType(types: !98)
!98 = !{!22, !37}
!99 = !DILocalVariable(name: "n", arg: 1, scope: !96, file: !2, line: 29, type: !37)
!100 = !DILocation(line: 29, column: 22, scope: !96)
!101 = !DILocation(line: 30, column: 17, scope: !96)
!102 = !DILocation(line: 30, column: 10, scope: !96)
!103 = !DILocation(line: 30, column: 3, scope: !96)
!104 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !97, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!105 = !DILocalVariable(name: "n", arg: 1, scope: !104, file: !2, line: 33, type: !37)
!106 = !DILocation(line: 33, column: 28, scope: !104)
!107 = !DILocation(line: 34, column: 19, scope: !104)
!108 = !DILocation(line: 34, column: 12, scope: !104)
!109 = !DILocation(line: 34, column: 5, scope: !104)
!110 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !97, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!111 = !DILocalVariable(name: "n", arg: 1, scope: !110, file: !2, line: 37, type: !37)
!112 = !DILocation(line: 37, column: 21, scope: !110)
!113 = !DILocation(line: 38, column: 17, scope: !110)
!114 = !DILocation(line: 38, column: 10, scope: !110)
!115 = !DILocation(line: 38, column: 3, scope: !110)
!116 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !97, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!117 = !DILocalVariable(name: "n", arg: 1, scope: !116, file: !2, line: 41, type: !37)
!118 = !DILocation(line: 41, column: 21, scope: !116)
!119 = !DILocation(line: 42, column: 17, scope: !116)
!120 = !DILocation(line: 42, column: 10, scope: !116)
!121 = !DILocation(line: 42, column: 3, scope: !116)
!122 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !97, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!123 = !DILocalVariable(name: "n", arg: 1, scope: !122, file: !2, line: 45, type: !37)
!124 = !DILocation(line: 45, column: 21, scope: !122)
!125 = !DILocation(line: 46, column: 17, scope: !122)
!126 = !DILocation(line: 46, column: 10, scope: !122)
!127 = !DILocation(line: 46, column: 3, scope: !122)
!128 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !97, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!129 = !DILocalVariable(name: "n", arg: 1, scope: !128, file: !2, line: 49, type: !37)
!130 = !DILocation(line: 49, column: 21, scope: !128)
!131 = !DILocation(line: 50, column: 17, scope: !128)
!132 = !DILocation(line: 50, column: 10, scope: !128)
!133 = !DILocation(line: 50, column: 3, scope: !128)
!134 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !97, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!135 = !DILocalVariable(name: "n", arg: 1, scope: !134, file: !2, line: 53, type: !37)
!136 = !DILocation(line: 53, column: 21, scope: !134)
!137 = !DILocation(line: 54, column: 17, scope: !134)
!138 = !DILocation(line: 54, column: 10, scope: !134)
!139 = !DILocation(line: 54, column: 3, scope: !134)
!140 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !97, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!141 = !DILocalVariable(name: "n", arg: 1, scope: !140, file: !2, line: 57, type: !37)
!142 = !DILocation(line: 57, column: 18, scope: !140)
!143 = !DILocation(line: 58, column: 17, scope: !140)
!144 = !DILocation(line: 58, column: 10, scope: !140)
!145 = !DILocation(line: 58, column: 3, scope: !140)
!146 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !147, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!147 = !DISubroutineType(types: !148)
!148 = !{null, !37, !37}
!149 = !DILocalVariable(name: "id", arg: 1, scope: !146, file: !2, line: 67, type: !37)
!150 = !DILocation(line: 67, column: 20, scope: !146)
!151 = !DILocalVariable(name: "flags", arg: 2, scope: !146, file: !2, line: 67, type: !37)
!152 = !DILocation(line: 67, column: 28, scope: !146)
!153 = !DILocation(line: 68, column: 3, scope: !146)
!154 = !DILocation(line: 69, column: 1, scope: !146)
!155 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !156, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!156 = !DISubroutineType(types: !157)
!157 = !{null, !37, !158}
!158 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!159 = !DILocalVariable(name: "thdid", arg: 1, scope: !155, file: !2, line: 79, type: !37)
!160 = !DILocation(line: 79, column: 21, scope: !155)
!161 = !DILocalVariable(name: "cxt", arg: 2, scope: !155, file: !2, line: 79, type: !158)
!162 = !DILocation(line: 79, column: 34, scope: !155)
!163 = !DILocation(line: 81, column: 1, scope: !155)
!164 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !156, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!165 = !DILocalVariable(name: "thdid", arg: 1, scope: !164, file: !2, line: 82, type: !37)
!166 = !DILocation(line: 82, column: 21, scope: !164)
!167 = !DILocalVariable(name: "cxt", arg: 2, scope: !164, file: !2, line: 82, type: !158)
!168 = !DILocation(line: 82, column: 33, scope: !164)
!169 = !DILocation(line: 84, column: 1, scope: !164)
!170 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !171, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!171 = !DISubroutineType(types: !172)
!172 = !{null, !37, !158, !158}
!173 = !DILocalVariable(name: "thdid", arg: 1, scope: !170, file: !2, line: 85, type: !37)
!174 = !DILocation(line: 85, column: 26, scope: !170)
!175 = !DILocalVariable(name: "cxt", arg: 2, scope: !170, file: !2, line: 85, type: !158)
!176 = !DILocation(line: 85, column: 38, scope: !170)
!177 = !DILocalVariable(name: "lev", arg: 3, scope: !170, file: !2, line: 85, type: !158)
!178 = !DILocation(line: 85, column: 49, scope: !170)
!179 = !DILocation(line: 87, column: 1, scope: !170)
!180 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !181, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!181 = !DISubroutineType(types: !182)
!182 = !{null, !158}
!183 = !DILocalVariable(name: "lockname", arg: 1, scope: !180, file: !2, line: 89, type: !158)
!184 = !DILocation(line: 89, column: 17, scope: !180)
!185 = !DILocation(line: 91, column: 1, scope: !180)
!186 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !181, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!187 = !DILocalVariable(name: "str", arg: 1, scope: !186, file: !2, line: 93, type: !158)
!188 = !DILocation(line: 93, column: 18, scope: !186)
!189 = !DILocation(line: 94, column: 18, scope: !186)
!190 = !DILocation(line: 94, column: 3, scope: !186)
!191 = !DILocation(line: 95, column: 3, scope: !186)
!192 = !DILocation(line: 96, column: 3, scope: !186)
!193 = !DILocation(line: 97, column: 1, scope: !186)
!194 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !195, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!195 = !DISubroutineType(types: !196)
!196 = !{!22, !36}
!197 = !DILocalVariable(name: "p", arg: 1, scope: !194, file: !2, line: 100, type: !36)
!198 = !DILocation(line: 100, column: 24, scope: !194)
!199 = !DILocation(line: 101, column: 6, scope: !194)
!200 = !DILocation(line: 101, column: 8, scope: !194)
!201 = !DILocation(line: 102, column: 1, scope: !194)
!202 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !195, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!203 = !DILocalVariable(name: "p", arg: 1, scope: !202, file: !2, line: 104, type: !36)
!204 = !DILocation(line: 104, column: 20, scope: !202)
!205 = !DILocation(line: 105, column: 6, scope: !202)
!206 = !DILocation(line: 105, column: 8, scope: !202)
!207 = !DILocation(line: 106, column: 1, scope: !202)
!208 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !195, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!209 = !DILocalVariable(name: "p", arg: 1, scope: !208, file: !2, line: 110, type: !36)
!210 = !DILocation(line: 110, column: 22, scope: !208)
!211 = !DILocation(line: 111, column: 10, scope: !208)
!212 = !DILocation(line: 111, column: 5, scope: !208)
!213 = !DILocation(line: 112, column: 1, scope: !208)
!214 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !195, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!215 = !DILocalVariable(name: "p", arg: 1, scope: !214, file: !2, line: 115, type: !36)
!216 = !DILocation(line: 115, column: 24, scope: !214)
!217 = !DILocation(line: 116, column: 10, scope: !214)
!218 = !DILocation(line: 116, column: 5, scope: !214)
!219 = !DILocation(line: 117, column: 1, scope: !214)
!220 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !221, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!221 = !DISubroutineType(types: !222)
!222 = !{null}
!223 = !DILocation(line: 135, column: 20, scope: !220)
!224 = distinct !DISubprogram(name: "alloc", scope: !24, file: !24, line: 19, type: !225, scopeLine: 19, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!225 = !DISubroutineType(types: !226)
!226 = !{!36}
!227 = !DILocation(line: 21, column: 9, scope: !224)
!228 = !DILocation(line: 21, column: 2, scope: !224)
!229 = distinct !DISubprogram(name: "main", scope: !24, file: !24, line: 24, type: !230, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !54)
!230 = !DISubroutineType(types: !231)
!231 = !{!37}
!232 = !DILocalVariable(name: "i", scope: !229, file: !24, line: 26, type: !37)
!233 = !DILocation(line: 26, column: 6, scope: !229)
!234 = !DILocation(line: 27, column: 21, scope: !229)
!235 = !DILocation(line: 27, column: 2, scope: !229)
!236 = !DILocation(line: 27, column: 10, scope: !229)
!237 = !DILocation(line: 27, column: 13, scope: !229)
!238 = !DILocation(line: 27, column: 19, scope: !229)
!239 = !DILocation(line: 31, column: 1, scope: !229)
