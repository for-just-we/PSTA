; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/mem_leak/malloc7.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/malloc7.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@g = dso_local global ptr null, align 8, !dbg !17
@.str.3 = private unnamed_addr constant [6 x i8] c"%d,%d\00", align 1, !dbg !24

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !40 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !44, metadata !DIExpression()), !dbg !45
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !48
  ret void, !dbg !49
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !50 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !51, metadata !DIExpression()), !dbg !52
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !53, metadata !DIExpression()), !dbg !54
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !55
  ret void, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !57 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !58, metadata !DIExpression()), !dbg !59
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !60, metadata !DIExpression()), !dbg !61
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !62
  ret void, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !64 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !65, metadata !DIExpression()), !dbg !66
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !71 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !72, metadata !DIExpression()), !dbg !73
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !76
  ret void, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !78 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !79, metadata !DIExpression()), !dbg !80
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !83
  ret void, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !85 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %0 = load i32, ptr %n.addr, align 4, !dbg !90
  %conv = sext i32 %0 to i64, !dbg !90
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !91
  ret ptr %call, !dbg !92
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, ptr %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !97
  ret ptr %call, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, ptr %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !103
  ret ptr %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !105 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !106, metadata !DIExpression()), !dbg !107
  %0 = load i32, ptr %n.addr, align 4, !dbg !108
  %conv = sext i32 %0 to i64, !dbg !108
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !109
  ret ptr %call, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !111 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !112, metadata !DIExpression()), !dbg !113
  %0 = load i32, ptr %n.addr, align 4, !dbg !114
  %conv = sext i32 %0 to i64, !dbg !114
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !115
  ret ptr %call, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !117 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !118, metadata !DIExpression()), !dbg !119
  %0 = load i32, ptr %n.addr, align 4, !dbg !120
  %conv = sext i32 %0 to i64, !dbg !120
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !121
  ret ptr %call, !dbg !122
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !123 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !124, metadata !DIExpression()), !dbg !125
  %0 = load i32, ptr %n.addr, align 4, !dbg !126
  %conv = sext i32 %0 to i64, !dbg !126
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !127
  ret ptr %call, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !129 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !130, metadata !DIExpression()), !dbg !131
  %0 = load i32, ptr %n.addr, align 4, !dbg !132
  %conv = sext i32 %0 to i64, !dbg !132
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !133
  ret ptr %call, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !135 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !138, metadata !DIExpression()), !dbg !139
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !140, metadata !DIExpression()), !dbg !141
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !142
  ret void, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !144 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !148, metadata !DIExpression()), !dbg !149
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !150, metadata !DIExpression()), !dbg !151
  ret void, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !153 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !154, metadata !DIExpression()), !dbg !155
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !156, metadata !DIExpression()), !dbg !157
  ret void, !dbg !158
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !159 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !162, metadata !DIExpression()), !dbg !163
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !164, metadata !DIExpression()), !dbg !165
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !166, metadata !DIExpression()), !dbg !167
  ret void, !dbg !168
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !169 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !172, metadata !DIExpression()), !dbg !173
  ret void, !dbg !174
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !175 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !176, metadata !DIExpression()), !dbg !177
  %0 = load ptr, ptr %str.addr, align 8, !dbg !178
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !179
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !180
  %call2 = call i32 @getchar(), !dbg !181
  ret void, !dbg !182
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !183 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !186, metadata !DIExpression()), !dbg !187
  %0 = load ptr, ptr %p.addr, align 8, !dbg !188
  store i32 0, ptr %0, align 4, !dbg !189
  %1 = load ptr, ptr %retval, align 8, !dbg !190
  ret ptr %1, !dbg !190
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !191 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !192, metadata !DIExpression()), !dbg !193
  %0 = load ptr, ptr %p.addr, align 8, !dbg !194
  store i32 0, ptr %0, align 4, !dbg !195
  %1 = load ptr, ptr %retval, align 8, !dbg !196
  ret ptr %1, !dbg !196
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !197 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !198, metadata !DIExpression()), !dbg !199
  %0 = load ptr, ptr %p.addr, align 8, !dbg !200
  call void @free(ptr noundef %0) #6, !dbg !201
  %1 = load ptr, ptr %retval, align 8, !dbg !202
  ret ptr %1, !dbg !202
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !203 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !204, metadata !DIExpression()), !dbg !205
  %0 = load ptr, ptr %p.addr, align 8, !dbg !206
  call void @free(ptr noundef %0) #6, !dbg !207
  %1 = load ptr, ptr %retval, align 8, !dbg !208
  ret ptr %1, !dbg !208
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !209 {
entry:
  ret void, !dbg !212
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !213 {
entry:
  %p = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %p, metadata !216, metadata !DIExpression()), !dbg !217
  %call = call ptr @SAFEMALLOC(i32 noundef 1), !dbg !218
  store ptr %call, ptr %p, align 8, !dbg !217
  %0 = load ptr, ptr %p, align 8, !dbg !219
  store ptr %0, ptr @g, align 8, !dbg !220
  %1 = load ptr, ptr @g, align 8, !dbg !221
  %2 = load ptr, ptr %p, align 8, !dbg !222
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, ptr noundef %1, ptr noundef %2), !dbg !223
  ret i32 0, !dbg !224
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!32, !33, !34, !35, !36, !37, !38}
!llvm.ident = !{!39}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "g", scope: !19, file: !26, line: 10, type: !30, isLocal: false, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !23, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/malloc7.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "2d7f720ee8c7fea30ae242300d25c3dd")
!21 = !{!22}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !{!0, !7, !12, !24, !17}
!24 = !DIGlobalVariableExpression(var: !25, expr: !DIExpression())
!25 = distinct !DIGlobalVariable(scope: null, file: !26, line: 15, type: !27, isLocal: true, isDefinition: true)
!26 = !DIFile(filename: "src/mem_leak/malloc7.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "2d7f720ee8c7fea30ae242300d25c3dd")
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 48, elements: !28)
!28 = !{!29}
!29 = !DISubrange(count: 6)
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64)
!31 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!32 = !{i32 7, !"Dwarf Version", i32 5}
!33 = !{i32 2, !"Debug Info Version", i32 3}
!34 = !{i32 1, !"wchar_size", i32 4}
!35 = !{i32 8, !"PIC Level", i32 2}
!36 = !{i32 7, !"PIE Level", i32 2}
!37 = !{i32 7, !"uwtable", i32 2}
!38 = !{i32 7, !"frame-pointer", i32 2}
!39 = !{!"clang version 16.0.0"}
!40 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !41, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!41 = !DISubroutineType(types: !42)
!42 = !{null, !22, !22}
!43 = !{}
!44 = !DILocalVariable(name: "p", arg: 1, scope: !40, file: !2, line: 4, type: !22)
!45 = !DILocation(line: 4, column: 22, scope: !40)
!46 = !DILocalVariable(name: "q", arg: 2, scope: !40, file: !2, line: 4, type: !22)
!47 = !DILocation(line: 4, column: 31, scope: !40)
!48 = !DILocation(line: 5, column: 3, scope: !40)
!49 = !DILocation(line: 6, column: 1, scope: !40)
!50 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !41, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!51 = !DILocalVariable(name: "p", arg: 1, scope: !50, file: !2, line: 8, type: !22)
!52 = !DILocation(line: 8, column: 25, scope: !50)
!53 = !DILocalVariable(name: "q", arg: 2, scope: !50, file: !2, line: 8, type: !22)
!54 = !DILocation(line: 8, column: 34, scope: !50)
!55 = !DILocation(line: 9, column: 3, scope: !50)
!56 = !DILocation(line: 10, column: 1, scope: !50)
!57 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !41, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!58 = !DILocalVariable(name: "p", arg: 1, scope: !57, file: !2, line: 12, type: !22)
!59 = !DILocation(line: 12, column: 21, scope: !57)
!60 = !DILocalVariable(name: "q", arg: 2, scope: !57, file: !2, line: 12, type: !22)
!61 = !DILocation(line: 12, column: 30, scope: !57)
!62 = !DILocation(line: 13, column: 3, scope: !57)
!63 = !DILocation(line: 14, column: 1, scope: !57)
!64 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !41, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!65 = !DILocalVariable(name: "p", arg: 1, scope: !64, file: !2, line: 16, type: !22)
!66 = !DILocation(line: 16, column: 20, scope: !64)
!67 = !DILocalVariable(name: "q", arg: 2, scope: !64, file: !2, line: 16, type: !22)
!68 = !DILocation(line: 16, column: 29, scope: !64)
!69 = !DILocation(line: 17, column: 3, scope: !64)
!70 = !DILocation(line: 18, column: 1, scope: !64)
!71 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !41, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!72 = !DILocalVariable(name: "p", arg: 1, scope: !71, file: !2, line: 20, type: !22)
!73 = !DILocation(line: 20, column: 34, scope: !71)
!74 = !DILocalVariable(name: "q", arg: 2, scope: !71, file: !2, line: 20, type: !22)
!75 = !DILocation(line: 20, column: 43, scope: !71)
!76 = !DILocation(line: 21, column: 3, scope: !71)
!77 = !DILocation(line: 22, column: 1, scope: !71)
!78 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !41, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!79 = !DILocalVariable(name: "p", arg: 1, scope: !78, file: !2, line: 24, type: !22)
!80 = !DILocation(line: 24, column: 33, scope: !78)
!81 = !DILocalVariable(name: "q", arg: 2, scope: !78, file: !2, line: 24, type: !22)
!82 = !DILocation(line: 24, column: 42, scope: !78)
!83 = !DILocation(line: 25, column: 3, scope: !78)
!84 = !DILocation(line: 26, column: 1, scope: !78)
!85 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !86, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!86 = !DISubroutineType(types: !87)
!87 = !{!22, !31}
!88 = !DILocalVariable(name: "n", arg: 1, scope: !85, file: !2, line: 29, type: !31)
!89 = !DILocation(line: 29, column: 22, scope: !85)
!90 = !DILocation(line: 30, column: 17, scope: !85)
!91 = !DILocation(line: 30, column: 10, scope: !85)
!92 = !DILocation(line: 30, column: 3, scope: !85)
!93 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !86, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!94 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !2, line: 33, type: !31)
!95 = !DILocation(line: 33, column: 28, scope: !93)
!96 = !DILocation(line: 34, column: 19, scope: !93)
!97 = !DILocation(line: 34, column: 12, scope: !93)
!98 = !DILocation(line: 34, column: 5, scope: !93)
!99 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !86, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !2, line: 37, type: !31)
!101 = !DILocation(line: 37, column: 21, scope: !99)
!102 = !DILocation(line: 38, column: 17, scope: !99)
!103 = !DILocation(line: 38, column: 10, scope: !99)
!104 = !DILocation(line: 38, column: 3, scope: !99)
!105 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !86, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!106 = !DILocalVariable(name: "n", arg: 1, scope: !105, file: !2, line: 41, type: !31)
!107 = !DILocation(line: 41, column: 21, scope: !105)
!108 = !DILocation(line: 42, column: 17, scope: !105)
!109 = !DILocation(line: 42, column: 10, scope: !105)
!110 = !DILocation(line: 42, column: 3, scope: !105)
!111 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !86, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!112 = !DILocalVariable(name: "n", arg: 1, scope: !111, file: !2, line: 45, type: !31)
!113 = !DILocation(line: 45, column: 21, scope: !111)
!114 = !DILocation(line: 46, column: 17, scope: !111)
!115 = !DILocation(line: 46, column: 10, scope: !111)
!116 = !DILocation(line: 46, column: 3, scope: !111)
!117 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !86, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!118 = !DILocalVariable(name: "n", arg: 1, scope: !117, file: !2, line: 49, type: !31)
!119 = !DILocation(line: 49, column: 21, scope: !117)
!120 = !DILocation(line: 50, column: 17, scope: !117)
!121 = !DILocation(line: 50, column: 10, scope: !117)
!122 = !DILocation(line: 50, column: 3, scope: !117)
!123 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !86, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!124 = !DILocalVariable(name: "n", arg: 1, scope: !123, file: !2, line: 53, type: !31)
!125 = !DILocation(line: 53, column: 21, scope: !123)
!126 = !DILocation(line: 54, column: 17, scope: !123)
!127 = !DILocation(line: 54, column: 10, scope: !123)
!128 = !DILocation(line: 54, column: 3, scope: !123)
!129 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !86, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!130 = !DILocalVariable(name: "n", arg: 1, scope: !129, file: !2, line: 57, type: !31)
!131 = !DILocation(line: 57, column: 18, scope: !129)
!132 = !DILocation(line: 58, column: 17, scope: !129)
!133 = !DILocation(line: 58, column: 10, scope: !129)
!134 = !DILocation(line: 58, column: 3, scope: !129)
!135 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !136, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!136 = !DISubroutineType(types: !137)
!137 = !{null, !31, !31}
!138 = !DILocalVariable(name: "id", arg: 1, scope: !135, file: !2, line: 67, type: !31)
!139 = !DILocation(line: 67, column: 20, scope: !135)
!140 = !DILocalVariable(name: "flags", arg: 2, scope: !135, file: !2, line: 67, type: !31)
!141 = !DILocation(line: 67, column: 28, scope: !135)
!142 = !DILocation(line: 68, column: 3, scope: !135)
!143 = !DILocation(line: 69, column: 1, scope: !135)
!144 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !145, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!145 = !DISubroutineType(types: !146)
!146 = !{null, !31, !147}
!147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!148 = !DILocalVariable(name: "thdid", arg: 1, scope: !144, file: !2, line: 79, type: !31)
!149 = !DILocation(line: 79, column: 21, scope: !144)
!150 = !DILocalVariable(name: "cxt", arg: 2, scope: !144, file: !2, line: 79, type: !147)
!151 = !DILocation(line: 79, column: 34, scope: !144)
!152 = !DILocation(line: 81, column: 1, scope: !144)
!153 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !145, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!154 = !DILocalVariable(name: "thdid", arg: 1, scope: !153, file: !2, line: 82, type: !31)
!155 = !DILocation(line: 82, column: 21, scope: !153)
!156 = !DILocalVariable(name: "cxt", arg: 2, scope: !153, file: !2, line: 82, type: !147)
!157 = !DILocation(line: 82, column: 33, scope: !153)
!158 = !DILocation(line: 84, column: 1, scope: !153)
!159 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !160, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!160 = !DISubroutineType(types: !161)
!161 = !{null, !31, !147, !147}
!162 = !DILocalVariable(name: "thdid", arg: 1, scope: !159, file: !2, line: 85, type: !31)
!163 = !DILocation(line: 85, column: 26, scope: !159)
!164 = !DILocalVariable(name: "cxt", arg: 2, scope: !159, file: !2, line: 85, type: !147)
!165 = !DILocation(line: 85, column: 38, scope: !159)
!166 = !DILocalVariable(name: "lev", arg: 3, scope: !159, file: !2, line: 85, type: !147)
!167 = !DILocation(line: 85, column: 49, scope: !159)
!168 = !DILocation(line: 87, column: 1, scope: !159)
!169 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !170, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!170 = !DISubroutineType(types: !171)
!171 = !{null, !147}
!172 = !DILocalVariable(name: "lockname", arg: 1, scope: !169, file: !2, line: 89, type: !147)
!173 = !DILocation(line: 89, column: 17, scope: !169)
!174 = !DILocation(line: 91, column: 1, scope: !169)
!175 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !170, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!176 = !DILocalVariable(name: "str", arg: 1, scope: !175, file: !2, line: 93, type: !147)
!177 = !DILocation(line: 93, column: 18, scope: !175)
!178 = !DILocation(line: 94, column: 18, scope: !175)
!179 = !DILocation(line: 94, column: 3, scope: !175)
!180 = !DILocation(line: 95, column: 3, scope: !175)
!181 = !DILocation(line: 96, column: 3, scope: !175)
!182 = !DILocation(line: 97, column: 1, scope: !175)
!183 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !184, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!184 = !DISubroutineType(types: !185)
!185 = !{!22, !30}
!186 = !DILocalVariable(name: "p", arg: 1, scope: !183, file: !2, line: 100, type: !30)
!187 = !DILocation(line: 100, column: 24, scope: !183)
!188 = !DILocation(line: 101, column: 6, scope: !183)
!189 = !DILocation(line: 101, column: 8, scope: !183)
!190 = !DILocation(line: 102, column: 1, scope: !183)
!191 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !184, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!192 = !DILocalVariable(name: "p", arg: 1, scope: !191, file: !2, line: 104, type: !30)
!193 = !DILocation(line: 104, column: 20, scope: !191)
!194 = !DILocation(line: 105, column: 6, scope: !191)
!195 = !DILocation(line: 105, column: 8, scope: !191)
!196 = !DILocation(line: 106, column: 1, scope: !191)
!197 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !184, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!198 = !DILocalVariable(name: "p", arg: 1, scope: !197, file: !2, line: 110, type: !30)
!199 = !DILocation(line: 110, column: 22, scope: !197)
!200 = !DILocation(line: 111, column: 10, scope: !197)
!201 = !DILocation(line: 111, column: 5, scope: !197)
!202 = !DILocation(line: 112, column: 1, scope: !197)
!203 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !184, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!204 = !DILocalVariable(name: "p", arg: 1, scope: !203, file: !2, line: 115, type: !30)
!205 = !DILocation(line: 115, column: 24, scope: !203)
!206 = !DILocation(line: 116, column: 10, scope: !203)
!207 = !DILocation(line: 116, column: 5, scope: !203)
!208 = !DILocation(line: 117, column: 1, scope: !203)
!209 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !210, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!210 = !DISubroutineType(types: !211)
!211 = !{null}
!212 = !DILocation(line: 135, column: 20, scope: !209)
!213 = distinct !DISubprogram(name: "main", scope: !26, file: !26, line: 11, type: !214, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !43)
!214 = !DISubroutineType(types: !215)
!215 = !{!31}
!216 = !DILocalVariable(name: "p", scope: !213, file: !26, line: 13, type: !30)
!217 = !DILocation(line: 13, column: 7, scope: !213)
!218 = !DILocation(line: 13, column: 11, scope: !213)
!219 = !DILocation(line: 14, column: 6, scope: !213)
!220 = !DILocation(line: 14, column: 4, scope: !213)
!221 = !DILocation(line: 15, column: 17, scope: !213)
!222 = !DILocation(line: 15, column: 19, scope: !213)
!223 = !DILocation(line: 15, column: 2, scope: !213)
!224 = !DILocation(line: 16, column: 1, scope: !213)
