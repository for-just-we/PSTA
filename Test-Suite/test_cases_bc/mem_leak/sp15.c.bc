; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/mem_leak/sp15.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/sp15.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.List = type { ptr, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !37 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !41, metadata !DIExpression()), !dbg !42
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !43, metadata !DIExpression()), !dbg !44
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !45
  ret void, !dbg !46
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !47 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !48, metadata !DIExpression()), !dbg !49
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !52
  ret void, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !54 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !55, metadata !DIExpression()), !dbg !56
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !57, metadata !DIExpression()), !dbg !58
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !59
  ret void, !dbg !60
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !61 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !62, metadata !DIExpression()), !dbg !63
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !66
  ret void, !dbg !67
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !68 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !69, metadata !DIExpression()), !dbg !70
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !73
  ret void, !dbg !74
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !75 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !76, metadata !DIExpression()), !dbg !77
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !82 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %0 = load i32, ptr %n.addr, align 4, !dbg !87
  %conv = sext i32 %0 to i64, !dbg !87
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !88
  ret ptr %call, !dbg !89
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !90 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !91, metadata !DIExpression()), !dbg !92
  %0 = load i32, ptr %n.addr, align 4, !dbg !93
  %conv = sext i32 %0 to i64, !dbg !93
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !94
  ret ptr %call, !dbg !95
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !96 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %0 = load i32, ptr %n.addr, align 4, !dbg !99
  %conv = sext i32 %0 to i64, !dbg !99
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !100
  ret ptr %call, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !102 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %0 = load i32, ptr %n.addr, align 4, !dbg !105
  %conv = sext i32 %0 to i64, !dbg !105
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !106
  ret ptr %call, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !108 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !109, metadata !DIExpression()), !dbg !110
  %0 = load i32, ptr %n.addr, align 4, !dbg !111
  %conv = sext i32 %0 to i64, !dbg !111
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !112
  ret ptr %call, !dbg !113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !114 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %0 = load i32, ptr %n.addr, align 4, !dbg !117
  %conv = sext i32 %0 to i64, !dbg !117
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !118
  ret ptr %call, !dbg !119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !120 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !121, metadata !DIExpression()), !dbg !122
  %0 = load i32, ptr %n.addr, align 4, !dbg !123
  %conv = sext i32 %0 to i64, !dbg !123
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !124
  ret ptr %call, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !126 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !127, metadata !DIExpression()), !dbg !128
  %0 = load i32, ptr %n.addr, align 4, !dbg !129
  %conv = sext i32 %0 to i64, !dbg !129
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !130
  ret ptr %call, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !132 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !135, metadata !DIExpression()), !dbg !136
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !137, metadata !DIExpression()), !dbg !138
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !139
  ret void, !dbg !140
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !141 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !145, metadata !DIExpression()), !dbg !146
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !147, metadata !DIExpression()), !dbg !148
  ret void, !dbg !149
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !150 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !151, metadata !DIExpression()), !dbg !152
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !153, metadata !DIExpression()), !dbg !154
  ret void, !dbg !155
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !156 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !159, metadata !DIExpression()), !dbg !160
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !161, metadata !DIExpression()), !dbg !162
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !163, metadata !DIExpression()), !dbg !164
  ret void, !dbg !165
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !166 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !169, metadata !DIExpression()), !dbg !170
  ret void, !dbg !171
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !172 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !173, metadata !DIExpression()), !dbg !174
  %0 = load ptr, ptr %str.addr, align 8, !dbg !175
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !176
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !177
  %call2 = call i32 @getchar(), !dbg !178
  ret void, !dbg !179
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !180 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !184, metadata !DIExpression()), !dbg !185
  %0 = load ptr, ptr %p.addr, align 8, !dbg !186
  store i32 0, ptr %0, align 4, !dbg !187
  %1 = load ptr, ptr %retval, align 8, !dbg !188
  ret ptr %1, !dbg !188
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !189 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !190, metadata !DIExpression()), !dbg !191
  %0 = load ptr, ptr %p.addr, align 8, !dbg !192
  store i32 0, ptr %0, align 4, !dbg !193
  %1 = load ptr, ptr %retval, align 8, !dbg !194
  ret ptr %1, !dbg !194
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !195 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !196, metadata !DIExpression()), !dbg !197
  %0 = load ptr, ptr %p.addr, align 8, !dbg !198
  call void @free(ptr noundef %0) #6, !dbg !199
  %1 = load ptr, ptr %retval, align 8, !dbg !200
  ret ptr %1, !dbg !200
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !201 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !202, metadata !DIExpression()), !dbg !203
  %0 = load ptr, ptr %p.addr, align 8, !dbg !204
  call void @free(ptr noundef %0) #6, !dbg !205
  %1 = load ptr, ptr %retval, align 8, !dbg !206
  ret ptr %1, !dbg !206
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !207 {
entry:
  ret void, !dbg !210
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @reverse(ptr noundef %x) #0 !dbg !211 {
entry:
  %x.addr = alloca ptr, align 8
  %y = alloca ptr, align 8
  %t = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %x.addr, metadata !214, metadata !DIExpression()), !dbg !215
  call void @llvm.dbg.declare(metadata ptr %y, metadata !216, metadata !DIExpression()), !dbg !217
  call void @llvm.dbg.declare(metadata ptr %t, metadata !218, metadata !DIExpression()), !dbg !219
  %0 = load ptr, ptr %x.addr, align 8, !dbg !220
  %next = getelementptr inbounds %struct.List, ptr %0, i32 0, i32 0, !dbg !221
  %1 = load ptr, ptr %next, align 8, !dbg !221
  store ptr %1, ptr %y, align 8, !dbg !222
  %2 = load ptr, ptr %x.addr, align 8, !dbg !223
  call void @free(ptr noundef %2) #6, !dbg !224
  %3 = load ptr, ptr %y, align 8, !dbg !225
  store ptr %3, ptr %x.addr, align 8, !dbg !226
  br label %while.cond, !dbg !227

while.cond:                                       ; preds = %while.body, %entry
  %4 = load ptr, ptr %x.addr, align 8, !dbg !228
  %cmp = icmp ne ptr %4, null, !dbg !229
  br i1 %cmp, label %while.body, label %while.end, !dbg !227

while.body:                                       ; preds = %while.cond
  %5 = load ptr, ptr %x.addr, align 8, !dbg !230
  %next1 = getelementptr inbounds %struct.List, ptr %5, i32 0, i32 0, !dbg !232
  %6 = load ptr, ptr %next1, align 8, !dbg !232
  store ptr %6, ptr %t, align 8, !dbg !233
  %7 = load ptr, ptr %y, align 8, !dbg !234
  %8 = load ptr, ptr %x.addr, align 8, !dbg !235
  %next2 = getelementptr inbounds %struct.List, ptr %8, i32 0, i32 0, !dbg !236
  store ptr %7, ptr %next2, align 8, !dbg !237
  %9 = load ptr, ptr %x.addr, align 8, !dbg !238
  store ptr %9, ptr %y, align 8, !dbg !239
  %10 = load ptr, ptr %t, align 8, !dbg !240
  store ptr %10, ptr %x.addr, align 8, !dbg !241
  br label %while.cond, !dbg !227, !llvm.loop !242

while.end:                                        ; preds = %while.cond
  %call = call noalias ptr @malloc(i64 noundef 8) #5, !dbg !245
  store ptr %call, ptr %t, align 8, !dbg !246
  %11 = load ptr, ptr %y, align 8, !dbg !247
  %12 = load ptr, ptr %t, align 8, !dbg !248
  %next3 = getelementptr inbounds %struct.List, ptr %12, i32 0, i32 0, !dbg !249
  store ptr %11, ptr %next3, align 8, !dbg !250
  %13 = load ptr, ptr %t, align 8, !dbg !251
  ret ptr %13, !dbg !252
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @main() #0 !dbg !253 {
entry:
  %node = alloca ptr, align 8
  %ret_val = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %node, metadata !256, metadata !DIExpression()), !dbg !257
  call void @llvm.dbg.declare(metadata ptr %ret_val, metadata !258, metadata !DIExpression()), !dbg !259
  %call = call noalias ptr @malloc(i64 noundef 8) #5, !dbg !260
  store ptr %call, ptr %node, align 8, !dbg !261
  %0 = load ptr, ptr %node, align 8, !dbg !262
  %call1 = call ptr @reverse(ptr noundef %0), !dbg !263
  store ptr %call1, ptr %ret_val, align 8, !dbg !264
  %1 = load ptr, ptr %ret_val, align 8, !dbg !265
  call void @free(ptr noundef %1) #6, !dbg !266
  %2 = load ptr, ptr %ret_val, align 8, !dbg !267
  %next = getelementptr inbounds %struct.List, ptr %2, i32 0, i32 0, !dbg !268
  %3 = load ptr, ptr %next, align 8, !dbg !268
  call void @free(ptr noundef %3) #6, !dbg !269
  %4 = load ptr, ptr %ret_val, align 8, !dbg !270
  ret ptr %4, !dbg !271
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!17}
!llvm.module.flags = !{!29, !30, !31, !32, !33, !34, !35}
!llvm.ident = !{!36}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = distinct !DICompileUnit(language: DW_LANG_C11, file: !18, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !19, globals: !28, splitDebugInlining: false, nameTableKind: None)
!18 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/sp15.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "6a33a7e0c0e291c3ccf1d7e7c2a378d7")
!19 = !{!20, !21}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64)
!22 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "List", file: !23, line: 11, size: 128, elements: !24)
!23 = !DIFile(filename: "src/mem_leak/sp15.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "6a33a7e0c0e291c3ccf1d7e7c2a378d7")
!24 = !{!25, !26}
!25 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !22, file: !23, line: 12, baseType: !21, size: 64)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !22, file: !23, line: 13, baseType: !27, size: 32, offset: 64)
!27 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!28 = !{!0, !7, !12}
!29 = !{i32 7, !"Dwarf Version", i32 5}
!30 = !{i32 2, !"Debug Info Version", i32 3}
!31 = !{i32 1, !"wchar_size", i32 4}
!32 = !{i32 8, !"PIC Level", i32 2}
!33 = !{i32 7, !"PIE Level", i32 2}
!34 = !{i32 7, !"uwtable", i32 2}
!35 = !{i32 7, !"frame-pointer", i32 2}
!36 = !{!"clang version 16.0.0"}
!37 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !38, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!38 = !DISubroutineType(types: !39)
!39 = !{null, !20, !20}
!40 = !{}
!41 = !DILocalVariable(name: "p", arg: 1, scope: !37, file: !2, line: 4, type: !20)
!42 = !DILocation(line: 4, column: 22, scope: !37)
!43 = !DILocalVariable(name: "q", arg: 2, scope: !37, file: !2, line: 4, type: !20)
!44 = !DILocation(line: 4, column: 31, scope: !37)
!45 = !DILocation(line: 5, column: 3, scope: !37)
!46 = !DILocation(line: 6, column: 1, scope: !37)
!47 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !38, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!48 = !DILocalVariable(name: "p", arg: 1, scope: !47, file: !2, line: 8, type: !20)
!49 = !DILocation(line: 8, column: 25, scope: !47)
!50 = !DILocalVariable(name: "q", arg: 2, scope: !47, file: !2, line: 8, type: !20)
!51 = !DILocation(line: 8, column: 34, scope: !47)
!52 = !DILocation(line: 9, column: 3, scope: !47)
!53 = !DILocation(line: 10, column: 1, scope: !47)
!54 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !38, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!55 = !DILocalVariable(name: "p", arg: 1, scope: !54, file: !2, line: 12, type: !20)
!56 = !DILocation(line: 12, column: 21, scope: !54)
!57 = !DILocalVariable(name: "q", arg: 2, scope: !54, file: !2, line: 12, type: !20)
!58 = !DILocation(line: 12, column: 30, scope: !54)
!59 = !DILocation(line: 13, column: 3, scope: !54)
!60 = !DILocation(line: 14, column: 1, scope: !54)
!61 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !38, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!62 = !DILocalVariable(name: "p", arg: 1, scope: !61, file: !2, line: 16, type: !20)
!63 = !DILocation(line: 16, column: 20, scope: !61)
!64 = !DILocalVariable(name: "q", arg: 2, scope: !61, file: !2, line: 16, type: !20)
!65 = !DILocation(line: 16, column: 29, scope: !61)
!66 = !DILocation(line: 17, column: 3, scope: !61)
!67 = !DILocation(line: 18, column: 1, scope: !61)
!68 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !38, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!69 = !DILocalVariable(name: "p", arg: 1, scope: !68, file: !2, line: 20, type: !20)
!70 = !DILocation(line: 20, column: 34, scope: !68)
!71 = !DILocalVariable(name: "q", arg: 2, scope: !68, file: !2, line: 20, type: !20)
!72 = !DILocation(line: 20, column: 43, scope: !68)
!73 = !DILocation(line: 21, column: 3, scope: !68)
!74 = !DILocation(line: 22, column: 1, scope: !68)
!75 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !38, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!76 = !DILocalVariable(name: "p", arg: 1, scope: !75, file: !2, line: 24, type: !20)
!77 = !DILocation(line: 24, column: 33, scope: !75)
!78 = !DILocalVariable(name: "q", arg: 2, scope: !75, file: !2, line: 24, type: !20)
!79 = !DILocation(line: 24, column: 42, scope: !75)
!80 = !DILocation(line: 25, column: 3, scope: !75)
!81 = !DILocation(line: 26, column: 1, scope: !75)
!82 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !83, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!83 = !DISubroutineType(types: !84)
!84 = !{!20, !27}
!85 = !DILocalVariable(name: "n", arg: 1, scope: !82, file: !2, line: 29, type: !27)
!86 = !DILocation(line: 29, column: 22, scope: !82)
!87 = !DILocation(line: 30, column: 17, scope: !82)
!88 = !DILocation(line: 30, column: 10, scope: !82)
!89 = !DILocation(line: 30, column: 3, scope: !82)
!90 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !83, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!91 = !DILocalVariable(name: "n", arg: 1, scope: !90, file: !2, line: 33, type: !27)
!92 = !DILocation(line: 33, column: 28, scope: !90)
!93 = !DILocation(line: 34, column: 19, scope: !90)
!94 = !DILocation(line: 34, column: 12, scope: !90)
!95 = !DILocation(line: 34, column: 5, scope: !90)
!96 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !83, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!97 = !DILocalVariable(name: "n", arg: 1, scope: !96, file: !2, line: 37, type: !27)
!98 = !DILocation(line: 37, column: 21, scope: !96)
!99 = !DILocation(line: 38, column: 17, scope: !96)
!100 = !DILocation(line: 38, column: 10, scope: !96)
!101 = !DILocation(line: 38, column: 3, scope: !96)
!102 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !83, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!103 = !DILocalVariable(name: "n", arg: 1, scope: !102, file: !2, line: 41, type: !27)
!104 = !DILocation(line: 41, column: 21, scope: !102)
!105 = !DILocation(line: 42, column: 17, scope: !102)
!106 = !DILocation(line: 42, column: 10, scope: !102)
!107 = !DILocation(line: 42, column: 3, scope: !102)
!108 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !83, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!109 = !DILocalVariable(name: "n", arg: 1, scope: !108, file: !2, line: 45, type: !27)
!110 = !DILocation(line: 45, column: 21, scope: !108)
!111 = !DILocation(line: 46, column: 17, scope: !108)
!112 = !DILocation(line: 46, column: 10, scope: !108)
!113 = !DILocation(line: 46, column: 3, scope: !108)
!114 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !83, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!115 = !DILocalVariable(name: "n", arg: 1, scope: !114, file: !2, line: 49, type: !27)
!116 = !DILocation(line: 49, column: 21, scope: !114)
!117 = !DILocation(line: 50, column: 17, scope: !114)
!118 = !DILocation(line: 50, column: 10, scope: !114)
!119 = !DILocation(line: 50, column: 3, scope: !114)
!120 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !83, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!121 = !DILocalVariable(name: "n", arg: 1, scope: !120, file: !2, line: 53, type: !27)
!122 = !DILocation(line: 53, column: 21, scope: !120)
!123 = !DILocation(line: 54, column: 17, scope: !120)
!124 = !DILocation(line: 54, column: 10, scope: !120)
!125 = !DILocation(line: 54, column: 3, scope: !120)
!126 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !83, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!127 = !DILocalVariable(name: "n", arg: 1, scope: !126, file: !2, line: 57, type: !27)
!128 = !DILocation(line: 57, column: 18, scope: !126)
!129 = !DILocation(line: 58, column: 17, scope: !126)
!130 = !DILocation(line: 58, column: 10, scope: !126)
!131 = !DILocation(line: 58, column: 3, scope: !126)
!132 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !133, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!133 = !DISubroutineType(types: !134)
!134 = !{null, !27, !27}
!135 = !DILocalVariable(name: "id", arg: 1, scope: !132, file: !2, line: 67, type: !27)
!136 = !DILocation(line: 67, column: 20, scope: !132)
!137 = !DILocalVariable(name: "flags", arg: 2, scope: !132, file: !2, line: 67, type: !27)
!138 = !DILocation(line: 67, column: 28, scope: !132)
!139 = !DILocation(line: 68, column: 3, scope: !132)
!140 = !DILocation(line: 69, column: 1, scope: !132)
!141 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !142, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !27, !144}
!144 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!145 = !DILocalVariable(name: "thdid", arg: 1, scope: !141, file: !2, line: 79, type: !27)
!146 = !DILocation(line: 79, column: 21, scope: !141)
!147 = !DILocalVariable(name: "cxt", arg: 2, scope: !141, file: !2, line: 79, type: !144)
!148 = !DILocation(line: 79, column: 34, scope: !141)
!149 = !DILocation(line: 81, column: 1, scope: !141)
!150 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !142, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!151 = !DILocalVariable(name: "thdid", arg: 1, scope: !150, file: !2, line: 82, type: !27)
!152 = !DILocation(line: 82, column: 21, scope: !150)
!153 = !DILocalVariable(name: "cxt", arg: 2, scope: !150, file: !2, line: 82, type: !144)
!154 = !DILocation(line: 82, column: 33, scope: !150)
!155 = !DILocation(line: 84, column: 1, scope: !150)
!156 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !157, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!157 = !DISubroutineType(types: !158)
!158 = !{null, !27, !144, !144}
!159 = !DILocalVariable(name: "thdid", arg: 1, scope: !156, file: !2, line: 85, type: !27)
!160 = !DILocation(line: 85, column: 26, scope: !156)
!161 = !DILocalVariable(name: "cxt", arg: 2, scope: !156, file: !2, line: 85, type: !144)
!162 = !DILocation(line: 85, column: 38, scope: !156)
!163 = !DILocalVariable(name: "lev", arg: 3, scope: !156, file: !2, line: 85, type: !144)
!164 = !DILocation(line: 85, column: 49, scope: !156)
!165 = !DILocation(line: 87, column: 1, scope: !156)
!166 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !167, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!167 = !DISubroutineType(types: !168)
!168 = !{null, !144}
!169 = !DILocalVariable(name: "lockname", arg: 1, scope: !166, file: !2, line: 89, type: !144)
!170 = !DILocation(line: 89, column: 17, scope: !166)
!171 = !DILocation(line: 91, column: 1, scope: !166)
!172 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !167, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!173 = !DILocalVariable(name: "str", arg: 1, scope: !172, file: !2, line: 93, type: !144)
!174 = !DILocation(line: 93, column: 18, scope: !172)
!175 = !DILocation(line: 94, column: 18, scope: !172)
!176 = !DILocation(line: 94, column: 3, scope: !172)
!177 = !DILocation(line: 95, column: 3, scope: !172)
!178 = !DILocation(line: 96, column: 3, scope: !172)
!179 = !DILocation(line: 97, column: 1, scope: !172)
!180 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !181, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!181 = !DISubroutineType(types: !182)
!182 = !{!20, !183}
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!184 = !DILocalVariable(name: "p", arg: 1, scope: !180, file: !2, line: 100, type: !183)
!185 = !DILocation(line: 100, column: 24, scope: !180)
!186 = !DILocation(line: 101, column: 6, scope: !180)
!187 = !DILocation(line: 101, column: 8, scope: !180)
!188 = !DILocation(line: 102, column: 1, scope: !180)
!189 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !181, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!190 = !DILocalVariable(name: "p", arg: 1, scope: !189, file: !2, line: 104, type: !183)
!191 = !DILocation(line: 104, column: 20, scope: !189)
!192 = !DILocation(line: 105, column: 6, scope: !189)
!193 = !DILocation(line: 105, column: 8, scope: !189)
!194 = !DILocation(line: 106, column: 1, scope: !189)
!195 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !181, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!196 = !DILocalVariable(name: "p", arg: 1, scope: !195, file: !2, line: 110, type: !183)
!197 = !DILocation(line: 110, column: 22, scope: !195)
!198 = !DILocation(line: 111, column: 10, scope: !195)
!199 = !DILocation(line: 111, column: 5, scope: !195)
!200 = !DILocation(line: 112, column: 1, scope: !195)
!201 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !181, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!202 = !DILocalVariable(name: "p", arg: 1, scope: !201, file: !2, line: 115, type: !183)
!203 = !DILocation(line: 115, column: 24, scope: !201)
!204 = !DILocation(line: 116, column: 10, scope: !201)
!205 = !DILocation(line: 116, column: 5, scope: !201)
!206 = !DILocation(line: 117, column: 1, scope: !201)
!207 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !208, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!208 = !DISubroutineType(types: !209)
!209 = !{null}
!210 = !DILocation(line: 135, column: 20, scope: !207)
!211 = distinct !DISubprogram(name: "reverse", scope: !23, file: !23, line: 16, type: !212, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!212 = !DISubroutineType(types: !213)
!213 = !{!21, !21}
!214 = !DILocalVariable(name: "x", arg: 1, scope: !211, file: !23, line: 16, type: !21)
!215 = !DILocation(line: 16, column: 35, scope: !211)
!216 = !DILocalVariable(name: "y", scope: !211, file: !23, line: 17, type: !21)
!217 = !DILocation(line: 17, column: 15, scope: !211)
!218 = !DILocalVariable(name: "t", scope: !211, file: !23, line: 17, type: !21)
!219 = !DILocation(line: 17, column: 19, scope: !211)
!220 = !DILocation(line: 18, column: 6, scope: !211)
!221 = !DILocation(line: 18, column: 9, scope: !211)
!222 = !DILocation(line: 18, column: 4, scope: !211)
!223 = !DILocation(line: 19, column: 7, scope: !211)
!224 = !DILocation(line: 19, column: 2, scope: !211)
!225 = !DILocation(line: 20, column: 6, scope: !211)
!226 = !DILocation(line: 20, column: 4, scope: !211)
!227 = !DILocation(line: 21, column: 2, scope: !211)
!228 = !DILocation(line: 21, column: 9, scope: !211)
!229 = !DILocation(line: 21, column: 11, scope: !211)
!230 = !DILocation(line: 22, column: 7, scope: !231)
!231 = distinct !DILexicalBlock(scope: !211, file: !23, line: 21, column: 17)
!232 = !DILocation(line: 22, column: 10, scope: !231)
!233 = !DILocation(line: 22, column: 5, scope: !231)
!234 = !DILocation(line: 23, column: 13, scope: !231)
!235 = !DILocation(line: 23, column: 3, scope: !231)
!236 = !DILocation(line: 23, column: 6, scope: !231)
!237 = !DILocation(line: 23, column: 11, scope: !231)
!238 = !DILocation(line: 24, column: 7, scope: !231)
!239 = !DILocation(line: 24, column: 5, scope: !231)
!240 = !DILocation(line: 25, column: 7, scope: !231)
!241 = !DILocation(line: 25, column: 5, scope: !231)
!242 = distinct !{!242, !227, !243, !244}
!243 = !DILocation(line: 26, column: 2, scope: !211)
!244 = !{!"llvm.loop.mustprogress"}
!245 = !DILocation(line: 27, column: 22, scope: !211)
!246 = !DILocation(line: 27, column: 4, scope: !211)
!247 = !DILocation(line: 28, column: 12, scope: !211)
!248 = !DILocation(line: 28, column: 2, scope: !211)
!249 = !DILocation(line: 28, column: 5, scope: !211)
!250 = !DILocation(line: 28, column: 10, scope: !211)
!251 = !DILocation(line: 29, column: 9, scope: !211)
!252 = !DILocation(line: 29, column: 2, scope: !211)
!253 = distinct !DISubprogram(name: "main", scope: !23, file: !23, line: 32, type: !254, scopeLine: 32, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !40)
!254 = !DISubroutineType(types: !255)
!255 = !{!21}
!256 = !DILocalVariable(name: "node", scope: !253, file: !23, line: 33, type: !21)
!257 = !DILocation(line: 33, column: 15, scope: !253)
!258 = !DILocalVariable(name: "ret_val", scope: !253, file: !23, line: 33, type: !21)
!259 = !DILocation(line: 33, column: 22, scope: !253)
!260 = !DILocation(line: 34, column: 25, scope: !253)
!261 = !DILocation(line: 34, column: 7, scope: !253)
!262 = !DILocation(line: 35, column: 20, scope: !253)
!263 = !DILocation(line: 35, column: 12, scope: !253)
!264 = !DILocation(line: 35, column: 10, scope: !253)
!265 = !DILocation(line: 36, column: 7, scope: !253)
!266 = !DILocation(line: 36, column: 2, scope: !253)
!267 = !DILocation(line: 37, column: 7, scope: !253)
!268 = !DILocation(line: 37, column: 16, scope: !253)
!269 = !DILocation(line: 37, column: 2, scope: !253)
!270 = !DILocation(line: 38, column: 9, scope: !253)
!271 = !DILocation(line: 38, column: 2, scope: !253)
