; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/mem_leak/sp3.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/sp3.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@__const.ResourceLeak_TC03.str = private unnamed_addr constant [10 x i8] c"STRING\00\00\00\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" %s \0A\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !37 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !41, metadata !DIExpression()), !dbg !42
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !43, metadata !DIExpression()), !dbg !44
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !45
  ret void, !dbg !46
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !47 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !48, metadata !DIExpression()), !dbg !49
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !52
  ret void, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !54 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !55, metadata !DIExpression()), !dbg !56
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !57, metadata !DIExpression()), !dbg !58
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !59
  ret void, !dbg !60
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !61 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !62, metadata !DIExpression()), !dbg !63
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !66
  ret void, !dbg !67
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !68 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !69, metadata !DIExpression()), !dbg !70
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !73
  ret void, !dbg !74
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !75 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !76, metadata !DIExpression()), !dbg !77
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !82 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %0 = load i32, ptr %n.addr, align 4, !dbg !88
  %conv = sext i32 %0 to i64, !dbg !88
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !89
  ret ptr %call, !dbg !90
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !91 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %0 = load i32, ptr %n.addr, align 4, !dbg !94
  %conv = sext i32 %0 to i64, !dbg !94
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !95
  ret ptr %call, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !97 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !98, metadata !DIExpression()), !dbg !99
  %0 = load i32, ptr %n.addr, align 4, !dbg !100
  %conv = sext i32 %0 to i64, !dbg !100
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !101
  ret ptr %call, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !103 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !104, metadata !DIExpression()), !dbg !105
  %0 = load i32, ptr %n.addr, align 4, !dbg !106
  %conv = sext i32 %0 to i64, !dbg !106
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !107
  ret ptr %call, !dbg !108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !109 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !110, metadata !DIExpression()), !dbg !111
  %0 = load i32, ptr %n.addr, align 4, !dbg !112
  %conv = sext i32 %0 to i64, !dbg !112
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !113
  ret ptr %call, !dbg !114
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !115 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !116, metadata !DIExpression()), !dbg !117
  %0 = load i32, ptr %n.addr, align 4, !dbg !118
  %conv = sext i32 %0 to i64, !dbg !118
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !119
  ret ptr %call, !dbg !120
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !121 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !122, metadata !DIExpression()), !dbg !123
  %0 = load i32, ptr %n.addr, align 4, !dbg !124
  %conv = sext i32 %0 to i64, !dbg !124
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !125
  ret ptr %call, !dbg !126
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !127 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !128, metadata !DIExpression()), !dbg !129
  %0 = load i32, ptr %n.addr, align 4, !dbg !130
  %conv = sext i32 %0 to i64, !dbg !130
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !131
  ret ptr %call, !dbg !132
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !133 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !136, metadata !DIExpression()), !dbg !137
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !138, metadata !DIExpression()), !dbg !139
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !140
  ret void, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !142 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !145, metadata !DIExpression()), !dbg !146
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !147, metadata !DIExpression()), !dbg !148
  ret void, !dbg !149
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !150 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !151, metadata !DIExpression()), !dbg !152
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !153, metadata !DIExpression()), !dbg !154
  ret void, !dbg !155
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !156 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !159, metadata !DIExpression()), !dbg !160
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !161, metadata !DIExpression()), !dbg !162
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !163, metadata !DIExpression()), !dbg !164
  ret void, !dbg !165
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !166 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !169, metadata !DIExpression()), !dbg !170
  ret void, !dbg !171
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !172 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !173, metadata !DIExpression()), !dbg !174
  %0 = load ptr, ptr %str.addr, align 8, !dbg !175
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !176
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !177
  %call2 = call i32 @getchar(), !dbg !178
  ret void, !dbg !179
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !180 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !184, metadata !DIExpression()), !dbg !185
  %0 = load ptr, ptr %p.addr, align 8, !dbg !186
  store i32 0, ptr %0, align 4, !dbg !187
  %1 = load ptr, ptr %retval, align 8, !dbg !188
  ret ptr %1, !dbg !188
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !189 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !190, metadata !DIExpression()), !dbg !191
  %0 = load ptr, ptr %p.addr, align 8, !dbg !192
  store i32 0, ptr %0, align 4, !dbg !193
  %1 = load ptr, ptr %retval, align 8, !dbg !194
  ret ptr %1, !dbg !194
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !195 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !196, metadata !DIExpression()), !dbg !197
  %0 = load ptr, ptr %p.addr, align 8, !dbg !198
  call void @free(ptr noundef %0) #7, !dbg !199
  %1 = load ptr, ptr %retval, align 8, !dbg !200
  ret ptr %1, !dbg !200
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !201 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !202, metadata !DIExpression()), !dbg !203
  %0 = load ptr, ptr %p.addr, align 8, !dbg !204
  call void @free(ptr noundef %0) #7, !dbg !205
  %1 = load ptr, ptr %retval, align 8, !dbg !206
  ret ptr %1, !dbg !206
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !207 {
entry:
  ret void, !dbg !210
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @pointer(ptr noundef %p, ptr noundef %s) #0 !dbg !211 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !215, metadata !DIExpression()), !dbg !216
  store ptr %s, ptr %s.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %s.addr, metadata !217, metadata !DIExpression()), !dbg !218
  %0 = load ptr, ptr %s.addr, align 8, !dbg !219
  %1 = load ptr, ptr %p.addr, align 8, !dbg !220
  store ptr %0, ptr %1, align 8, !dbg !221
  ret void, !dbg !222
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ResourceLeak_TC03(i32 noundef %arg1) #0 !dbg !223 {
entry:
  %retval = alloca i32, align 4
  %arg1.addr = alloca i32, align 4
  %str = alloca [10 x i8], align 1
  %p1 = alloca ptr, align 8
  %p2 = alloca ptr, align 8
  store i32 %arg1, ptr %arg1.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %arg1.addr, metadata !226, metadata !DIExpression()), !dbg !227
  call void @llvm.dbg.declare(metadata ptr %str, metadata !228, metadata !DIExpression()), !dbg !232
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %str, ptr align 1 @__const.ResourceLeak_TC03.str, i64 10, i1 false), !dbg !232
  call void @llvm.dbg.declare(metadata ptr %p1, metadata !233, metadata !DIExpression()), !dbg !234
  call void @llvm.dbg.declare(metadata ptr %p2, metadata !235, metadata !DIExpression()), !dbg !236
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !237
  store ptr %call, ptr %p1, align 8, !dbg !238
  %0 = load ptr, ptr %p1, align 8, !dbg !239
  %cmp = icmp eq ptr %0, null, !dbg !241
  br i1 %cmp, label %if.then, label %if.end, !dbg !242

if.then:                                          ; preds = %entry
  store i32 1, ptr %retval, align 4, !dbg !243
  br label %return, !dbg !243

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %p1, align 8, !dbg !245
  %arraydecay = getelementptr inbounds [10 x i8], ptr %str, i64 0, i64 0, !dbg !246
  %call1 = call ptr @strcat(ptr noundef %1, ptr noundef %arraydecay), !dbg !247
  %2 = load ptr, ptr %p1, align 8, !dbg !248
  call void @pointer(ptr noundef %p2, ptr noundef %2), !dbg !249
  %3 = load ptr, ptr %p1, align 8, !dbg !250
  %call2 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, ptr noundef %3), !dbg !251
  %4 = load ptr, ptr %p2, align 8, !dbg !252
  %call3 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, ptr noundef %4), !dbg !253
  %5 = load ptr, ptr %p2, align 8, !dbg !254
  call void @free(ptr noundef %5) #7, !dbg !255
  store i32 0, ptr %retval, align 4, !dbg !256
  br label %return, !dbg !256

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, ptr %retval, align 4, !dbg !257
  ret i32 %6, !dbg !257
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #5

declare ptr @strcat(ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !258 {
entry:
  %retval = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  %call = call i32 @ResourceLeak_TC03(i32 noundef 1), !dbg !261
  ret i32 0, !dbg !262
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!23}
!llvm.module.flags = !{!29, !30, !31, !32, !33, !34, !35}
!llvm.ident = !{!36}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 28, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/mem_leak/sp3.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "be695ace06dfd713e464624f36ecb823")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 48, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 6)
!23 = distinct !DICompileUnit(language: DW_LANG_C11, file: !24, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !25, globals: !28, splitDebugInlining: false, nameTableKind: None)
!24 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/sp3.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "be695ace06dfd713e464624f36ecb823")
!25 = !{!26, !27}
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!28 = !{!0, !7, !12, !17}
!29 = !{i32 7, !"Dwarf Version", i32 5}
!30 = !{i32 2, !"Debug Info Version", i32 3}
!31 = !{i32 1, !"wchar_size", i32 4}
!32 = !{i32 8, !"PIC Level", i32 2}
!33 = !{i32 7, !"PIE Level", i32 2}
!34 = !{i32 7, !"uwtable", i32 2}
!35 = !{i32 7, !"frame-pointer", i32 2}
!36 = !{!"clang version 16.0.0"}
!37 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !38, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!38 = !DISubroutineType(types: !39)
!39 = !{null, !26, !26}
!40 = !{}
!41 = !DILocalVariable(name: "p", arg: 1, scope: !37, file: !2, line: 4, type: !26)
!42 = !DILocation(line: 4, column: 22, scope: !37)
!43 = !DILocalVariable(name: "q", arg: 2, scope: !37, file: !2, line: 4, type: !26)
!44 = !DILocation(line: 4, column: 31, scope: !37)
!45 = !DILocation(line: 5, column: 3, scope: !37)
!46 = !DILocation(line: 6, column: 1, scope: !37)
!47 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !38, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!48 = !DILocalVariable(name: "p", arg: 1, scope: !47, file: !2, line: 8, type: !26)
!49 = !DILocation(line: 8, column: 25, scope: !47)
!50 = !DILocalVariable(name: "q", arg: 2, scope: !47, file: !2, line: 8, type: !26)
!51 = !DILocation(line: 8, column: 34, scope: !47)
!52 = !DILocation(line: 9, column: 3, scope: !47)
!53 = !DILocation(line: 10, column: 1, scope: !47)
!54 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !38, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!55 = !DILocalVariable(name: "p", arg: 1, scope: !54, file: !2, line: 12, type: !26)
!56 = !DILocation(line: 12, column: 21, scope: !54)
!57 = !DILocalVariable(name: "q", arg: 2, scope: !54, file: !2, line: 12, type: !26)
!58 = !DILocation(line: 12, column: 30, scope: !54)
!59 = !DILocation(line: 13, column: 3, scope: !54)
!60 = !DILocation(line: 14, column: 1, scope: !54)
!61 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !38, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!62 = !DILocalVariable(name: "p", arg: 1, scope: !61, file: !2, line: 16, type: !26)
!63 = !DILocation(line: 16, column: 20, scope: !61)
!64 = !DILocalVariable(name: "q", arg: 2, scope: !61, file: !2, line: 16, type: !26)
!65 = !DILocation(line: 16, column: 29, scope: !61)
!66 = !DILocation(line: 17, column: 3, scope: !61)
!67 = !DILocation(line: 18, column: 1, scope: !61)
!68 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !38, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!69 = !DILocalVariable(name: "p", arg: 1, scope: !68, file: !2, line: 20, type: !26)
!70 = !DILocation(line: 20, column: 34, scope: !68)
!71 = !DILocalVariable(name: "q", arg: 2, scope: !68, file: !2, line: 20, type: !26)
!72 = !DILocation(line: 20, column: 43, scope: !68)
!73 = !DILocation(line: 21, column: 3, scope: !68)
!74 = !DILocation(line: 22, column: 1, scope: !68)
!75 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !38, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!76 = !DILocalVariable(name: "p", arg: 1, scope: !75, file: !2, line: 24, type: !26)
!77 = !DILocation(line: 24, column: 33, scope: !75)
!78 = !DILocalVariable(name: "q", arg: 2, scope: !75, file: !2, line: 24, type: !26)
!79 = !DILocation(line: 24, column: 42, scope: !75)
!80 = !DILocation(line: 25, column: 3, scope: !75)
!81 = !DILocation(line: 26, column: 1, scope: !75)
!82 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !83, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!83 = !DISubroutineType(types: !84)
!84 = !{!26, !85}
!85 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!86 = !DILocalVariable(name: "n", arg: 1, scope: !82, file: !2, line: 29, type: !85)
!87 = !DILocation(line: 29, column: 22, scope: !82)
!88 = !DILocation(line: 30, column: 17, scope: !82)
!89 = !DILocation(line: 30, column: 10, scope: !82)
!90 = !DILocation(line: 30, column: 3, scope: !82)
!91 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !83, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!92 = !DILocalVariable(name: "n", arg: 1, scope: !91, file: !2, line: 33, type: !85)
!93 = !DILocation(line: 33, column: 28, scope: !91)
!94 = !DILocation(line: 34, column: 19, scope: !91)
!95 = !DILocation(line: 34, column: 12, scope: !91)
!96 = !DILocation(line: 34, column: 5, scope: !91)
!97 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !83, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!98 = !DILocalVariable(name: "n", arg: 1, scope: !97, file: !2, line: 37, type: !85)
!99 = !DILocation(line: 37, column: 21, scope: !97)
!100 = !DILocation(line: 38, column: 17, scope: !97)
!101 = !DILocation(line: 38, column: 10, scope: !97)
!102 = !DILocation(line: 38, column: 3, scope: !97)
!103 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !83, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!104 = !DILocalVariable(name: "n", arg: 1, scope: !103, file: !2, line: 41, type: !85)
!105 = !DILocation(line: 41, column: 21, scope: !103)
!106 = !DILocation(line: 42, column: 17, scope: !103)
!107 = !DILocation(line: 42, column: 10, scope: !103)
!108 = !DILocation(line: 42, column: 3, scope: !103)
!109 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !83, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!110 = !DILocalVariable(name: "n", arg: 1, scope: !109, file: !2, line: 45, type: !85)
!111 = !DILocation(line: 45, column: 21, scope: !109)
!112 = !DILocation(line: 46, column: 17, scope: !109)
!113 = !DILocation(line: 46, column: 10, scope: !109)
!114 = !DILocation(line: 46, column: 3, scope: !109)
!115 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !83, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!116 = !DILocalVariable(name: "n", arg: 1, scope: !115, file: !2, line: 49, type: !85)
!117 = !DILocation(line: 49, column: 21, scope: !115)
!118 = !DILocation(line: 50, column: 17, scope: !115)
!119 = !DILocation(line: 50, column: 10, scope: !115)
!120 = !DILocation(line: 50, column: 3, scope: !115)
!121 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !83, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!122 = !DILocalVariable(name: "n", arg: 1, scope: !121, file: !2, line: 53, type: !85)
!123 = !DILocation(line: 53, column: 21, scope: !121)
!124 = !DILocation(line: 54, column: 17, scope: !121)
!125 = !DILocation(line: 54, column: 10, scope: !121)
!126 = !DILocation(line: 54, column: 3, scope: !121)
!127 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !83, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!128 = !DILocalVariable(name: "n", arg: 1, scope: !127, file: !2, line: 57, type: !85)
!129 = !DILocation(line: 57, column: 18, scope: !127)
!130 = !DILocation(line: 58, column: 17, scope: !127)
!131 = !DILocation(line: 58, column: 10, scope: !127)
!132 = !DILocation(line: 58, column: 3, scope: !127)
!133 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !134, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!134 = !DISubroutineType(types: !135)
!135 = !{null, !85, !85}
!136 = !DILocalVariable(name: "id", arg: 1, scope: !133, file: !2, line: 67, type: !85)
!137 = !DILocation(line: 67, column: 20, scope: !133)
!138 = !DILocalVariable(name: "flags", arg: 2, scope: !133, file: !2, line: 67, type: !85)
!139 = !DILocation(line: 67, column: 28, scope: !133)
!140 = !DILocation(line: 68, column: 3, scope: !133)
!141 = !DILocation(line: 69, column: 1, scope: !133)
!142 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !143, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!143 = !DISubroutineType(types: !144)
!144 = !{null, !85, !27}
!145 = !DILocalVariable(name: "thdid", arg: 1, scope: !142, file: !2, line: 79, type: !85)
!146 = !DILocation(line: 79, column: 21, scope: !142)
!147 = !DILocalVariable(name: "cxt", arg: 2, scope: !142, file: !2, line: 79, type: !27)
!148 = !DILocation(line: 79, column: 34, scope: !142)
!149 = !DILocation(line: 81, column: 1, scope: !142)
!150 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !143, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!151 = !DILocalVariable(name: "thdid", arg: 1, scope: !150, file: !2, line: 82, type: !85)
!152 = !DILocation(line: 82, column: 21, scope: !150)
!153 = !DILocalVariable(name: "cxt", arg: 2, scope: !150, file: !2, line: 82, type: !27)
!154 = !DILocation(line: 82, column: 33, scope: !150)
!155 = !DILocation(line: 84, column: 1, scope: !150)
!156 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !157, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!157 = !DISubroutineType(types: !158)
!158 = !{null, !85, !27, !27}
!159 = !DILocalVariable(name: "thdid", arg: 1, scope: !156, file: !2, line: 85, type: !85)
!160 = !DILocation(line: 85, column: 26, scope: !156)
!161 = !DILocalVariable(name: "cxt", arg: 2, scope: !156, file: !2, line: 85, type: !27)
!162 = !DILocation(line: 85, column: 38, scope: !156)
!163 = !DILocalVariable(name: "lev", arg: 3, scope: !156, file: !2, line: 85, type: !27)
!164 = !DILocation(line: 85, column: 49, scope: !156)
!165 = !DILocation(line: 87, column: 1, scope: !156)
!166 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !167, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!167 = !DISubroutineType(types: !168)
!168 = !{null, !27}
!169 = !DILocalVariable(name: "lockname", arg: 1, scope: !166, file: !2, line: 89, type: !27)
!170 = !DILocation(line: 89, column: 17, scope: !166)
!171 = !DILocation(line: 91, column: 1, scope: !166)
!172 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !167, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!173 = !DILocalVariable(name: "str", arg: 1, scope: !172, file: !2, line: 93, type: !27)
!174 = !DILocation(line: 93, column: 18, scope: !172)
!175 = !DILocation(line: 94, column: 18, scope: !172)
!176 = !DILocation(line: 94, column: 3, scope: !172)
!177 = !DILocation(line: 95, column: 3, scope: !172)
!178 = !DILocation(line: 96, column: 3, scope: !172)
!179 = !DILocation(line: 97, column: 1, scope: !172)
!180 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !181, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!181 = !DISubroutineType(types: !182)
!182 = !{!26, !183}
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !85, size: 64)
!184 = !DILocalVariable(name: "p", arg: 1, scope: !180, file: !2, line: 100, type: !183)
!185 = !DILocation(line: 100, column: 24, scope: !180)
!186 = !DILocation(line: 101, column: 6, scope: !180)
!187 = !DILocation(line: 101, column: 8, scope: !180)
!188 = !DILocation(line: 102, column: 1, scope: !180)
!189 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !181, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!190 = !DILocalVariable(name: "p", arg: 1, scope: !189, file: !2, line: 104, type: !183)
!191 = !DILocation(line: 104, column: 20, scope: !189)
!192 = !DILocation(line: 105, column: 6, scope: !189)
!193 = !DILocation(line: 105, column: 8, scope: !189)
!194 = !DILocation(line: 106, column: 1, scope: !189)
!195 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !181, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!196 = !DILocalVariable(name: "p", arg: 1, scope: !195, file: !2, line: 110, type: !183)
!197 = !DILocation(line: 110, column: 22, scope: !195)
!198 = !DILocation(line: 111, column: 10, scope: !195)
!199 = !DILocation(line: 111, column: 5, scope: !195)
!200 = !DILocation(line: 112, column: 1, scope: !195)
!201 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !181, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!202 = !DILocalVariable(name: "p", arg: 1, scope: !201, file: !2, line: 115, type: !183)
!203 = !DILocation(line: 115, column: 24, scope: !201)
!204 = !DILocation(line: 116, column: 10, scope: !201)
!205 = !DILocation(line: 116, column: 5, scope: !201)
!206 = !DILocation(line: 117, column: 1, scope: !201)
!207 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !208, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!208 = !DISubroutineType(types: !209)
!209 = !{null}
!210 = !DILocation(line: 135, column: 20, scope: !207)
!211 = distinct !DISubprogram(name: "pointer", scope: !19, file: !19, line: 11, type: !212, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!212 = !DISubroutineType(types: !213)
!213 = !{null, !214, !27}
!214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!215 = !DILocalVariable(name: "p", arg: 1, scope: !211, file: !19, line: 11, type: !214)
!216 = !DILocation(line: 11, column: 21, scope: !211)
!217 = !DILocalVariable(name: "s", arg: 2, scope: !211, file: !19, line: 11, type: !27)
!218 = !DILocation(line: 11, column: 30, scope: !211)
!219 = !DILocation(line: 13, column: 8, scope: !211)
!220 = !DILocation(line: 13, column: 4, scope: !211)
!221 = !DILocation(line: 13, column: 6, scope: !211)
!222 = !DILocation(line: 14, column: 1, scope: !211)
!223 = distinct !DISubprogram(name: "ResourceLeak_TC03", scope: !19, file: !19, line: 16, type: !224, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!224 = !DISubroutineType(types: !225)
!225 = !{!85, !85}
!226 = !DILocalVariable(name: "arg1", arg: 1, scope: !223, file: !19, line: 16, type: !85)
!227 = !DILocation(line: 16, column: 28, scope: !223)
!228 = !DILocalVariable(name: "str", scope: !223, file: !19, line: 18, type: !229)
!229 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 80, elements: !230)
!230 = !{!231}
!231 = !DISubrange(count: 10)
!232 = !DILocation(line: 18, column: 8, scope: !223)
!233 = !DILocalVariable(name: "p1", scope: !223, file: !19, line: 19, type: !27)
!234 = !DILocation(line: 19, column: 9, scope: !223)
!235 = !DILocalVariable(name: "p2", scope: !223, file: !19, line: 20, type: !27)
!236 = !DILocation(line: 20, column: 9, scope: !223)
!237 = !DILocation(line: 21, column: 16, scope: !223)
!238 = !DILocation(line: 21, column: 6, scope: !223)
!239 = !DILocation(line: 22, column: 7, scope: !240)
!240 = distinct !DILexicalBlock(scope: !223, file: !19, line: 22, column: 7)
!241 = !DILocation(line: 22, column: 10, scope: !240)
!242 = !DILocation(line: 22, column: 7, scope: !223)
!243 = !DILocation(line: 23, column: 5, scope: !244)
!244 = distinct !DILexicalBlock(scope: !240, file: !19, line: 22, column: 19)
!245 = !DILocation(line: 25, column: 10, scope: !223)
!246 = !DILocation(line: 25, column: 13, scope: !223)
!247 = !DILocation(line: 25, column: 3, scope: !223)
!248 = !DILocation(line: 26, column: 15, scope: !223)
!249 = !DILocation(line: 26, column: 3, scope: !223)
!250 = !DILocation(line: 28, column: 20, scope: !223)
!251 = !DILocation(line: 28, column: 3, scope: !223)
!252 = !DILocation(line: 29, column: 20, scope: !223)
!253 = !DILocation(line: 29, column: 3, scope: !223)
!254 = !DILocation(line: 31, column: 8, scope: !223)
!255 = !DILocation(line: 31, column: 3, scope: !223)
!256 = !DILocation(line: 32, column: 3, scope: !223)
!257 = !DILocation(line: 33, column: 1, scope: !223)
!258 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 35, type: !259, scopeLine: 36, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !40)
!259 = !DISubroutineType(types: !260)
!260 = !{!85}
!261 = !DILocation(line: 37, column: 3, scope: !258)
!262 = !DILocation(line: 38, column: 4, scope: !258)
