; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/mem_leak/sp9.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/sp9.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !34 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !38, metadata !DIExpression()), !dbg !39
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !42
  ret void, !dbg !43
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !44 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !45, metadata !DIExpression()), !dbg !46
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !47, metadata !DIExpression()), !dbg !48
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !49
  ret void, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !51 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !52, metadata !DIExpression()), !dbg !53
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !56
  ret void, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !58 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !59, metadata !DIExpression()), !dbg !60
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !63
  ret void, !dbg !64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !65 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !66, metadata !DIExpression()), !dbg !67
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !68, metadata !DIExpression()), !dbg !69
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !70
  ret void, !dbg !71
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !72 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !73, metadata !DIExpression()), !dbg !74
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !75, metadata !DIExpression()), !dbg !76
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !77
  ret void, !dbg !78
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !79 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %0 = load i32, ptr %n.addr, align 4, !dbg !85
  %conv = sext i32 %0 to i64, !dbg !85
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !86
  ret ptr %call, !dbg !87
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !88 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !89, metadata !DIExpression()), !dbg !90
  %0 = load i32, ptr %n.addr, align 4, !dbg !91
  %conv = sext i32 %0 to i64, !dbg !91
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !92
  ret ptr %call, !dbg !93
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !94 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !95, metadata !DIExpression()), !dbg !96
  %0 = load i32, ptr %n.addr, align 4, !dbg !97
  %conv = sext i32 %0 to i64, !dbg !97
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !98
  ret ptr %call, !dbg !99
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !100 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !101, metadata !DIExpression()), !dbg !102
  %0 = load i32, ptr %n.addr, align 4, !dbg !103
  %conv = sext i32 %0 to i64, !dbg !103
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !104
  ret ptr %call, !dbg !105
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !106 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !107, metadata !DIExpression()), !dbg !108
  %0 = load i32, ptr %n.addr, align 4, !dbg !109
  %conv = sext i32 %0 to i64, !dbg !109
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !110
  ret ptr %call, !dbg !111
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !112 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %0 = load i32, ptr %n.addr, align 4, !dbg !115
  %conv = sext i32 %0 to i64, !dbg !115
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !116
  ret ptr %call, !dbg !117
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !118 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !119, metadata !DIExpression()), !dbg !120
  %0 = load i32, ptr %n.addr, align 4, !dbg !121
  %conv = sext i32 %0 to i64, !dbg !121
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !122
  ret ptr %call, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !124 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !125, metadata !DIExpression()), !dbg !126
  %0 = load i32, ptr %n.addr, align 4, !dbg !127
  %conv = sext i32 %0 to i64, !dbg !127
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !128
  ret ptr %call, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !130 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !133, metadata !DIExpression()), !dbg !134
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !135, metadata !DIExpression()), !dbg !136
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !137
  ret void, !dbg !138
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !139 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !142, metadata !DIExpression()), !dbg !143
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !144, metadata !DIExpression()), !dbg !145
  ret void, !dbg !146
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !147 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !148, metadata !DIExpression()), !dbg !149
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !150, metadata !DIExpression()), !dbg !151
  ret void, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !153 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !156, metadata !DIExpression()), !dbg !157
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !158, metadata !DIExpression()), !dbg !159
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !160, metadata !DIExpression()), !dbg !161
  ret void, !dbg !162
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !163 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !166, metadata !DIExpression()), !dbg !167
  ret void, !dbg !168
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !169 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !170, metadata !DIExpression()), !dbg !171
  %0 = load ptr, ptr %str.addr, align 8, !dbg !172
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !173
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !174
  %call2 = call i32 @getchar(), !dbg !175
  ret void, !dbg !176
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !177 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !181, metadata !DIExpression()), !dbg !182
  %0 = load ptr, ptr %p.addr, align 8, !dbg !183
  store i32 0, ptr %0, align 4, !dbg !184
  %1 = load ptr, ptr %retval, align 8, !dbg !185
  ret ptr %1, !dbg !185
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !186 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !187, metadata !DIExpression()), !dbg !188
  %0 = load ptr, ptr %p.addr, align 8, !dbg !189
  store i32 0, ptr %0, align 4, !dbg !190
  %1 = load ptr, ptr %retval, align 8, !dbg !191
  ret ptr %1, !dbg !191
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !192 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !193, metadata !DIExpression()), !dbg !194
  %0 = load ptr, ptr %p.addr, align 8, !dbg !195
  call void @free(ptr noundef %0) #7, !dbg !196
  %1 = load ptr, ptr %retval, align 8, !dbg !197
  ret ptr %1, !dbg !197
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !198 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !199, metadata !DIExpression()), !dbg !200
  %0 = load ptr, ptr %p.addr, align 8, !dbg !201
  call void @free(ptr noundef %0) #7, !dbg !202
  %1 = load ptr, ptr %retval, align 8, !dbg !203
  ret ptr %1, !dbg !203
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !204 {
entry:
  ret void, !dbg !207
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @sum(ptr noundef %s) #0 !dbg !208 {
entry:
  %s.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i32, align 4
  %n = alloca i32, align 4
  store ptr %s, ptr %s.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %s.addr, metadata !211, metadata !DIExpression()), !dbg !212
  call void @llvm.dbg.declare(metadata ptr %p, metadata !213, metadata !DIExpression()), !dbg !214
  call void @llvm.dbg.declare(metadata ptr %i, metadata !215, metadata !DIExpression()), !dbg !216
  store i32 0, ptr %i, align 4, !dbg !216
  call void @llvm.dbg.declare(metadata ptr %j, metadata !217, metadata !DIExpression()), !dbg !218
  call void @llvm.dbg.declare(metadata ptr %r, metadata !219, metadata !DIExpression()), !dbg !220
  call void @llvm.dbg.declare(metadata ptr %n, metadata !221, metadata !DIExpression()), !dbg !222
  %0 = load ptr, ptr %s.addr, align 8, !dbg !223
  %cmp = icmp eq ptr %0, null, !dbg !224
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !223

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !223

cond.false:                                       ; preds = %entry
  %1 = load ptr, ptr %s.addr, align 8, !dbg !225
  %call = call i64 @strlen(ptr noundef %1), !dbg !226
  br label %cond.end, !dbg !223

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %call, %cond.false ], !dbg !223
  %conv = trunc i64 %cond to i32, !dbg !227
  store i32 %conv, ptr %n, align 4, !dbg !222
  %2 = load i32, ptr %n, align 4, !dbg !228
  %cmp1 = icmp sgt i32 %2, 0, !dbg !230
  br i1 %cmp1, label %if.then, label %if.else, !dbg !231

if.then:                                          ; preds = %cond.end
  %3 = load i32, ptr %n, align 4, !dbg !232
  %call3 = call ptr @PLKMALLOC(i32 noundef %3), !dbg !234
  store ptr %call3, ptr %p, align 8, !dbg !235
  store i32 0, ptr %r, align 4, !dbg !236
  br label %if.end, !dbg !237

if.else:                                          ; preds = %cond.end
  store i32 -1, ptr %r, align 4, !dbg !238
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond, !dbg !239

while.cond:                                       ; preds = %if.end22, %if.end
  %4 = load i32, ptr %i, align 4, !dbg !240
  %5 = load i32, ptr %n, align 4, !dbg !241
  %cmp4 = icmp slt i32 %4, %5, !dbg !242
  br i1 %cmp4, label %while.body, label %while.end24, !dbg !239

while.body:                                       ; preds = %while.cond
  store i32 0, ptr %j, align 4, !dbg !243
  br label %while.cond6, !dbg !245

while.cond6:                                      ; preds = %while.body10, %while.body
  %6 = load ptr, ptr %s.addr, align 8, !dbg !246
  %7 = load i32, ptr %i, align 4, !dbg !247
  %idxprom = sext i32 %7 to i64, !dbg !246
  %arrayidx = getelementptr inbounds i8, ptr %6, i64 %idxprom, !dbg !246
  %8 = load i8, ptr %arrayidx, align 1, !dbg !246
  %conv7 = sext i8 %8 to i32, !dbg !248
  %cmp8 = icmp sgt i32 %conv7, 0, !dbg !249
  br i1 %cmp8, label %while.body10, label %while.end, !dbg !245

while.body10:                                     ; preds = %while.cond6
  %9 = load ptr, ptr %s.addr, align 8, !dbg !250
  %10 = load i32, ptr %i, align 4, !dbg !251
  %inc = add nsw i32 %10, 1, !dbg !251
  store i32 %inc, ptr %i, align 4, !dbg !251
  %idxprom11 = sext i32 %10 to i64, !dbg !250
  %arrayidx12 = getelementptr inbounds i8, ptr %9, i64 %idxprom11, !dbg !250
  %11 = load i8, ptr %arrayidx12, align 1, !dbg !250
  %12 = load ptr, ptr %p, align 8, !dbg !252
  %13 = load i32, ptr %j, align 4, !dbg !253
  %inc13 = add nsw i32 %13, 1, !dbg !253
  store i32 %inc13, ptr %j, align 4, !dbg !253
  %idxprom14 = sext i32 %13 to i64, !dbg !252
  %arrayidx15 = getelementptr inbounds i8, ptr %12, i64 %idxprom14, !dbg !252
  store i8 %11, ptr %arrayidx15, align 1, !dbg !254
  br label %while.cond6, !dbg !245, !llvm.loop !255

while.end:                                        ; preds = %while.cond6
  %14 = load i32, ptr %j, align 4, !dbg !258
  %cmp16 = icmp sgt i32 %14, 0, !dbg !260
  br i1 %cmp16, label %if.then18, label %if.end22, !dbg !261

if.then18:                                        ; preds = %while.end
  %15 = load ptr, ptr %p, align 8, !dbg !262
  %16 = load i32, ptr %j, align 4, !dbg !264
  %idxprom19 = sext i32 %16 to i64, !dbg !262
  %arrayidx20 = getelementptr inbounds i8, ptr %15, i64 %idxprom19, !dbg !262
  store i8 0, ptr %arrayidx20, align 1, !dbg !265
  %17 = load ptr, ptr %p, align 8, !dbg !266
  %call21 = call i32 @atoi(ptr noundef %17) #8, !dbg !267
  %18 = load i32, ptr %r, align 4, !dbg !268
  %add = add nsw i32 %18, %call21, !dbg !268
  store i32 %add, ptr %r, align 4, !dbg !268
  br label %if.end22, !dbg !269

if.end22:                                         ; preds = %if.then18, %while.end
  %19 = load i32, ptr %i, align 4, !dbg !270
  %inc23 = add nsw i32 %19, 1, !dbg !270
  store i32 %inc23, ptr %i, align 4, !dbg !270
  br label %while.cond, !dbg !239, !llvm.loop !271

while.end24:                                      ; preds = %while.cond
  %20 = load i32, ptr %r, align 4, !dbg !273
  %cmp25 = icmp sge i32 %20, 0, !dbg !275
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !276

if.then27:                                        ; preds = %while.end24
  %21 = load ptr, ptr %p, align 8, !dbg !277
  call void @free(ptr noundef %21) #7, !dbg !278
  br label %if.end28, !dbg !278

if.end28:                                         ; preds = %if.then27, %while.end24
  %22 = load i32, ptr %r, align 4, !dbg !279
  ret i32 %22, !dbg !280
}

declare i64 @strlen(ptr noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare i32 @atoi(ptr noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !281 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  %i = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !285, metadata !DIExpression()), !dbg !286
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !287, metadata !DIExpression()), !dbg !288
  call void @llvm.dbg.declare(metadata ptr %i, metadata !289, metadata !DIExpression()), !dbg !290
  store i32 1, ptr %i, align 4, !dbg !291
  br label %for.cond, !dbg !293

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !294
  %1 = load i32, ptr %argc.addr, align 4, !dbg !296
  %cmp = icmp slt i32 %0, %1, !dbg !297
  br i1 %cmp, label %for.body, label %for.end, !dbg !298

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %argv.addr, align 8, !dbg !299
  %3 = load i32, ptr %i, align 4, !dbg !300
  %idxprom = sext i32 %3 to i64, !dbg !299
  %arrayidx = getelementptr inbounds ptr, ptr %2, i64 %idxprom, !dbg !299
  %4 = load ptr, ptr %arrayidx, align 8, !dbg !299
  %call = call i32 @sum(ptr noundef %4), !dbg !301
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i32 noundef %call), !dbg !302
  br label %for.inc, !dbg !302

for.inc:                                          ; preds = %for.body
  %5 = load i32, ptr %i, align 4, !dbg !303
  %inc = add nsw i32 %5, 1, !dbg !303
  store i32 %inc, ptr %i, align 4, !dbg !303
  br label %for.cond, !dbg !304, !llvm.loop !305

for.end:                                          ; preds = %for.cond
  %6 = load i32, ptr %retval, align 4, !dbg !307
  ret i32 %6, !dbg !307
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { nounwind willreturn memory(read) }

!llvm.dbg.cu = !{!20}
!llvm.module.flags = !{!26, !27, !28, !29, !30, !31, !32}
!llvm.ident = !{!33}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 38, type: !9, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/mem_leak/sp9.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "8727429691df0555bee68885f01b3169")
!20 = distinct !DICompileUnit(language: DW_LANG_C11, file: !21, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !22, globals: !25, splitDebugInlining: false, nameTableKind: None)
!21 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/sp9.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "8727429691df0555bee68885f01b3169")
!22 = !{!23, !24}
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!25 = !{!0, !7, !12, !17}
!26 = !{i32 7, !"Dwarf Version", i32 5}
!27 = !{i32 2, !"Debug Info Version", i32 3}
!28 = !{i32 1, !"wchar_size", i32 4}
!29 = !{i32 8, !"PIC Level", i32 2}
!30 = !{i32 7, !"PIE Level", i32 2}
!31 = !{i32 7, !"uwtable", i32 2}
!32 = !{i32 7, !"frame-pointer", i32 2}
!33 = !{!"clang version 16.0.0"}
!34 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !35, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!35 = !DISubroutineType(types: !36)
!36 = !{null, !23, !23}
!37 = !{}
!38 = !DILocalVariable(name: "p", arg: 1, scope: !34, file: !2, line: 4, type: !23)
!39 = !DILocation(line: 4, column: 22, scope: !34)
!40 = !DILocalVariable(name: "q", arg: 2, scope: !34, file: !2, line: 4, type: !23)
!41 = !DILocation(line: 4, column: 31, scope: !34)
!42 = !DILocation(line: 5, column: 3, scope: !34)
!43 = !DILocation(line: 6, column: 1, scope: !34)
!44 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !35, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!45 = !DILocalVariable(name: "p", arg: 1, scope: !44, file: !2, line: 8, type: !23)
!46 = !DILocation(line: 8, column: 25, scope: !44)
!47 = !DILocalVariable(name: "q", arg: 2, scope: !44, file: !2, line: 8, type: !23)
!48 = !DILocation(line: 8, column: 34, scope: !44)
!49 = !DILocation(line: 9, column: 3, scope: !44)
!50 = !DILocation(line: 10, column: 1, scope: !44)
!51 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !35, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!52 = !DILocalVariable(name: "p", arg: 1, scope: !51, file: !2, line: 12, type: !23)
!53 = !DILocation(line: 12, column: 21, scope: !51)
!54 = !DILocalVariable(name: "q", arg: 2, scope: !51, file: !2, line: 12, type: !23)
!55 = !DILocation(line: 12, column: 30, scope: !51)
!56 = !DILocation(line: 13, column: 3, scope: !51)
!57 = !DILocation(line: 14, column: 1, scope: !51)
!58 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !35, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!59 = !DILocalVariable(name: "p", arg: 1, scope: !58, file: !2, line: 16, type: !23)
!60 = !DILocation(line: 16, column: 20, scope: !58)
!61 = !DILocalVariable(name: "q", arg: 2, scope: !58, file: !2, line: 16, type: !23)
!62 = !DILocation(line: 16, column: 29, scope: !58)
!63 = !DILocation(line: 17, column: 3, scope: !58)
!64 = !DILocation(line: 18, column: 1, scope: !58)
!65 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !35, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!66 = !DILocalVariable(name: "p", arg: 1, scope: !65, file: !2, line: 20, type: !23)
!67 = !DILocation(line: 20, column: 34, scope: !65)
!68 = !DILocalVariable(name: "q", arg: 2, scope: !65, file: !2, line: 20, type: !23)
!69 = !DILocation(line: 20, column: 43, scope: !65)
!70 = !DILocation(line: 21, column: 3, scope: !65)
!71 = !DILocation(line: 22, column: 1, scope: !65)
!72 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !35, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!73 = !DILocalVariable(name: "p", arg: 1, scope: !72, file: !2, line: 24, type: !23)
!74 = !DILocation(line: 24, column: 33, scope: !72)
!75 = !DILocalVariable(name: "q", arg: 2, scope: !72, file: !2, line: 24, type: !23)
!76 = !DILocation(line: 24, column: 42, scope: !72)
!77 = !DILocation(line: 25, column: 3, scope: !72)
!78 = !DILocation(line: 26, column: 1, scope: !72)
!79 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !80, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!80 = !DISubroutineType(types: !81)
!81 = !{!23, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DILocalVariable(name: "n", arg: 1, scope: !79, file: !2, line: 29, type: !82)
!84 = !DILocation(line: 29, column: 22, scope: !79)
!85 = !DILocation(line: 30, column: 17, scope: !79)
!86 = !DILocation(line: 30, column: 10, scope: !79)
!87 = !DILocation(line: 30, column: 3, scope: !79)
!88 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !80, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!89 = !DILocalVariable(name: "n", arg: 1, scope: !88, file: !2, line: 33, type: !82)
!90 = !DILocation(line: 33, column: 28, scope: !88)
!91 = !DILocation(line: 34, column: 19, scope: !88)
!92 = !DILocation(line: 34, column: 12, scope: !88)
!93 = !DILocation(line: 34, column: 5, scope: !88)
!94 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !80, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!95 = !DILocalVariable(name: "n", arg: 1, scope: !94, file: !2, line: 37, type: !82)
!96 = !DILocation(line: 37, column: 21, scope: !94)
!97 = !DILocation(line: 38, column: 17, scope: !94)
!98 = !DILocation(line: 38, column: 10, scope: !94)
!99 = !DILocation(line: 38, column: 3, scope: !94)
!100 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !80, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!101 = !DILocalVariable(name: "n", arg: 1, scope: !100, file: !2, line: 41, type: !82)
!102 = !DILocation(line: 41, column: 21, scope: !100)
!103 = !DILocation(line: 42, column: 17, scope: !100)
!104 = !DILocation(line: 42, column: 10, scope: !100)
!105 = !DILocation(line: 42, column: 3, scope: !100)
!106 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !80, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!107 = !DILocalVariable(name: "n", arg: 1, scope: !106, file: !2, line: 45, type: !82)
!108 = !DILocation(line: 45, column: 21, scope: !106)
!109 = !DILocation(line: 46, column: 17, scope: !106)
!110 = !DILocation(line: 46, column: 10, scope: !106)
!111 = !DILocation(line: 46, column: 3, scope: !106)
!112 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !80, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!113 = !DILocalVariable(name: "n", arg: 1, scope: !112, file: !2, line: 49, type: !82)
!114 = !DILocation(line: 49, column: 21, scope: !112)
!115 = !DILocation(line: 50, column: 17, scope: !112)
!116 = !DILocation(line: 50, column: 10, scope: !112)
!117 = !DILocation(line: 50, column: 3, scope: !112)
!118 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !80, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!119 = !DILocalVariable(name: "n", arg: 1, scope: !118, file: !2, line: 53, type: !82)
!120 = !DILocation(line: 53, column: 21, scope: !118)
!121 = !DILocation(line: 54, column: 17, scope: !118)
!122 = !DILocation(line: 54, column: 10, scope: !118)
!123 = !DILocation(line: 54, column: 3, scope: !118)
!124 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !80, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!125 = !DILocalVariable(name: "n", arg: 1, scope: !124, file: !2, line: 57, type: !82)
!126 = !DILocation(line: 57, column: 18, scope: !124)
!127 = !DILocation(line: 58, column: 17, scope: !124)
!128 = !DILocation(line: 58, column: 10, scope: !124)
!129 = !DILocation(line: 58, column: 3, scope: !124)
!130 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !131, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!131 = !DISubroutineType(types: !132)
!132 = !{null, !82, !82}
!133 = !DILocalVariable(name: "id", arg: 1, scope: !130, file: !2, line: 67, type: !82)
!134 = !DILocation(line: 67, column: 20, scope: !130)
!135 = !DILocalVariable(name: "flags", arg: 2, scope: !130, file: !2, line: 67, type: !82)
!136 = !DILocation(line: 67, column: 28, scope: !130)
!137 = !DILocation(line: 68, column: 3, scope: !130)
!138 = !DILocation(line: 69, column: 1, scope: !130)
!139 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !140, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !82, !24}
!142 = !DILocalVariable(name: "thdid", arg: 1, scope: !139, file: !2, line: 79, type: !82)
!143 = !DILocation(line: 79, column: 21, scope: !139)
!144 = !DILocalVariable(name: "cxt", arg: 2, scope: !139, file: !2, line: 79, type: !24)
!145 = !DILocation(line: 79, column: 34, scope: !139)
!146 = !DILocation(line: 81, column: 1, scope: !139)
!147 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !140, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!148 = !DILocalVariable(name: "thdid", arg: 1, scope: !147, file: !2, line: 82, type: !82)
!149 = !DILocation(line: 82, column: 21, scope: !147)
!150 = !DILocalVariable(name: "cxt", arg: 2, scope: !147, file: !2, line: 82, type: !24)
!151 = !DILocation(line: 82, column: 33, scope: !147)
!152 = !DILocation(line: 84, column: 1, scope: !147)
!153 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !154, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!154 = !DISubroutineType(types: !155)
!155 = !{null, !82, !24, !24}
!156 = !DILocalVariable(name: "thdid", arg: 1, scope: !153, file: !2, line: 85, type: !82)
!157 = !DILocation(line: 85, column: 26, scope: !153)
!158 = !DILocalVariable(name: "cxt", arg: 2, scope: !153, file: !2, line: 85, type: !24)
!159 = !DILocation(line: 85, column: 38, scope: !153)
!160 = !DILocalVariable(name: "lev", arg: 3, scope: !153, file: !2, line: 85, type: !24)
!161 = !DILocation(line: 85, column: 49, scope: !153)
!162 = !DILocation(line: 87, column: 1, scope: !153)
!163 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !164, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!164 = !DISubroutineType(types: !165)
!165 = !{null, !24}
!166 = !DILocalVariable(name: "lockname", arg: 1, scope: !163, file: !2, line: 89, type: !24)
!167 = !DILocation(line: 89, column: 17, scope: !163)
!168 = !DILocation(line: 91, column: 1, scope: !163)
!169 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !164, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!170 = !DILocalVariable(name: "str", arg: 1, scope: !169, file: !2, line: 93, type: !24)
!171 = !DILocation(line: 93, column: 18, scope: !169)
!172 = !DILocation(line: 94, column: 18, scope: !169)
!173 = !DILocation(line: 94, column: 3, scope: !169)
!174 = !DILocation(line: 95, column: 3, scope: !169)
!175 = !DILocation(line: 96, column: 3, scope: !169)
!176 = !DILocation(line: 97, column: 1, scope: !169)
!177 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !178, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!178 = !DISubroutineType(types: !179)
!179 = !{!23, !180}
!180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!181 = !DILocalVariable(name: "p", arg: 1, scope: !177, file: !2, line: 100, type: !180)
!182 = !DILocation(line: 100, column: 24, scope: !177)
!183 = !DILocation(line: 101, column: 6, scope: !177)
!184 = !DILocation(line: 101, column: 8, scope: !177)
!185 = !DILocation(line: 102, column: 1, scope: !177)
!186 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !178, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!187 = !DILocalVariable(name: "p", arg: 1, scope: !186, file: !2, line: 104, type: !180)
!188 = !DILocation(line: 104, column: 20, scope: !186)
!189 = !DILocation(line: 105, column: 6, scope: !186)
!190 = !DILocation(line: 105, column: 8, scope: !186)
!191 = !DILocation(line: 106, column: 1, scope: !186)
!192 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !178, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!193 = !DILocalVariable(name: "p", arg: 1, scope: !192, file: !2, line: 110, type: !180)
!194 = !DILocation(line: 110, column: 22, scope: !192)
!195 = !DILocation(line: 111, column: 10, scope: !192)
!196 = !DILocation(line: 111, column: 5, scope: !192)
!197 = !DILocation(line: 112, column: 1, scope: !192)
!198 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !178, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!199 = !DILocalVariable(name: "p", arg: 1, scope: !198, file: !2, line: 115, type: !180)
!200 = !DILocation(line: 115, column: 24, scope: !198)
!201 = !DILocation(line: 116, column: 10, scope: !198)
!202 = !DILocation(line: 116, column: 5, scope: !198)
!203 = !DILocation(line: 117, column: 1, scope: !198)
!204 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !205, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!205 = !DISubroutineType(types: !206)
!206 = !{null}
!207 = !DILocation(line: 135, column: 20, scope: !204)
!208 = distinct !DISubprogram(name: "sum", scope: !19, file: !19, line: 12, type: !209, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!209 = !DISubroutineType(types: !210)
!210 = !{!82, !24}
!211 = !DILocalVariable(name: "s", arg: 1, scope: !208, file: !19, line: 12, type: !24)
!212 = !DILocation(line: 12, column: 15, scope: !208)
!213 = !DILocalVariable(name: "p", scope: !208, file: !19, line: 13, type: !24)
!214 = !DILocation(line: 13, column: 8, scope: !208)
!215 = !DILocalVariable(name: "i", scope: !208, file: !19, line: 14, type: !82)
!216 = !DILocation(line: 14, column: 6, scope: !208)
!217 = !DILocalVariable(name: "j", scope: !208, file: !19, line: 14, type: !82)
!218 = !DILocation(line: 14, column: 13, scope: !208)
!219 = !DILocalVariable(name: "r", scope: !208, file: !19, line: 14, type: !82)
!220 = !DILocation(line: 14, column: 16, scope: !208)
!221 = !DILocalVariable(name: "n", scope: !208, file: !19, line: 14, type: !82)
!222 = !DILocation(line: 14, column: 19, scope: !208)
!223 = !DILocation(line: 14, column: 24, scope: !208)
!224 = !DILocation(line: 14, column: 26, scope: !208)
!225 = !DILocation(line: 14, column: 47, scope: !208)
!226 = !DILocation(line: 14, column: 40, scope: !208)
!227 = !DILocation(line: 14, column: 23, scope: !208)
!228 = !DILocation(line: 15, column: 6, scope: !229)
!229 = distinct !DILexicalBlock(scope: !208, file: !19, line: 15, column: 6)
!230 = !DILocation(line: 15, column: 8, scope: !229)
!231 = !DILocation(line: 15, column: 6, scope: !208)
!232 = !DILocation(line: 16, column: 26, scope: !233)
!233 = distinct !DILexicalBlock(scope: !229, file: !19, line: 15, column: 13)
!234 = !DILocation(line: 16, column: 16, scope: !233)
!235 = !DILocation(line: 16, column: 5, scope: !233)
!236 = !DILocation(line: 17, column: 5, scope: !233)
!237 = !DILocation(line: 18, column: 2, scope: !233)
!238 = !DILocation(line: 19, column: 5, scope: !229)
!239 = !DILocation(line: 20, column: 2, scope: !208)
!240 = !DILocation(line: 20, column: 9, scope: !208)
!241 = !DILocation(line: 20, column: 13, scope: !208)
!242 = !DILocation(line: 20, column: 11, scope: !208)
!243 = !DILocation(line: 21, column: 5, scope: !244)
!244 = distinct !DILexicalBlock(scope: !208, file: !19, line: 20, column: 16)
!245 = !DILocation(line: 22, column: 3, scope: !244)
!246 = !DILocation(line: 22, column: 11, scope: !244)
!247 = !DILocation(line: 22, column: 13, scope: !244)
!248 = !DILocation(line: 22, column: 10, scope: !244)
!249 = !DILocation(line: 22, column: 17, scope: !244)
!250 = !DILocation(line: 23, column: 13, scope: !244)
!251 = !DILocation(line: 23, column: 16, scope: !244)
!252 = !DILocation(line: 23, column: 4, scope: !244)
!253 = !DILocation(line: 23, column: 7, scope: !244)
!254 = !DILocation(line: 23, column: 11, scope: !244)
!255 = distinct !{!255, !245, !256, !257}
!256 = !DILocation(line: 23, column: 18, scope: !244)
!257 = !{!"llvm.loop.mustprogress"}
!258 = !DILocation(line: 24, column: 7, scope: !259)
!259 = distinct !DILexicalBlock(scope: !244, file: !19, line: 24, column: 7)
!260 = !DILocation(line: 24, column: 9, scope: !259)
!261 = !DILocation(line: 24, column: 7, scope: !244)
!262 = !DILocation(line: 25, column: 4, scope: !263)
!263 = distinct !DILexicalBlock(scope: !259, file: !19, line: 24, column: 14)
!264 = !DILocation(line: 25, column: 6, scope: !263)
!265 = !DILocation(line: 25, column: 9, scope: !263)
!266 = !DILocation(line: 26, column: 14, scope: !263)
!267 = !DILocation(line: 26, column: 9, scope: !263)
!268 = !DILocation(line: 26, column: 6, scope: !263)
!269 = !DILocation(line: 27, column: 3, scope: !263)
!270 = !DILocation(line: 28, column: 4, scope: !244)
!271 = distinct !{!271, !239, !272, !257}
!272 = !DILocation(line: 29, column: 2, scope: !208)
!273 = !DILocation(line: 30, column: 6, scope: !274)
!274 = distinct !DILexicalBlock(scope: !208, file: !19, line: 30, column: 6)
!275 = !DILocation(line: 30, column: 8, scope: !274)
!276 = !DILocation(line: 30, column: 6, scope: !208)
!277 = !DILocation(line: 31, column: 8, scope: !274)
!278 = !DILocation(line: 31, column: 3, scope: !274)
!279 = !DILocation(line: 32, column: 9, scope: !208)
!280 = !DILocation(line: 32, column: 2, scope: !208)
!281 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 35, type: !282, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !20, retainedNodes: !37)
!282 = !DISubroutineType(types: !283)
!283 = !{!82, !82, !284}
!284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!285 = !DILocalVariable(name: "argc", arg: 1, scope: !281, file: !19, line: 35, type: !82)
!286 = !DILocation(line: 35, column: 14, scope: !281)
!287 = !DILocalVariable(name: "argv", arg: 2, scope: !281, file: !19, line: 35, type: !284)
!288 = !DILocation(line: 35, column: 26, scope: !281)
!289 = !DILocalVariable(name: "i", scope: !281, file: !19, line: 36, type: !82)
!290 = !DILocation(line: 36, column: 6, scope: !281)
!291 = !DILocation(line: 37, column: 9, scope: !292)
!292 = distinct !DILexicalBlock(scope: !281, file: !19, line: 37, column: 2)
!293 = !DILocation(line: 37, column: 7, scope: !292)
!294 = !DILocation(line: 37, column: 14, scope: !295)
!295 = distinct !DILexicalBlock(scope: !292, file: !19, line: 37, column: 2)
!296 = !DILocation(line: 37, column: 18, scope: !295)
!297 = !DILocation(line: 37, column: 16, scope: !295)
!298 = !DILocation(line: 37, column: 2, scope: !292)
!299 = !DILocation(line: 38, column: 22, scope: !295)
!300 = !DILocation(line: 38, column: 27, scope: !295)
!301 = !DILocation(line: 38, column: 18, scope: !295)
!302 = !DILocation(line: 38, column: 3, scope: !295)
!303 = !DILocation(line: 37, column: 25, scope: !295)
!304 = !DILocation(line: 37, column: 2, scope: !295)
!305 = distinct !{!305, !298, !306, !257}
!306 = !DILocation(line: 38, column: 30, scope: !292)
!307 = !DILocation(line: 39, column: 1, scope: !281)
