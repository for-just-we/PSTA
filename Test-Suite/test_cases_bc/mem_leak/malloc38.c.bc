; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/mem_leak/malloc38.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/malloc38.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Buf = type { ptr }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1, !dbg !17
@Buf = dso_local global %struct.Buf zeroinitializer, align 8, !dbg !23

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !42 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !46, metadata !DIExpression()), !dbg !47
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !48, metadata !DIExpression()), !dbg !49
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !50
  ret void, !dbg !51
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !52 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !53, metadata !DIExpression()), !dbg !54
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !57
  ret void, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !59 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !60, metadata !DIExpression()), !dbg !61
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !62, metadata !DIExpression()), !dbg !63
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !64
  ret void, !dbg !65
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !66 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !67, metadata !DIExpression()), !dbg !68
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !69, metadata !DIExpression()), !dbg !70
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !71
  ret void, !dbg !72
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !73 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !74, metadata !DIExpression()), !dbg !75
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !76, metadata !DIExpression()), !dbg !77
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !78
  ret void, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !80 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !81, metadata !DIExpression()), !dbg !82
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !85
  ret void, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !87 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !91, metadata !DIExpression()), !dbg !92
  %0 = load i32, ptr %n.addr, align 4, !dbg !93
  %conv = sext i32 %0 to i64, !dbg !93
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !94
  ret ptr %call, !dbg !95
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !96 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %0 = load i32, ptr %n.addr, align 4, !dbg !99
  %conv = sext i32 %0 to i64, !dbg !99
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !100
  ret ptr %call, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !102 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %0 = load i32, ptr %n.addr, align 4, !dbg !105
  %conv = sext i32 %0 to i64, !dbg !105
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !106
  ret ptr %call, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !108 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !109, metadata !DIExpression()), !dbg !110
  %0 = load i32, ptr %n.addr, align 4, !dbg !111
  %conv = sext i32 %0 to i64, !dbg !111
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !112
  ret ptr %call, !dbg !113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !114 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %0 = load i32, ptr %n.addr, align 4, !dbg !117
  %conv = sext i32 %0 to i64, !dbg !117
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !118
  ret ptr %call, !dbg !119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !120 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !121, metadata !DIExpression()), !dbg !122
  %0 = load i32, ptr %n.addr, align 4, !dbg !123
  %conv = sext i32 %0 to i64, !dbg !123
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !124
  ret ptr %call, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !126 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !127, metadata !DIExpression()), !dbg !128
  %0 = load i32, ptr %n.addr, align 4, !dbg !129
  %conv = sext i32 %0 to i64, !dbg !129
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !130
  ret ptr %call, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !132 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !133, metadata !DIExpression()), !dbg !134
  %0 = load i32, ptr %n.addr, align 4, !dbg !135
  %conv = sext i32 %0 to i64, !dbg !135
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !136
  ret ptr %call, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !138 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !141, metadata !DIExpression()), !dbg !142
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !143, metadata !DIExpression()), !dbg !144
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !145
  ret void, !dbg !146
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !147 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !150, metadata !DIExpression()), !dbg !151
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !152, metadata !DIExpression()), !dbg !153
  ret void, !dbg !154
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !155 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !156, metadata !DIExpression()), !dbg !157
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !158, metadata !DIExpression()), !dbg !159
  ret void, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !161 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !164, metadata !DIExpression()), !dbg !165
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !166, metadata !DIExpression()), !dbg !167
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !168, metadata !DIExpression()), !dbg !169
  ret void, !dbg !170
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !171 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !174, metadata !DIExpression()), !dbg !175
  ret void, !dbg !176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !177 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !178, metadata !DIExpression()), !dbg !179
  %0 = load ptr, ptr %str.addr, align 8, !dbg !180
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !181
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !182
  %call2 = call i32 @getchar(), !dbg !183
  ret void, !dbg !184
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !185 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !189, metadata !DIExpression()), !dbg !190
  %0 = load ptr, ptr %p.addr, align 8, !dbg !191
  store i32 0, ptr %0, align 4, !dbg !192
  %1 = load ptr, ptr %retval, align 8, !dbg !193
  ret ptr %1, !dbg !193
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !194 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !195, metadata !DIExpression()), !dbg !196
  %0 = load ptr, ptr %p.addr, align 8, !dbg !197
  store i32 0, ptr %0, align 4, !dbg !198
  %1 = load ptr, ptr %retval, align 8, !dbg !199
  ret ptr %1, !dbg !199
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !200 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !201, metadata !DIExpression()), !dbg !202
  %0 = load ptr, ptr %p.addr, align 8, !dbg !203
  call void @free(ptr noundef %0) #6, !dbg !204
  %1 = load ptr, ptr %retval, align 8, !dbg !205
  ret ptr %1, !dbg !205
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !206 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !207, metadata !DIExpression()), !dbg !208
  %0 = load ptr, ptr %p.addr, align 8, !dbg !209
  call void @free(ptr noundef %0) #6, !dbg !210
  %1 = load ptr, ptr %retval, align 8, !dbg !211
  ret ptr %1, !dbg !211
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !212 {
entry:
  ret void, !dbg !215
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @readBuf() #0 !dbg !216 {
entry:
  %buf = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !220, metadata !DIExpression()), !dbg !221
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !222
  store ptr %call, ptr %buf, align 8, !dbg !221
  %call1 = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !223
  %0 = load ptr, ptr %buf, align 8, !dbg !224
  %name = getelementptr inbounds %struct.Buf, ptr %0, i32 0, i32 0, !dbg !225
  store ptr %call1, ptr %name, align 8, !dbg !226
  %1 = load ptr, ptr %buf, align 8, !dbg !227
  ret ptr %1, !dbg !228
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @freeBuf(ptr noundef %buf) #0 !dbg !229 {
entry:
  %buf.addr = alloca ptr, align 8
  store ptr %buf, ptr %buf.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %buf.addr, metadata !232, metadata !DIExpression()), !dbg !233
  %0 = load ptr, ptr %buf.addr, align 8, !dbg !234
  %name = getelementptr inbounds %struct.Buf, ptr %0, i32 0, i32 0, !dbg !235
  %1 = load ptr, ptr %name, align 8, !dbg !235
  call void @free(ptr noundef %1) #6, !dbg !236
  %2 = load ptr, ptr %buf.addr, align 8, !dbg !237
  call void @free(ptr noundef %2) #6, !dbg !238
  ret void, !dbg !239
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @SerialReadBuf() #0 !dbg !240 {
entry:
  %n = alloca i32, align 4
  %buf = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %n, metadata !241, metadata !DIExpression()), !dbg !242
  br label %while.cond, !dbg !243

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, ptr %n, align 4, !dbg !244
  %tobool = icmp ne i32 %0, 0, !dbg !243
  br i1 %tobool, label %while.body, label %while.end, !dbg !243

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !245, metadata !DIExpression()), !dbg !247
  %call = call ptr @readBuf(), !dbg !248
  store ptr %call, ptr %buf, align 8, !dbg !247
  %1 = load i32, ptr %n, align 4, !dbg !249
  %2 = load ptr, ptr %buf, align 8, !dbg !250
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i32 noundef %1, ptr noundef %2), !dbg !251
  %3 = load i32, ptr %n, align 4, !dbg !252
  %tobool2 = icmp ne i32 %3, 0, !dbg !252
  br i1 %tobool2, label %if.then, label %if.end, !dbg !254

if.then:                                          ; preds = %while.body
  br label %if.end, !dbg !255

if.end:                                           ; preds = %if.then, %while.body
  %4 = load ptr, ptr %buf, align 8, !dbg !257
  call void @freeBuf(ptr noundef %4), !dbg !258
  br label %while.cond, !dbg !243, !llvm.loop !259

while.end:                                        ; preds = %while.cond
  ret void, !dbg !262
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !263 {
entry:
  call void @SerialReadBuf(), !dbg !266
  ret i32 0, !dbg !267
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!25}
!llvm.module.flags = !{!34, !35, !36, !37, !38, !39, !40}
!llvm.ident = !{!41}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 36, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/mem_leak/malloc38.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "755634e5dea388e61422242cac6b51c7")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 40, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 5)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "Buf", scope: !25, file: !19, line: 14, type: !30, isLocal: false, isDefinition: true)
!25 = distinct !DICompileUnit(language: DW_LANG_C11, file: !26, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !27, globals: !29, splitDebugInlining: false, nameTableKind: None)
!26 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/malloc38.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "755634e5dea388e61422242cac6b51c7")
!27 = !{!28}
!28 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!29 = !{!0, !7, !12, !17, !23}
!30 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Buf", file: !19, line: 10, size: 64, elements: !31)
!31 = !{!32}
!32 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !30, file: !19, line: 12, baseType: !33, size: 64)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!34 = !{i32 7, !"Dwarf Version", i32 5}
!35 = !{i32 2, !"Debug Info Version", i32 3}
!36 = !{i32 1, !"wchar_size", i32 4}
!37 = !{i32 8, !"PIC Level", i32 2}
!38 = !{i32 7, !"PIE Level", i32 2}
!39 = !{i32 7, !"uwtable", i32 2}
!40 = !{i32 7, !"frame-pointer", i32 2}
!41 = !{!"clang version 16.0.0"}
!42 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !43, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!43 = !DISubroutineType(types: !44)
!44 = !{null, !28, !28}
!45 = !{}
!46 = !DILocalVariable(name: "p", arg: 1, scope: !42, file: !2, line: 4, type: !28)
!47 = !DILocation(line: 4, column: 22, scope: !42)
!48 = !DILocalVariable(name: "q", arg: 2, scope: !42, file: !2, line: 4, type: !28)
!49 = !DILocation(line: 4, column: 31, scope: !42)
!50 = !DILocation(line: 5, column: 3, scope: !42)
!51 = !DILocation(line: 6, column: 1, scope: !42)
!52 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !43, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!53 = !DILocalVariable(name: "p", arg: 1, scope: !52, file: !2, line: 8, type: !28)
!54 = !DILocation(line: 8, column: 25, scope: !52)
!55 = !DILocalVariable(name: "q", arg: 2, scope: !52, file: !2, line: 8, type: !28)
!56 = !DILocation(line: 8, column: 34, scope: !52)
!57 = !DILocation(line: 9, column: 3, scope: !52)
!58 = !DILocation(line: 10, column: 1, scope: !52)
!59 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !43, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!60 = !DILocalVariable(name: "p", arg: 1, scope: !59, file: !2, line: 12, type: !28)
!61 = !DILocation(line: 12, column: 21, scope: !59)
!62 = !DILocalVariable(name: "q", arg: 2, scope: !59, file: !2, line: 12, type: !28)
!63 = !DILocation(line: 12, column: 30, scope: !59)
!64 = !DILocation(line: 13, column: 3, scope: !59)
!65 = !DILocation(line: 14, column: 1, scope: !59)
!66 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !43, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!67 = !DILocalVariable(name: "p", arg: 1, scope: !66, file: !2, line: 16, type: !28)
!68 = !DILocation(line: 16, column: 20, scope: !66)
!69 = !DILocalVariable(name: "q", arg: 2, scope: !66, file: !2, line: 16, type: !28)
!70 = !DILocation(line: 16, column: 29, scope: !66)
!71 = !DILocation(line: 17, column: 3, scope: !66)
!72 = !DILocation(line: 18, column: 1, scope: !66)
!73 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !43, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!74 = !DILocalVariable(name: "p", arg: 1, scope: !73, file: !2, line: 20, type: !28)
!75 = !DILocation(line: 20, column: 34, scope: !73)
!76 = !DILocalVariable(name: "q", arg: 2, scope: !73, file: !2, line: 20, type: !28)
!77 = !DILocation(line: 20, column: 43, scope: !73)
!78 = !DILocation(line: 21, column: 3, scope: !73)
!79 = !DILocation(line: 22, column: 1, scope: !73)
!80 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !43, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!81 = !DILocalVariable(name: "p", arg: 1, scope: !80, file: !2, line: 24, type: !28)
!82 = !DILocation(line: 24, column: 33, scope: !80)
!83 = !DILocalVariable(name: "q", arg: 2, scope: !80, file: !2, line: 24, type: !28)
!84 = !DILocation(line: 24, column: 42, scope: !80)
!85 = !DILocation(line: 25, column: 3, scope: !80)
!86 = !DILocation(line: 26, column: 1, scope: !80)
!87 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !88, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!88 = !DISubroutineType(types: !89)
!89 = !{!28, !90}
!90 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!91 = !DILocalVariable(name: "n", arg: 1, scope: !87, file: !2, line: 29, type: !90)
!92 = !DILocation(line: 29, column: 22, scope: !87)
!93 = !DILocation(line: 30, column: 17, scope: !87)
!94 = !DILocation(line: 30, column: 10, scope: !87)
!95 = !DILocation(line: 30, column: 3, scope: !87)
!96 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !88, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!97 = !DILocalVariable(name: "n", arg: 1, scope: !96, file: !2, line: 33, type: !90)
!98 = !DILocation(line: 33, column: 28, scope: !96)
!99 = !DILocation(line: 34, column: 19, scope: !96)
!100 = !DILocation(line: 34, column: 12, scope: !96)
!101 = !DILocation(line: 34, column: 5, scope: !96)
!102 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !88, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!103 = !DILocalVariable(name: "n", arg: 1, scope: !102, file: !2, line: 37, type: !90)
!104 = !DILocation(line: 37, column: 21, scope: !102)
!105 = !DILocation(line: 38, column: 17, scope: !102)
!106 = !DILocation(line: 38, column: 10, scope: !102)
!107 = !DILocation(line: 38, column: 3, scope: !102)
!108 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !88, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!109 = !DILocalVariable(name: "n", arg: 1, scope: !108, file: !2, line: 41, type: !90)
!110 = !DILocation(line: 41, column: 21, scope: !108)
!111 = !DILocation(line: 42, column: 17, scope: !108)
!112 = !DILocation(line: 42, column: 10, scope: !108)
!113 = !DILocation(line: 42, column: 3, scope: !108)
!114 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !88, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!115 = !DILocalVariable(name: "n", arg: 1, scope: !114, file: !2, line: 45, type: !90)
!116 = !DILocation(line: 45, column: 21, scope: !114)
!117 = !DILocation(line: 46, column: 17, scope: !114)
!118 = !DILocation(line: 46, column: 10, scope: !114)
!119 = !DILocation(line: 46, column: 3, scope: !114)
!120 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !88, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!121 = !DILocalVariable(name: "n", arg: 1, scope: !120, file: !2, line: 49, type: !90)
!122 = !DILocation(line: 49, column: 21, scope: !120)
!123 = !DILocation(line: 50, column: 17, scope: !120)
!124 = !DILocation(line: 50, column: 10, scope: !120)
!125 = !DILocation(line: 50, column: 3, scope: !120)
!126 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !88, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!127 = !DILocalVariable(name: "n", arg: 1, scope: !126, file: !2, line: 53, type: !90)
!128 = !DILocation(line: 53, column: 21, scope: !126)
!129 = !DILocation(line: 54, column: 17, scope: !126)
!130 = !DILocation(line: 54, column: 10, scope: !126)
!131 = !DILocation(line: 54, column: 3, scope: !126)
!132 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !88, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!133 = !DILocalVariable(name: "n", arg: 1, scope: !132, file: !2, line: 57, type: !90)
!134 = !DILocation(line: 57, column: 18, scope: !132)
!135 = !DILocation(line: 58, column: 17, scope: !132)
!136 = !DILocation(line: 58, column: 10, scope: !132)
!137 = !DILocation(line: 58, column: 3, scope: !132)
!138 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !139, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!139 = !DISubroutineType(types: !140)
!140 = !{null, !90, !90}
!141 = !DILocalVariable(name: "id", arg: 1, scope: !138, file: !2, line: 67, type: !90)
!142 = !DILocation(line: 67, column: 20, scope: !138)
!143 = !DILocalVariable(name: "flags", arg: 2, scope: !138, file: !2, line: 67, type: !90)
!144 = !DILocation(line: 67, column: 28, scope: !138)
!145 = !DILocation(line: 68, column: 3, scope: !138)
!146 = !DILocation(line: 69, column: 1, scope: !138)
!147 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !148, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!148 = !DISubroutineType(types: !149)
!149 = !{null, !90, !33}
!150 = !DILocalVariable(name: "thdid", arg: 1, scope: !147, file: !2, line: 79, type: !90)
!151 = !DILocation(line: 79, column: 21, scope: !147)
!152 = !DILocalVariable(name: "cxt", arg: 2, scope: !147, file: !2, line: 79, type: !33)
!153 = !DILocation(line: 79, column: 34, scope: !147)
!154 = !DILocation(line: 81, column: 1, scope: !147)
!155 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !148, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!156 = !DILocalVariable(name: "thdid", arg: 1, scope: !155, file: !2, line: 82, type: !90)
!157 = !DILocation(line: 82, column: 21, scope: !155)
!158 = !DILocalVariable(name: "cxt", arg: 2, scope: !155, file: !2, line: 82, type: !33)
!159 = !DILocation(line: 82, column: 33, scope: !155)
!160 = !DILocation(line: 84, column: 1, scope: !155)
!161 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !162, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!162 = !DISubroutineType(types: !163)
!163 = !{null, !90, !33, !33}
!164 = !DILocalVariable(name: "thdid", arg: 1, scope: !161, file: !2, line: 85, type: !90)
!165 = !DILocation(line: 85, column: 26, scope: !161)
!166 = !DILocalVariable(name: "cxt", arg: 2, scope: !161, file: !2, line: 85, type: !33)
!167 = !DILocation(line: 85, column: 38, scope: !161)
!168 = !DILocalVariable(name: "lev", arg: 3, scope: !161, file: !2, line: 85, type: !33)
!169 = !DILocation(line: 85, column: 49, scope: !161)
!170 = !DILocation(line: 87, column: 1, scope: !161)
!171 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !172, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!172 = !DISubroutineType(types: !173)
!173 = !{null, !33}
!174 = !DILocalVariable(name: "lockname", arg: 1, scope: !171, file: !2, line: 89, type: !33)
!175 = !DILocation(line: 89, column: 17, scope: !171)
!176 = !DILocation(line: 91, column: 1, scope: !171)
!177 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !172, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!178 = !DILocalVariable(name: "str", arg: 1, scope: !177, file: !2, line: 93, type: !33)
!179 = !DILocation(line: 93, column: 18, scope: !177)
!180 = !DILocation(line: 94, column: 18, scope: !177)
!181 = !DILocation(line: 94, column: 3, scope: !177)
!182 = !DILocation(line: 95, column: 3, scope: !177)
!183 = !DILocation(line: 96, column: 3, scope: !177)
!184 = !DILocation(line: 97, column: 1, scope: !177)
!185 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !186, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!186 = !DISubroutineType(types: !187)
!187 = !{!28, !188}
!188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !90, size: 64)
!189 = !DILocalVariable(name: "p", arg: 1, scope: !185, file: !2, line: 100, type: !188)
!190 = !DILocation(line: 100, column: 24, scope: !185)
!191 = !DILocation(line: 101, column: 6, scope: !185)
!192 = !DILocation(line: 101, column: 8, scope: !185)
!193 = !DILocation(line: 102, column: 1, scope: !185)
!194 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !186, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!195 = !DILocalVariable(name: "p", arg: 1, scope: !194, file: !2, line: 104, type: !188)
!196 = !DILocation(line: 104, column: 20, scope: !194)
!197 = !DILocation(line: 105, column: 6, scope: !194)
!198 = !DILocation(line: 105, column: 8, scope: !194)
!199 = !DILocation(line: 106, column: 1, scope: !194)
!200 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !186, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!201 = !DILocalVariable(name: "p", arg: 1, scope: !200, file: !2, line: 110, type: !188)
!202 = !DILocation(line: 110, column: 22, scope: !200)
!203 = !DILocation(line: 111, column: 10, scope: !200)
!204 = !DILocation(line: 111, column: 5, scope: !200)
!205 = !DILocation(line: 112, column: 1, scope: !200)
!206 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !186, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!207 = !DILocalVariable(name: "p", arg: 1, scope: !206, file: !2, line: 115, type: !188)
!208 = !DILocation(line: 115, column: 24, scope: !206)
!209 = !DILocation(line: 116, column: 10, scope: !206)
!210 = !DILocation(line: 116, column: 5, scope: !206)
!211 = !DILocation(line: 117, column: 1, scope: !206)
!212 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !213, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!213 = !DISubroutineType(types: !214)
!214 = !{null}
!215 = !DILocation(line: 135, column: 20, scope: !212)
!216 = distinct !DISubprogram(name: "readBuf", scope: !19, file: !19, line: 16, type: !217, scopeLine: 16, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!217 = !DISubroutineType(types: !218)
!218 = !{!219}
!219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!220 = !DILocalVariable(name: "buf", scope: !216, file: !19, line: 18, type: !219)
!221 = !DILocation(line: 18, column: 14, scope: !216)
!222 = !DILocation(line: 18, column: 20, scope: !216)
!223 = !DILocation(line: 19, column: 14, scope: !216)
!224 = !DILocation(line: 19, column: 2, scope: !216)
!225 = !DILocation(line: 19, column: 7, scope: !216)
!226 = !DILocation(line: 19, column: 12, scope: !216)
!227 = !DILocation(line: 21, column: 9, scope: !216)
!228 = !DILocation(line: 21, column: 2, scope: !216)
!229 = distinct !DISubprogram(name: "freeBuf", scope: !19, file: !19, line: 25, type: !230, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!230 = !DISubroutineType(types: !231)
!231 = !{null, !219}
!232 = !DILocalVariable(name: "buf", arg: 1, scope: !229, file: !19, line: 25, type: !219)
!233 = !DILocation(line: 25, column: 26, scope: !229)
!234 = !DILocation(line: 26, column: 7, scope: !229)
!235 = !DILocation(line: 26, column: 12, scope: !229)
!236 = !DILocation(line: 26, column: 2, scope: !229)
!237 = !DILocation(line: 27, column: 7, scope: !229)
!238 = !DILocation(line: 27, column: 2, scope: !229)
!239 = !DILocation(line: 29, column: 1, scope: !229)
!240 = distinct !DISubprogram(name: "SerialReadBuf", scope: !19, file: !19, line: 30, type: !213, scopeLine: 30, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!241 = !DILocalVariable(name: "n", scope: !240, file: !19, line: 32, type: !90)
!242 = !DILocation(line: 32, column: 6, scope: !240)
!243 = !DILocation(line: 33, column: 2, scope: !240)
!244 = !DILocation(line: 33, column: 8, scope: !240)
!245 = !DILocalVariable(name: "buf", scope: !246, file: !19, line: 35, type: !219)
!246 = distinct !DILexicalBlock(scope: !240, file: !19, line: 33, column: 10)
!247 = !DILocation(line: 35, column: 15, scope: !246)
!248 = !DILocation(line: 35, column: 21, scope: !246)
!249 = !DILocation(line: 36, column: 18, scope: !246)
!250 = !DILocation(line: 36, column: 20, scope: !246)
!251 = !DILocation(line: 36, column: 4, scope: !246)
!252 = !DILocation(line: 38, column: 6, scope: !253)
!253 = distinct !DILexicalBlock(scope: !246, file: !19, line: 38, column: 6)
!254 = !DILocation(line: 38, column: 6, scope: !246)
!255 = !DILocation(line: 40, column: 3, scope: !256)
!256 = distinct !DILexicalBlock(scope: !253, file: !19, line: 38, column: 8)
!257 = !DILocation(line: 41, column: 11, scope: !246)
!258 = !DILocation(line: 41, column: 3, scope: !246)
!259 = distinct !{!259, !243, !260, !261}
!260 = !DILocation(line: 44, column: 2, scope: !240)
!261 = !{!"llvm.loop.mustprogress"}
!262 = !DILocation(line: 47, column: 1, scope: !240)
!263 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 50, type: !264, scopeLine: 50, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !45)
!264 = !DISubroutineType(types: !265)
!265 = !{!90}
!266 = !DILocation(line: 51, column: 1, scope: !263)
!267 = !DILocation(line: 53, column: 1, scope: !263)
