; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/mem_leak/malloc16.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/malloc16.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.FOO = type { ptr, ptr, ptr }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !32 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !36, metadata !DIExpression()), !dbg !37
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !38, metadata !DIExpression()), !dbg !39
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !40
  ret void, !dbg !41
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !42 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !43, metadata !DIExpression()), !dbg !44
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !47
  ret void, !dbg !48
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !49 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !50, metadata !DIExpression()), !dbg !51
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !54
  ret void, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !56 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !57, metadata !DIExpression()), !dbg !58
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !61
  ret void, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !63 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !64, metadata !DIExpression()), !dbg !65
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !66, metadata !DIExpression()), !dbg !67
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !68
  ret void, !dbg !69
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !70 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !71, metadata !DIExpression()), !dbg !72
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !75
  ret void, !dbg !76
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !77 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %0 = load i32, ptr %n.addr, align 4, !dbg !82
  %conv = sext i32 %0 to i64, !dbg !82
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !83
  ret ptr %call, !dbg !84
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !85 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %0 = load i32, ptr %n.addr, align 4, !dbg !88
  %conv = sext i32 %0 to i64, !dbg !88
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !89
  ret ptr %call, !dbg !90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !91 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %0 = load i32, ptr %n.addr, align 4, !dbg !94
  %conv = sext i32 %0 to i64, !dbg !94
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !95
  ret ptr %call, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !97 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !98, metadata !DIExpression()), !dbg !99
  %0 = load i32, ptr %n.addr, align 4, !dbg !100
  %conv = sext i32 %0 to i64, !dbg !100
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !101
  ret ptr %call, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !103 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !104, metadata !DIExpression()), !dbg !105
  %0 = load i32, ptr %n.addr, align 4, !dbg !106
  %conv = sext i32 %0 to i64, !dbg !106
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !107
  ret ptr %call, !dbg !108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !109 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !110, metadata !DIExpression()), !dbg !111
  %0 = load i32, ptr %n.addr, align 4, !dbg !112
  %conv = sext i32 %0 to i64, !dbg !112
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !113
  ret ptr %call, !dbg !114
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !115 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !116, metadata !DIExpression()), !dbg !117
  %0 = load i32, ptr %n.addr, align 4, !dbg !118
  %conv = sext i32 %0 to i64, !dbg !118
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !119
  ret ptr %call, !dbg !120
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !121 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !122, metadata !DIExpression()), !dbg !123
  %0 = load i32, ptr %n.addr, align 4, !dbg !124
  %conv = sext i32 %0 to i64, !dbg !124
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !125
  ret ptr %call, !dbg !126
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !127 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !130, metadata !DIExpression()), !dbg !131
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !132, metadata !DIExpression()), !dbg !133
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !134
  ret void, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !136 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !140, metadata !DIExpression()), !dbg !141
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !142, metadata !DIExpression()), !dbg !143
  ret void, !dbg !144
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !145 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !146, metadata !DIExpression()), !dbg !147
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !148, metadata !DIExpression()), !dbg !149
  ret void, !dbg !150
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !151 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !154, metadata !DIExpression()), !dbg !155
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !156, metadata !DIExpression()), !dbg !157
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !158, metadata !DIExpression()), !dbg !159
  ret void, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !161 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !164, metadata !DIExpression()), !dbg !165
  ret void, !dbg !166
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !167 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !168, metadata !DIExpression()), !dbg !169
  %0 = load ptr, ptr %str.addr, align 8, !dbg !170
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !171
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !172
  %call2 = call i32 @getchar(), !dbg !173
  ret void, !dbg !174
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !175 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !177, metadata !DIExpression()), !dbg !178
  %0 = load ptr, ptr %p.addr, align 8, !dbg !179
  store i32 0, ptr %0, align 4, !dbg !180
  %1 = load ptr, ptr %retval, align 8, !dbg !181
  ret ptr %1, !dbg !181
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !182 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !183, metadata !DIExpression()), !dbg !184
  %0 = load ptr, ptr %p.addr, align 8, !dbg !185
  store i32 0, ptr %0, align 4, !dbg !186
  %1 = load ptr, ptr %retval, align 8, !dbg !187
  ret ptr %1, !dbg !187
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !188 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !189, metadata !DIExpression()), !dbg !190
  %0 = load ptr, ptr %p.addr, align 8, !dbg !191
  call void @free(ptr noundef %0) #6, !dbg !192
  %1 = load ptr, ptr %retval, align 8, !dbg !193
  ret ptr %1, !dbg !193
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !194 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !195, metadata !DIExpression()), !dbg !196
  %0 = load ptr, ptr %p.addr, align 8, !dbg !197
  call void @free(ptr noundef %0) #6, !dbg !198
  %1 = load ptr, ptr %retval, align 8, !dbg !199
  ret ptr %1, !dbg !199
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !200 {
entry:
  ret void, !dbg !203
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getfree(ptr noundef %net) #0 !dbg !204 {
entry:
  %net.addr = alloca ptr, align 8
  store ptr %net, ptr %net.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %net.addr, metadata !215, metadata !DIExpression()), !dbg !216
  %0 = load ptr, ptr %net.addr, align 8, !dbg !217
  %f1 = getelementptr inbounds %struct.FOO, ptr %0, i32 0, i32 0, !dbg !218
  %1 = load ptr, ptr %f1, align 8, !dbg !218
  call void @free(ptr noundef %1) #6, !dbg !219
  %2 = load ptr, ptr %net.addr, align 8, !dbg !220
  %f2 = getelementptr inbounds %struct.FOO, ptr %2, i32 0, i32 1, !dbg !221
  %3 = load ptr, ptr %f2, align 8, !dbg !221
  call void @free(ptr noundef %3) #6, !dbg !222
  %4 = load ptr, ptr %net.addr, align 8, !dbg !223
  %f3 = getelementptr inbounds %struct.FOO, ptr %4, i32 0, i32 2, !dbg !224
  %5 = load ptr, ptr %f3, align 8, !dbg !224
  call void @free(ptr noundef %5) #6, !dbg !225
  ret void, !dbg !226
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @readmin(ptr noundef %net1) #0 !dbg !227 {
entry:
  %net1.addr = alloca ptr, align 8
  store ptr %net1, ptr %net1.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %net1.addr, metadata !228, metadata !DIExpression()), !dbg !229
  %call = call ptr @SAFEMALLOC(i32 noundef 4), !dbg !230
  %0 = load ptr, ptr %net1.addr, align 8, !dbg !231
  %f1 = getelementptr inbounds %struct.FOO, ptr %0, i32 0, i32 0, !dbg !232
  store ptr %call, ptr %f1, align 8, !dbg !233
  %call1 = call ptr @SAFEMALLOC(i32 noundef 2), !dbg !234
  %1 = load ptr, ptr %net1.addr, align 8, !dbg !235
  %f2 = getelementptr inbounds %struct.FOO, ptr %1, i32 0, i32 1, !dbg !236
  store ptr %call1, ptr %f2, align 8, !dbg !237
  %call2 = call ptr @SAFEMALLOC(i32 noundef 3), !dbg !238
  %2 = load ptr, ptr %net1.addr, align 8, !dbg !239
  %f3 = getelementptr inbounds %struct.FOO, ptr %2, i32 0, i32 2, !dbg !240
  store ptr %call2, ptr %f3, align 8, !dbg !241
  ret void, !dbg !242
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !243 {
entry:
  %net = alloca %struct.FOO, align 8
  call void @llvm.dbg.declare(metadata ptr %net, metadata !246, metadata !DIExpression()), !dbg !247
  call void @readmin(ptr noundef %net), !dbg !248
  call void @getfree(ptr noundef %net), !dbg !249
  ret i32 0, !dbg !250
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!17}
!llvm.module.flags = !{!24, !25, !26, !27, !28, !29, !30}
!llvm.ident = !{!31}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = distinct !DICompileUnit(language: DW_LANG_C11, file: !18, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !19, globals: !23, splitDebugInlining: false, nameTableKind: None)
!18 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/mem_leak/malloc16.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "2fbea87be3effbcd7b4bf5916f1d5c88")
!19 = !{!20, !21}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64)
!22 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!23 = !{!0, !7, !12}
!24 = !{i32 7, !"Dwarf Version", i32 5}
!25 = !{i32 2, !"Debug Info Version", i32 3}
!26 = !{i32 1, !"wchar_size", i32 4}
!27 = !{i32 8, !"PIC Level", i32 2}
!28 = !{i32 7, !"PIE Level", i32 2}
!29 = !{i32 7, !"uwtable", i32 2}
!30 = !{i32 7, !"frame-pointer", i32 2}
!31 = !{!"clang version 16.0.0"}
!32 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !33, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!33 = !DISubroutineType(types: !34)
!34 = !{null, !20, !20}
!35 = !{}
!36 = !DILocalVariable(name: "p", arg: 1, scope: !32, file: !2, line: 4, type: !20)
!37 = !DILocation(line: 4, column: 22, scope: !32)
!38 = !DILocalVariable(name: "q", arg: 2, scope: !32, file: !2, line: 4, type: !20)
!39 = !DILocation(line: 4, column: 31, scope: !32)
!40 = !DILocation(line: 5, column: 3, scope: !32)
!41 = !DILocation(line: 6, column: 1, scope: !32)
!42 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !33, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!43 = !DILocalVariable(name: "p", arg: 1, scope: !42, file: !2, line: 8, type: !20)
!44 = !DILocation(line: 8, column: 25, scope: !42)
!45 = !DILocalVariable(name: "q", arg: 2, scope: !42, file: !2, line: 8, type: !20)
!46 = !DILocation(line: 8, column: 34, scope: !42)
!47 = !DILocation(line: 9, column: 3, scope: !42)
!48 = !DILocation(line: 10, column: 1, scope: !42)
!49 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !33, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!50 = !DILocalVariable(name: "p", arg: 1, scope: !49, file: !2, line: 12, type: !20)
!51 = !DILocation(line: 12, column: 21, scope: !49)
!52 = !DILocalVariable(name: "q", arg: 2, scope: !49, file: !2, line: 12, type: !20)
!53 = !DILocation(line: 12, column: 30, scope: !49)
!54 = !DILocation(line: 13, column: 3, scope: !49)
!55 = !DILocation(line: 14, column: 1, scope: !49)
!56 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !33, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!57 = !DILocalVariable(name: "p", arg: 1, scope: !56, file: !2, line: 16, type: !20)
!58 = !DILocation(line: 16, column: 20, scope: !56)
!59 = !DILocalVariable(name: "q", arg: 2, scope: !56, file: !2, line: 16, type: !20)
!60 = !DILocation(line: 16, column: 29, scope: !56)
!61 = !DILocation(line: 17, column: 3, scope: !56)
!62 = !DILocation(line: 18, column: 1, scope: !56)
!63 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !33, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!64 = !DILocalVariable(name: "p", arg: 1, scope: !63, file: !2, line: 20, type: !20)
!65 = !DILocation(line: 20, column: 34, scope: !63)
!66 = !DILocalVariable(name: "q", arg: 2, scope: !63, file: !2, line: 20, type: !20)
!67 = !DILocation(line: 20, column: 43, scope: !63)
!68 = !DILocation(line: 21, column: 3, scope: !63)
!69 = !DILocation(line: 22, column: 1, scope: !63)
!70 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !33, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!71 = !DILocalVariable(name: "p", arg: 1, scope: !70, file: !2, line: 24, type: !20)
!72 = !DILocation(line: 24, column: 33, scope: !70)
!73 = !DILocalVariable(name: "q", arg: 2, scope: !70, file: !2, line: 24, type: !20)
!74 = !DILocation(line: 24, column: 42, scope: !70)
!75 = !DILocation(line: 25, column: 3, scope: !70)
!76 = !DILocation(line: 26, column: 1, scope: !70)
!77 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !78, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!78 = !DISubroutineType(types: !79)
!79 = !{!20, !22}
!80 = !DILocalVariable(name: "n", arg: 1, scope: !77, file: !2, line: 29, type: !22)
!81 = !DILocation(line: 29, column: 22, scope: !77)
!82 = !DILocation(line: 30, column: 17, scope: !77)
!83 = !DILocation(line: 30, column: 10, scope: !77)
!84 = !DILocation(line: 30, column: 3, scope: !77)
!85 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !78, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!86 = !DILocalVariable(name: "n", arg: 1, scope: !85, file: !2, line: 33, type: !22)
!87 = !DILocation(line: 33, column: 28, scope: !85)
!88 = !DILocation(line: 34, column: 19, scope: !85)
!89 = !DILocation(line: 34, column: 12, scope: !85)
!90 = !DILocation(line: 34, column: 5, scope: !85)
!91 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !78, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!92 = !DILocalVariable(name: "n", arg: 1, scope: !91, file: !2, line: 37, type: !22)
!93 = !DILocation(line: 37, column: 21, scope: !91)
!94 = !DILocation(line: 38, column: 17, scope: !91)
!95 = !DILocation(line: 38, column: 10, scope: !91)
!96 = !DILocation(line: 38, column: 3, scope: !91)
!97 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !78, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!98 = !DILocalVariable(name: "n", arg: 1, scope: !97, file: !2, line: 41, type: !22)
!99 = !DILocation(line: 41, column: 21, scope: !97)
!100 = !DILocation(line: 42, column: 17, scope: !97)
!101 = !DILocation(line: 42, column: 10, scope: !97)
!102 = !DILocation(line: 42, column: 3, scope: !97)
!103 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !78, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!104 = !DILocalVariable(name: "n", arg: 1, scope: !103, file: !2, line: 45, type: !22)
!105 = !DILocation(line: 45, column: 21, scope: !103)
!106 = !DILocation(line: 46, column: 17, scope: !103)
!107 = !DILocation(line: 46, column: 10, scope: !103)
!108 = !DILocation(line: 46, column: 3, scope: !103)
!109 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !78, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!110 = !DILocalVariable(name: "n", arg: 1, scope: !109, file: !2, line: 49, type: !22)
!111 = !DILocation(line: 49, column: 21, scope: !109)
!112 = !DILocation(line: 50, column: 17, scope: !109)
!113 = !DILocation(line: 50, column: 10, scope: !109)
!114 = !DILocation(line: 50, column: 3, scope: !109)
!115 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !78, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!116 = !DILocalVariable(name: "n", arg: 1, scope: !115, file: !2, line: 53, type: !22)
!117 = !DILocation(line: 53, column: 21, scope: !115)
!118 = !DILocation(line: 54, column: 17, scope: !115)
!119 = !DILocation(line: 54, column: 10, scope: !115)
!120 = !DILocation(line: 54, column: 3, scope: !115)
!121 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !78, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!122 = !DILocalVariable(name: "n", arg: 1, scope: !121, file: !2, line: 57, type: !22)
!123 = !DILocation(line: 57, column: 18, scope: !121)
!124 = !DILocation(line: 58, column: 17, scope: !121)
!125 = !DILocation(line: 58, column: 10, scope: !121)
!126 = !DILocation(line: 58, column: 3, scope: !121)
!127 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !128, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!128 = !DISubroutineType(types: !129)
!129 = !{null, !22, !22}
!130 = !DILocalVariable(name: "id", arg: 1, scope: !127, file: !2, line: 67, type: !22)
!131 = !DILocation(line: 67, column: 20, scope: !127)
!132 = !DILocalVariable(name: "flags", arg: 2, scope: !127, file: !2, line: 67, type: !22)
!133 = !DILocation(line: 67, column: 28, scope: !127)
!134 = !DILocation(line: 68, column: 3, scope: !127)
!135 = !DILocation(line: 69, column: 1, scope: !127)
!136 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !137, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!137 = !DISubroutineType(types: !138)
!138 = !{null, !22, !139}
!139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!140 = !DILocalVariable(name: "thdid", arg: 1, scope: !136, file: !2, line: 79, type: !22)
!141 = !DILocation(line: 79, column: 21, scope: !136)
!142 = !DILocalVariable(name: "cxt", arg: 2, scope: !136, file: !2, line: 79, type: !139)
!143 = !DILocation(line: 79, column: 34, scope: !136)
!144 = !DILocation(line: 81, column: 1, scope: !136)
!145 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !137, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!146 = !DILocalVariable(name: "thdid", arg: 1, scope: !145, file: !2, line: 82, type: !22)
!147 = !DILocation(line: 82, column: 21, scope: !145)
!148 = !DILocalVariable(name: "cxt", arg: 2, scope: !145, file: !2, line: 82, type: !139)
!149 = !DILocation(line: 82, column: 33, scope: !145)
!150 = !DILocation(line: 84, column: 1, scope: !145)
!151 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !152, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !22, !139, !139}
!154 = !DILocalVariable(name: "thdid", arg: 1, scope: !151, file: !2, line: 85, type: !22)
!155 = !DILocation(line: 85, column: 26, scope: !151)
!156 = !DILocalVariable(name: "cxt", arg: 2, scope: !151, file: !2, line: 85, type: !139)
!157 = !DILocation(line: 85, column: 38, scope: !151)
!158 = !DILocalVariable(name: "lev", arg: 3, scope: !151, file: !2, line: 85, type: !139)
!159 = !DILocation(line: 85, column: 49, scope: !151)
!160 = !DILocation(line: 87, column: 1, scope: !151)
!161 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !162, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!162 = !DISubroutineType(types: !163)
!163 = !{null, !139}
!164 = !DILocalVariable(name: "lockname", arg: 1, scope: !161, file: !2, line: 89, type: !139)
!165 = !DILocation(line: 89, column: 17, scope: !161)
!166 = !DILocation(line: 91, column: 1, scope: !161)
!167 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !162, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!168 = !DILocalVariable(name: "str", arg: 1, scope: !167, file: !2, line: 93, type: !139)
!169 = !DILocation(line: 93, column: 18, scope: !167)
!170 = !DILocation(line: 94, column: 18, scope: !167)
!171 = !DILocation(line: 94, column: 3, scope: !167)
!172 = !DILocation(line: 95, column: 3, scope: !167)
!173 = !DILocation(line: 96, column: 3, scope: !167)
!174 = !DILocation(line: 97, column: 1, scope: !167)
!175 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !176, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!176 = !DISubroutineType(types: !19)
!177 = !DILocalVariable(name: "p", arg: 1, scope: !175, file: !2, line: 100, type: !21)
!178 = !DILocation(line: 100, column: 24, scope: !175)
!179 = !DILocation(line: 101, column: 6, scope: !175)
!180 = !DILocation(line: 101, column: 8, scope: !175)
!181 = !DILocation(line: 102, column: 1, scope: !175)
!182 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !176, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!183 = !DILocalVariable(name: "p", arg: 1, scope: !182, file: !2, line: 104, type: !21)
!184 = !DILocation(line: 104, column: 20, scope: !182)
!185 = !DILocation(line: 105, column: 6, scope: !182)
!186 = !DILocation(line: 105, column: 8, scope: !182)
!187 = !DILocation(line: 106, column: 1, scope: !182)
!188 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !176, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!189 = !DILocalVariable(name: "p", arg: 1, scope: !188, file: !2, line: 110, type: !21)
!190 = !DILocation(line: 110, column: 22, scope: !188)
!191 = !DILocation(line: 111, column: 10, scope: !188)
!192 = !DILocation(line: 111, column: 5, scope: !188)
!193 = !DILocation(line: 112, column: 1, scope: !188)
!194 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !176, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!195 = !DILocalVariable(name: "p", arg: 1, scope: !194, file: !2, line: 115, type: !21)
!196 = !DILocation(line: 115, column: 24, scope: !194)
!197 = !DILocation(line: 116, column: 10, scope: !194)
!198 = !DILocation(line: 116, column: 5, scope: !194)
!199 = !DILocation(line: 117, column: 1, scope: !194)
!200 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !201, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!201 = !DISubroutineType(types: !202)
!202 = !{null}
!203 = !DILocation(line: 135, column: 20, scope: !200)
!204 = distinct !DISubprogram(name: "getfree", scope: !205, file: !205, line: 19, type: !206, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!205 = !DIFile(filename: "src/mem_leak/malloc16.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "2fbea87be3effbcd7b4bf5916f1d5c88")
!206 = !DISubroutineType(types: !207)
!207 = !{null, !208}
!208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !209, size: 64)
!209 = !DIDerivedType(tag: DW_TAG_typedef, name: "FOO", file: !205, line: 14, baseType: !210)
!210 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !205, line: 10, size: 192, elements: !211)
!211 = !{!212, !213, !214}
!212 = !DIDerivedType(tag: DW_TAG_member, name: "f1", scope: !210, file: !205, line: 11, baseType: !21, size: 64)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "f2", scope: !210, file: !205, line: 12, baseType: !21, size: 64, offset: 64)
!214 = !DIDerivedType(tag: DW_TAG_member, name: "f3", scope: !210, file: !205, line: 13, baseType: !21, size: 64, offset: 128)
!215 = !DILocalVariable(name: "net", arg: 1, scope: !204, file: !205, line: 19, type: !208)
!216 = !DILocation(line: 19, column: 19, scope: !204)
!217 = !DILocation(line: 21, column: 7, scope: !204)
!218 = !DILocation(line: 21, column: 12, scope: !204)
!219 = !DILocation(line: 21, column: 2, scope: !204)
!220 = !DILocation(line: 22, column: 7, scope: !204)
!221 = !DILocation(line: 22, column: 12, scope: !204)
!222 = !DILocation(line: 22, column: 2, scope: !204)
!223 = !DILocation(line: 23, column: 7, scope: !204)
!224 = !DILocation(line: 23, column: 12, scope: !204)
!225 = !DILocation(line: 23, column: 2, scope: !204)
!226 = !DILocation(line: 24, column: 1, scope: !204)
!227 = distinct !DISubprogram(name: "readmin", scope: !205, file: !205, line: 26, type: !206, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!228 = !DILocalVariable(name: "net1", arg: 1, scope: !227, file: !205, line: 26, type: !208)
!229 = !DILocation(line: 26, column: 19, scope: !227)
!230 = !DILocation(line: 27, column: 19, scope: !227)
!231 = !DILocation(line: 27, column: 2, scope: !227)
!232 = !DILocation(line: 27, column: 8, scope: !227)
!233 = !DILocation(line: 27, column: 11, scope: !227)
!234 = !DILocation(line: 28, column: 19, scope: !227)
!235 = !DILocation(line: 28, column: 2, scope: !227)
!236 = !DILocation(line: 28, column: 8, scope: !227)
!237 = !DILocation(line: 28, column: 11, scope: !227)
!238 = !DILocation(line: 29, column: 19, scope: !227)
!239 = !DILocation(line: 29, column: 2, scope: !227)
!240 = !DILocation(line: 29, column: 8, scope: !227)
!241 = !DILocation(line: 29, column: 11, scope: !227)
!242 = !DILocation(line: 30, column: 1, scope: !227)
!243 = distinct !DISubprogram(name: "main", scope: !205, file: !205, line: 32, type: !244, scopeLine: 32, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !35)
!244 = !DISubroutineType(types: !245)
!245 = !{!22}
!246 = !DILocalVariable(name: "net", scope: !243, file: !205, line: 33, type: !209)
!247 = !DILocation(line: 33, column: 6, scope: !243)
!248 = !DILocation(line: 34, column: 2, scope: !243)
!249 = !DILocation(line: 35, column: 2, scope: !243)
!250 = !DILocation(line: 36, column: 1, scope: !243)
