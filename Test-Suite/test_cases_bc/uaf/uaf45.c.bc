; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/uaf/uaf45.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf45.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !39 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !43, metadata !DIExpression()), !dbg !44
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !47
  ret void, !dbg !48
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !49 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !50, metadata !DIExpression()), !dbg !51
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !54
  ret void, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !56 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !57, metadata !DIExpression()), !dbg !58
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !61
  ret void, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !63 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !64, metadata !DIExpression()), !dbg !65
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !66, metadata !DIExpression()), !dbg !67
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !68
  ret void, !dbg !69
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !70 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !71, metadata !DIExpression()), !dbg !72
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !75
  ret void, !dbg !76
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !77 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !78, metadata !DIExpression()), !dbg !79
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !82
  ret void, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !84 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !87, metadata !DIExpression()), !dbg !88
  %0 = load i32, ptr %n.addr, align 4, !dbg !89
  %conv = sext i32 %0 to i64, !dbg !89
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !90
  ret ptr %call, !dbg !91
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !92 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %0 = load i32, ptr %n.addr, align 4, !dbg !95
  %conv = sext i32 %0 to i64, !dbg !95
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !96
  ret ptr %call, !dbg !97
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !98 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %0 = load i32, ptr %n.addr, align 4, !dbg !101
  %conv = sext i32 %0 to i64, !dbg !101
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !102
  ret ptr %call, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !104 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %0 = load i32, ptr %n.addr, align 4, !dbg !107
  %conv = sext i32 %0 to i64, !dbg !107
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !108
  ret ptr %call, !dbg !109
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !110 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !111, metadata !DIExpression()), !dbg !112
  %0 = load i32, ptr %n.addr, align 4, !dbg !113
  %conv = sext i32 %0 to i64, !dbg !113
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !114
  ret ptr %call, !dbg !115
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !116 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !117, metadata !DIExpression()), !dbg !118
  %0 = load i32, ptr %n.addr, align 4, !dbg !119
  %conv = sext i32 %0 to i64, !dbg !119
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !120
  ret ptr %call, !dbg !121
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !122 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !123, metadata !DIExpression()), !dbg !124
  %0 = load i32, ptr %n.addr, align 4, !dbg !125
  %conv = sext i32 %0 to i64, !dbg !125
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !126
  ret ptr %call, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !128 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !129, metadata !DIExpression()), !dbg !130
  %0 = load i32, ptr %n.addr, align 4, !dbg !131
  %conv = sext i32 %0 to i64, !dbg !131
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !132
  ret ptr %call, !dbg !133
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !134 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !137, metadata !DIExpression()), !dbg !138
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !139, metadata !DIExpression()), !dbg !140
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !141
  ret void, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !143 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !147, metadata !DIExpression()), !dbg !148
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !149, metadata !DIExpression()), !dbg !150
  ret void, !dbg !151
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !152 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !153, metadata !DIExpression()), !dbg !154
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !155, metadata !DIExpression()), !dbg !156
  ret void, !dbg !157
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !158 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !161, metadata !DIExpression()), !dbg !162
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !163, metadata !DIExpression()), !dbg !164
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !165, metadata !DIExpression()), !dbg !166
  ret void, !dbg !167
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !168 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !171, metadata !DIExpression()), !dbg !172
  ret void, !dbg !173
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !174 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !175, metadata !DIExpression()), !dbg !176
  %0 = load ptr, ptr %str.addr, align 8, !dbg !177
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !178
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !179
  %call2 = call i32 @getchar(), !dbg !180
  ret void, !dbg !181
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !182 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !186, metadata !DIExpression()), !dbg !187
  %0 = load ptr, ptr %p.addr, align 8, !dbg !188
  store i32 0, ptr %0, align 4, !dbg !189
  %1 = load ptr, ptr %retval, align 8, !dbg !190
  ret ptr %1, !dbg !190
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !191 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !192, metadata !DIExpression()), !dbg !193
  %0 = load ptr, ptr %p.addr, align 8, !dbg !194
  store i32 0, ptr %0, align 4, !dbg !195
  %1 = load ptr, ptr %retval, align 8, !dbg !196
  ret ptr %1, !dbg !196
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !197 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !198, metadata !DIExpression()), !dbg !199
  %0 = load ptr, ptr %p.addr, align 8, !dbg !200
  call void @free(ptr noundef %0) #7, !dbg !201
  %1 = load ptr, ptr %retval, align 8, !dbg !202
  ret ptr %1, !dbg !202
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !203 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !204, metadata !DIExpression()), !dbg !205
  %0 = load ptr, ptr %p.addr, align 8, !dbg !206
  call void @free(ptr noundef %0) #7, !dbg !207
  %1 = load ptr, ptr %retval, align 8, !dbg !208
  ret ptr %1, !dbg !208
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !209 {
entry:
  ret void, !dbg !212
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_12_bad() #0 !dbg !213 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !215, metadata !DIExpression()), !dbg !216
  store ptr null, ptr %data, align 8, !dbg !217
  %call = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !218
  %tobool = icmp ne i32 %call, 0, !dbg !218
  br i1 %tobool, label %if.then, label %if.end5, !dbg !220

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !221
  store ptr %call1, ptr %data, align 8, !dbg !223
  %0 = load ptr, ptr %data, align 8, !dbg !224
  %cmp = icmp eq ptr %0, null, !dbg !226
  br i1 %cmp, label %if.then2, label %if.end, !dbg !227

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !228
  unreachable, !dbg !228

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !230, metadata !DIExpression()), !dbg !235
  store i64 0, ptr %i, align 8, !dbg !236
  br label %for.cond, !dbg !238

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !239
  %cmp3 = icmp ult i64 %1, 100, !dbg !241
  br i1 %cmp3, label %for.body, label %for.end, !dbg !242

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !243
  %3 = load i64, ptr %i, align 8, !dbg !245
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !243
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !246
  store i32 1, ptr %intOne, align 4, !dbg !247
  %4 = load ptr, ptr %data, align 8, !dbg !248
  %5 = load i64, ptr %i, align 8, !dbg !249
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !248
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !250
  store i32 2, ptr %intTwo, align 4, !dbg !251
  br label %for.inc, !dbg !252

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !253
  %inc = add i64 %6, 1, !dbg !253
  store i64 %inc, ptr %i, align 8, !dbg !253
  br label %for.cond, !dbg !254, !llvm.loop !255

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !258
  call void @free(ptr noundef %7) #7, !dbg !259
  br label %if.end5, !dbg !260

if.end5:                                          ; preds = %for.end, %entry
  %call6 = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !261
  %tobool7 = icmp ne i32 %call6, 0, !dbg !261
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !263

if.then8:                                         ; preds = %if.end5
  %8 = load ptr, ptr %data, align 8, !dbg !264
  %call9 = call ptr @UAFFUNC(ptr noundef %8), !dbg !266
  br label %if.end10, !dbg !267

if.else:                                          ; preds = %if.end5
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then8
  ret void, !dbg !268
}

declare i32 @globalReturnsTrueOrFalse(...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_12_good() #0 !dbg !269 {
entry:
  call void @goodB2G(), !dbg !270
  call void @goodG2B(), !dbg !271
  ret void, !dbg !272
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !273 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !277, metadata !DIExpression()), !dbg !278
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !279, metadata !DIExpression()), !dbg !280
  %call = call i64 @time(ptr noundef null) #7, !dbg !281
  %conv = trunc i64 %call to i32, !dbg !282
  call void @srand(i32 noundef %conv) #7, !dbg !283
  call void @CWE416_Use_After_Free__malloc_free_struct_12_good(), !dbg !284
  call void @CWE416_Use_After_Free__malloc_free_struct_12_bad(), !dbg !285
  ret i32 0, !dbg !286
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !287 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  %i9 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !288, metadata !DIExpression()), !dbg !289
  store ptr null, ptr %data, align 8, !dbg !290
  %call = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !291
  %tobool = icmp ne i32 %call, 0, !dbg !291
  br i1 %tobool, label %if.then, label %if.else, !dbg !293

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !294
  store ptr %call1, ptr %data, align 8, !dbg !296
  %0 = load ptr, ptr %data, align 8, !dbg !297
  %cmp = icmp eq ptr %0, null, !dbg !299
  br i1 %cmp, label %if.then2, label %if.end, !dbg !300

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !301
  unreachable, !dbg !301

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !303, metadata !DIExpression()), !dbg !305
  store i64 0, ptr %i, align 8, !dbg !306
  br label %for.cond, !dbg !308

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !309
  %cmp3 = icmp ult i64 %1, 100, !dbg !311
  br i1 %cmp3, label %for.body, label %for.end, !dbg !312

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !313
  %3 = load i64, ptr %i, align 8, !dbg !315
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !313
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !316
  store i32 1, ptr %intOne, align 4, !dbg !317
  %4 = load ptr, ptr %data, align 8, !dbg !318
  %5 = load i64, ptr %i, align 8, !dbg !319
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !318
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !320
  store i32 2, ptr %intTwo, align 4, !dbg !321
  br label %for.inc, !dbg !322

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !323
  %inc = add i64 %6, 1, !dbg !323
  store i64 %inc, ptr %i, align 8, !dbg !323
  br label %for.cond, !dbg !324, !llvm.loop !325

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !327
  call void @free(ptr noundef %7) #7, !dbg !328
  br label %if.end20, !dbg !329

if.else:                                          ; preds = %entry
  %call5 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !330
  store ptr %call5, ptr %data, align 8, !dbg !332
  %8 = load ptr, ptr %data, align 8, !dbg !333
  %cmp6 = icmp eq ptr %8, null, !dbg !335
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !336

if.then7:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !337
  unreachable, !dbg !337

if.end8:                                          ; preds = %if.else
  call void @llvm.dbg.declare(metadata ptr %i9, metadata !339, metadata !DIExpression()), !dbg !341
  store i64 0, ptr %i9, align 8, !dbg !342
  br label %for.cond10, !dbg !344

for.cond10:                                       ; preds = %for.inc17, %if.end8
  %9 = load i64, ptr %i9, align 8, !dbg !345
  %cmp11 = icmp ult i64 %9, 100, !dbg !347
  br i1 %cmp11, label %for.body12, label %for.end19, !dbg !348

for.body12:                                       ; preds = %for.cond10
  %10 = load ptr, ptr %data, align 8, !dbg !349
  %11 = load i64, ptr %i9, align 8, !dbg !351
  %arrayidx13 = getelementptr inbounds %struct._twoIntsStruct, ptr %10, i64 %11, !dbg !349
  %intOne14 = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx13, i32 0, i32 0, !dbg !352
  store i32 1, ptr %intOne14, align 4, !dbg !353
  %12 = load ptr, ptr %data, align 8, !dbg !354
  %13 = load i64, ptr %i9, align 8, !dbg !355
  %arrayidx15 = getelementptr inbounds %struct._twoIntsStruct, ptr %12, i64 %13, !dbg !354
  %intTwo16 = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx15, i32 0, i32 1, !dbg !356
  store i32 2, ptr %intTwo16, align 4, !dbg !357
  br label %for.inc17, !dbg !358

for.inc17:                                        ; preds = %for.body12
  %14 = load i64, ptr %i9, align 8, !dbg !359
  %inc18 = add i64 %14, 1, !dbg !359
  store i64 %inc18, ptr %i9, align 8, !dbg !359
  br label %for.cond10, !dbg !360, !llvm.loop !361

for.end19:                                        ; preds = %for.cond10
  %15 = load ptr, ptr %data, align 8, !dbg !363
  call void @free(ptr noundef %15) #7, !dbg !364
  br label %if.end20

if.end20:                                         ; preds = %for.end19, %for.end
  %call21 = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !365
  %tobool22 = icmp ne i32 %call21, 0, !dbg !365
  br i1 %tobool22, label %if.then23, label %if.else24, !dbg !367

if.then23:                                        ; preds = %if.end20
  br label %if.end25, !dbg !368

if.else24:                                        ; preds = %if.end20
  br label %if.end25

if.end25:                                         ; preds = %if.else24, %if.then23
  ret void, !dbg !370
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !371 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  %i9 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !372, metadata !DIExpression()), !dbg !373
  store ptr null, ptr %data, align 8, !dbg !374
  %call = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !375
  %tobool = icmp ne i32 %call, 0, !dbg !375
  br i1 %tobool, label %if.then, label %if.else, !dbg !377

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !378
  store ptr %call1, ptr %data, align 8, !dbg !380
  %0 = load ptr, ptr %data, align 8, !dbg !381
  %cmp = icmp eq ptr %0, null, !dbg !383
  br i1 %cmp, label %if.then2, label %if.end, !dbg !384

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !385
  unreachable, !dbg !385

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !387, metadata !DIExpression()), !dbg !389
  store i64 0, ptr %i, align 8, !dbg !390
  br label %for.cond, !dbg !392

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !393
  %cmp3 = icmp ult i64 %1, 100, !dbg !395
  br i1 %cmp3, label %for.body, label %for.end, !dbg !396

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !397
  %3 = load i64, ptr %i, align 8, !dbg !399
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !397
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !400
  store i32 1, ptr %intOne, align 4, !dbg !401
  %4 = load ptr, ptr %data, align 8, !dbg !402
  %5 = load i64, ptr %i, align 8, !dbg !403
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !402
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !404
  store i32 2, ptr %intTwo, align 4, !dbg !405
  br label %for.inc, !dbg !406

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !407
  %inc = add i64 %6, 1, !dbg !407
  store i64 %inc, ptr %i, align 8, !dbg !407
  br label %for.cond, !dbg !408, !llvm.loop !409

for.end:                                          ; preds = %for.cond
  br label %if.end20, !dbg !411

if.else:                                          ; preds = %entry
  %call5 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !412
  store ptr %call5, ptr %data, align 8, !dbg !414
  %7 = load ptr, ptr %data, align 8, !dbg !415
  %cmp6 = icmp eq ptr %7, null, !dbg !417
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !418

if.then7:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !419
  unreachable, !dbg !419

if.end8:                                          ; preds = %if.else
  call void @llvm.dbg.declare(metadata ptr %i9, metadata !421, metadata !DIExpression()), !dbg !423
  store i64 0, ptr %i9, align 8, !dbg !424
  br label %for.cond10, !dbg !426

for.cond10:                                       ; preds = %for.inc17, %if.end8
  %8 = load i64, ptr %i9, align 8, !dbg !427
  %cmp11 = icmp ult i64 %8, 100, !dbg !429
  br i1 %cmp11, label %for.body12, label %for.end19, !dbg !430

for.body12:                                       ; preds = %for.cond10
  %9 = load ptr, ptr %data, align 8, !dbg !431
  %10 = load i64, ptr %i9, align 8, !dbg !433
  %arrayidx13 = getelementptr inbounds %struct._twoIntsStruct, ptr %9, i64 %10, !dbg !431
  %intOne14 = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx13, i32 0, i32 0, !dbg !434
  store i32 1, ptr %intOne14, align 4, !dbg !435
  %11 = load ptr, ptr %data, align 8, !dbg !436
  %12 = load i64, ptr %i9, align 8, !dbg !437
  %arrayidx15 = getelementptr inbounds %struct._twoIntsStruct, ptr %11, i64 %12, !dbg !436
  %intTwo16 = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx15, i32 0, i32 1, !dbg !438
  store i32 2, ptr %intTwo16, align 4, !dbg !439
  br label %for.inc17, !dbg !440

for.inc17:                                        ; preds = %for.body12
  %13 = load i64, ptr %i9, align 8, !dbg !441
  %inc18 = add i64 %13, 1, !dbg !441
  store i64 %inc18, ptr %i9, align 8, !dbg !441
  br label %for.cond10, !dbg !442, !llvm.loop !443

for.end19:                                        ; preds = %for.cond10
  br label %if.end20

if.end20:                                         ; preds = %for.end19, %for.end
  %call21 = call i32 (...) @globalReturnsTrueOrFalse(), !dbg !445
  %tobool22 = icmp ne i32 %call21, 0, !dbg !445
  br i1 %tobool22, label %if.then23, label %if.else25, !dbg !447

if.then23:                                        ; preds = %if.end20
  %14 = load ptr, ptr %data, align 8, !dbg !448
  %call24 = call ptr @SAFEUAFFUNC(ptr noundef %14), !dbg !450
  br label %if.end27, !dbg !451

if.else25:                                        ; preds = %if.end20
  %15 = load ptr, ptr %data, align 8, !dbg !452
  %call26 = call ptr @SAFEUAFFUNC(ptr noundef %15), !dbg !454
  br label %if.end27

if.end27:                                         ; preds = %if.else25, %if.then23
  ret void, !dbg !455
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!17}
!llvm.module.flags = !{!31, !32, !33, !34, !35, !36, !37}
!llvm.ident = !{!38}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = distinct !DICompileUnit(language: DW_LANG_C11, file: !18, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !19, globals: !30, splitDebugInlining: false, nameTableKind: None)
!18 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf45.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "d94fc916d8ed1ba651e5bf3fe00ef0ab")
!19 = !{!20, !21, !29}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64)
!22 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !23, line: 100, baseType: !24)
!23 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!24 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !23, line: 96, size: 64, elements: !25)
!25 = !{!26, !28}
!26 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !24, file: !23, line: 98, baseType: !27, size: 32)
!27 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !24, file: !23, line: 99, baseType: !27, size: 32, offset: 32)
!29 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!30 = !{!0, !7, !12}
!31 = !{i32 7, !"Dwarf Version", i32 5}
!32 = !{i32 2, !"Debug Info Version", i32 3}
!33 = !{i32 1, !"wchar_size", i32 4}
!34 = !{i32 8, !"PIC Level", i32 2}
!35 = !{i32 7, !"PIE Level", i32 2}
!36 = !{i32 7, !"uwtable", i32 2}
!37 = !{i32 7, !"frame-pointer", i32 2}
!38 = !{!"clang version 16.0.0"}
!39 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !40, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!40 = !DISubroutineType(types: !41)
!41 = !{null, !20, !20}
!42 = !{}
!43 = !DILocalVariable(name: "p", arg: 1, scope: !39, file: !2, line: 4, type: !20)
!44 = !DILocation(line: 4, column: 22, scope: !39)
!45 = !DILocalVariable(name: "q", arg: 2, scope: !39, file: !2, line: 4, type: !20)
!46 = !DILocation(line: 4, column: 31, scope: !39)
!47 = !DILocation(line: 5, column: 3, scope: !39)
!48 = !DILocation(line: 6, column: 1, scope: !39)
!49 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !40, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!50 = !DILocalVariable(name: "p", arg: 1, scope: !49, file: !2, line: 8, type: !20)
!51 = !DILocation(line: 8, column: 25, scope: !49)
!52 = !DILocalVariable(name: "q", arg: 2, scope: !49, file: !2, line: 8, type: !20)
!53 = !DILocation(line: 8, column: 34, scope: !49)
!54 = !DILocation(line: 9, column: 3, scope: !49)
!55 = !DILocation(line: 10, column: 1, scope: !49)
!56 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !40, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!57 = !DILocalVariable(name: "p", arg: 1, scope: !56, file: !2, line: 12, type: !20)
!58 = !DILocation(line: 12, column: 21, scope: !56)
!59 = !DILocalVariable(name: "q", arg: 2, scope: !56, file: !2, line: 12, type: !20)
!60 = !DILocation(line: 12, column: 30, scope: !56)
!61 = !DILocation(line: 13, column: 3, scope: !56)
!62 = !DILocation(line: 14, column: 1, scope: !56)
!63 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !40, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!64 = !DILocalVariable(name: "p", arg: 1, scope: !63, file: !2, line: 16, type: !20)
!65 = !DILocation(line: 16, column: 20, scope: !63)
!66 = !DILocalVariable(name: "q", arg: 2, scope: !63, file: !2, line: 16, type: !20)
!67 = !DILocation(line: 16, column: 29, scope: !63)
!68 = !DILocation(line: 17, column: 3, scope: !63)
!69 = !DILocation(line: 18, column: 1, scope: !63)
!70 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !40, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!71 = !DILocalVariable(name: "p", arg: 1, scope: !70, file: !2, line: 20, type: !20)
!72 = !DILocation(line: 20, column: 34, scope: !70)
!73 = !DILocalVariable(name: "q", arg: 2, scope: !70, file: !2, line: 20, type: !20)
!74 = !DILocation(line: 20, column: 43, scope: !70)
!75 = !DILocation(line: 21, column: 3, scope: !70)
!76 = !DILocation(line: 22, column: 1, scope: !70)
!77 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !40, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!78 = !DILocalVariable(name: "p", arg: 1, scope: !77, file: !2, line: 24, type: !20)
!79 = !DILocation(line: 24, column: 33, scope: !77)
!80 = !DILocalVariable(name: "q", arg: 2, scope: !77, file: !2, line: 24, type: !20)
!81 = !DILocation(line: 24, column: 42, scope: !77)
!82 = !DILocation(line: 25, column: 3, scope: !77)
!83 = !DILocation(line: 26, column: 1, scope: !77)
!84 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !85, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!85 = !DISubroutineType(types: !86)
!86 = !{!20, !27}
!87 = !DILocalVariable(name: "n", arg: 1, scope: !84, file: !2, line: 29, type: !27)
!88 = !DILocation(line: 29, column: 22, scope: !84)
!89 = !DILocation(line: 30, column: 17, scope: !84)
!90 = !DILocation(line: 30, column: 10, scope: !84)
!91 = !DILocation(line: 30, column: 3, scope: !84)
!92 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !85, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!93 = !DILocalVariable(name: "n", arg: 1, scope: !92, file: !2, line: 33, type: !27)
!94 = !DILocation(line: 33, column: 28, scope: !92)
!95 = !DILocation(line: 34, column: 19, scope: !92)
!96 = !DILocation(line: 34, column: 12, scope: !92)
!97 = !DILocation(line: 34, column: 5, scope: !92)
!98 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !85, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!99 = !DILocalVariable(name: "n", arg: 1, scope: !98, file: !2, line: 37, type: !27)
!100 = !DILocation(line: 37, column: 21, scope: !98)
!101 = !DILocation(line: 38, column: 17, scope: !98)
!102 = !DILocation(line: 38, column: 10, scope: !98)
!103 = !DILocation(line: 38, column: 3, scope: !98)
!104 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !85, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!105 = !DILocalVariable(name: "n", arg: 1, scope: !104, file: !2, line: 41, type: !27)
!106 = !DILocation(line: 41, column: 21, scope: !104)
!107 = !DILocation(line: 42, column: 17, scope: !104)
!108 = !DILocation(line: 42, column: 10, scope: !104)
!109 = !DILocation(line: 42, column: 3, scope: !104)
!110 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !85, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!111 = !DILocalVariable(name: "n", arg: 1, scope: !110, file: !2, line: 45, type: !27)
!112 = !DILocation(line: 45, column: 21, scope: !110)
!113 = !DILocation(line: 46, column: 17, scope: !110)
!114 = !DILocation(line: 46, column: 10, scope: !110)
!115 = !DILocation(line: 46, column: 3, scope: !110)
!116 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !85, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!117 = !DILocalVariable(name: "n", arg: 1, scope: !116, file: !2, line: 49, type: !27)
!118 = !DILocation(line: 49, column: 21, scope: !116)
!119 = !DILocation(line: 50, column: 17, scope: !116)
!120 = !DILocation(line: 50, column: 10, scope: !116)
!121 = !DILocation(line: 50, column: 3, scope: !116)
!122 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !85, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!123 = !DILocalVariable(name: "n", arg: 1, scope: !122, file: !2, line: 53, type: !27)
!124 = !DILocation(line: 53, column: 21, scope: !122)
!125 = !DILocation(line: 54, column: 17, scope: !122)
!126 = !DILocation(line: 54, column: 10, scope: !122)
!127 = !DILocation(line: 54, column: 3, scope: !122)
!128 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !85, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!129 = !DILocalVariable(name: "n", arg: 1, scope: !128, file: !2, line: 57, type: !27)
!130 = !DILocation(line: 57, column: 18, scope: !128)
!131 = !DILocation(line: 58, column: 17, scope: !128)
!132 = !DILocation(line: 58, column: 10, scope: !128)
!133 = !DILocation(line: 58, column: 3, scope: !128)
!134 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !135, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!135 = !DISubroutineType(types: !136)
!136 = !{null, !27, !27}
!137 = !DILocalVariable(name: "id", arg: 1, scope: !134, file: !2, line: 67, type: !27)
!138 = !DILocation(line: 67, column: 20, scope: !134)
!139 = !DILocalVariable(name: "flags", arg: 2, scope: !134, file: !2, line: 67, type: !27)
!140 = !DILocation(line: 67, column: 28, scope: !134)
!141 = !DILocation(line: 68, column: 3, scope: !134)
!142 = !DILocation(line: 69, column: 1, scope: !134)
!143 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !144, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !27, !146}
!146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!147 = !DILocalVariable(name: "thdid", arg: 1, scope: !143, file: !2, line: 79, type: !27)
!148 = !DILocation(line: 79, column: 21, scope: !143)
!149 = !DILocalVariable(name: "cxt", arg: 2, scope: !143, file: !2, line: 79, type: !146)
!150 = !DILocation(line: 79, column: 34, scope: !143)
!151 = !DILocation(line: 81, column: 1, scope: !143)
!152 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !144, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!153 = !DILocalVariable(name: "thdid", arg: 1, scope: !152, file: !2, line: 82, type: !27)
!154 = !DILocation(line: 82, column: 21, scope: !152)
!155 = !DILocalVariable(name: "cxt", arg: 2, scope: !152, file: !2, line: 82, type: !146)
!156 = !DILocation(line: 82, column: 33, scope: !152)
!157 = !DILocation(line: 84, column: 1, scope: !152)
!158 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !159, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!159 = !DISubroutineType(types: !160)
!160 = !{null, !27, !146, !146}
!161 = !DILocalVariable(name: "thdid", arg: 1, scope: !158, file: !2, line: 85, type: !27)
!162 = !DILocation(line: 85, column: 26, scope: !158)
!163 = !DILocalVariable(name: "cxt", arg: 2, scope: !158, file: !2, line: 85, type: !146)
!164 = !DILocation(line: 85, column: 38, scope: !158)
!165 = !DILocalVariable(name: "lev", arg: 3, scope: !158, file: !2, line: 85, type: !146)
!166 = !DILocation(line: 85, column: 49, scope: !158)
!167 = !DILocation(line: 87, column: 1, scope: !158)
!168 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !169, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!169 = !DISubroutineType(types: !170)
!170 = !{null, !146}
!171 = !DILocalVariable(name: "lockname", arg: 1, scope: !168, file: !2, line: 89, type: !146)
!172 = !DILocation(line: 89, column: 17, scope: !168)
!173 = !DILocation(line: 91, column: 1, scope: !168)
!174 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !169, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!175 = !DILocalVariable(name: "str", arg: 1, scope: !174, file: !2, line: 93, type: !146)
!176 = !DILocation(line: 93, column: 18, scope: !174)
!177 = !DILocation(line: 94, column: 18, scope: !174)
!178 = !DILocation(line: 94, column: 3, scope: !174)
!179 = !DILocation(line: 95, column: 3, scope: !174)
!180 = !DILocation(line: 96, column: 3, scope: !174)
!181 = !DILocation(line: 97, column: 1, scope: !174)
!182 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !183, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!183 = !DISubroutineType(types: !184)
!184 = !{!20, !185}
!185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!186 = !DILocalVariable(name: "p", arg: 1, scope: !182, file: !2, line: 100, type: !185)
!187 = !DILocation(line: 100, column: 24, scope: !182)
!188 = !DILocation(line: 101, column: 6, scope: !182)
!189 = !DILocation(line: 101, column: 8, scope: !182)
!190 = !DILocation(line: 102, column: 1, scope: !182)
!191 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !183, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!192 = !DILocalVariable(name: "p", arg: 1, scope: !191, file: !2, line: 104, type: !185)
!193 = !DILocation(line: 104, column: 20, scope: !191)
!194 = !DILocation(line: 105, column: 6, scope: !191)
!195 = !DILocation(line: 105, column: 8, scope: !191)
!196 = !DILocation(line: 106, column: 1, scope: !191)
!197 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !183, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!198 = !DILocalVariable(name: "p", arg: 1, scope: !197, file: !2, line: 110, type: !185)
!199 = !DILocation(line: 110, column: 22, scope: !197)
!200 = !DILocation(line: 111, column: 10, scope: !197)
!201 = !DILocation(line: 111, column: 5, scope: !197)
!202 = !DILocation(line: 112, column: 1, scope: !197)
!203 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !183, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!204 = !DILocalVariable(name: "p", arg: 1, scope: !203, file: !2, line: 115, type: !185)
!205 = !DILocation(line: 115, column: 24, scope: !203)
!206 = !DILocation(line: 116, column: 10, scope: !203)
!207 = !DILocation(line: 116, column: 5, scope: !203)
!208 = !DILocation(line: 117, column: 1, scope: !203)
!209 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !210, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!210 = !DISubroutineType(types: !211)
!211 = !{null}
!212 = !DILocation(line: 135, column: 20, scope: !209)
!213 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_12_bad", scope: !214, file: !214, line: 30, type: !210, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!214 = !DIFile(filename: "src/uaf/uaf45.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "d94fc916d8ed1ba651e5bf3fe00ef0ab")
!215 = !DILocalVariable(name: "data", scope: !213, file: !214, line: 32, type: !21)
!216 = !DILocation(line: 32, column: 21, scope: !213)
!217 = !DILocation(line: 34, column: 10, scope: !213)
!218 = !DILocation(line: 35, column: 8, scope: !219)
!219 = distinct !DILexicalBlock(scope: !213, file: !214, line: 35, column: 8)
!220 = !DILocation(line: 35, column: 8, scope: !213)
!221 = !DILocation(line: 37, column: 33, scope: !222)
!222 = distinct !DILexicalBlock(scope: !219, file: !214, line: 36, column: 5)
!223 = !DILocation(line: 37, column: 14, scope: !222)
!224 = !DILocation(line: 38, column: 13, scope: !225)
!225 = distinct !DILexicalBlock(scope: !222, file: !214, line: 38, column: 13)
!226 = !DILocation(line: 38, column: 18, scope: !225)
!227 = !DILocation(line: 38, column: 13, scope: !222)
!228 = !DILocation(line: 38, column: 28, scope: !229)
!229 = distinct !DILexicalBlock(scope: !225, file: !214, line: 38, column: 27)
!230 = !DILocalVariable(name: "i", scope: !231, file: !214, line: 40, type: !232)
!231 = distinct !DILexicalBlock(scope: !222, file: !214, line: 39, column: 9)
!232 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !233, line: 46, baseType: !234)
!233 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!234 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!235 = !DILocation(line: 40, column: 20, scope: !231)
!236 = !DILocation(line: 41, column: 19, scope: !237)
!237 = distinct !DILexicalBlock(scope: !231, file: !214, line: 41, column: 13)
!238 = !DILocation(line: 41, column: 17, scope: !237)
!239 = !DILocation(line: 41, column: 24, scope: !240)
!240 = distinct !DILexicalBlock(scope: !237, file: !214, line: 41, column: 13)
!241 = !DILocation(line: 41, column: 26, scope: !240)
!242 = !DILocation(line: 41, column: 13, scope: !237)
!243 = !DILocation(line: 43, column: 17, scope: !244)
!244 = distinct !DILexicalBlock(scope: !240, file: !214, line: 42, column: 13)
!245 = !DILocation(line: 43, column: 22, scope: !244)
!246 = !DILocation(line: 43, column: 25, scope: !244)
!247 = !DILocation(line: 43, column: 32, scope: !244)
!248 = !DILocation(line: 44, column: 17, scope: !244)
!249 = !DILocation(line: 44, column: 22, scope: !244)
!250 = !DILocation(line: 44, column: 25, scope: !244)
!251 = !DILocation(line: 44, column: 32, scope: !244)
!252 = !DILocation(line: 45, column: 13, scope: !244)
!253 = !DILocation(line: 41, column: 34, scope: !240)
!254 = !DILocation(line: 41, column: 13, scope: !240)
!255 = distinct !{!255, !242, !256, !257}
!256 = !DILocation(line: 45, column: 13, scope: !237)
!257 = !{!"llvm.loop.mustprogress"}
!258 = !DILocation(line: 48, column: 14, scope: !222)
!259 = !DILocation(line: 48, column: 9, scope: !222)
!260 = !DILocation(line: 49, column: 5, scope: !222)
!261 = !DILocation(line: 64, column: 8, scope: !262)
!262 = distinct !DILexicalBlock(scope: !213, file: !214, line: 64, column: 8)
!263 = !DILocation(line: 64, column: 8, scope: !213)
!264 = !DILocation(line: 67, column: 17, scope: !265)
!265 = distinct !DILexicalBlock(scope: !262, file: !214, line: 65, column: 5)
!266 = !DILocation(line: 67, column: 9, scope: !265)
!267 = !DILocation(line: 69, column: 5, scope: !265)
!268 = !DILocation(line: 77, column: 1, scope: !213)
!269 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_12_good", scope: !214, file: !214, line: 184, type: !210, scopeLine: 185, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!270 = !DILocation(line: 186, column: 5, scope: !269)
!271 = !DILocation(line: 187, column: 5, scope: !269)
!272 = !DILocation(line: 188, column: 1, scope: !269)
!273 = distinct !DISubprogram(name: "main", scope: !214, file: !214, line: 197, type: !274, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !42)
!274 = !DISubroutineType(types: !275)
!275 = !{!27, !27, !276}
!276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !146, size: 64)
!277 = !DILocalVariable(name: "argc", arg: 1, scope: !273, file: !214, line: 197, type: !27)
!278 = !DILocation(line: 197, column: 14, scope: !273)
!279 = !DILocalVariable(name: "argv", arg: 2, scope: !273, file: !214, line: 197, type: !276)
!280 = !DILocation(line: 197, column: 27, scope: !273)
!281 = !DILocation(line: 200, column: 22, scope: !273)
!282 = !DILocation(line: 200, column: 12, scope: !273)
!283 = !DILocation(line: 200, column: 5, scope: !273)
!284 = !DILocation(line: 201, column: 5, scope: !273)
!285 = !DILocation(line: 202, column: 5, scope: !273)
!286 = !DILocation(line: 203, column: 5, scope: !273)
!287 = distinct !DISubprogram(name: "goodB2G", scope: !214, file: !214, line: 83, type: !210, scopeLine: 84, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !17, retainedNodes: !42)
!288 = !DILocalVariable(name: "data", scope: !287, file: !214, line: 85, type: !21)
!289 = !DILocation(line: 85, column: 21, scope: !287)
!290 = !DILocation(line: 87, column: 10, scope: !287)
!291 = !DILocation(line: 88, column: 8, scope: !292)
!292 = distinct !DILexicalBlock(scope: !287, file: !214, line: 88, column: 8)
!293 = !DILocation(line: 88, column: 8, scope: !287)
!294 = !DILocation(line: 90, column: 33, scope: !295)
!295 = distinct !DILexicalBlock(scope: !292, file: !214, line: 89, column: 5)
!296 = !DILocation(line: 90, column: 14, scope: !295)
!297 = !DILocation(line: 91, column: 13, scope: !298)
!298 = distinct !DILexicalBlock(scope: !295, file: !214, line: 91, column: 13)
!299 = !DILocation(line: 91, column: 18, scope: !298)
!300 = !DILocation(line: 91, column: 13, scope: !295)
!301 = !DILocation(line: 91, column: 28, scope: !302)
!302 = distinct !DILexicalBlock(scope: !298, file: !214, line: 91, column: 27)
!303 = !DILocalVariable(name: "i", scope: !304, file: !214, line: 93, type: !232)
!304 = distinct !DILexicalBlock(scope: !295, file: !214, line: 92, column: 9)
!305 = !DILocation(line: 93, column: 20, scope: !304)
!306 = !DILocation(line: 94, column: 19, scope: !307)
!307 = distinct !DILexicalBlock(scope: !304, file: !214, line: 94, column: 13)
!308 = !DILocation(line: 94, column: 17, scope: !307)
!309 = !DILocation(line: 94, column: 24, scope: !310)
!310 = distinct !DILexicalBlock(scope: !307, file: !214, line: 94, column: 13)
!311 = !DILocation(line: 94, column: 26, scope: !310)
!312 = !DILocation(line: 94, column: 13, scope: !307)
!313 = !DILocation(line: 96, column: 17, scope: !314)
!314 = distinct !DILexicalBlock(scope: !310, file: !214, line: 95, column: 13)
!315 = !DILocation(line: 96, column: 22, scope: !314)
!316 = !DILocation(line: 96, column: 25, scope: !314)
!317 = !DILocation(line: 96, column: 32, scope: !314)
!318 = !DILocation(line: 97, column: 17, scope: !314)
!319 = !DILocation(line: 97, column: 22, scope: !314)
!320 = !DILocation(line: 97, column: 25, scope: !314)
!321 = !DILocation(line: 97, column: 32, scope: !314)
!322 = !DILocation(line: 98, column: 13, scope: !314)
!323 = !DILocation(line: 94, column: 34, scope: !310)
!324 = !DILocation(line: 94, column: 13, scope: !310)
!325 = distinct !{!325, !312, !326, !257}
!326 = !DILocation(line: 98, column: 13, scope: !307)
!327 = !DILocation(line: 101, column: 14, scope: !295)
!328 = !DILocation(line: 101, column: 9, scope: !295)
!329 = !DILocation(line: 102, column: 5, scope: !295)
!330 = !DILocation(line: 105, column: 33, scope: !331)
!331 = distinct !DILexicalBlock(scope: !292, file: !214, line: 104, column: 5)
!332 = !DILocation(line: 105, column: 14, scope: !331)
!333 = !DILocation(line: 106, column: 13, scope: !334)
!334 = distinct !DILexicalBlock(scope: !331, file: !214, line: 106, column: 13)
!335 = !DILocation(line: 106, column: 18, scope: !334)
!336 = !DILocation(line: 106, column: 13, scope: !331)
!337 = !DILocation(line: 106, column: 28, scope: !338)
!338 = distinct !DILexicalBlock(scope: !334, file: !214, line: 106, column: 27)
!339 = !DILocalVariable(name: "i", scope: !340, file: !214, line: 108, type: !232)
!340 = distinct !DILexicalBlock(scope: !331, file: !214, line: 107, column: 9)
!341 = !DILocation(line: 108, column: 20, scope: !340)
!342 = !DILocation(line: 109, column: 19, scope: !343)
!343 = distinct !DILexicalBlock(scope: !340, file: !214, line: 109, column: 13)
!344 = !DILocation(line: 109, column: 17, scope: !343)
!345 = !DILocation(line: 109, column: 24, scope: !346)
!346 = distinct !DILexicalBlock(scope: !343, file: !214, line: 109, column: 13)
!347 = !DILocation(line: 109, column: 26, scope: !346)
!348 = !DILocation(line: 109, column: 13, scope: !343)
!349 = !DILocation(line: 111, column: 17, scope: !350)
!350 = distinct !DILexicalBlock(scope: !346, file: !214, line: 110, column: 13)
!351 = !DILocation(line: 111, column: 22, scope: !350)
!352 = !DILocation(line: 111, column: 25, scope: !350)
!353 = !DILocation(line: 111, column: 32, scope: !350)
!354 = !DILocation(line: 112, column: 17, scope: !350)
!355 = !DILocation(line: 112, column: 22, scope: !350)
!356 = !DILocation(line: 112, column: 25, scope: !350)
!357 = !DILocation(line: 112, column: 32, scope: !350)
!358 = !DILocation(line: 113, column: 13, scope: !350)
!359 = !DILocation(line: 109, column: 34, scope: !346)
!360 = !DILocation(line: 109, column: 13, scope: !346)
!361 = distinct !{!361, !348, !362, !257}
!362 = !DILocation(line: 113, column: 13, scope: !343)
!363 = !DILocation(line: 116, column: 14, scope: !331)
!364 = !DILocation(line: 116, column: 9, scope: !331)
!365 = !DILocation(line: 118, column: 8, scope: !366)
!366 = distinct !DILexicalBlock(scope: !287, file: !214, line: 118, column: 8)
!367 = !DILocation(line: 118, column: 8, scope: !287)
!368 = !DILocation(line: 124, column: 5, scope: !369)
!369 = distinct !DILexicalBlock(scope: !366, file: !214, line: 119, column: 5)
!370 = !DILocation(line: 132, column: 1, scope: !287)
!371 = distinct !DISubprogram(name: "goodG2B", scope: !214, file: !214, line: 137, type: !210, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !17, retainedNodes: !42)
!372 = !DILocalVariable(name: "data", scope: !371, file: !214, line: 139, type: !21)
!373 = !DILocation(line: 139, column: 21, scope: !371)
!374 = !DILocation(line: 141, column: 10, scope: !371)
!375 = !DILocation(line: 142, column: 8, scope: !376)
!376 = distinct !DILexicalBlock(scope: !371, file: !214, line: 142, column: 8)
!377 = !DILocation(line: 142, column: 8, scope: !371)
!378 = !DILocation(line: 144, column: 33, scope: !379)
!379 = distinct !DILexicalBlock(scope: !376, file: !214, line: 143, column: 5)
!380 = !DILocation(line: 144, column: 14, scope: !379)
!381 = !DILocation(line: 145, column: 13, scope: !382)
!382 = distinct !DILexicalBlock(scope: !379, file: !214, line: 145, column: 13)
!383 = !DILocation(line: 145, column: 18, scope: !382)
!384 = !DILocation(line: 145, column: 13, scope: !379)
!385 = !DILocation(line: 145, column: 28, scope: !386)
!386 = distinct !DILexicalBlock(scope: !382, file: !214, line: 145, column: 27)
!387 = !DILocalVariable(name: "i", scope: !388, file: !214, line: 147, type: !232)
!388 = distinct !DILexicalBlock(scope: !379, file: !214, line: 146, column: 9)
!389 = !DILocation(line: 147, column: 20, scope: !388)
!390 = !DILocation(line: 148, column: 19, scope: !391)
!391 = distinct !DILexicalBlock(scope: !388, file: !214, line: 148, column: 13)
!392 = !DILocation(line: 148, column: 17, scope: !391)
!393 = !DILocation(line: 148, column: 24, scope: !394)
!394 = distinct !DILexicalBlock(scope: !391, file: !214, line: 148, column: 13)
!395 = !DILocation(line: 148, column: 26, scope: !394)
!396 = !DILocation(line: 148, column: 13, scope: !391)
!397 = !DILocation(line: 150, column: 17, scope: !398)
!398 = distinct !DILexicalBlock(scope: !394, file: !214, line: 149, column: 13)
!399 = !DILocation(line: 150, column: 22, scope: !398)
!400 = !DILocation(line: 150, column: 25, scope: !398)
!401 = !DILocation(line: 150, column: 32, scope: !398)
!402 = !DILocation(line: 151, column: 17, scope: !398)
!403 = !DILocation(line: 151, column: 22, scope: !398)
!404 = !DILocation(line: 151, column: 25, scope: !398)
!405 = !DILocation(line: 151, column: 32, scope: !398)
!406 = !DILocation(line: 152, column: 13, scope: !398)
!407 = !DILocation(line: 148, column: 34, scope: !394)
!408 = !DILocation(line: 148, column: 13, scope: !394)
!409 = distinct !{!409, !396, !410, !257}
!410 = !DILocation(line: 152, column: 13, scope: !391)
!411 = !DILocation(line: 155, column: 5, scope: !379)
!412 = !DILocation(line: 158, column: 33, scope: !413)
!413 = distinct !DILexicalBlock(scope: !376, file: !214, line: 157, column: 5)
!414 = !DILocation(line: 158, column: 14, scope: !413)
!415 = !DILocation(line: 159, column: 13, scope: !416)
!416 = distinct !DILexicalBlock(scope: !413, file: !214, line: 159, column: 13)
!417 = !DILocation(line: 159, column: 18, scope: !416)
!418 = !DILocation(line: 159, column: 13, scope: !413)
!419 = !DILocation(line: 159, column: 28, scope: !420)
!420 = distinct !DILexicalBlock(scope: !416, file: !214, line: 159, column: 27)
!421 = !DILocalVariable(name: "i", scope: !422, file: !214, line: 161, type: !232)
!422 = distinct !DILexicalBlock(scope: !413, file: !214, line: 160, column: 9)
!423 = !DILocation(line: 161, column: 20, scope: !422)
!424 = !DILocation(line: 162, column: 19, scope: !425)
!425 = distinct !DILexicalBlock(scope: !422, file: !214, line: 162, column: 13)
!426 = !DILocation(line: 162, column: 17, scope: !425)
!427 = !DILocation(line: 162, column: 24, scope: !428)
!428 = distinct !DILexicalBlock(scope: !425, file: !214, line: 162, column: 13)
!429 = !DILocation(line: 162, column: 26, scope: !428)
!430 = !DILocation(line: 162, column: 13, scope: !425)
!431 = !DILocation(line: 164, column: 17, scope: !432)
!432 = distinct !DILexicalBlock(scope: !428, file: !214, line: 163, column: 13)
!433 = !DILocation(line: 164, column: 22, scope: !432)
!434 = !DILocation(line: 164, column: 25, scope: !432)
!435 = !DILocation(line: 164, column: 32, scope: !432)
!436 = !DILocation(line: 165, column: 17, scope: !432)
!437 = !DILocation(line: 165, column: 22, scope: !432)
!438 = !DILocation(line: 165, column: 25, scope: !432)
!439 = !DILocation(line: 165, column: 32, scope: !432)
!440 = !DILocation(line: 166, column: 13, scope: !432)
!441 = !DILocation(line: 162, column: 34, scope: !428)
!442 = !DILocation(line: 162, column: 13, scope: !428)
!443 = distinct !{!443, !430, !444, !257}
!444 = !DILocation(line: 166, column: 13, scope: !425)
!445 = !DILocation(line: 170, column: 8, scope: !446)
!446 = distinct !DILexicalBlock(scope: !371, file: !214, line: 170, column: 8)
!447 = !DILocation(line: 170, column: 8, scope: !371)
!448 = !DILocation(line: 173, column: 21, scope: !449)
!449 = distinct !DILexicalBlock(scope: !446, file: !214, line: 171, column: 5)
!450 = !DILocation(line: 173, column: 9, scope: !449)
!451 = !DILocation(line: 175, column: 5, scope: !449)
!452 = !DILocation(line: 179, column: 21, scope: !453)
!453 = distinct !DILexicalBlock(scope: !446, file: !214, line: 177, column: 5)
!454 = !DILocation(line: 179, column: 9, scope: !453)
!455 = !DILocation(line: 182, column: 1, scope: !371)
