; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/uaf/uaf44.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf44.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !45 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !49, metadata !DIExpression()), !dbg !50
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !53
  ret void, !dbg !54
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !55 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !56, metadata !DIExpression()), !dbg !57
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !58, metadata !DIExpression()), !dbg !59
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !60
  ret void, !dbg !61
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !62 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !63, metadata !DIExpression()), !dbg !64
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !65, metadata !DIExpression()), !dbg !66
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !67
  ret void, !dbg !68
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !69 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !70, metadata !DIExpression()), !dbg !71
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !72, metadata !DIExpression()), !dbg !73
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !74
  ret void, !dbg !75
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !76 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !77, metadata !DIExpression()), !dbg !78
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !81
  ret void, !dbg !82
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !83 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !84, metadata !DIExpression()), !dbg !85
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !88
  ret void, !dbg !89
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !90 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %0 = load i32, ptr %n.addr, align 4, !dbg !95
  %conv = sext i32 %0 to i64, !dbg !95
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !96
  ret ptr %call, !dbg !97
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !98 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %0 = load i32, ptr %n.addr, align 4, !dbg !101
  %conv = sext i32 %0 to i64, !dbg !101
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !102
  ret ptr %call, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !104 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %0 = load i32, ptr %n.addr, align 4, !dbg !107
  %conv = sext i32 %0 to i64, !dbg !107
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !108
  ret ptr %call, !dbg !109
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !110 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !111, metadata !DIExpression()), !dbg !112
  %0 = load i32, ptr %n.addr, align 4, !dbg !113
  %conv = sext i32 %0 to i64, !dbg !113
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !114
  ret ptr %call, !dbg !115
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !116 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !117, metadata !DIExpression()), !dbg !118
  %0 = load i32, ptr %n.addr, align 4, !dbg !119
  %conv = sext i32 %0 to i64, !dbg !119
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !120
  ret ptr %call, !dbg !121
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !122 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !123, metadata !DIExpression()), !dbg !124
  %0 = load i32, ptr %n.addr, align 4, !dbg !125
  %conv = sext i32 %0 to i64, !dbg !125
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !126
  ret ptr %call, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !128 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !129, metadata !DIExpression()), !dbg !130
  %0 = load i32, ptr %n.addr, align 4, !dbg !131
  %conv = sext i32 %0 to i64, !dbg !131
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !132
  ret ptr %call, !dbg !133
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !134 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !135, metadata !DIExpression()), !dbg !136
  %0 = load i32, ptr %n.addr, align 4, !dbg !137
  %conv = sext i32 %0 to i64, !dbg !137
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !138
  ret ptr %call, !dbg !139
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !140 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !143, metadata !DIExpression()), !dbg !144
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !145, metadata !DIExpression()), !dbg !146
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !147
  ret void, !dbg !148
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !149 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !153, metadata !DIExpression()), !dbg !154
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !155, metadata !DIExpression()), !dbg !156
  ret void, !dbg !157
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !158 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !159, metadata !DIExpression()), !dbg !160
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !161, metadata !DIExpression()), !dbg !162
  ret void, !dbg !163
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !164 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !167, metadata !DIExpression()), !dbg !168
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !169, metadata !DIExpression()), !dbg !170
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !171, metadata !DIExpression()), !dbg !172
  ret void, !dbg !173
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !174 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !177, metadata !DIExpression()), !dbg !178
  ret void, !dbg !179
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !180 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !181, metadata !DIExpression()), !dbg !182
  %0 = load ptr, ptr %str.addr, align 8, !dbg !183
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !184
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !185
  %call2 = call i32 @getchar(), !dbg !186
  ret void, !dbg !187
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !188 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !192, metadata !DIExpression()), !dbg !193
  %0 = load ptr, ptr %p.addr, align 8, !dbg !194
  store i32 0, ptr %0, align 4, !dbg !195
  %1 = load ptr, ptr %retval, align 8, !dbg !196
  ret ptr %1, !dbg !196
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !197 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !198, metadata !DIExpression()), !dbg !199
  %0 = load ptr, ptr %p.addr, align 8, !dbg !200
  store i32 0, ptr %0, align 4, !dbg !201
  %1 = load ptr, ptr %retval, align 8, !dbg !202
  ret ptr %1, !dbg !202
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !203 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !204, metadata !DIExpression()), !dbg !205
  %0 = load ptr, ptr %p.addr, align 8, !dbg !206
  call void @free(ptr noundef %0) #7, !dbg !207
  %1 = load ptr, ptr %retval, align 8, !dbg !208
  ret ptr %1, !dbg !208
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !209 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !210, metadata !DIExpression()), !dbg !211
  %0 = load ptr, ptr %p.addr, align 8, !dbg !212
  call void @free(ptr noundef %0) #7, !dbg !213
  %1 = load ptr, ptr %retval, align 8, !dbg !214
  ret ptr %1, !dbg !214
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !215 {
entry:
  ret void, !dbg !218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_11_bad() #0 !dbg !219 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !220, metadata !DIExpression()), !dbg !221
  store ptr null, ptr %data, align 8, !dbg !222
  %call = call i32 (...) @globalReturnsTrue(), !dbg !223
  %tobool = icmp ne i32 %call, 0, !dbg !223
  br i1 %tobool, label %if.then, label %if.end5, !dbg !225

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !226
  store ptr %call1, ptr %data, align 8, !dbg !228
  %0 = load ptr, ptr %data, align 8, !dbg !229
  %cmp = icmp eq ptr %0, null, !dbg !231
  br i1 %cmp, label %if.then2, label %if.end, !dbg !232

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !233
  unreachable, !dbg !233

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !235, metadata !DIExpression()), !dbg !240
  store i64 0, ptr %i, align 8, !dbg !241
  br label %for.cond, !dbg !243

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !244
  %cmp3 = icmp ult i64 %1, 100, !dbg !246
  br i1 %cmp3, label %for.body, label %for.end, !dbg !247

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !248
  %3 = load i64, ptr %i, align 8, !dbg !250
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !248
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !251
  store i32 1, ptr %intOne, align 4, !dbg !252
  %4 = load ptr, ptr %data, align 8, !dbg !253
  %5 = load i64, ptr %i, align 8, !dbg !254
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !253
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !255
  store i32 2, ptr %intTwo, align 4, !dbg !256
  br label %for.inc, !dbg !257

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !258
  %inc = add i64 %6, 1, !dbg !258
  store i64 %inc, ptr %i, align 8, !dbg !258
  br label %for.cond, !dbg !259, !llvm.loop !260

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !263
  call void @free(ptr noundef %7) #7, !dbg !264
  br label %if.end5, !dbg !265

if.end5:                                          ; preds = %for.end, %entry
  %call6 = call i32 (...) @globalReturnsTrue(), !dbg !266
  %tobool7 = icmp ne i32 %call6, 0, !dbg !266
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !268

if.then8:                                         ; preds = %if.end5
  %8 = load ptr, ptr %data, align 8, !dbg !269
  %call9 = call ptr @UAFFUNC(ptr noundef %8), !dbg !271
  br label %if.end10, !dbg !272

if.end10:                                         ; preds = %if.then8, %if.end5
  ret void, !dbg !273
}

declare i32 @globalReturnsTrue(...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_11_good() #0 !dbg !274 {
entry:
  call void @goodB2G1(), !dbg !275
  call void @goodB2G2(), !dbg !276
  call void @goodG2B1(), !dbg !277
  call void @goodG2B2(), !dbg !278
  ret void, !dbg !279
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !280 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !284, metadata !DIExpression()), !dbg !285
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !286, metadata !DIExpression()), !dbg !287
  %call = call i64 @time(ptr noundef null) #7, !dbg !288
  %conv = trunc i64 %call to i32, !dbg !289
  call void @srand(i32 noundef %conv) #7, !dbg !290
  call void @CWE416_Use_After_Free__malloc_free_struct_11_good(), !dbg !291
  call void @CWE416_Use_After_Free__malloc_free_struct_11_bad(), !dbg !292
  ret i32 0, !dbg !293
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !294 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !295, metadata !DIExpression()), !dbg !296
  store ptr null, ptr %data, align 8, !dbg !297
  %call = call i32 (...) @globalReturnsTrue(), !dbg !298
  %tobool = icmp ne i32 %call, 0, !dbg !298
  br i1 %tobool, label %if.then, label %if.end5, !dbg !300

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !301
  store ptr %call1, ptr %data, align 8, !dbg !303
  %0 = load ptr, ptr %data, align 8, !dbg !304
  %cmp = icmp eq ptr %0, null, !dbg !306
  br i1 %cmp, label %if.then2, label %if.end, !dbg !307

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !308
  unreachable, !dbg !308

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !310, metadata !DIExpression()), !dbg !312
  store i64 0, ptr %i, align 8, !dbg !313
  br label %for.cond, !dbg !315

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !316
  %cmp3 = icmp ult i64 %1, 100, !dbg !318
  br i1 %cmp3, label %for.body, label %for.end, !dbg !319

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !320
  %3 = load i64, ptr %i, align 8, !dbg !322
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !320
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !323
  store i32 1, ptr %intOne, align 4, !dbg !324
  %4 = load ptr, ptr %data, align 8, !dbg !325
  %5 = load i64, ptr %i, align 8, !dbg !326
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !325
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !327
  store i32 2, ptr %intTwo, align 4, !dbg !328
  br label %for.inc, !dbg !329

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !330
  %inc = add i64 %6, 1, !dbg !330
  store i64 %inc, ptr %i, align 8, !dbg !330
  br label %for.cond, !dbg !331, !llvm.loop !332

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !334
  call void @free(ptr noundef %7) #7, !dbg !335
  br label %if.end5, !dbg !336

if.end5:                                          ; preds = %for.end, %entry
  %call6 = call i32 (...) @globalReturnsFalse(), !dbg !337
  %tobool7 = icmp ne i32 %call6, 0, !dbg !337
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !339

if.then8:                                         ; preds = %if.end5
  call void @printLine(ptr noundef @.str.3), !dbg !340
  br label %if.end9, !dbg !342

if.else:                                          ; preds = %if.end5
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then8
  ret void, !dbg !343
}

declare i32 @globalReturnsFalse(...) #2

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !344 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !345, metadata !DIExpression()), !dbg !346
  store ptr null, ptr %data, align 8, !dbg !347
  %call = call i32 (...) @globalReturnsTrue(), !dbg !348
  %tobool = icmp ne i32 %call, 0, !dbg !348
  br i1 %tobool, label %if.then, label %if.end5, !dbg !350

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !351
  store ptr %call1, ptr %data, align 8, !dbg !353
  %0 = load ptr, ptr %data, align 8, !dbg !354
  %cmp = icmp eq ptr %0, null, !dbg !356
  br i1 %cmp, label %if.then2, label %if.end, !dbg !357

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !358
  unreachable, !dbg !358

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !360, metadata !DIExpression()), !dbg !362
  store i64 0, ptr %i, align 8, !dbg !363
  br label %for.cond, !dbg !365

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !366
  %cmp3 = icmp ult i64 %1, 100, !dbg !368
  br i1 %cmp3, label %for.body, label %for.end, !dbg !369

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !370
  %3 = load i64, ptr %i, align 8, !dbg !372
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !370
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !373
  store i32 1, ptr %intOne, align 4, !dbg !374
  %4 = load ptr, ptr %data, align 8, !dbg !375
  %5 = load i64, ptr %i, align 8, !dbg !376
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !375
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !377
  store i32 2, ptr %intTwo, align 4, !dbg !378
  br label %for.inc, !dbg !379

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !380
  %inc = add i64 %6, 1, !dbg !380
  store i64 %inc, ptr %i, align 8, !dbg !380
  br label %for.cond, !dbg !381, !llvm.loop !382

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !384
  call void @free(ptr noundef %7) #7, !dbg !385
  br label %if.end5, !dbg !386

if.end5:                                          ; preds = %for.end, %entry
  %call6 = call i32 (...) @globalReturnsTrue(), !dbg !387
  %tobool7 = icmp ne i32 %call6, 0, !dbg !387
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !389

if.then8:                                         ; preds = %if.end5
  br label %if.end9, !dbg !390

if.end9:                                          ; preds = %if.then8, %if.end5
  ret void, !dbg !392
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !393 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !394, metadata !DIExpression()), !dbg !395
  store ptr null, ptr %data, align 8, !dbg !396
  %call = call i32 (...) @globalReturnsFalse(), !dbg !397
  %tobool = icmp ne i32 %call, 0, !dbg !397
  br i1 %tobool, label %if.then, label %if.else, !dbg !399

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !400
  br label %if.end5, !dbg !402

if.else:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !403
  store ptr %call1, ptr %data, align 8, !dbg !405
  %0 = load ptr, ptr %data, align 8, !dbg !406
  %cmp = icmp eq ptr %0, null, !dbg !408
  br i1 %cmp, label %if.then2, label %if.end, !dbg !409

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !410
  unreachable, !dbg !410

if.end:                                           ; preds = %if.else
  call void @llvm.dbg.declare(metadata ptr %i, metadata !412, metadata !DIExpression()), !dbg !414
  store i64 0, ptr %i, align 8, !dbg !415
  br label %for.cond, !dbg !417

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !418
  %cmp3 = icmp ult i64 %1, 100, !dbg !420
  br i1 %cmp3, label %for.body, label %for.end, !dbg !421

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !422
  %3 = load i64, ptr %i, align 8, !dbg !424
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !422
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !425
  store i32 1, ptr %intOne, align 4, !dbg !426
  %4 = load ptr, ptr %data, align 8, !dbg !427
  %5 = load i64, ptr %i, align 8, !dbg !428
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !427
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !429
  store i32 2, ptr %intTwo, align 4, !dbg !430
  br label %for.inc, !dbg !431

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !432
  %inc = add i64 %6, 1, !dbg !432
  store i64 %inc, ptr %i, align 8, !dbg !432
  br label %for.cond, !dbg !433, !llvm.loop !434

for.end:                                          ; preds = %for.cond
  br label %if.end5

if.end5:                                          ; preds = %for.end, %if.then
  %call6 = call i32 (...) @globalReturnsTrue(), !dbg !436
  %tobool7 = icmp ne i32 %call6, 0, !dbg !436
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !438

if.then8:                                         ; preds = %if.end5
  %7 = load ptr, ptr %data, align 8, !dbg !439
  %call9 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !441
  br label %if.end10, !dbg !442

if.end10:                                         ; preds = %if.then8, %if.end5
  ret void, !dbg !443
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !444 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !445, metadata !DIExpression()), !dbg !446
  store ptr null, ptr %data, align 8, !dbg !447
  %call = call i32 (...) @globalReturnsTrue(), !dbg !448
  %tobool = icmp ne i32 %call, 0, !dbg !448
  br i1 %tobool, label %if.then, label %if.end5, !dbg !450

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !451
  store ptr %call1, ptr %data, align 8, !dbg !453
  %0 = load ptr, ptr %data, align 8, !dbg !454
  %cmp = icmp eq ptr %0, null, !dbg !456
  br i1 %cmp, label %if.then2, label %if.end, !dbg !457

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !458
  unreachable, !dbg !458

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !460, metadata !DIExpression()), !dbg !462
  store i64 0, ptr %i, align 8, !dbg !463
  br label %for.cond, !dbg !465

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !466
  %cmp3 = icmp ult i64 %1, 100, !dbg !468
  br i1 %cmp3, label %for.body, label %for.end, !dbg !469

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !470
  %3 = load i64, ptr %i, align 8, !dbg !472
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !470
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !473
  store i32 1, ptr %intOne, align 4, !dbg !474
  %4 = load ptr, ptr %data, align 8, !dbg !475
  %5 = load i64, ptr %i, align 8, !dbg !476
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !475
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !477
  store i32 2, ptr %intTwo, align 4, !dbg !478
  br label %for.inc, !dbg !479

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !480
  %inc = add i64 %6, 1, !dbg !480
  store i64 %inc, ptr %i, align 8, !dbg !480
  br label %for.cond, !dbg !481, !llvm.loop !482

for.end:                                          ; preds = %for.cond
  br label %if.end5, !dbg !484

if.end5:                                          ; preds = %for.end, %entry
  %call6 = call i32 (...) @globalReturnsTrue(), !dbg !485
  %tobool7 = icmp ne i32 %call6, 0, !dbg !485
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !487

if.then8:                                         ; preds = %if.end5
  %7 = load ptr, ptr %data, align 8, !dbg !488
  %call9 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !490
  br label %if.end10, !dbg !491

if.end10:                                         ; preds = %if.then8, %if.end5
  ret void, !dbg !492
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!23}
!llvm.module.flags = !{!37, !38, !39, !40, !41, !42, !43}
!llvm.ident = !{!44}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 82, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/uaf/uaf44.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "5595216d4647888f0d3ab5a28153f579")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 21)
!23 = distinct !DICompileUnit(language: DW_LANG_C11, file: !24, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !25, globals: !36, splitDebugInlining: false, nameTableKind: None)
!24 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf44.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "5595216d4647888f0d3ab5a28153f579")
!25 = !{!26, !27, !35}
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64)
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !29, line: 100, baseType: !30)
!29 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!30 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !29, line: 96, size: 64, elements: !31)
!31 = !{!32, !34}
!32 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !30, file: !29, line: 98, baseType: !33, size: 32)
!33 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !30, file: !29, line: 99, baseType: !33, size: 32, offset: 32)
!35 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!36 = !{!0, !7, !12, !17}
!37 = !{i32 7, !"Dwarf Version", i32 5}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{i32 1, !"wchar_size", i32 4}
!40 = !{i32 8, !"PIC Level", i32 2}
!41 = !{i32 7, !"PIE Level", i32 2}
!42 = !{i32 7, !"uwtable", i32 2}
!43 = !{i32 7, !"frame-pointer", i32 2}
!44 = !{!"clang version 16.0.0"}
!45 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !46, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!46 = !DISubroutineType(types: !47)
!47 = !{null, !26, !26}
!48 = !{}
!49 = !DILocalVariable(name: "p", arg: 1, scope: !45, file: !2, line: 4, type: !26)
!50 = !DILocation(line: 4, column: 22, scope: !45)
!51 = !DILocalVariable(name: "q", arg: 2, scope: !45, file: !2, line: 4, type: !26)
!52 = !DILocation(line: 4, column: 31, scope: !45)
!53 = !DILocation(line: 5, column: 3, scope: !45)
!54 = !DILocation(line: 6, column: 1, scope: !45)
!55 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !46, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!56 = !DILocalVariable(name: "p", arg: 1, scope: !55, file: !2, line: 8, type: !26)
!57 = !DILocation(line: 8, column: 25, scope: !55)
!58 = !DILocalVariable(name: "q", arg: 2, scope: !55, file: !2, line: 8, type: !26)
!59 = !DILocation(line: 8, column: 34, scope: !55)
!60 = !DILocation(line: 9, column: 3, scope: !55)
!61 = !DILocation(line: 10, column: 1, scope: !55)
!62 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !46, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!63 = !DILocalVariable(name: "p", arg: 1, scope: !62, file: !2, line: 12, type: !26)
!64 = !DILocation(line: 12, column: 21, scope: !62)
!65 = !DILocalVariable(name: "q", arg: 2, scope: !62, file: !2, line: 12, type: !26)
!66 = !DILocation(line: 12, column: 30, scope: !62)
!67 = !DILocation(line: 13, column: 3, scope: !62)
!68 = !DILocation(line: 14, column: 1, scope: !62)
!69 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !46, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!70 = !DILocalVariable(name: "p", arg: 1, scope: !69, file: !2, line: 16, type: !26)
!71 = !DILocation(line: 16, column: 20, scope: !69)
!72 = !DILocalVariable(name: "q", arg: 2, scope: !69, file: !2, line: 16, type: !26)
!73 = !DILocation(line: 16, column: 29, scope: !69)
!74 = !DILocation(line: 17, column: 3, scope: !69)
!75 = !DILocation(line: 18, column: 1, scope: !69)
!76 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !46, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!77 = !DILocalVariable(name: "p", arg: 1, scope: !76, file: !2, line: 20, type: !26)
!78 = !DILocation(line: 20, column: 34, scope: !76)
!79 = !DILocalVariable(name: "q", arg: 2, scope: !76, file: !2, line: 20, type: !26)
!80 = !DILocation(line: 20, column: 43, scope: !76)
!81 = !DILocation(line: 21, column: 3, scope: !76)
!82 = !DILocation(line: 22, column: 1, scope: !76)
!83 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !46, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!84 = !DILocalVariable(name: "p", arg: 1, scope: !83, file: !2, line: 24, type: !26)
!85 = !DILocation(line: 24, column: 33, scope: !83)
!86 = !DILocalVariable(name: "q", arg: 2, scope: !83, file: !2, line: 24, type: !26)
!87 = !DILocation(line: 24, column: 42, scope: !83)
!88 = !DILocation(line: 25, column: 3, scope: !83)
!89 = !DILocation(line: 26, column: 1, scope: !83)
!90 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !91, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!91 = !DISubroutineType(types: !92)
!92 = !{!26, !33}
!93 = !DILocalVariable(name: "n", arg: 1, scope: !90, file: !2, line: 29, type: !33)
!94 = !DILocation(line: 29, column: 22, scope: !90)
!95 = !DILocation(line: 30, column: 17, scope: !90)
!96 = !DILocation(line: 30, column: 10, scope: !90)
!97 = !DILocation(line: 30, column: 3, scope: !90)
!98 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !91, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!99 = !DILocalVariable(name: "n", arg: 1, scope: !98, file: !2, line: 33, type: !33)
!100 = !DILocation(line: 33, column: 28, scope: !98)
!101 = !DILocation(line: 34, column: 19, scope: !98)
!102 = !DILocation(line: 34, column: 12, scope: !98)
!103 = !DILocation(line: 34, column: 5, scope: !98)
!104 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !91, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!105 = !DILocalVariable(name: "n", arg: 1, scope: !104, file: !2, line: 37, type: !33)
!106 = !DILocation(line: 37, column: 21, scope: !104)
!107 = !DILocation(line: 38, column: 17, scope: !104)
!108 = !DILocation(line: 38, column: 10, scope: !104)
!109 = !DILocation(line: 38, column: 3, scope: !104)
!110 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !91, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!111 = !DILocalVariable(name: "n", arg: 1, scope: !110, file: !2, line: 41, type: !33)
!112 = !DILocation(line: 41, column: 21, scope: !110)
!113 = !DILocation(line: 42, column: 17, scope: !110)
!114 = !DILocation(line: 42, column: 10, scope: !110)
!115 = !DILocation(line: 42, column: 3, scope: !110)
!116 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !91, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!117 = !DILocalVariable(name: "n", arg: 1, scope: !116, file: !2, line: 45, type: !33)
!118 = !DILocation(line: 45, column: 21, scope: !116)
!119 = !DILocation(line: 46, column: 17, scope: !116)
!120 = !DILocation(line: 46, column: 10, scope: !116)
!121 = !DILocation(line: 46, column: 3, scope: !116)
!122 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !91, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!123 = !DILocalVariable(name: "n", arg: 1, scope: !122, file: !2, line: 49, type: !33)
!124 = !DILocation(line: 49, column: 21, scope: !122)
!125 = !DILocation(line: 50, column: 17, scope: !122)
!126 = !DILocation(line: 50, column: 10, scope: !122)
!127 = !DILocation(line: 50, column: 3, scope: !122)
!128 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !91, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!129 = !DILocalVariable(name: "n", arg: 1, scope: !128, file: !2, line: 53, type: !33)
!130 = !DILocation(line: 53, column: 21, scope: !128)
!131 = !DILocation(line: 54, column: 17, scope: !128)
!132 = !DILocation(line: 54, column: 10, scope: !128)
!133 = !DILocation(line: 54, column: 3, scope: !128)
!134 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !91, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!135 = !DILocalVariable(name: "n", arg: 1, scope: !134, file: !2, line: 57, type: !33)
!136 = !DILocation(line: 57, column: 18, scope: !134)
!137 = !DILocation(line: 58, column: 17, scope: !134)
!138 = !DILocation(line: 58, column: 10, scope: !134)
!139 = !DILocation(line: 58, column: 3, scope: !134)
!140 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !141, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!141 = !DISubroutineType(types: !142)
!142 = !{null, !33, !33}
!143 = !DILocalVariable(name: "id", arg: 1, scope: !140, file: !2, line: 67, type: !33)
!144 = !DILocation(line: 67, column: 20, scope: !140)
!145 = !DILocalVariable(name: "flags", arg: 2, scope: !140, file: !2, line: 67, type: !33)
!146 = !DILocation(line: 67, column: 28, scope: !140)
!147 = !DILocation(line: 68, column: 3, scope: !140)
!148 = !DILocation(line: 69, column: 1, scope: !140)
!149 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !150, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!150 = !DISubroutineType(types: !151)
!151 = !{null, !33, !152}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!153 = !DILocalVariable(name: "thdid", arg: 1, scope: !149, file: !2, line: 79, type: !33)
!154 = !DILocation(line: 79, column: 21, scope: !149)
!155 = !DILocalVariable(name: "cxt", arg: 2, scope: !149, file: !2, line: 79, type: !152)
!156 = !DILocation(line: 79, column: 34, scope: !149)
!157 = !DILocation(line: 81, column: 1, scope: !149)
!158 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !150, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!159 = !DILocalVariable(name: "thdid", arg: 1, scope: !158, file: !2, line: 82, type: !33)
!160 = !DILocation(line: 82, column: 21, scope: !158)
!161 = !DILocalVariable(name: "cxt", arg: 2, scope: !158, file: !2, line: 82, type: !152)
!162 = !DILocation(line: 82, column: 33, scope: !158)
!163 = !DILocation(line: 84, column: 1, scope: !158)
!164 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !165, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!165 = !DISubroutineType(types: !166)
!166 = !{null, !33, !152, !152}
!167 = !DILocalVariable(name: "thdid", arg: 1, scope: !164, file: !2, line: 85, type: !33)
!168 = !DILocation(line: 85, column: 26, scope: !164)
!169 = !DILocalVariable(name: "cxt", arg: 2, scope: !164, file: !2, line: 85, type: !152)
!170 = !DILocation(line: 85, column: 38, scope: !164)
!171 = !DILocalVariable(name: "lev", arg: 3, scope: !164, file: !2, line: 85, type: !152)
!172 = !DILocation(line: 85, column: 49, scope: !164)
!173 = !DILocation(line: 87, column: 1, scope: !164)
!174 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !175, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!175 = !DISubroutineType(types: !176)
!176 = !{null, !152}
!177 = !DILocalVariable(name: "lockname", arg: 1, scope: !174, file: !2, line: 89, type: !152)
!178 = !DILocation(line: 89, column: 17, scope: !174)
!179 = !DILocation(line: 91, column: 1, scope: !174)
!180 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !175, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!181 = !DILocalVariable(name: "str", arg: 1, scope: !180, file: !2, line: 93, type: !152)
!182 = !DILocation(line: 93, column: 18, scope: !180)
!183 = !DILocation(line: 94, column: 18, scope: !180)
!184 = !DILocation(line: 94, column: 3, scope: !180)
!185 = !DILocation(line: 95, column: 3, scope: !180)
!186 = !DILocation(line: 96, column: 3, scope: !180)
!187 = !DILocation(line: 97, column: 1, scope: !180)
!188 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !189, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!189 = !DISubroutineType(types: !190)
!190 = !{!26, !191}
!191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64)
!192 = !DILocalVariable(name: "p", arg: 1, scope: !188, file: !2, line: 100, type: !191)
!193 = !DILocation(line: 100, column: 24, scope: !188)
!194 = !DILocation(line: 101, column: 6, scope: !188)
!195 = !DILocation(line: 101, column: 8, scope: !188)
!196 = !DILocation(line: 102, column: 1, scope: !188)
!197 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !189, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!198 = !DILocalVariable(name: "p", arg: 1, scope: !197, file: !2, line: 104, type: !191)
!199 = !DILocation(line: 104, column: 20, scope: !197)
!200 = !DILocation(line: 105, column: 6, scope: !197)
!201 = !DILocation(line: 105, column: 8, scope: !197)
!202 = !DILocation(line: 106, column: 1, scope: !197)
!203 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !189, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!204 = !DILocalVariable(name: "p", arg: 1, scope: !203, file: !2, line: 110, type: !191)
!205 = !DILocation(line: 110, column: 22, scope: !203)
!206 = !DILocation(line: 111, column: 10, scope: !203)
!207 = !DILocation(line: 111, column: 5, scope: !203)
!208 = !DILocation(line: 112, column: 1, scope: !203)
!209 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !189, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!210 = !DILocalVariable(name: "p", arg: 1, scope: !209, file: !2, line: 115, type: !191)
!211 = !DILocation(line: 115, column: 24, scope: !209)
!212 = !DILocation(line: 116, column: 10, scope: !209)
!213 = !DILocation(line: 116, column: 5, scope: !209)
!214 = !DILocation(line: 117, column: 1, scope: !209)
!215 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !216, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!216 = !DISubroutineType(types: !217)
!217 = !{null}
!218 = !DILocation(line: 135, column: 20, scope: !215)
!219 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_11_bad", scope: !19, file: !19, line: 29, type: !216, scopeLine: 30, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!220 = !DILocalVariable(name: "data", scope: !219, file: !19, line: 31, type: !27)
!221 = !DILocation(line: 31, column: 21, scope: !219)
!222 = !DILocation(line: 33, column: 10, scope: !219)
!223 = !DILocation(line: 34, column: 8, scope: !224)
!224 = distinct !DILexicalBlock(scope: !219, file: !19, line: 34, column: 8)
!225 = !DILocation(line: 34, column: 8, scope: !219)
!226 = !DILocation(line: 36, column: 33, scope: !227)
!227 = distinct !DILexicalBlock(scope: !224, file: !19, line: 35, column: 5)
!228 = !DILocation(line: 36, column: 14, scope: !227)
!229 = !DILocation(line: 37, column: 13, scope: !230)
!230 = distinct !DILexicalBlock(scope: !227, file: !19, line: 37, column: 13)
!231 = !DILocation(line: 37, column: 18, scope: !230)
!232 = !DILocation(line: 37, column: 13, scope: !227)
!233 = !DILocation(line: 37, column: 28, scope: !234)
!234 = distinct !DILexicalBlock(scope: !230, file: !19, line: 37, column: 27)
!235 = !DILocalVariable(name: "i", scope: !236, file: !19, line: 39, type: !237)
!236 = distinct !DILexicalBlock(scope: !227, file: !19, line: 38, column: 9)
!237 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !238, line: 46, baseType: !239)
!238 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!239 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!240 = !DILocation(line: 39, column: 20, scope: !236)
!241 = !DILocation(line: 40, column: 19, scope: !242)
!242 = distinct !DILexicalBlock(scope: !236, file: !19, line: 40, column: 13)
!243 = !DILocation(line: 40, column: 17, scope: !242)
!244 = !DILocation(line: 40, column: 24, scope: !245)
!245 = distinct !DILexicalBlock(scope: !242, file: !19, line: 40, column: 13)
!246 = !DILocation(line: 40, column: 26, scope: !245)
!247 = !DILocation(line: 40, column: 13, scope: !242)
!248 = !DILocation(line: 42, column: 17, scope: !249)
!249 = distinct !DILexicalBlock(scope: !245, file: !19, line: 41, column: 13)
!250 = !DILocation(line: 42, column: 22, scope: !249)
!251 = !DILocation(line: 42, column: 25, scope: !249)
!252 = !DILocation(line: 42, column: 32, scope: !249)
!253 = !DILocation(line: 43, column: 17, scope: !249)
!254 = !DILocation(line: 43, column: 22, scope: !249)
!255 = !DILocation(line: 43, column: 25, scope: !249)
!256 = !DILocation(line: 43, column: 32, scope: !249)
!257 = !DILocation(line: 44, column: 13, scope: !249)
!258 = !DILocation(line: 40, column: 34, scope: !245)
!259 = !DILocation(line: 40, column: 13, scope: !245)
!260 = distinct !{!260, !247, !261, !262}
!261 = !DILocation(line: 44, column: 13, scope: !242)
!262 = !{!"llvm.loop.mustprogress"}
!263 = !DILocation(line: 47, column: 14, scope: !227)
!264 = !DILocation(line: 47, column: 9, scope: !227)
!265 = !DILocation(line: 48, column: 5, scope: !227)
!266 = !DILocation(line: 49, column: 8, scope: !267)
!267 = distinct !DILexicalBlock(scope: !219, file: !19, line: 49, column: 8)
!268 = !DILocation(line: 49, column: 8, scope: !219)
!269 = !DILocation(line: 52, column: 17, scope: !270)
!270 = distinct !DILexicalBlock(scope: !267, file: !19, line: 50, column: 5)
!271 = !DILocation(line: 52, column: 9, scope: !270)
!272 = !DILocation(line: 54, column: 5, scope: !270)
!273 = !DILocation(line: 55, column: 1, scope: !219)
!274 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_11_good", scope: !19, file: !19, line: 184, type: !216, scopeLine: 185, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!275 = !DILocation(line: 186, column: 5, scope: !274)
!276 = !DILocation(line: 187, column: 5, scope: !274)
!277 = !DILocation(line: 188, column: 5, scope: !274)
!278 = !DILocation(line: 189, column: 5, scope: !274)
!279 = !DILocation(line: 190, column: 1, scope: !274)
!280 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 199, type: !281, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!281 = !DISubroutineType(types: !282)
!282 = !{!33, !33, !283}
!283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!284 = !DILocalVariable(name: "argc", arg: 1, scope: !280, file: !19, line: 199, type: !33)
!285 = !DILocation(line: 199, column: 14, scope: !280)
!286 = !DILocalVariable(name: "argv", arg: 2, scope: !280, file: !19, line: 199, type: !283)
!287 = !DILocation(line: 199, column: 27, scope: !280)
!288 = !DILocation(line: 202, column: 22, scope: !280)
!289 = !DILocation(line: 202, column: 12, scope: !280)
!290 = !DILocation(line: 202, column: 5, scope: !280)
!291 = !DILocation(line: 203, column: 5, scope: !280)
!292 = !DILocation(line: 204, column: 5, scope: !280)
!293 = !DILocation(line: 205, column: 5, scope: !280)
!294 = distinct !DISubprogram(name: "goodB2G1", scope: !19, file: !19, line: 59, type: !216, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !48)
!295 = !DILocalVariable(name: "data", scope: !294, file: !19, line: 61, type: !27)
!296 = !DILocation(line: 61, column: 21, scope: !294)
!297 = !DILocation(line: 63, column: 10, scope: !294)
!298 = !DILocation(line: 64, column: 8, scope: !299)
!299 = distinct !DILexicalBlock(scope: !294, file: !19, line: 64, column: 8)
!300 = !DILocation(line: 64, column: 8, scope: !294)
!301 = !DILocation(line: 66, column: 33, scope: !302)
!302 = distinct !DILexicalBlock(scope: !299, file: !19, line: 65, column: 5)
!303 = !DILocation(line: 66, column: 14, scope: !302)
!304 = !DILocation(line: 67, column: 13, scope: !305)
!305 = distinct !DILexicalBlock(scope: !302, file: !19, line: 67, column: 13)
!306 = !DILocation(line: 67, column: 18, scope: !305)
!307 = !DILocation(line: 67, column: 13, scope: !302)
!308 = !DILocation(line: 67, column: 28, scope: !309)
!309 = distinct !DILexicalBlock(scope: !305, file: !19, line: 67, column: 27)
!310 = !DILocalVariable(name: "i", scope: !311, file: !19, line: 69, type: !237)
!311 = distinct !DILexicalBlock(scope: !302, file: !19, line: 68, column: 9)
!312 = !DILocation(line: 69, column: 20, scope: !311)
!313 = !DILocation(line: 70, column: 19, scope: !314)
!314 = distinct !DILexicalBlock(scope: !311, file: !19, line: 70, column: 13)
!315 = !DILocation(line: 70, column: 17, scope: !314)
!316 = !DILocation(line: 70, column: 24, scope: !317)
!317 = distinct !DILexicalBlock(scope: !314, file: !19, line: 70, column: 13)
!318 = !DILocation(line: 70, column: 26, scope: !317)
!319 = !DILocation(line: 70, column: 13, scope: !314)
!320 = !DILocation(line: 72, column: 17, scope: !321)
!321 = distinct !DILexicalBlock(scope: !317, file: !19, line: 71, column: 13)
!322 = !DILocation(line: 72, column: 22, scope: !321)
!323 = !DILocation(line: 72, column: 25, scope: !321)
!324 = !DILocation(line: 72, column: 32, scope: !321)
!325 = !DILocation(line: 73, column: 17, scope: !321)
!326 = !DILocation(line: 73, column: 22, scope: !321)
!327 = !DILocation(line: 73, column: 25, scope: !321)
!328 = !DILocation(line: 73, column: 32, scope: !321)
!329 = !DILocation(line: 74, column: 13, scope: !321)
!330 = !DILocation(line: 70, column: 34, scope: !317)
!331 = !DILocation(line: 70, column: 13, scope: !317)
!332 = distinct !{!332, !319, !333, !262}
!333 = !DILocation(line: 74, column: 13, scope: !314)
!334 = !DILocation(line: 77, column: 14, scope: !302)
!335 = !DILocation(line: 77, column: 9, scope: !302)
!336 = !DILocation(line: 78, column: 5, scope: !302)
!337 = !DILocation(line: 79, column: 8, scope: !338)
!338 = distinct !DILexicalBlock(scope: !294, file: !19, line: 79, column: 8)
!339 = !DILocation(line: 79, column: 8, scope: !294)
!340 = !DILocation(line: 82, column: 9, scope: !341)
!341 = distinct !DILexicalBlock(scope: !338, file: !19, line: 80, column: 5)
!342 = !DILocation(line: 83, column: 5, scope: !341)
!343 = !DILocation(line: 91, column: 1, scope: !294)
!344 = distinct !DISubprogram(name: "goodB2G2", scope: !19, file: !19, line: 94, type: !216, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !48)
!345 = !DILocalVariable(name: "data", scope: !344, file: !19, line: 96, type: !27)
!346 = !DILocation(line: 96, column: 21, scope: !344)
!347 = !DILocation(line: 98, column: 10, scope: !344)
!348 = !DILocation(line: 99, column: 8, scope: !349)
!349 = distinct !DILexicalBlock(scope: !344, file: !19, line: 99, column: 8)
!350 = !DILocation(line: 99, column: 8, scope: !344)
!351 = !DILocation(line: 101, column: 33, scope: !352)
!352 = distinct !DILexicalBlock(scope: !349, file: !19, line: 100, column: 5)
!353 = !DILocation(line: 101, column: 14, scope: !352)
!354 = !DILocation(line: 102, column: 13, scope: !355)
!355 = distinct !DILexicalBlock(scope: !352, file: !19, line: 102, column: 13)
!356 = !DILocation(line: 102, column: 18, scope: !355)
!357 = !DILocation(line: 102, column: 13, scope: !352)
!358 = !DILocation(line: 102, column: 28, scope: !359)
!359 = distinct !DILexicalBlock(scope: !355, file: !19, line: 102, column: 27)
!360 = !DILocalVariable(name: "i", scope: !361, file: !19, line: 104, type: !237)
!361 = distinct !DILexicalBlock(scope: !352, file: !19, line: 103, column: 9)
!362 = !DILocation(line: 104, column: 20, scope: !361)
!363 = !DILocation(line: 105, column: 19, scope: !364)
!364 = distinct !DILexicalBlock(scope: !361, file: !19, line: 105, column: 13)
!365 = !DILocation(line: 105, column: 17, scope: !364)
!366 = !DILocation(line: 105, column: 24, scope: !367)
!367 = distinct !DILexicalBlock(scope: !364, file: !19, line: 105, column: 13)
!368 = !DILocation(line: 105, column: 26, scope: !367)
!369 = !DILocation(line: 105, column: 13, scope: !364)
!370 = !DILocation(line: 107, column: 17, scope: !371)
!371 = distinct !DILexicalBlock(scope: !367, file: !19, line: 106, column: 13)
!372 = !DILocation(line: 107, column: 22, scope: !371)
!373 = !DILocation(line: 107, column: 25, scope: !371)
!374 = !DILocation(line: 107, column: 32, scope: !371)
!375 = !DILocation(line: 108, column: 17, scope: !371)
!376 = !DILocation(line: 108, column: 22, scope: !371)
!377 = !DILocation(line: 108, column: 25, scope: !371)
!378 = !DILocation(line: 108, column: 32, scope: !371)
!379 = !DILocation(line: 109, column: 13, scope: !371)
!380 = !DILocation(line: 105, column: 34, scope: !367)
!381 = !DILocation(line: 105, column: 13, scope: !367)
!382 = distinct !{!382, !369, !383, !262}
!383 = !DILocation(line: 109, column: 13, scope: !364)
!384 = !DILocation(line: 112, column: 14, scope: !352)
!385 = !DILocation(line: 112, column: 9, scope: !352)
!386 = !DILocation(line: 113, column: 5, scope: !352)
!387 = !DILocation(line: 114, column: 8, scope: !388)
!388 = distinct !DILexicalBlock(scope: !344, file: !19, line: 114, column: 8)
!389 = !DILocation(line: 114, column: 8, scope: !344)
!390 = !DILocation(line: 120, column: 5, scope: !391)
!391 = distinct !DILexicalBlock(scope: !388, file: !19, line: 115, column: 5)
!392 = !DILocation(line: 121, column: 1, scope: !344)
!393 = distinct !DISubprogram(name: "goodG2B1", scope: !19, file: !19, line: 124, type: !216, scopeLine: 125, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !48)
!394 = !DILocalVariable(name: "data", scope: !393, file: !19, line: 126, type: !27)
!395 = !DILocation(line: 126, column: 21, scope: !393)
!396 = !DILocation(line: 128, column: 10, scope: !393)
!397 = !DILocation(line: 129, column: 8, scope: !398)
!398 = distinct !DILexicalBlock(scope: !393, file: !19, line: 129, column: 8)
!399 = !DILocation(line: 129, column: 8, scope: !393)
!400 = !DILocation(line: 132, column: 9, scope: !401)
!401 = distinct !DILexicalBlock(scope: !398, file: !19, line: 130, column: 5)
!402 = !DILocation(line: 133, column: 5, scope: !401)
!403 = !DILocation(line: 136, column: 33, scope: !404)
!404 = distinct !DILexicalBlock(scope: !398, file: !19, line: 135, column: 5)
!405 = !DILocation(line: 136, column: 14, scope: !404)
!406 = !DILocation(line: 137, column: 13, scope: !407)
!407 = distinct !DILexicalBlock(scope: !404, file: !19, line: 137, column: 13)
!408 = !DILocation(line: 137, column: 18, scope: !407)
!409 = !DILocation(line: 137, column: 13, scope: !404)
!410 = !DILocation(line: 137, column: 28, scope: !411)
!411 = distinct !DILexicalBlock(scope: !407, file: !19, line: 137, column: 27)
!412 = !DILocalVariable(name: "i", scope: !413, file: !19, line: 139, type: !237)
!413 = distinct !DILexicalBlock(scope: !404, file: !19, line: 138, column: 9)
!414 = !DILocation(line: 139, column: 20, scope: !413)
!415 = !DILocation(line: 140, column: 19, scope: !416)
!416 = distinct !DILexicalBlock(scope: !413, file: !19, line: 140, column: 13)
!417 = !DILocation(line: 140, column: 17, scope: !416)
!418 = !DILocation(line: 140, column: 24, scope: !419)
!419 = distinct !DILexicalBlock(scope: !416, file: !19, line: 140, column: 13)
!420 = !DILocation(line: 140, column: 26, scope: !419)
!421 = !DILocation(line: 140, column: 13, scope: !416)
!422 = !DILocation(line: 142, column: 17, scope: !423)
!423 = distinct !DILexicalBlock(scope: !419, file: !19, line: 141, column: 13)
!424 = !DILocation(line: 142, column: 22, scope: !423)
!425 = !DILocation(line: 142, column: 25, scope: !423)
!426 = !DILocation(line: 142, column: 32, scope: !423)
!427 = !DILocation(line: 143, column: 17, scope: !423)
!428 = !DILocation(line: 143, column: 22, scope: !423)
!429 = !DILocation(line: 143, column: 25, scope: !423)
!430 = !DILocation(line: 143, column: 32, scope: !423)
!431 = !DILocation(line: 144, column: 13, scope: !423)
!432 = !DILocation(line: 140, column: 34, scope: !419)
!433 = !DILocation(line: 140, column: 13, scope: !419)
!434 = distinct !{!434, !421, !435, !262}
!435 = !DILocation(line: 144, column: 13, scope: !416)
!436 = !DILocation(line: 148, column: 8, scope: !437)
!437 = distinct !DILexicalBlock(scope: !393, file: !19, line: 148, column: 8)
!438 = !DILocation(line: 148, column: 8, scope: !393)
!439 = !DILocation(line: 151, column: 21, scope: !440)
!440 = distinct !DILexicalBlock(scope: !437, file: !19, line: 149, column: 5)
!441 = !DILocation(line: 151, column: 9, scope: !440)
!442 = !DILocation(line: 153, column: 5, scope: !440)
!443 = !DILocation(line: 154, column: 1, scope: !393)
!444 = distinct !DISubprogram(name: "goodG2B2", scope: !19, file: !19, line: 157, type: !216, scopeLine: 158, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !48)
!445 = !DILocalVariable(name: "data", scope: !444, file: !19, line: 159, type: !27)
!446 = !DILocation(line: 159, column: 21, scope: !444)
!447 = !DILocation(line: 161, column: 10, scope: !444)
!448 = !DILocation(line: 162, column: 8, scope: !449)
!449 = distinct !DILexicalBlock(scope: !444, file: !19, line: 162, column: 8)
!450 = !DILocation(line: 162, column: 8, scope: !444)
!451 = !DILocation(line: 164, column: 33, scope: !452)
!452 = distinct !DILexicalBlock(scope: !449, file: !19, line: 163, column: 5)
!453 = !DILocation(line: 164, column: 14, scope: !452)
!454 = !DILocation(line: 165, column: 13, scope: !455)
!455 = distinct !DILexicalBlock(scope: !452, file: !19, line: 165, column: 13)
!456 = !DILocation(line: 165, column: 18, scope: !455)
!457 = !DILocation(line: 165, column: 13, scope: !452)
!458 = !DILocation(line: 165, column: 28, scope: !459)
!459 = distinct !DILexicalBlock(scope: !455, file: !19, line: 165, column: 27)
!460 = !DILocalVariable(name: "i", scope: !461, file: !19, line: 167, type: !237)
!461 = distinct !DILexicalBlock(scope: !452, file: !19, line: 166, column: 9)
!462 = !DILocation(line: 167, column: 20, scope: !461)
!463 = !DILocation(line: 168, column: 19, scope: !464)
!464 = distinct !DILexicalBlock(scope: !461, file: !19, line: 168, column: 13)
!465 = !DILocation(line: 168, column: 17, scope: !464)
!466 = !DILocation(line: 168, column: 24, scope: !467)
!467 = distinct !DILexicalBlock(scope: !464, file: !19, line: 168, column: 13)
!468 = !DILocation(line: 168, column: 26, scope: !467)
!469 = !DILocation(line: 168, column: 13, scope: !464)
!470 = !DILocation(line: 170, column: 17, scope: !471)
!471 = distinct !DILexicalBlock(scope: !467, file: !19, line: 169, column: 13)
!472 = !DILocation(line: 170, column: 22, scope: !471)
!473 = !DILocation(line: 170, column: 25, scope: !471)
!474 = !DILocation(line: 170, column: 32, scope: !471)
!475 = !DILocation(line: 171, column: 17, scope: !471)
!476 = !DILocation(line: 171, column: 22, scope: !471)
!477 = !DILocation(line: 171, column: 25, scope: !471)
!478 = !DILocation(line: 171, column: 32, scope: !471)
!479 = !DILocation(line: 172, column: 13, scope: !471)
!480 = !DILocation(line: 168, column: 34, scope: !467)
!481 = !DILocation(line: 168, column: 13, scope: !467)
!482 = distinct !{!482, !469, !483, !262}
!483 = !DILocation(line: 172, column: 13, scope: !464)
!484 = !DILocation(line: 175, column: 5, scope: !452)
!485 = !DILocation(line: 176, column: 8, scope: !486)
!486 = distinct !DILexicalBlock(scope: !444, file: !19, line: 176, column: 8)
!487 = !DILocation(line: 176, column: 8, scope: !444)
!488 = !DILocation(line: 179, column: 21, scope: !489)
!489 = distinct !DILexicalBlock(scope: !486, file: !19, line: 177, column: 5)
!490 = !DILocation(line: 179, column: 9, scope: !489)
!491 = !DILocation(line: 181, column: 5, scope: !489)
!492 = !DILocation(line: 182, column: 1, scope: !444)
