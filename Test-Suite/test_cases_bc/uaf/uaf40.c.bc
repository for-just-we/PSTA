; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/uaf/uaf40.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf40.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@staticFive = internal global i32 5, align 4, !dbg !17
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !33

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !47 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !51, metadata !DIExpression()), !dbg !52
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !53, metadata !DIExpression()), !dbg !54
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !55
  ret void, !dbg !56
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !57 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !58, metadata !DIExpression()), !dbg !59
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !60, metadata !DIExpression()), !dbg !61
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !62
  ret void, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !64 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !65, metadata !DIExpression()), !dbg !66
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !71 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !72, metadata !DIExpression()), !dbg !73
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !76
  ret void, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !78 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !79, metadata !DIExpression()), !dbg !80
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !83
  ret void, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !85 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !86, metadata !DIExpression()), !dbg !87
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !90
  ret void, !dbg !91
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !92 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !95, metadata !DIExpression()), !dbg !96
  %0 = load i32, ptr %n.addr, align 4, !dbg !97
  %conv = sext i32 %0 to i64, !dbg !97
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !98
  ret ptr %call, !dbg !99
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !100 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !101, metadata !DIExpression()), !dbg !102
  %0 = load i32, ptr %n.addr, align 4, !dbg !103
  %conv = sext i32 %0 to i64, !dbg !103
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !104
  ret ptr %call, !dbg !105
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !106 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !107, metadata !DIExpression()), !dbg !108
  %0 = load i32, ptr %n.addr, align 4, !dbg !109
  %conv = sext i32 %0 to i64, !dbg !109
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !110
  ret ptr %call, !dbg !111
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !112 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %0 = load i32, ptr %n.addr, align 4, !dbg !115
  %conv = sext i32 %0 to i64, !dbg !115
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !116
  ret ptr %call, !dbg !117
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !118 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !119, metadata !DIExpression()), !dbg !120
  %0 = load i32, ptr %n.addr, align 4, !dbg !121
  %conv = sext i32 %0 to i64, !dbg !121
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !122
  ret ptr %call, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !124 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !125, metadata !DIExpression()), !dbg !126
  %0 = load i32, ptr %n.addr, align 4, !dbg !127
  %conv = sext i32 %0 to i64, !dbg !127
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !128
  ret ptr %call, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !130 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !131, metadata !DIExpression()), !dbg !132
  %0 = load i32, ptr %n.addr, align 4, !dbg !133
  %conv = sext i32 %0 to i64, !dbg !133
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !134
  ret ptr %call, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !136 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !137, metadata !DIExpression()), !dbg !138
  %0 = load i32, ptr %n.addr, align 4, !dbg !139
  %conv = sext i32 %0 to i64, !dbg !139
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !140
  ret ptr %call, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !142 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !145, metadata !DIExpression()), !dbg !146
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !147, metadata !DIExpression()), !dbg !148
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !149
  ret void, !dbg !150
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !151 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !155, metadata !DIExpression()), !dbg !156
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !157, metadata !DIExpression()), !dbg !158
  ret void, !dbg !159
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !160 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !161, metadata !DIExpression()), !dbg !162
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !163, metadata !DIExpression()), !dbg !164
  ret void, !dbg !165
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !166 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !169, metadata !DIExpression()), !dbg !170
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !171, metadata !DIExpression()), !dbg !172
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !173, metadata !DIExpression()), !dbg !174
  ret void, !dbg !175
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !176 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !179, metadata !DIExpression()), !dbg !180
  ret void, !dbg !181
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !182 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !183, metadata !DIExpression()), !dbg !184
  %0 = load ptr, ptr %str.addr, align 8, !dbg !185
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !186
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !187
  %call2 = call i32 @getchar(), !dbg !188
  ret void, !dbg !189
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !190 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !194, metadata !DIExpression()), !dbg !195
  %0 = load ptr, ptr %p.addr, align 8, !dbg !196
  store i32 0, ptr %0, align 4, !dbg !197
  %1 = load ptr, ptr %retval, align 8, !dbg !198
  ret ptr %1, !dbg !198
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !199 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !200, metadata !DIExpression()), !dbg !201
  %0 = load ptr, ptr %p.addr, align 8, !dbg !202
  store i32 0, ptr %0, align 4, !dbg !203
  %1 = load ptr, ptr %retval, align 8, !dbg !204
  ret ptr %1, !dbg !204
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !205 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !206, metadata !DIExpression()), !dbg !207
  %0 = load ptr, ptr %p.addr, align 8, !dbg !208
  call void @free(ptr noundef %0) #7, !dbg !209
  %1 = load ptr, ptr %retval, align 8, !dbg !210
  ret ptr %1, !dbg !210
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !211 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !212, metadata !DIExpression()), !dbg !213
  %0 = load ptr, ptr %p.addr, align 8, !dbg !214
  call void @free(ptr noundef %0) #7, !dbg !215
  %1 = load ptr, ptr %retval, align 8, !dbg !216
  ret ptr %1, !dbg !216
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !217 {
entry:
  ret void, !dbg !220
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_07_bad() #0 !dbg !221 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !222, metadata !DIExpression()), !dbg !223
  store ptr null, ptr %data, align 8, !dbg !224
  %0 = load i32, ptr @staticFive, align 4, !dbg !225
  %cmp = icmp eq i32 %0, 5, !dbg !227
  br i1 %cmp, label %if.then, label %if.end5, !dbg !228

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !229
  store ptr %call, ptr %data, align 8, !dbg !231
  %1 = load ptr, ptr %data, align 8, !dbg !232
  %cmp1 = icmp eq ptr %1, null, !dbg !234
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !235

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !236
  unreachable, !dbg !236

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !238, metadata !DIExpression()), !dbg !243
  store i64 0, ptr %i, align 8, !dbg !244
  br label %for.cond, !dbg !246

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !247
  %cmp3 = icmp ult i64 %2, 100, !dbg !249
  br i1 %cmp3, label %for.body, label %for.end, !dbg !250

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !251
  %4 = load i64, ptr %i, align 8, !dbg !253
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 %4, !dbg !251
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !254
  store i32 1, ptr %intOne, align 4, !dbg !255
  %5 = load ptr, ptr %data, align 8, !dbg !256
  %6 = load i64, ptr %i, align 8, !dbg !257
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %5, i64 %6, !dbg !256
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !258
  store i32 2, ptr %intTwo, align 4, !dbg !259
  br label %for.inc, !dbg !260

for.inc:                                          ; preds = %for.body
  %7 = load i64, ptr %i, align 8, !dbg !261
  %inc = add i64 %7, 1, !dbg !261
  store i64 %inc, ptr %i, align 8, !dbg !261
  br label %for.cond, !dbg !262, !llvm.loop !263

for.end:                                          ; preds = %for.cond
  %8 = load ptr, ptr %data, align 8, !dbg !266
  call void @free(ptr noundef %8) #7, !dbg !267
  br label %if.end5, !dbg !268

if.end5:                                          ; preds = %for.end, %entry
  %9 = load i32, ptr @staticFive, align 4, !dbg !269
  %cmp6 = icmp eq i32 %9, 5, !dbg !271
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !272

if.then7:                                         ; preds = %if.end5
  %10 = load ptr, ptr %data, align 8, !dbg !273
  %call8 = call ptr @UAFFUNC(ptr noundef %10), !dbg !275
  br label %if.end9, !dbg !276

if.end9:                                          ; preds = %if.then7, %if.end5
  ret void, !dbg !277
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_07_good() #0 !dbg !278 {
entry:
  call void @goodB2G1(), !dbg !279
  call void @goodB2G2(), !dbg !280
  call void @goodG2B1(), !dbg !281
  call void @goodG2B2(), !dbg !282
  ret void, !dbg !283
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !284 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !288, metadata !DIExpression()), !dbg !289
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !290, metadata !DIExpression()), !dbg !291
  %call = call i64 @time(ptr noundef null) #7, !dbg !292
  %conv = trunc i64 %call to i32, !dbg !293
  call void @srand(i32 noundef %conv) #7, !dbg !294
  call void @CWE416_Use_After_Free__malloc_free_struct_07_good(), !dbg !295
  call void @CWE416_Use_After_Free__malloc_free_struct_07_bad(), !dbg !296
  ret i32 0, !dbg !297
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !298 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !299, metadata !DIExpression()), !dbg !300
  store ptr null, ptr %data, align 8, !dbg !301
  %0 = load i32, ptr @staticFive, align 4, !dbg !302
  %cmp = icmp eq i32 %0, 5, !dbg !304
  br i1 %cmp, label %if.then, label %if.end5, !dbg !305

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !306
  store ptr %call, ptr %data, align 8, !dbg !308
  %1 = load ptr, ptr %data, align 8, !dbg !309
  %cmp1 = icmp eq ptr %1, null, !dbg !311
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !312

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !313
  unreachable, !dbg !313

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !315, metadata !DIExpression()), !dbg !317
  store i64 0, ptr %i, align 8, !dbg !318
  br label %for.cond, !dbg !320

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !321
  %cmp3 = icmp ult i64 %2, 100, !dbg !323
  br i1 %cmp3, label %for.body, label %for.end, !dbg !324

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !325
  %4 = load i64, ptr %i, align 8, !dbg !327
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 %4, !dbg !325
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !328
  store i32 1, ptr %intOne, align 4, !dbg !329
  %5 = load ptr, ptr %data, align 8, !dbg !330
  %6 = load i64, ptr %i, align 8, !dbg !331
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %5, i64 %6, !dbg !330
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !332
  store i32 2, ptr %intTwo, align 4, !dbg !333
  br label %for.inc, !dbg !334

for.inc:                                          ; preds = %for.body
  %7 = load i64, ptr %i, align 8, !dbg !335
  %inc = add i64 %7, 1, !dbg !335
  store i64 %inc, ptr %i, align 8, !dbg !335
  br label %for.cond, !dbg !336, !llvm.loop !337

for.end:                                          ; preds = %for.cond
  %8 = load ptr, ptr %data, align 8, !dbg !339
  call void @free(ptr noundef %8) #7, !dbg !340
  br label %if.end5, !dbg !341

if.end5:                                          ; preds = %for.end, %entry
  %9 = load i32, ptr @staticFive, align 4, !dbg !342
  %cmp6 = icmp ne i32 %9, 5, !dbg !344
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !345

if.then7:                                         ; preds = %if.end5
  call void @printLine(ptr noundef @.str.3), !dbg !346
  br label %if.end8, !dbg !348

if.else:                                          ; preds = %if.end5
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then7
  ret void, !dbg !349
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !350 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !351, metadata !DIExpression()), !dbg !352
  store ptr null, ptr %data, align 8, !dbg !353
  %0 = load i32, ptr @staticFive, align 4, !dbg !354
  %cmp = icmp eq i32 %0, 5, !dbg !356
  br i1 %cmp, label %if.then, label %if.end5, !dbg !357

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !358
  store ptr %call, ptr %data, align 8, !dbg !360
  %1 = load ptr, ptr %data, align 8, !dbg !361
  %cmp1 = icmp eq ptr %1, null, !dbg !363
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !364

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !365
  unreachable, !dbg !365

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !367, metadata !DIExpression()), !dbg !369
  store i64 0, ptr %i, align 8, !dbg !370
  br label %for.cond, !dbg !372

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !373
  %cmp3 = icmp ult i64 %2, 100, !dbg !375
  br i1 %cmp3, label %for.body, label %for.end, !dbg !376

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !377
  %4 = load i64, ptr %i, align 8, !dbg !379
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 %4, !dbg !377
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !380
  store i32 1, ptr %intOne, align 4, !dbg !381
  %5 = load ptr, ptr %data, align 8, !dbg !382
  %6 = load i64, ptr %i, align 8, !dbg !383
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %5, i64 %6, !dbg !382
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !384
  store i32 2, ptr %intTwo, align 4, !dbg !385
  br label %for.inc, !dbg !386

for.inc:                                          ; preds = %for.body
  %7 = load i64, ptr %i, align 8, !dbg !387
  %inc = add i64 %7, 1, !dbg !387
  store i64 %inc, ptr %i, align 8, !dbg !387
  br label %for.cond, !dbg !388, !llvm.loop !389

for.end:                                          ; preds = %for.cond
  %8 = load ptr, ptr %data, align 8, !dbg !391
  call void @free(ptr noundef %8) #7, !dbg !392
  br label %if.end5, !dbg !393

if.end5:                                          ; preds = %for.end, %entry
  %9 = load i32, ptr @staticFive, align 4, !dbg !394
  %cmp6 = icmp eq i32 %9, 5, !dbg !396
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !397

if.then7:                                         ; preds = %if.end5
  br label %if.end8, !dbg !398

if.end8:                                          ; preds = %if.then7, %if.end5
  ret void, !dbg !400
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !401 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !402, metadata !DIExpression()), !dbg !403
  store ptr null, ptr %data, align 8, !dbg !404
  %0 = load i32, ptr @staticFive, align 4, !dbg !405
  %cmp = icmp ne i32 %0, 5, !dbg !407
  br i1 %cmp, label %if.then, label %if.else, !dbg !408

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !409
  br label %if.end5, !dbg !411

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !412
  store ptr %call, ptr %data, align 8, !dbg !414
  %1 = load ptr, ptr %data, align 8, !dbg !415
  %cmp1 = icmp eq ptr %1, null, !dbg !417
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !418

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !419
  unreachable, !dbg !419

if.end:                                           ; preds = %if.else
  call void @llvm.dbg.declare(metadata ptr %i, metadata !421, metadata !DIExpression()), !dbg !423
  store i64 0, ptr %i, align 8, !dbg !424
  br label %for.cond, !dbg !426

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !427
  %cmp3 = icmp ult i64 %2, 100, !dbg !429
  br i1 %cmp3, label %for.body, label %for.end, !dbg !430

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !431
  %4 = load i64, ptr %i, align 8, !dbg !433
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 %4, !dbg !431
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !434
  store i32 1, ptr %intOne, align 4, !dbg !435
  %5 = load ptr, ptr %data, align 8, !dbg !436
  %6 = load i64, ptr %i, align 8, !dbg !437
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %5, i64 %6, !dbg !436
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !438
  store i32 2, ptr %intTwo, align 4, !dbg !439
  br label %for.inc, !dbg !440

for.inc:                                          ; preds = %for.body
  %7 = load i64, ptr %i, align 8, !dbg !441
  %inc = add i64 %7, 1, !dbg !441
  store i64 %inc, ptr %i, align 8, !dbg !441
  br label %for.cond, !dbg !442, !llvm.loop !443

for.end:                                          ; preds = %for.cond
  br label %if.end5

if.end5:                                          ; preds = %for.end, %if.then
  %8 = load i32, ptr @staticFive, align 4, !dbg !445
  %cmp6 = icmp eq i32 %8, 5, !dbg !447
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !448

if.then7:                                         ; preds = %if.end5
  %9 = load ptr, ptr %data, align 8, !dbg !449
  %call8 = call ptr @SAFEUAFFUNC(ptr noundef %9), !dbg !451
  br label %if.end9, !dbg !452

if.end9:                                          ; preds = %if.then7, %if.end5
  ret void, !dbg !453
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !454 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !455, metadata !DIExpression()), !dbg !456
  store ptr null, ptr %data, align 8, !dbg !457
  %0 = load i32, ptr @staticFive, align 4, !dbg !458
  %cmp = icmp eq i32 %0, 5, !dbg !460
  br i1 %cmp, label %if.then, label %if.end5, !dbg !461

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !462
  store ptr %call, ptr %data, align 8, !dbg !464
  %1 = load ptr, ptr %data, align 8, !dbg !465
  %cmp1 = icmp eq ptr %1, null, !dbg !467
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !468

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !469
  unreachable, !dbg !469

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !471, metadata !DIExpression()), !dbg !473
  store i64 0, ptr %i, align 8, !dbg !474
  br label %for.cond, !dbg !476

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !477
  %cmp3 = icmp ult i64 %2, 100, !dbg !479
  br i1 %cmp3, label %for.body, label %for.end, !dbg !480

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !481
  %4 = load i64, ptr %i, align 8, !dbg !483
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 %4, !dbg !481
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !484
  store i32 1, ptr %intOne, align 4, !dbg !485
  %5 = load ptr, ptr %data, align 8, !dbg !486
  %6 = load i64, ptr %i, align 8, !dbg !487
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %5, i64 %6, !dbg !486
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !488
  store i32 2, ptr %intTwo, align 4, !dbg !489
  br label %for.inc, !dbg !490

for.inc:                                          ; preds = %for.body
  %7 = load i64, ptr %i, align 8, !dbg !491
  %inc = add i64 %7, 1, !dbg !491
  store i64 %inc, ptr %i, align 8, !dbg !491
  br label %for.cond, !dbg !492, !llvm.loop !493

for.end:                                          ; preds = %for.cond
  br label %if.end5, !dbg !495

if.end5:                                          ; preds = %for.end, %entry
  %8 = load i32, ptr @staticFive, align 4, !dbg !496
  %cmp6 = icmp eq i32 %8, 5, !dbg !498
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !499

if.then7:                                         ; preds = %if.end5
  %9 = load ptr, ptr %data, align 8, !dbg !500
  %call8 = call ptr @SAFEUAFFUNC(ptr noundef %9), !dbg !502
  br label %if.end9, !dbg !503

if.end9:                                          ; preds = %if.then7, %if.end5
  ret void, !dbg !504
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!39, !40, !41, !42, !43, !44, !45}
!llvm.ident = !{!46}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "staticFive", scope: !19, file: !35, line: 33, type: !29, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !32, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf40.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "209eabb0704ecefb786fce028d542aeb")
!21 = !{!22, !23, !31}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !25, line: 100, baseType: !26)
!25 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !25, line: 96, size: 64, elements: !27)
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !26, file: !25, line: 98, baseType: !29, size: 32)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !26, file: !25, line: 99, baseType: !29, size: 32, offset: 32)
!31 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!32 = !{!0, !7, !12, !17, !33}
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !35, line: 89, type: !36, isLocal: true, isDefinition: true)
!35 = !DIFile(filename: "src/uaf/uaf40.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "209eabb0704ecefb786fce028d542aeb")
!36 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !37)
!37 = !{!38}
!38 = !DISubrange(count: 21)
!39 = !{i32 7, !"Dwarf Version", i32 5}
!40 = !{i32 2, !"Debug Info Version", i32 3}
!41 = !{i32 1, !"wchar_size", i32 4}
!42 = !{i32 8, !"PIC Level", i32 2}
!43 = !{i32 7, !"PIE Level", i32 2}
!44 = !{i32 7, !"uwtable", i32 2}
!45 = !{i32 7, !"frame-pointer", i32 2}
!46 = !{!"clang version 16.0.0"}
!47 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !48, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!48 = !DISubroutineType(types: !49)
!49 = !{null, !22, !22}
!50 = !{}
!51 = !DILocalVariable(name: "p", arg: 1, scope: !47, file: !2, line: 4, type: !22)
!52 = !DILocation(line: 4, column: 22, scope: !47)
!53 = !DILocalVariable(name: "q", arg: 2, scope: !47, file: !2, line: 4, type: !22)
!54 = !DILocation(line: 4, column: 31, scope: !47)
!55 = !DILocation(line: 5, column: 3, scope: !47)
!56 = !DILocation(line: 6, column: 1, scope: !47)
!57 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !48, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!58 = !DILocalVariable(name: "p", arg: 1, scope: !57, file: !2, line: 8, type: !22)
!59 = !DILocation(line: 8, column: 25, scope: !57)
!60 = !DILocalVariable(name: "q", arg: 2, scope: !57, file: !2, line: 8, type: !22)
!61 = !DILocation(line: 8, column: 34, scope: !57)
!62 = !DILocation(line: 9, column: 3, scope: !57)
!63 = !DILocation(line: 10, column: 1, scope: !57)
!64 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !48, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!65 = !DILocalVariable(name: "p", arg: 1, scope: !64, file: !2, line: 12, type: !22)
!66 = !DILocation(line: 12, column: 21, scope: !64)
!67 = !DILocalVariable(name: "q", arg: 2, scope: !64, file: !2, line: 12, type: !22)
!68 = !DILocation(line: 12, column: 30, scope: !64)
!69 = !DILocation(line: 13, column: 3, scope: !64)
!70 = !DILocation(line: 14, column: 1, scope: !64)
!71 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !48, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!72 = !DILocalVariable(name: "p", arg: 1, scope: !71, file: !2, line: 16, type: !22)
!73 = !DILocation(line: 16, column: 20, scope: !71)
!74 = !DILocalVariable(name: "q", arg: 2, scope: !71, file: !2, line: 16, type: !22)
!75 = !DILocation(line: 16, column: 29, scope: !71)
!76 = !DILocation(line: 17, column: 3, scope: !71)
!77 = !DILocation(line: 18, column: 1, scope: !71)
!78 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !48, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!79 = !DILocalVariable(name: "p", arg: 1, scope: !78, file: !2, line: 20, type: !22)
!80 = !DILocation(line: 20, column: 34, scope: !78)
!81 = !DILocalVariable(name: "q", arg: 2, scope: !78, file: !2, line: 20, type: !22)
!82 = !DILocation(line: 20, column: 43, scope: !78)
!83 = !DILocation(line: 21, column: 3, scope: !78)
!84 = !DILocation(line: 22, column: 1, scope: !78)
!85 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !48, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!86 = !DILocalVariable(name: "p", arg: 1, scope: !85, file: !2, line: 24, type: !22)
!87 = !DILocation(line: 24, column: 33, scope: !85)
!88 = !DILocalVariable(name: "q", arg: 2, scope: !85, file: !2, line: 24, type: !22)
!89 = !DILocation(line: 24, column: 42, scope: !85)
!90 = !DILocation(line: 25, column: 3, scope: !85)
!91 = !DILocation(line: 26, column: 1, scope: !85)
!92 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !93, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!93 = !DISubroutineType(types: !94)
!94 = !{!22, !29}
!95 = !DILocalVariable(name: "n", arg: 1, scope: !92, file: !2, line: 29, type: !29)
!96 = !DILocation(line: 29, column: 22, scope: !92)
!97 = !DILocation(line: 30, column: 17, scope: !92)
!98 = !DILocation(line: 30, column: 10, scope: !92)
!99 = !DILocation(line: 30, column: 3, scope: !92)
!100 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !93, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!101 = !DILocalVariable(name: "n", arg: 1, scope: !100, file: !2, line: 33, type: !29)
!102 = !DILocation(line: 33, column: 28, scope: !100)
!103 = !DILocation(line: 34, column: 19, scope: !100)
!104 = !DILocation(line: 34, column: 12, scope: !100)
!105 = !DILocation(line: 34, column: 5, scope: !100)
!106 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !93, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!107 = !DILocalVariable(name: "n", arg: 1, scope: !106, file: !2, line: 37, type: !29)
!108 = !DILocation(line: 37, column: 21, scope: !106)
!109 = !DILocation(line: 38, column: 17, scope: !106)
!110 = !DILocation(line: 38, column: 10, scope: !106)
!111 = !DILocation(line: 38, column: 3, scope: !106)
!112 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !93, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!113 = !DILocalVariable(name: "n", arg: 1, scope: !112, file: !2, line: 41, type: !29)
!114 = !DILocation(line: 41, column: 21, scope: !112)
!115 = !DILocation(line: 42, column: 17, scope: !112)
!116 = !DILocation(line: 42, column: 10, scope: !112)
!117 = !DILocation(line: 42, column: 3, scope: !112)
!118 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !93, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!119 = !DILocalVariable(name: "n", arg: 1, scope: !118, file: !2, line: 45, type: !29)
!120 = !DILocation(line: 45, column: 21, scope: !118)
!121 = !DILocation(line: 46, column: 17, scope: !118)
!122 = !DILocation(line: 46, column: 10, scope: !118)
!123 = !DILocation(line: 46, column: 3, scope: !118)
!124 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !93, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!125 = !DILocalVariable(name: "n", arg: 1, scope: !124, file: !2, line: 49, type: !29)
!126 = !DILocation(line: 49, column: 21, scope: !124)
!127 = !DILocation(line: 50, column: 17, scope: !124)
!128 = !DILocation(line: 50, column: 10, scope: !124)
!129 = !DILocation(line: 50, column: 3, scope: !124)
!130 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !93, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!131 = !DILocalVariable(name: "n", arg: 1, scope: !130, file: !2, line: 53, type: !29)
!132 = !DILocation(line: 53, column: 21, scope: !130)
!133 = !DILocation(line: 54, column: 17, scope: !130)
!134 = !DILocation(line: 54, column: 10, scope: !130)
!135 = !DILocation(line: 54, column: 3, scope: !130)
!136 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !93, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!137 = !DILocalVariable(name: "n", arg: 1, scope: !136, file: !2, line: 57, type: !29)
!138 = !DILocation(line: 57, column: 18, scope: !136)
!139 = !DILocation(line: 58, column: 17, scope: !136)
!140 = !DILocation(line: 58, column: 10, scope: !136)
!141 = !DILocation(line: 58, column: 3, scope: !136)
!142 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !143, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!143 = !DISubroutineType(types: !144)
!144 = !{null, !29, !29}
!145 = !DILocalVariable(name: "id", arg: 1, scope: !142, file: !2, line: 67, type: !29)
!146 = !DILocation(line: 67, column: 20, scope: !142)
!147 = !DILocalVariable(name: "flags", arg: 2, scope: !142, file: !2, line: 67, type: !29)
!148 = !DILocation(line: 67, column: 28, scope: !142)
!149 = !DILocation(line: 68, column: 3, scope: !142)
!150 = !DILocation(line: 69, column: 1, scope: !142)
!151 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !152, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !29, !154}
!154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!155 = !DILocalVariable(name: "thdid", arg: 1, scope: !151, file: !2, line: 79, type: !29)
!156 = !DILocation(line: 79, column: 21, scope: !151)
!157 = !DILocalVariable(name: "cxt", arg: 2, scope: !151, file: !2, line: 79, type: !154)
!158 = !DILocation(line: 79, column: 34, scope: !151)
!159 = !DILocation(line: 81, column: 1, scope: !151)
!160 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !152, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!161 = !DILocalVariable(name: "thdid", arg: 1, scope: !160, file: !2, line: 82, type: !29)
!162 = !DILocation(line: 82, column: 21, scope: !160)
!163 = !DILocalVariable(name: "cxt", arg: 2, scope: !160, file: !2, line: 82, type: !154)
!164 = !DILocation(line: 82, column: 33, scope: !160)
!165 = !DILocation(line: 84, column: 1, scope: !160)
!166 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !167, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!167 = !DISubroutineType(types: !168)
!168 = !{null, !29, !154, !154}
!169 = !DILocalVariable(name: "thdid", arg: 1, scope: !166, file: !2, line: 85, type: !29)
!170 = !DILocation(line: 85, column: 26, scope: !166)
!171 = !DILocalVariable(name: "cxt", arg: 2, scope: !166, file: !2, line: 85, type: !154)
!172 = !DILocation(line: 85, column: 38, scope: !166)
!173 = !DILocalVariable(name: "lev", arg: 3, scope: !166, file: !2, line: 85, type: !154)
!174 = !DILocation(line: 85, column: 49, scope: !166)
!175 = !DILocation(line: 87, column: 1, scope: !166)
!176 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !177, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!177 = !DISubroutineType(types: !178)
!178 = !{null, !154}
!179 = !DILocalVariable(name: "lockname", arg: 1, scope: !176, file: !2, line: 89, type: !154)
!180 = !DILocation(line: 89, column: 17, scope: !176)
!181 = !DILocation(line: 91, column: 1, scope: !176)
!182 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !177, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!183 = !DILocalVariable(name: "str", arg: 1, scope: !182, file: !2, line: 93, type: !154)
!184 = !DILocation(line: 93, column: 18, scope: !182)
!185 = !DILocation(line: 94, column: 18, scope: !182)
!186 = !DILocation(line: 94, column: 3, scope: !182)
!187 = !DILocation(line: 95, column: 3, scope: !182)
!188 = !DILocation(line: 96, column: 3, scope: !182)
!189 = !DILocation(line: 97, column: 1, scope: !182)
!190 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !191, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!191 = !DISubroutineType(types: !192)
!192 = !{!22, !193}
!193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!194 = !DILocalVariable(name: "p", arg: 1, scope: !190, file: !2, line: 100, type: !193)
!195 = !DILocation(line: 100, column: 24, scope: !190)
!196 = !DILocation(line: 101, column: 6, scope: !190)
!197 = !DILocation(line: 101, column: 8, scope: !190)
!198 = !DILocation(line: 102, column: 1, scope: !190)
!199 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !191, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!200 = !DILocalVariable(name: "p", arg: 1, scope: !199, file: !2, line: 104, type: !193)
!201 = !DILocation(line: 104, column: 20, scope: !199)
!202 = !DILocation(line: 105, column: 6, scope: !199)
!203 = !DILocation(line: 105, column: 8, scope: !199)
!204 = !DILocation(line: 106, column: 1, scope: !199)
!205 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !191, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!206 = !DILocalVariable(name: "p", arg: 1, scope: !205, file: !2, line: 110, type: !193)
!207 = !DILocation(line: 110, column: 22, scope: !205)
!208 = !DILocation(line: 111, column: 10, scope: !205)
!209 = !DILocation(line: 111, column: 5, scope: !205)
!210 = !DILocation(line: 112, column: 1, scope: !205)
!211 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !191, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!212 = !DILocalVariable(name: "p", arg: 1, scope: !211, file: !2, line: 115, type: !193)
!213 = !DILocation(line: 115, column: 24, scope: !211)
!214 = !DILocation(line: 116, column: 10, scope: !211)
!215 = !DILocation(line: 116, column: 5, scope: !211)
!216 = !DILocation(line: 117, column: 1, scope: !211)
!217 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !218, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!218 = !DISubroutineType(types: !219)
!219 = !{null}
!220 = !DILocation(line: 135, column: 20, scope: !217)
!221 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_07_bad", scope: !35, file: !35, line: 36, type: !218, scopeLine: 37, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!222 = !DILocalVariable(name: "data", scope: !221, file: !35, line: 38, type: !23)
!223 = !DILocation(line: 38, column: 21, scope: !221)
!224 = !DILocation(line: 40, column: 10, scope: !221)
!225 = !DILocation(line: 41, column: 8, scope: !226)
!226 = distinct !DILexicalBlock(scope: !221, file: !35, line: 41, column: 8)
!227 = !DILocation(line: 41, column: 18, scope: !226)
!228 = !DILocation(line: 41, column: 8, scope: !221)
!229 = !DILocation(line: 43, column: 33, scope: !230)
!230 = distinct !DILexicalBlock(scope: !226, file: !35, line: 42, column: 5)
!231 = !DILocation(line: 43, column: 14, scope: !230)
!232 = !DILocation(line: 44, column: 13, scope: !233)
!233 = distinct !DILexicalBlock(scope: !230, file: !35, line: 44, column: 13)
!234 = !DILocation(line: 44, column: 18, scope: !233)
!235 = !DILocation(line: 44, column: 13, scope: !230)
!236 = !DILocation(line: 44, column: 28, scope: !237)
!237 = distinct !DILexicalBlock(scope: !233, file: !35, line: 44, column: 27)
!238 = !DILocalVariable(name: "i", scope: !239, file: !35, line: 46, type: !240)
!239 = distinct !DILexicalBlock(scope: !230, file: !35, line: 45, column: 9)
!240 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !241, line: 46, baseType: !242)
!241 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!242 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!243 = !DILocation(line: 46, column: 20, scope: !239)
!244 = !DILocation(line: 47, column: 19, scope: !245)
!245 = distinct !DILexicalBlock(scope: !239, file: !35, line: 47, column: 13)
!246 = !DILocation(line: 47, column: 17, scope: !245)
!247 = !DILocation(line: 47, column: 24, scope: !248)
!248 = distinct !DILexicalBlock(scope: !245, file: !35, line: 47, column: 13)
!249 = !DILocation(line: 47, column: 26, scope: !248)
!250 = !DILocation(line: 47, column: 13, scope: !245)
!251 = !DILocation(line: 49, column: 17, scope: !252)
!252 = distinct !DILexicalBlock(scope: !248, file: !35, line: 48, column: 13)
!253 = !DILocation(line: 49, column: 22, scope: !252)
!254 = !DILocation(line: 49, column: 25, scope: !252)
!255 = !DILocation(line: 49, column: 32, scope: !252)
!256 = !DILocation(line: 50, column: 17, scope: !252)
!257 = !DILocation(line: 50, column: 22, scope: !252)
!258 = !DILocation(line: 50, column: 25, scope: !252)
!259 = !DILocation(line: 50, column: 32, scope: !252)
!260 = !DILocation(line: 51, column: 13, scope: !252)
!261 = !DILocation(line: 47, column: 34, scope: !248)
!262 = !DILocation(line: 47, column: 13, scope: !248)
!263 = distinct !{!263, !250, !264, !265}
!264 = !DILocation(line: 51, column: 13, scope: !245)
!265 = !{!"llvm.loop.mustprogress"}
!266 = !DILocation(line: 54, column: 14, scope: !230)
!267 = !DILocation(line: 54, column: 9, scope: !230)
!268 = !DILocation(line: 55, column: 5, scope: !230)
!269 = !DILocation(line: 56, column: 8, scope: !270)
!270 = distinct !DILexicalBlock(scope: !221, file: !35, line: 56, column: 8)
!271 = !DILocation(line: 56, column: 18, scope: !270)
!272 = !DILocation(line: 56, column: 8, scope: !221)
!273 = !DILocation(line: 59, column: 17, scope: !274)
!274 = distinct !DILexicalBlock(scope: !270, file: !35, line: 57, column: 5)
!275 = !DILocation(line: 59, column: 9, scope: !274)
!276 = !DILocation(line: 61, column: 5, scope: !274)
!277 = !DILocation(line: 62, column: 1, scope: !221)
!278 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_07_good", scope: !35, file: !35, line: 191, type: !218, scopeLine: 192, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!279 = !DILocation(line: 193, column: 5, scope: !278)
!280 = !DILocation(line: 194, column: 5, scope: !278)
!281 = !DILocation(line: 195, column: 5, scope: !278)
!282 = !DILocation(line: 196, column: 5, scope: !278)
!283 = !DILocation(line: 197, column: 1, scope: !278)
!284 = distinct !DISubprogram(name: "main", scope: !35, file: !35, line: 206, type: !285, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !50)
!285 = !DISubroutineType(types: !286)
!286 = !{!29, !29, !287}
!287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !154, size: 64)
!288 = !DILocalVariable(name: "argc", arg: 1, scope: !284, file: !35, line: 206, type: !29)
!289 = !DILocation(line: 206, column: 14, scope: !284)
!290 = !DILocalVariable(name: "argv", arg: 2, scope: !284, file: !35, line: 206, type: !287)
!291 = !DILocation(line: 206, column: 27, scope: !284)
!292 = !DILocation(line: 209, column: 22, scope: !284)
!293 = !DILocation(line: 209, column: 12, scope: !284)
!294 = !DILocation(line: 209, column: 5, scope: !284)
!295 = !DILocation(line: 210, column: 5, scope: !284)
!296 = !DILocation(line: 211, column: 5, scope: !284)
!297 = !DILocation(line: 212, column: 5, scope: !284)
!298 = distinct !DISubprogram(name: "goodB2G1", scope: !35, file: !35, line: 66, type: !218, scopeLine: 67, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !50)
!299 = !DILocalVariable(name: "data", scope: !298, file: !35, line: 68, type: !23)
!300 = !DILocation(line: 68, column: 21, scope: !298)
!301 = !DILocation(line: 70, column: 10, scope: !298)
!302 = !DILocation(line: 71, column: 8, scope: !303)
!303 = distinct !DILexicalBlock(scope: !298, file: !35, line: 71, column: 8)
!304 = !DILocation(line: 71, column: 18, scope: !303)
!305 = !DILocation(line: 71, column: 8, scope: !298)
!306 = !DILocation(line: 73, column: 33, scope: !307)
!307 = distinct !DILexicalBlock(scope: !303, file: !35, line: 72, column: 5)
!308 = !DILocation(line: 73, column: 14, scope: !307)
!309 = !DILocation(line: 74, column: 13, scope: !310)
!310 = distinct !DILexicalBlock(scope: !307, file: !35, line: 74, column: 13)
!311 = !DILocation(line: 74, column: 18, scope: !310)
!312 = !DILocation(line: 74, column: 13, scope: !307)
!313 = !DILocation(line: 74, column: 28, scope: !314)
!314 = distinct !DILexicalBlock(scope: !310, file: !35, line: 74, column: 27)
!315 = !DILocalVariable(name: "i", scope: !316, file: !35, line: 76, type: !240)
!316 = distinct !DILexicalBlock(scope: !307, file: !35, line: 75, column: 9)
!317 = !DILocation(line: 76, column: 20, scope: !316)
!318 = !DILocation(line: 77, column: 19, scope: !319)
!319 = distinct !DILexicalBlock(scope: !316, file: !35, line: 77, column: 13)
!320 = !DILocation(line: 77, column: 17, scope: !319)
!321 = !DILocation(line: 77, column: 24, scope: !322)
!322 = distinct !DILexicalBlock(scope: !319, file: !35, line: 77, column: 13)
!323 = !DILocation(line: 77, column: 26, scope: !322)
!324 = !DILocation(line: 77, column: 13, scope: !319)
!325 = !DILocation(line: 79, column: 17, scope: !326)
!326 = distinct !DILexicalBlock(scope: !322, file: !35, line: 78, column: 13)
!327 = !DILocation(line: 79, column: 22, scope: !326)
!328 = !DILocation(line: 79, column: 25, scope: !326)
!329 = !DILocation(line: 79, column: 32, scope: !326)
!330 = !DILocation(line: 80, column: 17, scope: !326)
!331 = !DILocation(line: 80, column: 22, scope: !326)
!332 = !DILocation(line: 80, column: 25, scope: !326)
!333 = !DILocation(line: 80, column: 32, scope: !326)
!334 = !DILocation(line: 81, column: 13, scope: !326)
!335 = !DILocation(line: 77, column: 34, scope: !322)
!336 = !DILocation(line: 77, column: 13, scope: !322)
!337 = distinct !{!337, !324, !338, !265}
!338 = !DILocation(line: 81, column: 13, scope: !319)
!339 = !DILocation(line: 84, column: 14, scope: !307)
!340 = !DILocation(line: 84, column: 9, scope: !307)
!341 = !DILocation(line: 85, column: 5, scope: !307)
!342 = !DILocation(line: 86, column: 8, scope: !343)
!343 = distinct !DILexicalBlock(scope: !298, file: !35, line: 86, column: 8)
!344 = !DILocation(line: 86, column: 18, scope: !343)
!345 = !DILocation(line: 86, column: 8, scope: !298)
!346 = !DILocation(line: 89, column: 9, scope: !347)
!347 = distinct !DILexicalBlock(scope: !343, file: !35, line: 87, column: 5)
!348 = !DILocation(line: 90, column: 5, scope: !347)
!349 = !DILocation(line: 98, column: 1, scope: !298)
!350 = distinct !DISubprogram(name: "goodB2G2", scope: !35, file: !35, line: 101, type: !218, scopeLine: 102, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !50)
!351 = !DILocalVariable(name: "data", scope: !350, file: !35, line: 103, type: !23)
!352 = !DILocation(line: 103, column: 21, scope: !350)
!353 = !DILocation(line: 105, column: 10, scope: !350)
!354 = !DILocation(line: 106, column: 8, scope: !355)
!355 = distinct !DILexicalBlock(scope: !350, file: !35, line: 106, column: 8)
!356 = !DILocation(line: 106, column: 18, scope: !355)
!357 = !DILocation(line: 106, column: 8, scope: !350)
!358 = !DILocation(line: 108, column: 33, scope: !359)
!359 = distinct !DILexicalBlock(scope: !355, file: !35, line: 107, column: 5)
!360 = !DILocation(line: 108, column: 14, scope: !359)
!361 = !DILocation(line: 109, column: 13, scope: !362)
!362 = distinct !DILexicalBlock(scope: !359, file: !35, line: 109, column: 13)
!363 = !DILocation(line: 109, column: 18, scope: !362)
!364 = !DILocation(line: 109, column: 13, scope: !359)
!365 = !DILocation(line: 109, column: 28, scope: !366)
!366 = distinct !DILexicalBlock(scope: !362, file: !35, line: 109, column: 27)
!367 = !DILocalVariable(name: "i", scope: !368, file: !35, line: 111, type: !240)
!368 = distinct !DILexicalBlock(scope: !359, file: !35, line: 110, column: 9)
!369 = !DILocation(line: 111, column: 20, scope: !368)
!370 = !DILocation(line: 112, column: 19, scope: !371)
!371 = distinct !DILexicalBlock(scope: !368, file: !35, line: 112, column: 13)
!372 = !DILocation(line: 112, column: 17, scope: !371)
!373 = !DILocation(line: 112, column: 24, scope: !374)
!374 = distinct !DILexicalBlock(scope: !371, file: !35, line: 112, column: 13)
!375 = !DILocation(line: 112, column: 26, scope: !374)
!376 = !DILocation(line: 112, column: 13, scope: !371)
!377 = !DILocation(line: 114, column: 17, scope: !378)
!378 = distinct !DILexicalBlock(scope: !374, file: !35, line: 113, column: 13)
!379 = !DILocation(line: 114, column: 22, scope: !378)
!380 = !DILocation(line: 114, column: 25, scope: !378)
!381 = !DILocation(line: 114, column: 32, scope: !378)
!382 = !DILocation(line: 115, column: 17, scope: !378)
!383 = !DILocation(line: 115, column: 22, scope: !378)
!384 = !DILocation(line: 115, column: 25, scope: !378)
!385 = !DILocation(line: 115, column: 32, scope: !378)
!386 = !DILocation(line: 116, column: 13, scope: !378)
!387 = !DILocation(line: 112, column: 34, scope: !374)
!388 = !DILocation(line: 112, column: 13, scope: !374)
!389 = distinct !{!389, !376, !390, !265}
!390 = !DILocation(line: 116, column: 13, scope: !371)
!391 = !DILocation(line: 119, column: 14, scope: !359)
!392 = !DILocation(line: 119, column: 9, scope: !359)
!393 = !DILocation(line: 120, column: 5, scope: !359)
!394 = !DILocation(line: 121, column: 8, scope: !395)
!395 = distinct !DILexicalBlock(scope: !350, file: !35, line: 121, column: 8)
!396 = !DILocation(line: 121, column: 18, scope: !395)
!397 = !DILocation(line: 121, column: 8, scope: !350)
!398 = !DILocation(line: 127, column: 5, scope: !399)
!399 = distinct !DILexicalBlock(scope: !395, file: !35, line: 122, column: 5)
!400 = !DILocation(line: 128, column: 1, scope: !350)
!401 = distinct !DISubprogram(name: "goodG2B1", scope: !35, file: !35, line: 131, type: !218, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !50)
!402 = !DILocalVariable(name: "data", scope: !401, file: !35, line: 133, type: !23)
!403 = !DILocation(line: 133, column: 21, scope: !401)
!404 = !DILocation(line: 135, column: 10, scope: !401)
!405 = !DILocation(line: 136, column: 8, scope: !406)
!406 = distinct !DILexicalBlock(scope: !401, file: !35, line: 136, column: 8)
!407 = !DILocation(line: 136, column: 18, scope: !406)
!408 = !DILocation(line: 136, column: 8, scope: !401)
!409 = !DILocation(line: 139, column: 9, scope: !410)
!410 = distinct !DILexicalBlock(scope: !406, file: !35, line: 137, column: 5)
!411 = !DILocation(line: 140, column: 5, scope: !410)
!412 = !DILocation(line: 143, column: 33, scope: !413)
!413 = distinct !DILexicalBlock(scope: !406, file: !35, line: 142, column: 5)
!414 = !DILocation(line: 143, column: 14, scope: !413)
!415 = !DILocation(line: 144, column: 13, scope: !416)
!416 = distinct !DILexicalBlock(scope: !413, file: !35, line: 144, column: 13)
!417 = !DILocation(line: 144, column: 18, scope: !416)
!418 = !DILocation(line: 144, column: 13, scope: !413)
!419 = !DILocation(line: 144, column: 28, scope: !420)
!420 = distinct !DILexicalBlock(scope: !416, file: !35, line: 144, column: 27)
!421 = !DILocalVariable(name: "i", scope: !422, file: !35, line: 146, type: !240)
!422 = distinct !DILexicalBlock(scope: !413, file: !35, line: 145, column: 9)
!423 = !DILocation(line: 146, column: 20, scope: !422)
!424 = !DILocation(line: 147, column: 19, scope: !425)
!425 = distinct !DILexicalBlock(scope: !422, file: !35, line: 147, column: 13)
!426 = !DILocation(line: 147, column: 17, scope: !425)
!427 = !DILocation(line: 147, column: 24, scope: !428)
!428 = distinct !DILexicalBlock(scope: !425, file: !35, line: 147, column: 13)
!429 = !DILocation(line: 147, column: 26, scope: !428)
!430 = !DILocation(line: 147, column: 13, scope: !425)
!431 = !DILocation(line: 149, column: 17, scope: !432)
!432 = distinct !DILexicalBlock(scope: !428, file: !35, line: 148, column: 13)
!433 = !DILocation(line: 149, column: 22, scope: !432)
!434 = !DILocation(line: 149, column: 25, scope: !432)
!435 = !DILocation(line: 149, column: 32, scope: !432)
!436 = !DILocation(line: 150, column: 17, scope: !432)
!437 = !DILocation(line: 150, column: 22, scope: !432)
!438 = !DILocation(line: 150, column: 25, scope: !432)
!439 = !DILocation(line: 150, column: 32, scope: !432)
!440 = !DILocation(line: 151, column: 13, scope: !432)
!441 = !DILocation(line: 147, column: 34, scope: !428)
!442 = !DILocation(line: 147, column: 13, scope: !428)
!443 = distinct !{!443, !430, !444, !265}
!444 = !DILocation(line: 151, column: 13, scope: !425)
!445 = !DILocation(line: 155, column: 8, scope: !446)
!446 = distinct !DILexicalBlock(scope: !401, file: !35, line: 155, column: 8)
!447 = !DILocation(line: 155, column: 18, scope: !446)
!448 = !DILocation(line: 155, column: 8, scope: !401)
!449 = !DILocation(line: 158, column: 21, scope: !450)
!450 = distinct !DILexicalBlock(scope: !446, file: !35, line: 156, column: 5)
!451 = !DILocation(line: 158, column: 9, scope: !450)
!452 = !DILocation(line: 160, column: 5, scope: !450)
!453 = !DILocation(line: 161, column: 1, scope: !401)
!454 = distinct !DISubprogram(name: "goodG2B2", scope: !35, file: !35, line: 164, type: !218, scopeLine: 165, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !50)
!455 = !DILocalVariable(name: "data", scope: !454, file: !35, line: 166, type: !23)
!456 = !DILocation(line: 166, column: 21, scope: !454)
!457 = !DILocation(line: 168, column: 10, scope: !454)
!458 = !DILocation(line: 169, column: 8, scope: !459)
!459 = distinct !DILexicalBlock(scope: !454, file: !35, line: 169, column: 8)
!460 = !DILocation(line: 169, column: 18, scope: !459)
!461 = !DILocation(line: 169, column: 8, scope: !454)
!462 = !DILocation(line: 171, column: 33, scope: !463)
!463 = distinct !DILexicalBlock(scope: !459, file: !35, line: 170, column: 5)
!464 = !DILocation(line: 171, column: 14, scope: !463)
!465 = !DILocation(line: 172, column: 13, scope: !466)
!466 = distinct !DILexicalBlock(scope: !463, file: !35, line: 172, column: 13)
!467 = !DILocation(line: 172, column: 18, scope: !466)
!468 = !DILocation(line: 172, column: 13, scope: !463)
!469 = !DILocation(line: 172, column: 28, scope: !470)
!470 = distinct !DILexicalBlock(scope: !466, file: !35, line: 172, column: 27)
!471 = !DILocalVariable(name: "i", scope: !472, file: !35, line: 174, type: !240)
!472 = distinct !DILexicalBlock(scope: !463, file: !35, line: 173, column: 9)
!473 = !DILocation(line: 174, column: 20, scope: !472)
!474 = !DILocation(line: 175, column: 19, scope: !475)
!475 = distinct !DILexicalBlock(scope: !472, file: !35, line: 175, column: 13)
!476 = !DILocation(line: 175, column: 17, scope: !475)
!477 = !DILocation(line: 175, column: 24, scope: !478)
!478 = distinct !DILexicalBlock(scope: !475, file: !35, line: 175, column: 13)
!479 = !DILocation(line: 175, column: 26, scope: !478)
!480 = !DILocation(line: 175, column: 13, scope: !475)
!481 = !DILocation(line: 177, column: 17, scope: !482)
!482 = distinct !DILexicalBlock(scope: !478, file: !35, line: 176, column: 13)
!483 = !DILocation(line: 177, column: 22, scope: !482)
!484 = !DILocation(line: 177, column: 25, scope: !482)
!485 = !DILocation(line: 177, column: 32, scope: !482)
!486 = !DILocation(line: 178, column: 17, scope: !482)
!487 = !DILocation(line: 178, column: 22, scope: !482)
!488 = !DILocation(line: 178, column: 25, scope: !482)
!489 = !DILocation(line: 178, column: 32, scope: !482)
!490 = !DILocation(line: 179, column: 13, scope: !482)
!491 = !DILocation(line: 175, column: 34, scope: !478)
!492 = !DILocation(line: 175, column: 13, scope: !478)
!493 = distinct !{!493, !480, !494, !265}
!494 = !DILocation(line: 179, column: 13, scope: !475)
!495 = !DILocation(line: 182, column: 5, scope: !463)
!496 = !DILocation(line: 183, column: 8, scope: !497)
!497 = distinct !DILexicalBlock(scope: !454, file: !35, line: 183, column: 8)
!498 = !DILocation(line: 183, column: 18, scope: !497)
!499 = !DILocation(line: 183, column: 8, scope: !454)
!500 = !DILocation(line: 186, column: 21, scope: !501)
!501 = distinct !DILexicalBlock(scope: !497, file: !35, line: 184, column: 5)
!502 = !DILocation(line: 186, column: 9, scope: !501)
!503 = !DILocation(line: 188, column: 5, scope: !501)
!504 = !DILocation(line: 189, column: 1, scope: !454)
