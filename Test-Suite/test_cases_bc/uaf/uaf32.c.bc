; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/uaf/uaf32.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf32.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !33 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !37, metadata !DIExpression()), !dbg !38
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !39, metadata !DIExpression()), !dbg !40
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !41
  ret void, !dbg !42
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !43 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !44, metadata !DIExpression()), !dbg !45
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !48
  ret void, !dbg !49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !50 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !51, metadata !DIExpression()), !dbg !52
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !53, metadata !DIExpression()), !dbg !54
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !55
  ret void, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !57 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !58, metadata !DIExpression()), !dbg !59
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !60, metadata !DIExpression()), !dbg !61
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !62
  ret void, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !64 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !65, metadata !DIExpression()), !dbg !66
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !71 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !72, metadata !DIExpression()), !dbg !73
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !76
  ret void, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !78 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %0 = load i32, ptr %n.addr, align 4, !dbg !84
  %conv = sext i32 %0 to i64, !dbg !84
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !85
  ret ptr %call, !dbg !86
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !87 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %0 = load i32, ptr %n.addr, align 4, !dbg !90
  %conv = sext i32 %0 to i64, !dbg !90
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !91
  ret ptr %call, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, ptr %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !97
  ret ptr %call, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, ptr %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !103
  ret ptr %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !105 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !106, metadata !DIExpression()), !dbg !107
  %0 = load i32, ptr %n.addr, align 4, !dbg !108
  %conv = sext i32 %0 to i64, !dbg !108
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !109
  ret ptr %call, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !111 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !112, metadata !DIExpression()), !dbg !113
  %0 = load i32, ptr %n.addr, align 4, !dbg !114
  %conv = sext i32 %0 to i64, !dbg !114
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !115
  ret ptr %call, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !117 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !118, metadata !DIExpression()), !dbg !119
  %0 = load i32, ptr %n.addr, align 4, !dbg !120
  %conv = sext i32 %0 to i64, !dbg !120
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !121
  ret ptr %call, !dbg !122
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !123 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !124, metadata !DIExpression()), !dbg !125
  %0 = load i32, ptr %n.addr, align 4, !dbg !126
  %conv = sext i32 %0 to i64, !dbg !126
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !127
  ret ptr %call, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !129 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !132, metadata !DIExpression()), !dbg !133
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !134, metadata !DIExpression()), !dbg !135
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !136
  ret void, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !138 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !142, metadata !DIExpression()), !dbg !143
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !144, metadata !DIExpression()), !dbg !145
  ret void, !dbg !146
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !147 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !148, metadata !DIExpression()), !dbg !149
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !150, metadata !DIExpression()), !dbg !151
  ret void, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !153 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !156, metadata !DIExpression()), !dbg !157
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !158, metadata !DIExpression()), !dbg !159
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !160, metadata !DIExpression()), !dbg !161
  ret void, !dbg !162
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !163 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !166, metadata !DIExpression()), !dbg !167
  ret void, !dbg !168
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !169 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !170, metadata !DIExpression()), !dbg !171
  %0 = load ptr, ptr %str.addr, align 8, !dbg !172
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !173
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !174
  %call2 = call i32 @getchar(), !dbg !175
  ret void, !dbg !176
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !177 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !181, metadata !DIExpression()), !dbg !182
  %0 = load ptr, ptr %p.addr, align 8, !dbg !183
  store i32 0, ptr %0, align 4, !dbg !184
  %1 = load ptr, ptr %retval, align 8, !dbg !185
  ret ptr %1, !dbg !185
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !186 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !187, metadata !DIExpression()), !dbg !188
  %0 = load ptr, ptr %p.addr, align 8, !dbg !189
  store i32 0, ptr %0, align 4, !dbg !190
  %1 = load ptr, ptr %retval, align 8, !dbg !191
  ret ptr %1, !dbg !191
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !192 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !193, metadata !DIExpression()), !dbg !194
  %0 = load ptr, ptr %p.addr, align 8, !dbg !195
  call void @free(ptr noundef %0) #7, !dbg !196
  %1 = load ptr, ptr %retval, align 8, !dbg !197
  ret ptr %1, !dbg !197
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !198 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !199, metadata !DIExpression()), !dbg !200
  %0 = load ptr, ptr %p.addr, align 8, !dbg !201
  call void @free(ptr noundef %0) #7, !dbg !202
  %1 = load ptr, ptr %retval, align 8, !dbg !203
  ret ptr %1, !dbg !203
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !204 {
entry:
  ret void, !dbg !207
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_long_17_bad() #0 !dbg !208 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %data = alloca ptr, align 8
  %i2 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %i, metadata !210, metadata !DIExpression()), !dbg !211
  call void @llvm.dbg.declare(metadata ptr %j, metadata !212, metadata !DIExpression()), !dbg !213
  call void @llvm.dbg.declare(metadata ptr %data, metadata !214, metadata !DIExpression()), !dbg !215
  store ptr null, ptr %data, align 8, !dbg !216
  store i32 0, ptr %i, align 4, !dbg !217
  br label %for.cond, !dbg !219

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, ptr %i, align 4, !dbg !220
  %cmp = icmp slt i32 %0, 1, !dbg !222
  br i1 %cmp, label %for.body, label %for.end8, !dbg !223

for.body:                                         ; preds = %for.cond
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !224
  store ptr %call, ptr %data, align 8, !dbg !226
  %1 = load ptr, ptr %data, align 8, !dbg !227
  %cmp1 = icmp eq ptr %1, null, !dbg !229
  br i1 %cmp1, label %if.then, label %if.end, !dbg !230

if.then:                                          ; preds = %for.body
  call void @exit(i32 noundef -1) #8, !dbg !231
  unreachable, !dbg !231

if.end:                                           ; preds = %for.body
  call void @llvm.dbg.declare(metadata ptr %i2, metadata !233, metadata !DIExpression()), !dbg !238
  store i64 0, ptr %i2, align 8, !dbg !239
  br label %for.cond3, !dbg !241

for.cond3:                                        ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i2, align 8, !dbg !242
  %cmp4 = icmp ult i64 %2, 100, !dbg !244
  br i1 %cmp4, label %for.body5, label %for.end, !dbg !245

for.body5:                                        ; preds = %for.cond3
  %3 = load ptr, ptr %data, align 8, !dbg !246
  %4 = load i64, ptr %i2, align 8, !dbg !248
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !246
  store i64 5, ptr %arrayidx, align 8, !dbg !249
  br label %for.inc, !dbg !250

for.inc:                                          ; preds = %for.body5
  %5 = load i64, ptr %i2, align 8, !dbg !251
  %inc = add i64 %5, 1, !dbg !251
  store i64 %inc, ptr %i2, align 8, !dbg !251
  br label %for.cond3, !dbg !252, !llvm.loop !253

for.end:                                          ; preds = %for.cond3
  %6 = load ptr, ptr %data, align 8, !dbg !256
  call void @free(ptr noundef %6) #7, !dbg !257
  br label %for.inc6, !dbg !258

for.inc6:                                         ; preds = %for.end
  %7 = load i32, ptr %i, align 4, !dbg !259
  %inc7 = add nsw i32 %7, 1, !dbg !259
  store i32 %inc7, ptr %i, align 4, !dbg !259
  br label %for.cond, !dbg !260, !llvm.loop !261

for.end8:                                         ; preds = %for.cond
  store i32 0, ptr %j, align 4, !dbg !263
  br label %for.cond9, !dbg !265

for.cond9:                                        ; preds = %for.inc13, %for.end8
  %8 = load i32, ptr %j, align 4, !dbg !266
  %cmp10 = icmp slt i32 %8, 1, !dbg !268
  br i1 %cmp10, label %for.body11, label %for.end15, !dbg !269

for.body11:                                       ; preds = %for.cond9
  %9 = load ptr, ptr %data, align 8, !dbg !270
  %call12 = call ptr @UAFFUNC(ptr noundef %9), !dbg !272
  br label %for.inc13, !dbg !273

for.inc13:                                        ; preds = %for.body11
  %10 = load i32, ptr %j, align 4, !dbg !274
  %inc14 = add nsw i32 %10, 1, !dbg !274
  store i32 %inc14, ptr %j, align 4, !dbg !274
  br label %for.cond9, !dbg !275, !llvm.loop !276

for.end15:                                        ; preds = %for.cond9
  ret void, !dbg !278
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_long_17_good() #0 !dbg !279 {
entry:
  call void @goodB2G(), !dbg !280
  call void @goodG2B(), !dbg !281
  ret void, !dbg !282
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !283 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !287, metadata !DIExpression()), !dbg !288
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !289, metadata !DIExpression()), !dbg !290
  %call = call i64 @time(ptr noundef null) #7, !dbg !291
  %conv = trunc i64 %call to i32, !dbg !292
  call void @srand(i32 noundef %conv) #7, !dbg !293
  call void @CWE416_Use_After_Free__malloc_free_long_17_good(), !dbg !294
  call void @CWE416_Use_After_Free__malloc_free_long_17_bad(), !dbg !295
  ret i32 0, !dbg !296
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !297 {
entry:
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %data = alloca ptr, align 8
  %i2 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %i, metadata !298, metadata !DIExpression()), !dbg !299
  call void @llvm.dbg.declare(metadata ptr %k, metadata !300, metadata !DIExpression()), !dbg !301
  call void @llvm.dbg.declare(metadata ptr %data, metadata !302, metadata !DIExpression()), !dbg !303
  store ptr null, ptr %data, align 8, !dbg !304
  store i32 0, ptr %i, align 4, !dbg !305
  br label %for.cond, !dbg !307

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, ptr %i, align 4, !dbg !308
  %cmp = icmp slt i32 %0, 1, !dbg !310
  br i1 %cmp, label %for.body, label %for.end8, !dbg !311

for.body:                                         ; preds = %for.cond
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !312
  store ptr %call, ptr %data, align 8, !dbg !314
  %1 = load ptr, ptr %data, align 8, !dbg !315
  %cmp1 = icmp eq ptr %1, null, !dbg !317
  br i1 %cmp1, label %if.then, label %if.end, !dbg !318

if.then:                                          ; preds = %for.body
  call void @exit(i32 noundef -1) #8, !dbg !319
  unreachable, !dbg !319

if.end:                                           ; preds = %for.body
  call void @llvm.dbg.declare(metadata ptr %i2, metadata !321, metadata !DIExpression()), !dbg !323
  store i64 0, ptr %i2, align 8, !dbg !324
  br label %for.cond3, !dbg !326

for.cond3:                                        ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i2, align 8, !dbg !327
  %cmp4 = icmp ult i64 %2, 100, !dbg !329
  br i1 %cmp4, label %for.body5, label %for.end, !dbg !330

for.body5:                                        ; preds = %for.cond3
  %3 = load ptr, ptr %data, align 8, !dbg !331
  %4 = load i64, ptr %i2, align 8, !dbg !333
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !331
  store i64 5, ptr %arrayidx, align 8, !dbg !334
  br label %for.inc, !dbg !335

for.inc:                                          ; preds = %for.body5
  %5 = load i64, ptr %i2, align 8, !dbg !336
  %inc = add i64 %5, 1, !dbg !336
  store i64 %inc, ptr %i2, align 8, !dbg !336
  br label %for.cond3, !dbg !337, !llvm.loop !338

for.end:                                          ; preds = %for.cond3
  %6 = load ptr, ptr %data, align 8, !dbg !340
  call void @free(ptr noundef %6) #7, !dbg !341
  br label %for.inc6, !dbg !342

for.inc6:                                         ; preds = %for.end
  %7 = load i32, ptr %i, align 4, !dbg !343
  %inc7 = add nsw i32 %7, 1, !dbg !343
  store i32 %inc7, ptr %i, align 4, !dbg !343
  br label %for.cond, !dbg !344, !llvm.loop !345

for.end8:                                         ; preds = %for.cond
  store i32 0, ptr %k, align 4, !dbg !347
  br label %for.cond9, !dbg !349

for.cond9:                                        ; preds = %for.inc12, %for.end8
  %8 = load i32, ptr %k, align 4, !dbg !350
  %cmp10 = icmp slt i32 %8, 1, !dbg !352
  br i1 %cmp10, label %for.body11, label %for.end14, !dbg !353

for.body11:                                       ; preds = %for.cond9
  br label %for.inc12, !dbg !354

for.inc12:                                        ; preds = %for.body11
  %9 = load i32, ptr %k, align 4, !dbg !356
  %inc13 = add nsw i32 %9, 1, !dbg !356
  store i32 %inc13, ptr %k, align 4, !dbg !356
  br label %for.cond9, !dbg !357, !llvm.loop !358

for.end14:                                        ; preds = %for.cond9
  ret void, !dbg !360
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !361 {
entry:
  %h = alloca i32, align 4
  %j = alloca i32, align 4
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %h, metadata !362, metadata !DIExpression()), !dbg !363
  call void @llvm.dbg.declare(metadata ptr %j, metadata !364, metadata !DIExpression()), !dbg !365
  call void @llvm.dbg.declare(metadata ptr %data, metadata !366, metadata !DIExpression()), !dbg !367
  store ptr null, ptr %data, align 8, !dbg !368
  store i32 0, ptr %h, align 4, !dbg !369
  br label %for.cond, !dbg !371

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, ptr %h, align 4, !dbg !372
  %cmp = icmp slt i32 %0, 1, !dbg !374
  br i1 %cmp, label %for.body, label %for.end7, !dbg !375

for.body:                                         ; preds = %for.cond
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !376
  store ptr %call, ptr %data, align 8, !dbg !378
  %1 = load ptr, ptr %data, align 8, !dbg !379
  %cmp1 = icmp eq ptr %1, null, !dbg !381
  br i1 %cmp1, label %if.then, label %if.end, !dbg !382

if.then:                                          ; preds = %for.body
  call void @exit(i32 noundef -1) #8, !dbg !383
  unreachable, !dbg !383

if.end:                                           ; preds = %for.body
  call void @llvm.dbg.declare(metadata ptr %i, metadata !385, metadata !DIExpression()), !dbg !387
  store i64 0, ptr %i, align 8, !dbg !388
  br label %for.cond2, !dbg !390

for.cond2:                                        ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !391
  %cmp3 = icmp ult i64 %2, 100, !dbg !393
  br i1 %cmp3, label %for.body4, label %for.end, !dbg !394

for.body4:                                        ; preds = %for.cond2
  %3 = load ptr, ptr %data, align 8, !dbg !395
  %4 = load i64, ptr %i, align 8, !dbg !397
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !395
  store i64 5, ptr %arrayidx, align 8, !dbg !398
  br label %for.inc, !dbg !399

for.inc:                                          ; preds = %for.body4
  %5 = load i64, ptr %i, align 8, !dbg !400
  %inc = add i64 %5, 1, !dbg !400
  store i64 %inc, ptr %i, align 8, !dbg !400
  br label %for.cond2, !dbg !401, !llvm.loop !402

for.end:                                          ; preds = %for.cond2
  br label %for.inc5, !dbg !404

for.inc5:                                         ; preds = %for.end
  %6 = load i32, ptr %h, align 4, !dbg !405
  %inc6 = add nsw i32 %6, 1, !dbg !405
  store i32 %inc6, ptr %h, align 4, !dbg !405
  br label %for.cond, !dbg !406, !llvm.loop !407

for.end7:                                         ; preds = %for.cond
  store i32 0, ptr %j, align 4, !dbg !409
  br label %for.cond8, !dbg !411

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %7 = load i32, ptr %j, align 4, !dbg !412
  %cmp9 = icmp slt i32 %7, 1, !dbg !414
  br i1 %cmp9, label %for.body10, label %for.end14, !dbg !415

for.body10:                                       ; preds = %for.cond8
  %8 = load ptr, ptr %data, align 8, !dbg !416
  %call11 = call ptr @SAFEUAFFUNC(ptr noundef %8), !dbg !418
  br label %for.inc12, !dbg !419

for.inc12:                                        ; preds = %for.body10
  %9 = load i32, ptr %j, align 4, !dbg !420
  %inc13 = add nsw i32 %9, 1, !dbg !420
  store i32 %inc13, ptr %j, align 4, !dbg !420
  br label %for.cond8, !dbg !421, !llvm.loop !422

for.end14:                                        ; preds = %for.cond8
  ret void, !dbg !424
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!17}
!llvm.module.flags = !{!25, !26, !27, !28, !29, !30, !31}
!llvm.ident = !{!32}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = distinct !DICompileUnit(language: DW_LANG_C11, file: !18, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !19, globals: !24, splitDebugInlining: false, nameTableKind: None)
!18 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf32.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "371ce1dd047a5cc9a95bf683a3984b24")
!19 = !{!20, !21, !23}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64)
!22 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!23 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!24 = !{!0, !7, !12}
!25 = !{i32 7, !"Dwarf Version", i32 5}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{i32 8, !"PIC Level", i32 2}
!29 = !{i32 7, !"PIE Level", i32 2}
!30 = !{i32 7, !"uwtable", i32 2}
!31 = !{i32 7, !"frame-pointer", i32 2}
!32 = !{!"clang version 16.0.0"}
!33 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !34, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!34 = !DISubroutineType(types: !35)
!35 = !{null, !20, !20}
!36 = !{}
!37 = !DILocalVariable(name: "p", arg: 1, scope: !33, file: !2, line: 4, type: !20)
!38 = !DILocation(line: 4, column: 22, scope: !33)
!39 = !DILocalVariable(name: "q", arg: 2, scope: !33, file: !2, line: 4, type: !20)
!40 = !DILocation(line: 4, column: 31, scope: !33)
!41 = !DILocation(line: 5, column: 3, scope: !33)
!42 = !DILocation(line: 6, column: 1, scope: !33)
!43 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !34, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!44 = !DILocalVariable(name: "p", arg: 1, scope: !43, file: !2, line: 8, type: !20)
!45 = !DILocation(line: 8, column: 25, scope: !43)
!46 = !DILocalVariable(name: "q", arg: 2, scope: !43, file: !2, line: 8, type: !20)
!47 = !DILocation(line: 8, column: 34, scope: !43)
!48 = !DILocation(line: 9, column: 3, scope: !43)
!49 = !DILocation(line: 10, column: 1, scope: !43)
!50 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !34, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!51 = !DILocalVariable(name: "p", arg: 1, scope: !50, file: !2, line: 12, type: !20)
!52 = !DILocation(line: 12, column: 21, scope: !50)
!53 = !DILocalVariable(name: "q", arg: 2, scope: !50, file: !2, line: 12, type: !20)
!54 = !DILocation(line: 12, column: 30, scope: !50)
!55 = !DILocation(line: 13, column: 3, scope: !50)
!56 = !DILocation(line: 14, column: 1, scope: !50)
!57 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !34, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!58 = !DILocalVariable(name: "p", arg: 1, scope: !57, file: !2, line: 16, type: !20)
!59 = !DILocation(line: 16, column: 20, scope: !57)
!60 = !DILocalVariable(name: "q", arg: 2, scope: !57, file: !2, line: 16, type: !20)
!61 = !DILocation(line: 16, column: 29, scope: !57)
!62 = !DILocation(line: 17, column: 3, scope: !57)
!63 = !DILocation(line: 18, column: 1, scope: !57)
!64 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !34, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!65 = !DILocalVariable(name: "p", arg: 1, scope: !64, file: !2, line: 20, type: !20)
!66 = !DILocation(line: 20, column: 34, scope: !64)
!67 = !DILocalVariable(name: "q", arg: 2, scope: !64, file: !2, line: 20, type: !20)
!68 = !DILocation(line: 20, column: 43, scope: !64)
!69 = !DILocation(line: 21, column: 3, scope: !64)
!70 = !DILocation(line: 22, column: 1, scope: !64)
!71 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !34, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!72 = !DILocalVariable(name: "p", arg: 1, scope: !71, file: !2, line: 24, type: !20)
!73 = !DILocation(line: 24, column: 33, scope: !71)
!74 = !DILocalVariable(name: "q", arg: 2, scope: !71, file: !2, line: 24, type: !20)
!75 = !DILocation(line: 24, column: 42, scope: !71)
!76 = !DILocation(line: 25, column: 3, scope: !71)
!77 = !DILocation(line: 26, column: 1, scope: !71)
!78 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !79, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!79 = !DISubroutineType(types: !80)
!80 = !{!20, !81}
!81 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!82 = !DILocalVariable(name: "n", arg: 1, scope: !78, file: !2, line: 29, type: !81)
!83 = !DILocation(line: 29, column: 22, scope: !78)
!84 = !DILocation(line: 30, column: 17, scope: !78)
!85 = !DILocation(line: 30, column: 10, scope: !78)
!86 = !DILocation(line: 30, column: 3, scope: !78)
!87 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !79, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!88 = !DILocalVariable(name: "n", arg: 1, scope: !87, file: !2, line: 33, type: !81)
!89 = !DILocation(line: 33, column: 28, scope: !87)
!90 = !DILocation(line: 34, column: 19, scope: !87)
!91 = !DILocation(line: 34, column: 12, scope: !87)
!92 = !DILocation(line: 34, column: 5, scope: !87)
!93 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !79, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!94 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !2, line: 37, type: !81)
!95 = !DILocation(line: 37, column: 21, scope: !93)
!96 = !DILocation(line: 38, column: 17, scope: !93)
!97 = !DILocation(line: 38, column: 10, scope: !93)
!98 = !DILocation(line: 38, column: 3, scope: !93)
!99 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !79, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !2, line: 41, type: !81)
!101 = !DILocation(line: 41, column: 21, scope: !99)
!102 = !DILocation(line: 42, column: 17, scope: !99)
!103 = !DILocation(line: 42, column: 10, scope: !99)
!104 = !DILocation(line: 42, column: 3, scope: !99)
!105 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !79, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!106 = !DILocalVariable(name: "n", arg: 1, scope: !105, file: !2, line: 45, type: !81)
!107 = !DILocation(line: 45, column: 21, scope: !105)
!108 = !DILocation(line: 46, column: 17, scope: !105)
!109 = !DILocation(line: 46, column: 10, scope: !105)
!110 = !DILocation(line: 46, column: 3, scope: !105)
!111 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !79, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!112 = !DILocalVariable(name: "n", arg: 1, scope: !111, file: !2, line: 49, type: !81)
!113 = !DILocation(line: 49, column: 21, scope: !111)
!114 = !DILocation(line: 50, column: 17, scope: !111)
!115 = !DILocation(line: 50, column: 10, scope: !111)
!116 = !DILocation(line: 50, column: 3, scope: !111)
!117 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !79, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!118 = !DILocalVariable(name: "n", arg: 1, scope: !117, file: !2, line: 53, type: !81)
!119 = !DILocation(line: 53, column: 21, scope: !117)
!120 = !DILocation(line: 54, column: 17, scope: !117)
!121 = !DILocation(line: 54, column: 10, scope: !117)
!122 = !DILocation(line: 54, column: 3, scope: !117)
!123 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !79, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!124 = !DILocalVariable(name: "n", arg: 1, scope: !123, file: !2, line: 57, type: !81)
!125 = !DILocation(line: 57, column: 18, scope: !123)
!126 = !DILocation(line: 58, column: 17, scope: !123)
!127 = !DILocation(line: 58, column: 10, scope: !123)
!128 = !DILocation(line: 58, column: 3, scope: !123)
!129 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !130, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!130 = !DISubroutineType(types: !131)
!131 = !{null, !81, !81}
!132 = !DILocalVariable(name: "id", arg: 1, scope: !129, file: !2, line: 67, type: !81)
!133 = !DILocation(line: 67, column: 20, scope: !129)
!134 = !DILocalVariable(name: "flags", arg: 2, scope: !129, file: !2, line: 67, type: !81)
!135 = !DILocation(line: 67, column: 28, scope: !129)
!136 = !DILocation(line: 68, column: 3, scope: !129)
!137 = !DILocation(line: 69, column: 1, scope: !129)
!138 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !139, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!139 = !DISubroutineType(types: !140)
!140 = !{null, !81, !141}
!141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!142 = !DILocalVariable(name: "thdid", arg: 1, scope: !138, file: !2, line: 79, type: !81)
!143 = !DILocation(line: 79, column: 21, scope: !138)
!144 = !DILocalVariable(name: "cxt", arg: 2, scope: !138, file: !2, line: 79, type: !141)
!145 = !DILocation(line: 79, column: 34, scope: !138)
!146 = !DILocation(line: 81, column: 1, scope: !138)
!147 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !139, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!148 = !DILocalVariable(name: "thdid", arg: 1, scope: !147, file: !2, line: 82, type: !81)
!149 = !DILocation(line: 82, column: 21, scope: !147)
!150 = !DILocalVariable(name: "cxt", arg: 2, scope: !147, file: !2, line: 82, type: !141)
!151 = !DILocation(line: 82, column: 33, scope: !147)
!152 = !DILocation(line: 84, column: 1, scope: !147)
!153 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !154, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!154 = !DISubroutineType(types: !155)
!155 = !{null, !81, !141, !141}
!156 = !DILocalVariable(name: "thdid", arg: 1, scope: !153, file: !2, line: 85, type: !81)
!157 = !DILocation(line: 85, column: 26, scope: !153)
!158 = !DILocalVariable(name: "cxt", arg: 2, scope: !153, file: !2, line: 85, type: !141)
!159 = !DILocation(line: 85, column: 38, scope: !153)
!160 = !DILocalVariable(name: "lev", arg: 3, scope: !153, file: !2, line: 85, type: !141)
!161 = !DILocation(line: 85, column: 49, scope: !153)
!162 = !DILocation(line: 87, column: 1, scope: !153)
!163 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !164, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!164 = !DISubroutineType(types: !165)
!165 = !{null, !141}
!166 = !DILocalVariable(name: "lockname", arg: 1, scope: !163, file: !2, line: 89, type: !141)
!167 = !DILocation(line: 89, column: 17, scope: !163)
!168 = !DILocation(line: 91, column: 1, scope: !163)
!169 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !164, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!170 = !DILocalVariable(name: "str", arg: 1, scope: !169, file: !2, line: 93, type: !141)
!171 = !DILocation(line: 93, column: 18, scope: !169)
!172 = !DILocation(line: 94, column: 18, scope: !169)
!173 = !DILocation(line: 94, column: 3, scope: !169)
!174 = !DILocation(line: 95, column: 3, scope: !169)
!175 = !DILocation(line: 96, column: 3, scope: !169)
!176 = !DILocation(line: 97, column: 1, scope: !169)
!177 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !178, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!178 = !DISubroutineType(types: !179)
!179 = !{!20, !180}
!180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !81, size: 64)
!181 = !DILocalVariable(name: "p", arg: 1, scope: !177, file: !2, line: 100, type: !180)
!182 = !DILocation(line: 100, column: 24, scope: !177)
!183 = !DILocation(line: 101, column: 6, scope: !177)
!184 = !DILocation(line: 101, column: 8, scope: !177)
!185 = !DILocation(line: 102, column: 1, scope: !177)
!186 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !178, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!187 = !DILocalVariable(name: "p", arg: 1, scope: !186, file: !2, line: 104, type: !180)
!188 = !DILocation(line: 104, column: 20, scope: !186)
!189 = !DILocation(line: 105, column: 6, scope: !186)
!190 = !DILocation(line: 105, column: 8, scope: !186)
!191 = !DILocation(line: 106, column: 1, scope: !186)
!192 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !178, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!193 = !DILocalVariable(name: "p", arg: 1, scope: !192, file: !2, line: 110, type: !180)
!194 = !DILocation(line: 110, column: 22, scope: !192)
!195 = !DILocation(line: 111, column: 10, scope: !192)
!196 = !DILocation(line: 111, column: 5, scope: !192)
!197 = !DILocation(line: 112, column: 1, scope: !192)
!198 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !178, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!199 = !DILocalVariable(name: "p", arg: 1, scope: !198, file: !2, line: 115, type: !180)
!200 = !DILocation(line: 115, column: 24, scope: !198)
!201 = !DILocation(line: 116, column: 10, scope: !198)
!202 = !DILocation(line: 116, column: 5, scope: !198)
!203 = !DILocation(line: 117, column: 1, scope: !198)
!204 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !205, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!205 = !DISubroutineType(types: !206)
!206 = !{null}
!207 = !DILocation(line: 135, column: 20, scope: !204)
!208 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_long_17_bad", scope: !209, file: !209, line: 29, type: !205, scopeLine: 30, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!209 = !DIFile(filename: "src/uaf/uaf32.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "371ce1dd047a5cc9a95bf683a3984b24")
!210 = !DILocalVariable(name: "i", scope: !208, file: !209, line: 31, type: !81)
!211 = !DILocation(line: 31, column: 9, scope: !208)
!212 = !DILocalVariable(name: "j", scope: !208, file: !209, line: 31, type: !81)
!213 = !DILocation(line: 31, column: 11, scope: !208)
!214 = !DILocalVariable(name: "data", scope: !208, file: !209, line: 32, type: !21)
!215 = !DILocation(line: 32, column: 12, scope: !208)
!216 = !DILocation(line: 34, column: 10, scope: !208)
!217 = !DILocation(line: 35, column: 11, scope: !218)
!218 = distinct !DILexicalBlock(scope: !208, file: !209, line: 35, column: 5)
!219 = !DILocation(line: 35, column: 9, scope: !218)
!220 = !DILocation(line: 35, column: 16, scope: !221)
!221 = distinct !DILexicalBlock(scope: !218, file: !209, line: 35, column: 5)
!222 = !DILocation(line: 35, column: 18, scope: !221)
!223 = !DILocation(line: 35, column: 5, scope: !218)
!224 = !DILocation(line: 37, column: 24, scope: !225)
!225 = distinct !DILexicalBlock(scope: !221, file: !209, line: 36, column: 5)
!226 = !DILocation(line: 37, column: 14, scope: !225)
!227 = !DILocation(line: 38, column: 13, scope: !228)
!228 = distinct !DILexicalBlock(scope: !225, file: !209, line: 38, column: 13)
!229 = !DILocation(line: 38, column: 18, scope: !228)
!230 = !DILocation(line: 38, column: 13, scope: !225)
!231 = !DILocation(line: 38, column: 28, scope: !232)
!232 = distinct !DILexicalBlock(scope: !228, file: !209, line: 38, column: 27)
!233 = !DILocalVariable(name: "i", scope: !234, file: !209, line: 40, type: !235)
!234 = distinct !DILexicalBlock(scope: !225, file: !209, line: 39, column: 9)
!235 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !236, line: 46, baseType: !237)
!236 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!237 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!238 = !DILocation(line: 40, column: 20, scope: !234)
!239 = !DILocation(line: 41, column: 19, scope: !240)
!240 = distinct !DILexicalBlock(scope: !234, file: !209, line: 41, column: 13)
!241 = !DILocation(line: 41, column: 17, scope: !240)
!242 = !DILocation(line: 41, column: 24, scope: !243)
!243 = distinct !DILexicalBlock(scope: !240, file: !209, line: 41, column: 13)
!244 = !DILocation(line: 41, column: 26, scope: !243)
!245 = !DILocation(line: 41, column: 13, scope: !240)
!246 = !DILocation(line: 43, column: 17, scope: !247)
!247 = distinct !DILexicalBlock(scope: !243, file: !209, line: 42, column: 13)
!248 = !DILocation(line: 43, column: 22, scope: !247)
!249 = !DILocation(line: 43, column: 25, scope: !247)
!250 = !DILocation(line: 44, column: 13, scope: !247)
!251 = !DILocation(line: 41, column: 34, scope: !243)
!252 = !DILocation(line: 41, column: 13, scope: !243)
!253 = distinct !{!253, !245, !254, !255}
!254 = !DILocation(line: 44, column: 13, scope: !240)
!255 = !{!"llvm.loop.mustprogress"}
!256 = !DILocation(line: 47, column: 14, scope: !225)
!257 = !DILocation(line: 47, column: 9, scope: !225)
!258 = !DILocation(line: 48, column: 5, scope: !225)
!259 = !DILocation(line: 35, column: 24, scope: !221)
!260 = !DILocation(line: 35, column: 5, scope: !221)
!261 = distinct !{!261, !223, !262, !255}
!262 = !DILocation(line: 48, column: 5, scope: !218)
!263 = !DILocation(line: 49, column: 11, scope: !264)
!264 = distinct !DILexicalBlock(scope: !208, file: !209, line: 49, column: 5)
!265 = !DILocation(line: 49, column: 9, scope: !264)
!266 = !DILocation(line: 49, column: 16, scope: !267)
!267 = distinct !DILexicalBlock(scope: !264, file: !209, line: 49, column: 5)
!268 = !DILocation(line: 49, column: 18, scope: !267)
!269 = !DILocation(line: 49, column: 5, scope: !264)
!270 = !DILocation(line: 52, column: 17, scope: !271)
!271 = distinct !DILexicalBlock(scope: !267, file: !209, line: 50, column: 5)
!272 = !DILocation(line: 52, column: 9, scope: !271)
!273 = !DILocation(line: 54, column: 5, scope: !271)
!274 = !DILocation(line: 49, column: 24, scope: !267)
!275 = !DILocation(line: 49, column: 5, scope: !267)
!276 = distinct !{!276, !269, !277, !255}
!277 = !DILocation(line: 54, column: 5, scope: !264)
!278 = !DILocation(line: 55, column: 1, scope: !208)
!279 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_long_17_good", scope: !209, file: !209, line: 117, type: !205, scopeLine: 118, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!280 = !DILocation(line: 119, column: 5, scope: !279)
!281 = !DILocation(line: 120, column: 5, scope: !279)
!282 = !DILocation(line: 121, column: 1, scope: !279)
!283 = distinct !DISubprogram(name: "main", scope: !209, file: !209, line: 130, type: !284, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !36)
!284 = !DISubroutineType(types: !285)
!285 = !{!81, !81, !286}
!286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!287 = !DILocalVariable(name: "argc", arg: 1, scope: !283, file: !209, line: 130, type: !81)
!288 = !DILocation(line: 130, column: 14, scope: !283)
!289 = !DILocalVariable(name: "argv", arg: 2, scope: !283, file: !209, line: 130, type: !286)
!290 = !DILocation(line: 130, column: 27, scope: !283)
!291 = !DILocation(line: 133, column: 22, scope: !283)
!292 = !DILocation(line: 133, column: 12, scope: !283)
!293 = !DILocation(line: 133, column: 5, scope: !283)
!294 = !DILocation(line: 134, column: 5, scope: !283)
!295 = !DILocation(line: 135, column: 5, scope: !283)
!296 = !DILocation(line: 136, column: 5, scope: !283)
!297 = distinct !DISubprogram(name: "goodB2G", scope: !209, file: !209, line: 60, type: !205, scopeLine: 61, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !17, retainedNodes: !36)
!298 = !DILocalVariable(name: "i", scope: !297, file: !209, line: 62, type: !81)
!299 = !DILocation(line: 62, column: 9, scope: !297)
!300 = !DILocalVariable(name: "k", scope: !297, file: !209, line: 62, type: !81)
!301 = !DILocation(line: 62, column: 11, scope: !297)
!302 = !DILocalVariable(name: "data", scope: !297, file: !209, line: 63, type: !21)
!303 = !DILocation(line: 63, column: 12, scope: !297)
!304 = !DILocation(line: 65, column: 10, scope: !297)
!305 = !DILocation(line: 66, column: 11, scope: !306)
!306 = distinct !DILexicalBlock(scope: !297, file: !209, line: 66, column: 5)
!307 = !DILocation(line: 66, column: 9, scope: !306)
!308 = !DILocation(line: 66, column: 16, scope: !309)
!309 = distinct !DILexicalBlock(scope: !306, file: !209, line: 66, column: 5)
!310 = !DILocation(line: 66, column: 18, scope: !309)
!311 = !DILocation(line: 66, column: 5, scope: !306)
!312 = !DILocation(line: 68, column: 24, scope: !313)
!313 = distinct !DILexicalBlock(scope: !309, file: !209, line: 67, column: 5)
!314 = !DILocation(line: 68, column: 14, scope: !313)
!315 = !DILocation(line: 69, column: 13, scope: !316)
!316 = distinct !DILexicalBlock(scope: !313, file: !209, line: 69, column: 13)
!317 = !DILocation(line: 69, column: 18, scope: !316)
!318 = !DILocation(line: 69, column: 13, scope: !313)
!319 = !DILocation(line: 69, column: 28, scope: !320)
!320 = distinct !DILexicalBlock(scope: !316, file: !209, line: 69, column: 27)
!321 = !DILocalVariable(name: "i", scope: !322, file: !209, line: 71, type: !235)
!322 = distinct !DILexicalBlock(scope: !313, file: !209, line: 70, column: 9)
!323 = !DILocation(line: 71, column: 20, scope: !322)
!324 = !DILocation(line: 72, column: 19, scope: !325)
!325 = distinct !DILexicalBlock(scope: !322, file: !209, line: 72, column: 13)
!326 = !DILocation(line: 72, column: 17, scope: !325)
!327 = !DILocation(line: 72, column: 24, scope: !328)
!328 = distinct !DILexicalBlock(scope: !325, file: !209, line: 72, column: 13)
!329 = !DILocation(line: 72, column: 26, scope: !328)
!330 = !DILocation(line: 72, column: 13, scope: !325)
!331 = !DILocation(line: 74, column: 17, scope: !332)
!332 = distinct !DILexicalBlock(scope: !328, file: !209, line: 73, column: 13)
!333 = !DILocation(line: 74, column: 22, scope: !332)
!334 = !DILocation(line: 74, column: 25, scope: !332)
!335 = !DILocation(line: 75, column: 13, scope: !332)
!336 = !DILocation(line: 72, column: 34, scope: !328)
!337 = !DILocation(line: 72, column: 13, scope: !328)
!338 = distinct !{!338, !330, !339, !255}
!339 = !DILocation(line: 75, column: 13, scope: !325)
!340 = !DILocation(line: 78, column: 14, scope: !313)
!341 = !DILocation(line: 78, column: 9, scope: !313)
!342 = !DILocation(line: 79, column: 5, scope: !313)
!343 = !DILocation(line: 66, column: 24, scope: !309)
!344 = !DILocation(line: 66, column: 5, scope: !309)
!345 = distinct !{!345, !311, !346, !255}
!346 = !DILocation(line: 79, column: 5, scope: !306)
!347 = !DILocation(line: 80, column: 11, scope: !348)
!348 = distinct !DILexicalBlock(scope: !297, file: !209, line: 80, column: 5)
!349 = !DILocation(line: 80, column: 9, scope: !348)
!350 = !DILocation(line: 80, column: 16, scope: !351)
!351 = distinct !DILexicalBlock(scope: !348, file: !209, line: 80, column: 5)
!352 = !DILocation(line: 80, column: 18, scope: !351)
!353 = !DILocation(line: 80, column: 5, scope: !348)
!354 = !DILocation(line: 86, column: 5, scope: !355)
!355 = distinct !DILexicalBlock(scope: !351, file: !209, line: 81, column: 5)
!356 = !DILocation(line: 80, column: 24, scope: !351)
!357 = !DILocation(line: 80, column: 5, scope: !351)
!358 = distinct !{!358, !353, !359, !255}
!359 = !DILocation(line: 86, column: 5, scope: !348)
!360 = !DILocation(line: 87, column: 1, scope: !297)
!361 = distinct !DISubprogram(name: "goodG2B", scope: !209, file: !209, line: 90, type: !205, scopeLine: 91, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !17, retainedNodes: !36)
!362 = !DILocalVariable(name: "h", scope: !361, file: !209, line: 92, type: !81)
!363 = !DILocation(line: 92, column: 9, scope: !361)
!364 = !DILocalVariable(name: "j", scope: !361, file: !209, line: 92, type: !81)
!365 = !DILocation(line: 92, column: 11, scope: !361)
!366 = !DILocalVariable(name: "data", scope: !361, file: !209, line: 93, type: !21)
!367 = !DILocation(line: 93, column: 12, scope: !361)
!368 = !DILocation(line: 95, column: 10, scope: !361)
!369 = !DILocation(line: 96, column: 11, scope: !370)
!370 = distinct !DILexicalBlock(scope: !361, file: !209, line: 96, column: 5)
!371 = !DILocation(line: 96, column: 9, scope: !370)
!372 = !DILocation(line: 96, column: 16, scope: !373)
!373 = distinct !DILexicalBlock(scope: !370, file: !209, line: 96, column: 5)
!374 = !DILocation(line: 96, column: 18, scope: !373)
!375 = !DILocation(line: 96, column: 5, scope: !370)
!376 = !DILocation(line: 98, column: 24, scope: !377)
!377 = distinct !DILexicalBlock(scope: !373, file: !209, line: 97, column: 5)
!378 = !DILocation(line: 98, column: 14, scope: !377)
!379 = !DILocation(line: 99, column: 13, scope: !380)
!380 = distinct !DILexicalBlock(scope: !377, file: !209, line: 99, column: 13)
!381 = !DILocation(line: 99, column: 18, scope: !380)
!382 = !DILocation(line: 99, column: 13, scope: !377)
!383 = !DILocation(line: 99, column: 28, scope: !384)
!384 = distinct !DILexicalBlock(scope: !380, file: !209, line: 99, column: 27)
!385 = !DILocalVariable(name: "i", scope: !386, file: !209, line: 101, type: !235)
!386 = distinct !DILexicalBlock(scope: !377, file: !209, line: 100, column: 9)
!387 = !DILocation(line: 101, column: 20, scope: !386)
!388 = !DILocation(line: 102, column: 19, scope: !389)
!389 = distinct !DILexicalBlock(scope: !386, file: !209, line: 102, column: 13)
!390 = !DILocation(line: 102, column: 17, scope: !389)
!391 = !DILocation(line: 102, column: 24, scope: !392)
!392 = distinct !DILexicalBlock(scope: !389, file: !209, line: 102, column: 13)
!393 = !DILocation(line: 102, column: 26, scope: !392)
!394 = !DILocation(line: 102, column: 13, scope: !389)
!395 = !DILocation(line: 104, column: 17, scope: !396)
!396 = distinct !DILexicalBlock(scope: !392, file: !209, line: 103, column: 13)
!397 = !DILocation(line: 104, column: 22, scope: !396)
!398 = !DILocation(line: 104, column: 25, scope: !396)
!399 = !DILocation(line: 105, column: 13, scope: !396)
!400 = !DILocation(line: 102, column: 34, scope: !392)
!401 = !DILocation(line: 102, column: 13, scope: !392)
!402 = distinct !{!402, !394, !403, !255}
!403 = !DILocation(line: 105, column: 13, scope: !389)
!404 = !DILocation(line: 108, column: 5, scope: !377)
!405 = !DILocation(line: 96, column: 24, scope: !373)
!406 = !DILocation(line: 96, column: 5, scope: !373)
!407 = distinct !{!407, !375, !408, !255}
!408 = !DILocation(line: 108, column: 5, scope: !370)
!409 = !DILocation(line: 109, column: 11, scope: !410)
!410 = distinct !DILexicalBlock(scope: !361, file: !209, line: 109, column: 5)
!411 = !DILocation(line: 109, column: 9, scope: !410)
!412 = !DILocation(line: 109, column: 16, scope: !413)
!413 = distinct !DILexicalBlock(scope: !410, file: !209, line: 109, column: 5)
!414 = !DILocation(line: 109, column: 18, scope: !413)
!415 = !DILocation(line: 109, column: 5, scope: !410)
!416 = !DILocation(line: 112, column: 21, scope: !417)
!417 = distinct !DILexicalBlock(scope: !413, file: !209, line: 110, column: 5)
!418 = !DILocation(line: 112, column: 9, scope: !417)
!419 = !DILocation(line: 114, column: 5, scope: !417)
!420 = !DILocation(line: 109, column: 24, scope: !413)
!421 = !DILocation(line: 109, column: 5, scope: !413)
!422 = distinct !{!422, !415, !423, !255}
!423 = !DILocation(line: 114, column: 5, scope: !410)
!424 = !DILocation(line: 115, column: 1, scope: !361)
