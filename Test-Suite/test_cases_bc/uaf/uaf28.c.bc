; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/uaf/uaf28.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf28.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@GLOBAL_CONST_FIVE = external constant i32, align 4
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !39 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !43, metadata !DIExpression()), !dbg !44
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !47
  ret void, !dbg !48
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !49 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !50, metadata !DIExpression()), !dbg !51
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !54
  ret void, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !56 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !57, metadata !DIExpression()), !dbg !58
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !61
  ret void, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !63 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !64, metadata !DIExpression()), !dbg !65
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !66, metadata !DIExpression()), !dbg !67
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !68
  ret void, !dbg !69
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !70 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !71, metadata !DIExpression()), !dbg !72
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !75
  ret void, !dbg !76
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !77 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !78, metadata !DIExpression()), !dbg !79
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !82
  ret void, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !84 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %0 = load i32, ptr %n.addr, align 4, !dbg !90
  %conv = sext i32 %0 to i64, !dbg !90
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !91
  ret ptr %call, !dbg !92
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, ptr %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !97
  ret ptr %call, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, ptr %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !103
  ret ptr %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !105 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !106, metadata !DIExpression()), !dbg !107
  %0 = load i32, ptr %n.addr, align 4, !dbg !108
  %conv = sext i32 %0 to i64, !dbg !108
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !109
  ret ptr %call, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !111 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !112, metadata !DIExpression()), !dbg !113
  %0 = load i32, ptr %n.addr, align 4, !dbg !114
  %conv = sext i32 %0 to i64, !dbg !114
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !115
  ret ptr %call, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !117 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !118, metadata !DIExpression()), !dbg !119
  %0 = load i32, ptr %n.addr, align 4, !dbg !120
  %conv = sext i32 %0 to i64, !dbg !120
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !121
  ret ptr %call, !dbg !122
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !123 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !124, metadata !DIExpression()), !dbg !125
  %0 = load i32, ptr %n.addr, align 4, !dbg !126
  %conv = sext i32 %0 to i64, !dbg !126
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !127
  ret ptr %call, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !129 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !130, metadata !DIExpression()), !dbg !131
  %0 = load i32, ptr %n.addr, align 4, !dbg !132
  %conv = sext i32 %0 to i64, !dbg !132
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !133
  ret ptr %call, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !135 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !138, metadata !DIExpression()), !dbg !139
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !140, metadata !DIExpression()), !dbg !141
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !142
  ret void, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !144 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !148, metadata !DIExpression()), !dbg !149
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !150, metadata !DIExpression()), !dbg !151
  ret void, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !153 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !154, metadata !DIExpression()), !dbg !155
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !156, metadata !DIExpression()), !dbg !157
  ret void, !dbg !158
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !159 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !162, metadata !DIExpression()), !dbg !163
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !164, metadata !DIExpression()), !dbg !165
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !166, metadata !DIExpression()), !dbg !167
  ret void, !dbg !168
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !169 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !172, metadata !DIExpression()), !dbg !173
  ret void, !dbg !174
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !175 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !176, metadata !DIExpression()), !dbg !177
  %0 = load ptr, ptr %str.addr, align 8, !dbg !178
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !179
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !180
  %call2 = call i32 @getchar(), !dbg !181
  ret void, !dbg !182
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !183 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !187, metadata !DIExpression()), !dbg !188
  %0 = load ptr, ptr %p.addr, align 8, !dbg !189
  store i32 0, ptr %0, align 4, !dbg !190
  %1 = load ptr, ptr %retval, align 8, !dbg !191
  ret ptr %1, !dbg !191
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !192 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !193, metadata !DIExpression()), !dbg !194
  %0 = load ptr, ptr %p.addr, align 8, !dbg !195
  store i32 0, ptr %0, align 4, !dbg !196
  %1 = load ptr, ptr %retval, align 8, !dbg !197
  ret ptr %1, !dbg !197
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !198 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !199, metadata !DIExpression()), !dbg !200
  %0 = load ptr, ptr %p.addr, align 8, !dbg !201
  call void @free(ptr noundef %0) #7, !dbg !202
  %1 = load ptr, ptr %retval, align 8, !dbg !203
  ret ptr %1, !dbg !203
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !204 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !205, metadata !DIExpression()), !dbg !206
  %0 = load ptr, ptr %p.addr, align 8, !dbg !207
  call void @free(ptr noundef %0) #7, !dbg !208
  %1 = load ptr, ptr %retval, align 8, !dbg !209
  ret ptr %1, !dbg !209
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !210 {
entry:
  ret void, !dbg !213
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_long_13_bad() #0 !dbg !214 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !215, metadata !DIExpression()), !dbg !216
  store ptr null, ptr %data, align 8, !dbg !217
  %0 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !218
  %cmp = icmp eq i32 %0, 5, !dbg !220
  br i1 %cmp, label %if.then, label %if.end4, !dbg !221

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !222
  store ptr %call, ptr %data, align 8, !dbg !224
  %1 = load ptr, ptr %data, align 8, !dbg !225
  %cmp1 = icmp eq ptr %1, null, !dbg !227
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !228

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !229
  unreachable, !dbg !229

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !231, metadata !DIExpression()), !dbg !236
  store i64 0, ptr %i, align 8, !dbg !237
  br label %for.cond, !dbg !239

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !240
  %cmp3 = icmp ult i64 %2, 100, !dbg !242
  br i1 %cmp3, label %for.body, label %for.end, !dbg !243

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !244
  %4 = load i64, ptr %i, align 8, !dbg !246
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !244
  store i64 5, ptr %arrayidx, align 8, !dbg !247
  br label %for.inc, !dbg !248

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8, !dbg !249
  %inc = add i64 %5, 1, !dbg !249
  store i64 %inc, ptr %i, align 8, !dbg !249
  br label %for.cond, !dbg !250, !llvm.loop !251

for.end:                                          ; preds = %for.cond
  %6 = load ptr, ptr %data, align 8, !dbg !254
  call void @free(ptr noundef %6) #7, !dbg !255
  br label %if.end4, !dbg !256

if.end4:                                          ; preds = %for.end, %entry
  %7 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !257
  %cmp5 = icmp eq i32 %7, 5, !dbg !259
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !260

if.then6:                                         ; preds = %if.end4
  %8 = load ptr, ptr %data, align 8, !dbg !261
  %call7 = call ptr @UAFFUNC(ptr noundef %8), !dbg !263
  br label %if.end8, !dbg !264

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !265
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_long_13_good() #0 !dbg !266 {
entry:
  call void @goodB2G1(), !dbg !267
  call void @goodB2G2(), !dbg !268
  call void @goodG2B1(), !dbg !269
  call void @goodG2B2(), !dbg !270
  ret void, !dbg !271
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !272 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !276, metadata !DIExpression()), !dbg !277
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !278, metadata !DIExpression()), !dbg !279
  %call = call i64 @time(ptr noundef null) #7, !dbg !280
  %conv = trunc i64 %call to i32, !dbg !281
  call void @srand(i32 noundef %conv) #7, !dbg !282
  call void @CWE416_Use_After_Free__malloc_free_long_13_good(), !dbg !283
  call void @CWE416_Use_After_Free__malloc_free_long_13_bad(), !dbg !284
  ret i32 0, !dbg !285
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !286 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !287, metadata !DIExpression()), !dbg !288
  store ptr null, ptr %data, align 8, !dbg !289
  %0 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !290
  %cmp = icmp eq i32 %0, 5, !dbg !292
  br i1 %cmp, label %if.then, label %if.end4, !dbg !293

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !294
  store ptr %call, ptr %data, align 8, !dbg !296
  %1 = load ptr, ptr %data, align 8, !dbg !297
  %cmp1 = icmp eq ptr %1, null, !dbg !299
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !300

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !301
  unreachable, !dbg !301

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !303, metadata !DIExpression()), !dbg !305
  store i64 0, ptr %i, align 8, !dbg !306
  br label %for.cond, !dbg !308

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !309
  %cmp3 = icmp ult i64 %2, 100, !dbg !311
  br i1 %cmp3, label %for.body, label %for.end, !dbg !312

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !313
  %4 = load i64, ptr %i, align 8, !dbg !315
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !313
  store i64 5, ptr %arrayidx, align 8, !dbg !316
  br label %for.inc, !dbg !317

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8, !dbg !318
  %inc = add i64 %5, 1, !dbg !318
  store i64 %inc, ptr %i, align 8, !dbg !318
  br label %for.cond, !dbg !319, !llvm.loop !320

for.end:                                          ; preds = %for.cond
  %6 = load ptr, ptr %data, align 8, !dbg !322
  call void @free(ptr noundef %6) #7, !dbg !323
  br label %if.end4, !dbg !324

if.end4:                                          ; preds = %for.end, %entry
  %7 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !325
  %cmp5 = icmp ne i32 %7, 5, !dbg !327
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !328

if.then6:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.3), !dbg !329
  br label %if.end7, !dbg !331

if.else:                                          ; preds = %if.end4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void, !dbg !332
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !333 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !334, metadata !DIExpression()), !dbg !335
  store ptr null, ptr %data, align 8, !dbg !336
  %0 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !337
  %cmp = icmp eq i32 %0, 5, !dbg !339
  br i1 %cmp, label %if.then, label %if.end4, !dbg !340

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !341
  store ptr %call, ptr %data, align 8, !dbg !343
  %1 = load ptr, ptr %data, align 8, !dbg !344
  %cmp1 = icmp eq ptr %1, null, !dbg !346
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !347

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !348
  unreachable, !dbg !348

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !350, metadata !DIExpression()), !dbg !352
  store i64 0, ptr %i, align 8, !dbg !353
  br label %for.cond, !dbg !355

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !356
  %cmp3 = icmp ult i64 %2, 100, !dbg !358
  br i1 %cmp3, label %for.body, label %for.end, !dbg !359

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !360
  %4 = load i64, ptr %i, align 8, !dbg !362
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !360
  store i64 5, ptr %arrayidx, align 8, !dbg !363
  br label %for.inc, !dbg !364

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8, !dbg !365
  %inc = add i64 %5, 1, !dbg !365
  store i64 %inc, ptr %i, align 8, !dbg !365
  br label %for.cond, !dbg !366, !llvm.loop !367

for.end:                                          ; preds = %for.cond
  %6 = load ptr, ptr %data, align 8, !dbg !369
  call void @free(ptr noundef %6) #7, !dbg !370
  br label %if.end4, !dbg !371

if.end4:                                          ; preds = %for.end, %entry
  %7 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !372
  %cmp5 = icmp eq i32 %7, 5, !dbg !374
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !375

if.then6:                                         ; preds = %if.end4
  br label %if.end7, !dbg !376

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !378
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !379 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !380, metadata !DIExpression()), !dbg !381
  store ptr null, ptr %data, align 8, !dbg !382
  %0 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !383
  %cmp = icmp ne i32 %0, 5, !dbg !385
  br i1 %cmp, label %if.then, label %if.else, !dbg !386

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !387
  br label %if.end4, !dbg !389

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !390
  store ptr %call, ptr %data, align 8, !dbg !392
  %1 = load ptr, ptr %data, align 8, !dbg !393
  %cmp1 = icmp eq ptr %1, null, !dbg !395
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !396

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !397
  unreachable, !dbg !397

if.end:                                           ; preds = %if.else
  call void @llvm.dbg.declare(metadata ptr %i, metadata !399, metadata !DIExpression()), !dbg !401
  store i64 0, ptr %i, align 8, !dbg !402
  br label %for.cond, !dbg !404

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !405
  %cmp3 = icmp ult i64 %2, 100, !dbg !407
  br i1 %cmp3, label %for.body, label %for.end, !dbg !408

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !409
  %4 = load i64, ptr %i, align 8, !dbg !411
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !409
  store i64 5, ptr %arrayidx, align 8, !dbg !412
  br label %for.inc, !dbg !413

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8, !dbg !414
  %inc = add i64 %5, 1, !dbg !414
  store i64 %inc, ptr %i, align 8, !dbg !414
  br label %for.cond, !dbg !415, !llvm.loop !416

for.end:                                          ; preds = %for.cond
  br label %if.end4

if.end4:                                          ; preds = %for.end, %if.then
  %6 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !418
  %cmp5 = icmp eq i32 %6, 5, !dbg !420
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !421

if.then6:                                         ; preds = %if.end4
  %7 = load ptr, ptr %data, align 8, !dbg !422
  %call7 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !424
  br label %if.end8, !dbg !425

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !426
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !427 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !428, metadata !DIExpression()), !dbg !429
  store ptr null, ptr %data, align 8, !dbg !430
  %0 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !431
  %cmp = icmp eq i32 %0, 5, !dbg !433
  br i1 %cmp, label %if.then, label %if.end4, !dbg !434

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !435
  store ptr %call, ptr %data, align 8, !dbg !437
  %1 = load ptr, ptr %data, align 8, !dbg !438
  %cmp1 = icmp eq ptr %1, null, !dbg !440
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !441

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !442
  unreachable, !dbg !442

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !444, metadata !DIExpression()), !dbg !446
  store i64 0, ptr %i, align 8, !dbg !447
  br label %for.cond, !dbg !449

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !450
  %cmp3 = icmp ult i64 %2, 100, !dbg !452
  br i1 %cmp3, label %for.body, label %for.end, !dbg !453

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !454
  %4 = load i64, ptr %i, align 8, !dbg !456
  %arrayidx = getelementptr inbounds i64, ptr %3, i64 %4, !dbg !454
  store i64 5, ptr %arrayidx, align 8, !dbg !457
  br label %for.inc, !dbg !458

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8, !dbg !459
  %inc = add i64 %5, 1, !dbg !459
  store i64 %inc, ptr %i, align 8, !dbg !459
  br label %for.cond, !dbg !460, !llvm.loop !461

for.end:                                          ; preds = %for.cond
  br label %if.end4, !dbg !463

if.end4:                                          ; preds = %for.end, %entry
  %6 = load i32, ptr @GLOBAL_CONST_FIVE, align 4, !dbg !464
  %cmp5 = icmp eq i32 %6, 5, !dbg !466
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !467

if.then6:                                         ; preds = %if.end4
  %7 = load ptr, ptr %data, align 8, !dbg !468
  %call7 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !470
  br label %if.end8, !dbg !471

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !472
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!23}
!llvm.module.flags = !{!31, !32, !33, !34, !35, !36, !37}
!llvm.ident = !{!38}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 83, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/uaf/uaf28.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "165180d3d74455ccfd4d2ed7b51c02c1")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 21)
!23 = distinct !DICompileUnit(language: DW_LANG_C11, file: !24, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !25, globals: !30, splitDebugInlining: false, nameTableKind: None)
!24 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf28.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "165180d3d74455ccfd4d2ed7b51c02c1")
!25 = !{!26, !27, !29}
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64)
!28 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!29 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!30 = !{!0, !7, !12, !17}
!31 = !{i32 7, !"Dwarf Version", i32 5}
!32 = !{i32 2, !"Debug Info Version", i32 3}
!33 = !{i32 1, !"wchar_size", i32 4}
!34 = !{i32 8, !"PIC Level", i32 2}
!35 = !{i32 7, !"PIE Level", i32 2}
!36 = !{i32 7, !"uwtable", i32 2}
!37 = !{i32 7, !"frame-pointer", i32 2}
!38 = !{!"clang version 16.0.0"}
!39 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !40, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!40 = !DISubroutineType(types: !41)
!41 = !{null, !26, !26}
!42 = !{}
!43 = !DILocalVariable(name: "p", arg: 1, scope: !39, file: !2, line: 4, type: !26)
!44 = !DILocation(line: 4, column: 22, scope: !39)
!45 = !DILocalVariable(name: "q", arg: 2, scope: !39, file: !2, line: 4, type: !26)
!46 = !DILocation(line: 4, column: 31, scope: !39)
!47 = !DILocation(line: 5, column: 3, scope: !39)
!48 = !DILocation(line: 6, column: 1, scope: !39)
!49 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !40, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!50 = !DILocalVariable(name: "p", arg: 1, scope: !49, file: !2, line: 8, type: !26)
!51 = !DILocation(line: 8, column: 25, scope: !49)
!52 = !DILocalVariable(name: "q", arg: 2, scope: !49, file: !2, line: 8, type: !26)
!53 = !DILocation(line: 8, column: 34, scope: !49)
!54 = !DILocation(line: 9, column: 3, scope: !49)
!55 = !DILocation(line: 10, column: 1, scope: !49)
!56 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !40, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!57 = !DILocalVariable(name: "p", arg: 1, scope: !56, file: !2, line: 12, type: !26)
!58 = !DILocation(line: 12, column: 21, scope: !56)
!59 = !DILocalVariable(name: "q", arg: 2, scope: !56, file: !2, line: 12, type: !26)
!60 = !DILocation(line: 12, column: 30, scope: !56)
!61 = !DILocation(line: 13, column: 3, scope: !56)
!62 = !DILocation(line: 14, column: 1, scope: !56)
!63 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !40, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!64 = !DILocalVariable(name: "p", arg: 1, scope: !63, file: !2, line: 16, type: !26)
!65 = !DILocation(line: 16, column: 20, scope: !63)
!66 = !DILocalVariable(name: "q", arg: 2, scope: !63, file: !2, line: 16, type: !26)
!67 = !DILocation(line: 16, column: 29, scope: !63)
!68 = !DILocation(line: 17, column: 3, scope: !63)
!69 = !DILocation(line: 18, column: 1, scope: !63)
!70 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !40, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!71 = !DILocalVariable(name: "p", arg: 1, scope: !70, file: !2, line: 20, type: !26)
!72 = !DILocation(line: 20, column: 34, scope: !70)
!73 = !DILocalVariable(name: "q", arg: 2, scope: !70, file: !2, line: 20, type: !26)
!74 = !DILocation(line: 20, column: 43, scope: !70)
!75 = !DILocation(line: 21, column: 3, scope: !70)
!76 = !DILocation(line: 22, column: 1, scope: !70)
!77 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !40, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!78 = !DILocalVariable(name: "p", arg: 1, scope: !77, file: !2, line: 24, type: !26)
!79 = !DILocation(line: 24, column: 33, scope: !77)
!80 = !DILocalVariable(name: "q", arg: 2, scope: !77, file: !2, line: 24, type: !26)
!81 = !DILocation(line: 24, column: 42, scope: !77)
!82 = !DILocation(line: 25, column: 3, scope: !77)
!83 = !DILocation(line: 26, column: 1, scope: !77)
!84 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !85, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!85 = !DISubroutineType(types: !86)
!86 = !{!26, !87}
!87 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!88 = !DILocalVariable(name: "n", arg: 1, scope: !84, file: !2, line: 29, type: !87)
!89 = !DILocation(line: 29, column: 22, scope: !84)
!90 = !DILocation(line: 30, column: 17, scope: !84)
!91 = !DILocation(line: 30, column: 10, scope: !84)
!92 = !DILocation(line: 30, column: 3, scope: !84)
!93 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !85, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!94 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !2, line: 33, type: !87)
!95 = !DILocation(line: 33, column: 28, scope: !93)
!96 = !DILocation(line: 34, column: 19, scope: !93)
!97 = !DILocation(line: 34, column: 12, scope: !93)
!98 = !DILocation(line: 34, column: 5, scope: !93)
!99 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !85, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !2, line: 37, type: !87)
!101 = !DILocation(line: 37, column: 21, scope: !99)
!102 = !DILocation(line: 38, column: 17, scope: !99)
!103 = !DILocation(line: 38, column: 10, scope: !99)
!104 = !DILocation(line: 38, column: 3, scope: !99)
!105 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !85, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!106 = !DILocalVariable(name: "n", arg: 1, scope: !105, file: !2, line: 41, type: !87)
!107 = !DILocation(line: 41, column: 21, scope: !105)
!108 = !DILocation(line: 42, column: 17, scope: !105)
!109 = !DILocation(line: 42, column: 10, scope: !105)
!110 = !DILocation(line: 42, column: 3, scope: !105)
!111 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !85, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!112 = !DILocalVariable(name: "n", arg: 1, scope: !111, file: !2, line: 45, type: !87)
!113 = !DILocation(line: 45, column: 21, scope: !111)
!114 = !DILocation(line: 46, column: 17, scope: !111)
!115 = !DILocation(line: 46, column: 10, scope: !111)
!116 = !DILocation(line: 46, column: 3, scope: !111)
!117 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !85, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!118 = !DILocalVariable(name: "n", arg: 1, scope: !117, file: !2, line: 49, type: !87)
!119 = !DILocation(line: 49, column: 21, scope: !117)
!120 = !DILocation(line: 50, column: 17, scope: !117)
!121 = !DILocation(line: 50, column: 10, scope: !117)
!122 = !DILocation(line: 50, column: 3, scope: !117)
!123 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !85, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!124 = !DILocalVariable(name: "n", arg: 1, scope: !123, file: !2, line: 53, type: !87)
!125 = !DILocation(line: 53, column: 21, scope: !123)
!126 = !DILocation(line: 54, column: 17, scope: !123)
!127 = !DILocation(line: 54, column: 10, scope: !123)
!128 = !DILocation(line: 54, column: 3, scope: !123)
!129 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !85, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!130 = !DILocalVariable(name: "n", arg: 1, scope: !129, file: !2, line: 57, type: !87)
!131 = !DILocation(line: 57, column: 18, scope: !129)
!132 = !DILocation(line: 58, column: 17, scope: !129)
!133 = !DILocation(line: 58, column: 10, scope: !129)
!134 = !DILocation(line: 58, column: 3, scope: !129)
!135 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !136, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!136 = !DISubroutineType(types: !137)
!137 = !{null, !87, !87}
!138 = !DILocalVariable(name: "id", arg: 1, scope: !135, file: !2, line: 67, type: !87)
!139 = !DILocation(line: 67, column: 20, scope: !135)
!140 = !DILocalVariable(name: "flags", arg: 2, scope: !135, file: !2, line: 67, type: !87)
!141 = !DILocation(line: 67, column: 28, scope: !135)
!142 = !DILocation(line: 68, column: 3, scope: !135)
!143 = !DILocation(line: 69, column: 1, scope: !135)
!144 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !145, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!145 = !DISubroutineType(types: !146)
!146 = !{null, !87, !147}
!147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!148 = !DILocalVariable(name: "thdid", arg: 1, scope: !144, file: !2, line: 79, type: !87)
!149 = !DILocation(line: 79, column: 21, scope: !144)
!150 = !DILocalVariable(name: "cxt", arg: 2, scope: !144, file: !2, line: 79, type: !147)
!151 = !DILocation(line: 79, column: 34, scope: !144)
!152 = !DILocation(line: 81, column: 1, scope: !144)
!153 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !145, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!154 = !DILocalVariable(name: "thdid", arg: 1, scope: !153, file: !2, line: 82, type: !87)
!155 = !DILocation(line: 82, column: 21, scope: !153)
!156 = !DILocalVariable(name: "cxt", arg: 2, scope: !153, file: !2, line: 82, type: !147)
!157 = !DILocation(line: 82, column: 33, scope: !153)
!158 = !DILocation(line: 84, column: 1, scope: !153)
!159 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !160, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!160 = !DISubroutineType(types: !161)
!161 = !{null, !87, !147, !147}
!162 = !DILocalVariable(name: "thdid", arg: 1, scope: !159, file: !2, line: 85, type: !87)
!163 = !DILocation(line: 85, column: 26, scope: !159)
!164 = !DILocalVariable(name: "cxt", arg: 2, scope: !159, file: !2, line: 85, type: !147)
!165 = !DILocation(line: 85, column: 38, scope: !159)
!166 = !DILocalVariable(name: "lev", arg: 3, scope: !159, file: !2, line: 85, type: !147)
!167 = !DILocation(line: 85, column: 49, scope: !159)
!168 = !DILocation(line: 87, column: 1, scope: !159)
!169 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !170, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!170 = !DISubroutineType(types: !171)
!171 = !{null, !147}
!172 = !DILocalVariable(name: "lockname", arg: 1, scope: !169, file: !2, line: 89, type: !147)
!173 = !DILocation(line: 89, column: 17, scope: !169)
!174 = !DILocation(line: 91, column: 1, scope: !169)
!175 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !170, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!176 = !DILocalVariable(name: "str", arg: 1, scope: !175, file: !2, line: 93, type: !147)
!177 = !DILocation(line: 93, column: 18, scope: !175)
!178 = !DILocation(line: 94, column: 18, scope: !175)
!179 = !DILocation(line: 94, column: 3, scope: !175)
!180 = !DILocation(line: 95, column: 3, scope: !175)
!181 = !DILocation(line: 96, column: 3, scope: !175)
!182 = !DILocation(line: 97, column: 1, scope: !175)
!183 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !184, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!184 = !DISubroutineType(types: !185)
!185 = !{!26, !186}
!186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !87, size: 64)
!187 = !DILocalVariable(name: "p", arg: 1, scope: !183, file: !2, line: 100, type: !186)
!188 = !DILocation(line: 100, column: 24, scope: !183)
!189 = !DILocation(line: 101, column: 6, scope: !183)
!190 = !DILocation(line: 101, column: 8, scope: !183)
!191 = !DILocation(line: 102, column: 1, scope: !183)
!192 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !184, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!193 = !DILocalVariable(name: "p", arg: 1, scope: !192, file: !2, line: 104, type: !186)
!194 = !DILocation(line: 104, column: 20, scope: !192)
!195 = !DILocation(line: 105, column: 6, scope: !192)
!196 = !DILocation(line: 105, column: 8, scope: !192)
!197 = !DILocation(line: 106, column: 1, scope: !192)
!198 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !184, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!199 = !DILocalVariable(name: "p", arg: 1, scope: !198, file: !2, line: 110, type: !186)
!200 = !DILocation(line: 110, column: 22, scope: !198)
!201 = !DILocation(line: 111, column: 10, scope: !198)
!202 = !DILocation(line: 111, column: 5, scope: !198)
!203 = !DILocation(line: 112, column: 1, scope: !198)
!204 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !184, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!205 = !DILocalVariable(name: "p", arg: 1, scope: !204, file: !2, line: 115, type: !186)
!206 = !DILocation(line: 115, column: 24, scope: !204)
!207 = !DILocation(line: 116, column: 10, scope: !204)
!208 = !DILocation(line: 116, column: 5, scope: !204)
!209 = !DILocation(line: 117, column: 1, scope: !204)
!210 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !211, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!211 = !DISubroutineType(types: !212)
!212 = !{null}
!213 = !DILocation(line: 135, column: 20, scope: !210)
!214 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_long_13_bad", scope: !19, file: !19, line: 30, type: !211, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!215 = !DILocalVariable(name: "data", scope: !214, file: !19, line: 32, type: !27)
!216 = !DILocation(line: 32, column: 12, scope: !214)
!217 = !DILocation(line: 34, column: 10, scope: !214)
!218 = !DILocation(line: 35, column: 8, scope: !219)
!219 = distinct !DILexicalBlock(scope: !214, file: !19, line: 35, column: 8)
!220 = !DILocation(line: 35, column: 25, scope: !219)
!221 = !DILocation(line: 35, column: 8, scope: !214)
!222 = !DILocation(line: 37, column: 24, scope: !223)
!223 = distinct !DILexicalBlock(scope: !219, file: !19, line: 36, column: 5)
!224 = !DILocation(line: 37, column: 14, scope: !223)
!225 = !DILocation(line: 38, column: 13, scope: !226)
!226 = distinct !DILexicalBlock(scope: !223, file: !19, line: 38, column: 13)
!227 = !DILocation(line: 38, column: 18, scope: !226)
!228 = !DILocation(line: 38, column: 13, scope: !223)
!229 = !DILocation(line: 38, column: 28, scope: !230)
!230 = distinct !DILexicalBlock(scope: !226, file: !19, line: 38, column: 27)
!231 = !DILocalVariable(name: "i", scope: !232, file: !19, line: 40, type: !233)
!232 = distinct !DILexicalBlock(scope: !223, file: !19, line: 39, column: 9)
!233 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !234, line: 46, baseType: !235)
!234 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!235 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!236 = !DILocation(line: 40, column: 20, scope: !232)
!237 = !DILocation(line: 41, column: 19, scope: !238)
!238 = distinct !DILexicalBlock(scope: !232, file: !19, line: 41, column: 13)
!239 = !DILocation(line: 41, column: 17, scope: !238)
!240 = !DILocation(line: 41, column: 24, scope: !241)
!241 = distinct !DILexicalBlock(scope: !238, file: !19, line: 41, column: 13)
!242 = !DILocation(line: 41, column: 26, scope: !241)
!243 = !DILocation(line: 41, column: 13, scope: !238)
!244 = !DILocation(line: 43, column: 17, scope: !245)
!245 = distinct !DILexicalBlock(scope: !241, file: !19, line: 42, column: 13)
!246 = !DILocation(line: 43, column: 22, scope: !245)
!247 = !DILocation(line: 43, column: 25, scope: !245)
!248 = !DILocation(line: 44, column: 13, scope: !245)
!249 = !DILocation(line: 41, column: 34, scope: !241)
!250 = !DILocation(line: 41, column: 13, scope: !241)
!251 = distinct !{!251, !243, !252, !253}
!252 = !DILocation(line: 44, column: 13, scope: !238)
!253 = !{!"llvm.loop.mustprogress"}
!254 = !DILocation(line: 47, column: 14, scope: !223)
!255 = !DILocation(line: 47, column: 9, scope: !223)
!256 = !DILocation(line: 48, column: 5, scope: !223)
!257 = !DILocation(line: 49, column: 8, scope: !258)
!258 = distinct !DILexicalBlock(scope: !214, file: !19, line: 49, column: 8)
!259 = !DILocation(line: 49, column: 25, scope: !258)
!260 = !DILocation(line: 49, column: 8, scope: !214)
!261 = !DILocation(line: 52, column: 17, scope: !262)
!262 = distinct !DILexicalBlock(scope: !258, file: !19, line: 50, column: 5)
!263 = !DILocation(line: 52, column: 9, scope: !262)
!264 = !DILocation(line: 55, column: 5, scope: !262)
!265 = !DILocation(line: 56, column: 1, scope: !214)
!266 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_long_13_good", scope: !19, file: !19, line: 184, type: !211, scopeLine: 185, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!267 = !DILocation(line: 186, column: 5, scope: !266)
!268 = !DILocation(line: 187, column: 5, scope: !266)
!269 = !DILocation(line: 188, column: 5, scope: !266)
!270 = !DILocation(line: 189, column: 5, scope: !266)
!271 = !DILocation(line: 190, column: 1, scope: !266)
!272 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 199, type: !273, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !42)
!273 = !DISubroutineType(types: !274)
!274 = !{!87, !87, !275}
!275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!276 = !DILocalVariable(name: "argc", arg: 1, scope: !272, file: !19, line: 199, type: !87)
!277 = !DILocation(line: 199, column: 14, scope: !272)
!278 = !DILocalVariable(name: "argv", arg: 2, scope: !272, file: !19, line: 199, type: !275)
!279 = !DILocation(line: 199, column: 27, scope: !272)
!280 = !DILocation(line: 202, column: 22, scope: !272)
!281 = !DILocation(line: 202, column: 12, scope: !272)
!282 = !DILocation(line: 202, column: 5, scope: !272)
!283 = !DILocation(line: 203, column: 5, scope: !272)
!284 = !DILocation(line: 204, column: 5, scope: !272)
!285 = !DILocation(line: 205, column: 5, scope: !272)
!286 = distinct !DISubprogram(name: "goodB2G1", scope: !19, file: !19, line: 61, type: !211, scopeLine: 62, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !42)
!287 = !DILocalVariable(name: "data", scope: !286, file: !19, line: 63, type: !27)
!288 = !DILocation(line: 63, column: 12, scope: !286)
!289 = !DILocation(line: 65, column: 10, scope: !286)
!290 = !DILocation(line: 66, column: 8, scope: !291)
!291 = distinct !DILexicalBlock(scope: !286, file: !19, line: 66, column: 8)
!292 = !DILocation(line: 66, column: 25, scope: !291)
!293 = !DILocation(line: 66, column: 8, scope: !286)
!294 = !DILocation(line: 68, column: 24, scope: !295)
!295 = distinct !DILexicalBlock(scope: !291, file: !19, line: 67, column: 5)
!296 = !DILocation(line: 68, column: 14, scope: !295)
!297 = !DILocation(line: 69, column: 13, scope: !298)
!298 = distinct !DILexicalBlock(scope: !295, file: !19, line: 69, column: 13)
!299 = !DILocation(line: 69, column: 18, scope: !298)
!300 = !DILocation(line: 69, column: 13, scope: !295)
!301 = !DILocation(line: 69, column: 28, scope: !302)
!302 = distinct !DILexicalBlock(scope: !298, file: !19, line: 69, column: 27)
!303 = !DILocalVariable(name: "i", scope: !304, file: !19, line: 71, type: !233)
!304 = distinct !DILexicalBlock(scope: !295, file: !19, line: 70, column: 9)
!305 = !DILocation(line: 71, column: 20, scope: !304)
!306 = !DILocation(line: 72, column: 19, scope: !307)
!307 = distinct !DILexicalBlock(scope: !304, file: !19, line: 72, column: 13)
!308 = !DILocation(line: 72, column: 17, scope: !307)
!309 = !DILocation(line: 72, column: 24, scope: !310)
!310 = distinct !DILexicalBlock(scope: !307, file: !19, line: 72, column: 13)
!311 = !DILocation(line: 72, column: 26, scope: !310)
!312 = !DILocation(line: 72, column: 13, scope: !307)
!313 = !DILocation(line: 74, column: 17, scope: !314)
!314 = distinct !DILexicalBlock(scope: !310, file: !19, line: 73, column: 13)
!315 = !DILocation(line: 74, column: 22, scope: !314)
!316 = !DILocation(line: 74, column: 25, scope: !314)
!317 = !DILocation(line: 75, column: 13, scope: !314)
!318 = !DILocation(line: 72, column: 34, scope: !310)
!319 = !DILocation(line: 72, column: 13, scope: !310)
!320 = distinct !{!320, !312, !321, !253}
!321 = !DILocation(line: 75, column: 13, scope: !307)
!322 = !DILocation(line: 78, column: 14, scope: !295)
!323 = !DILocation(line: 78, column: 9, scope: !295)
!324 = !DILocation(line: 79, column: 5, scope: !295)
!325 = !DILocation(line: 80, column: 8, scope: !326)
!326 = distinct !DILexicalBlock(scope: !286, file: !19, line: 80, column: 8)
!327 = !DILocation(line: 80, column: 25, scope: !326)
!328 = !DILocation(line: 80, column: 8, scope: !286)
!329 = !DILocation(line: 83, column: 9, scope: !330)
!330 = distinct !DILexicalBlock(scope: !326, file: !19, line: 81, column: 5)
!331 = !DILocation(line: 84, column: 5, scope: !330)
!332 = !DILocation(line: 92, column: 1, scope: !286)
!333 = distinct !DISubprogram(name: "goodB2G2", scope: !19, file: !19, line: 95, type: !211, scopeLine: 96, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !42)
!334 = !DILocalVariable(name: "data", scope: !333, file: !19, line: 97, type: !27)
!335 = !DILocation(line: 97, column: 12, scope: !333)
!336 = !DILocation(line: 99, column: 10, scope: !333)
!337 = !DILocation(line: 100, column: 8, scope: !338)
!338 = distinct !DILexicalBlock(scope: !333, file: !19, line: 100, column: 8)
!339 = !DILocation(line: 100, column: 25, scope: !338)
!340 = !DILocation(line: 100, column: 8, scope: !333)
!341 = !DILocation(line: 102, column: 24, scope: !342)
!342 = distinct !DILexicalBlock(scope: !338, file: !19, line: 101, column: 5)
!343 = !DILocation(line: 102, column: 14, scope: !342)
!344 = !DILocation(line: 103, column: 13, scope: !345)
!345 = distinct !DILexicalBlock(scope: !342, file: !19, line: 103, column: 13)
!346 = !DILocation(line: 103, column: 18, scope: !345)
!347 = !DILocation(line: 103, column: 13, scope: !342)
!348 = !DILocation(line: 103, column: 28, scope: !349)
!349 = distinct !DILexicalBlock(scope: !345, file: !19, line: 103, column: 27)
!350 = !DILocalVariable(name: "i", scope: !351, file: !19, line: 105, type: !233)
!351 = distinct !DILexicalBlock(scope: !342, file: !19, line: 104, column: 9)
!352 = !DILocation(line: 105, column: 20, scope: !351)
!353 = !DILocation(line: 106, column: 19, scope: !354)
!354 = distinct !DILexicalBlock(scope: !351, file: !19, line: 106, column: 13)
!355 = !DILocation(line: 106, column: 17, scope: !354)
!356 = !DILocation(line: 106, column: 24, scope: !357)
!357 = distinct !DILexicalBlock(scope: !354, file: !19, line: 106, column: 13)
!358 = !DILocation(line: 106, column: 26, scope: !357)
!359 = !DILocation(line: 106, column: 13, scope: !354)
!360 = !DILocation(line: 108, column: 17, scope: !361)
!361 = distinct !DILexicalBlock(scope: !357, file: !19, line: 107, column: 13)
!362 = !DILocation(line: 108, column: 22, scope: !361)
!363 = !DILocation(line: 108, column: 25, scope: !361)
!364 = !DILocation(line: 109, column: 13, scope: !361)
!365 = !DILocation(line: 106, column: 34, scope: !357)
!366 = !DILocation(line: 106, column: 13, scope: !357)
!367 = distinct !{!367, !359, !368, !253}
!368 = !DILocation(line: 109, column: 13, scope: !354)
!369 = !DILocation(line: 112, column: 14, scope: !342)
!370 = !DILocation(line: 112, column: 9, scope: !342)
!371 = !DILocation(line: 113, column: 5, scope: !342)
!372 = !DILocation(line: 114, column: 8, scope: !373)
!373 = distinct !DILexicalBlock(scope: !333, file: !19, line: 114, column: 8)
!374 = !DILocation(line: 114, column: 25, scope: !373)
!375 = !DILocation(line: 114, column: 8, scope: !333)
!376 = !DILocation(line: 120, column: 5, scope: !377)
!377 = distinct !DILexicalBlock(scope: !373, file: !19, line: 115, column: 5)
!378 = !DILocation(line: 121, column: 1, scope: !333)
!379 = distinct !DISubprogram(name: "goodG2B1", scope: !19, file: !19, line: 124, type: !211, scopeLine: 125, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !42)
!380 = !DILocalVariable(name: "data", scope: !379, file: !19, line: 126, type: !27)
!381 = !DILocation(line: 126, column: 12, scope: !379)
!382 = !DILocation(line: 128, column: 10, scope: !379)
!383 = !DILocation(line: 129, column: 8, scope: !384)
!384 = distinct !DILexicalBlock(scope: !379, file: !19, line: 129, column: 8)
!385 = !DILocation(line: 129, column: 25, scope: !384)
!386 = !DILocation(line: 129, column: 8, scope: !379)
!387 = !DILocation(line: 132, column: 9, scope: !388)
!388 = distinct !DILexicalBlock(scope: !384, file: !19, line: 130, column: 5)
!389 = !DILocation(line: 133, column: 5, scope: !388)
!390 = !DILocation(line: 136, column: 24, scope: !391)
!391 = distinct !DILexicalBlock(scope: !384, file: !19, line: 135, column: 5)
!392 = !DILocation(line: 136, column: 14, scope: !391)
!393 = !DILocation(line: 137, column: 13, scope: !394)
!394 = distinct !DILexicalBlock(scope: !391, file: !19, line: 137, column: 13)
!395 = !DILocation(line: 137, column: 18, scope: !394)
!396 = !DILocation(line: 137, column: 13, scope: !391)
!397 = !DILocation(line: 137, column: 28, scope: !398)
!398 = distinct !DILexicalBlock(scope: !394, file: !19, line: 137, column: 27)
!399 = !DILocalVariable(name: "i", scope: !400, file: !19, line: 139, type: !233)
!400 = distinct !DILexicalBlock(scope: !391, file: !19, line: 138, column: 9)
!401 = !DILocation(line: 139, column: 20, scope: !400)
!402 = !DILocation(line: 140, column: 19, scope: !403)
!403 = distinct !DILexicalBlock(scope: !400, file: !19, line: 140, column: 13)
!404 = !DILocation(line: 140, column: 17, scope: !403)
!405 = !DILocation(line: 140, column: 24, scope: !406)
!406 = distinct !DILexicalBlock(scope: !403, file: !19, line: 140, column: 13)
!407 = !DILocation(line: 140, column: 26, scope: !406)
!408 = !DILocation(line: 140, column: 13, scope: !403)
!409 = !DILocation(line: 142, column: 17, scope: !410)
!410 = distinct !DILexicalBlock(scope: !406, file: !19, line: 141, column: 13)
!411 = !DILocation(line: 142, column: 22, scope: !410)
!412 = !DILocation(line: 142, column: 25, scope: !410)
!413 = !DILocation(line: 143, column: 13, scope: !410)
!414 = !DILocation(line: 140, column: 34, scope: !406)
!415 = !DILocation(line: 140, column: 13, scope: !406)
!416 = distinct !{!416, !408, !417, !253}
!417 = !DILocation(line: 143, column: 13, scope: !403)
!418 = !DILocation(line: 147, column: 8, scope: !419)
!419 = distinct !DILexicalBlock(scope: !379, file: !19, line: 147, column: 8)
!420 = !DILocation(line: 147, column: 25, scope: !419)
!421 = !DILocation(line: 147, column: 8, scope: !379)
!422 = !DILocation(line: 150, column: 21, scope: !423)
!423 = distinct !DILexicalBlock(scope: !419, file: !19, line: 148, column: 5)
!424 = !DILocation(line: 150, column: 9, scope: !423)
!425 = !DILocation(line: 153, column: 5, scope: !423)
!426 = !DILocation(line: 154, column: 1, scope: !379)
!427 = distinct !DISubprogram(name: "goodG2B2", scope: !19, file: !19, line: 157, type: !211, scopeLine: 158, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !42)
!428 = !DILocalVariable(name: "data", scope: !427, file: !19, line: 159, type: !27)
!429 = !DILocation(line: 159, column: 12, scope: !427)
!430 = !DILocation(line: 161, column: 10, scope: !427)
!431 = !DILocation(line: 162, column: 8, scope: !432)
!432 = distinct !DILexicalBlock(scope: !427, file: !19, line: 162, column: 8)
!433 = !DILocation(line: 162, column: 25, scope: !432)
!434 = !DILocation(line: 162, column: 8, scope: !427)
!435 = !DILocation(line: 164, column: 24, scope: !436)
!436 = distinct !DILexicalBlock(scope: !432, file: !19, line: 163, column: 5)
!437 = !DILocation(line: 164, column: 14, scope: !436)
!438 = !DILocation(line: 165, column: 13, scope: !439)
!439 = distinct !DILexicalBlock(scope: !436, file: !19, line: 165, column: 13)
!440 = !DILocation(line: 165, column: 18, scope: !439)
!441 = !DILocation(line: 165, column: 13, scope: !436)
!442 = !DILocation(line: 165, column: 28, scope: !443)
!443 = distinct !DILexicalBlock(scope: !439, file: !19, line: 165, column: 27)
!444 = !DILocalVariable(name: "i", scope: !445, file: !19, line: 167, type: !233)
!445 = distinct !DILexicalBlock(scope: !436, file: !19, line: 166, column: 9)
!446 = !DILocation(line: 167, column: 20, scope: !445)
!447 = !DILocation(line: 168, column: 19, scope: !448)
!448 = distinct !DILexicalBlock(scope: !445, file: !19, line: 168, column: 13)
!449 = !DILocation(line: 168, column: 17, scope: !448)
!450 = !DILocation(line: 168, column: 24, scope: !451)
!451 = distinct !DILexicalBlock(scope: !448, file: !19, line: 168, column: 13)
!452 = !DILocation(line: 168, column: 26, scope: !451)
!453 = !DILocation(line: 168, column: 13, scope: !448)
!454 = !DILocation(line: 170, column: 17, scope: !455)
!455 = distinct !DILexicalBlock(scope: !451, file: !19, line: 169, column: 13)
!456 = !DILocation(line: 170, column: 22, scope: !455)
!457 = !DILocation(line: 170, column: 25, scope: !455)
!458 = !DILocation(line: 171, column: 13, scope: !455)
!459 = !DILocation(line: 168, column: 34, scope: !451)
!460 = !DILocation(line: 168, column: 13, scope: !451)
!461 = distinct !{!461, !453, !462, !253}
!462 = !DILocation(line: 171, column: 13, scope: !448)
!463 = !DILocation(line: 174, column: 5, scope: !436)
!464 = !DILocation(line: 175, column: 8, scope: !465)
!465 = distinct !DILexicalBlock(scope: !427, file: !19, line: 175, column: 8)
!466 = !DILocation(line: 175, column: 25, scope: !465)
!467 = !DILocation(line: 175, column: 8, scope: !427)
!468 = !DILocation(line: 178, column: 21, scope: !469)
!469 = distinct !DILexicalBlock(scope: !465, file: !19, line: 176, column: 5)
!470 = !DILocation(line: 178, column: 9, scope: !469)
!471 = !DILocation(line: 181, column: 5, scope: !469)
!472 = !DILocation(line: 182, column: 1, scope: !427)
