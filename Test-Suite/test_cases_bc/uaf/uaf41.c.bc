; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/uaf/uaf41.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf41.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !45 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !49, metadata !DIExpression()), !dbg !50
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !53
  ret void, !dbg !54
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !55 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !56, metadata !DIExpression()), !dbg !57
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !58, metadata !DIExpression()), !dbg !59
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !60
  ret void, !dbg !61
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !62 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !63, metadata !DIExpression()), !dbg !64
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !65, metadata !DIExpression()), !dbg !66
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !67
  ret void, !dbg !68
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !69 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !70, metadata !DIExpression()), !dbg !71
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !72, metadata !DIExpression()), !dbg !73
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !74
  ret void, !dbg !75
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !76 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !77, metadata !DIExpression()), !dbg !78
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !81
  ret void, !dbg !82
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !83 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !84, metadata !DIExpression()), !dbg !85
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !88
  ret void, !dbg !89
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !90 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %0 = load i32, ptr %n.addr, align 4, !dbg !95
  %conv = sext i32 %0 to i64, !dbg !95
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !96
  ret ptr %call, !dbg !97
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !98 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %0 = load i32, ptr %n.addr, align 4, !dbg !101
  %conv = sext i32 %0 to i64, !dbg !101
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !102
  ret ptr %call, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !104 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %0 = load i32, ptr %n.addr, align 4, !dbg !107
  %conv = sext i32 %0 to i64, !dbg !107
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !108
  ret ptr %call, !dbg !109
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !110 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !111, metadata !DIExpression()), !dbg !112
  %0 = load i32, ptr %n.addr, align 4, !dbg !113
  %conv = sext i32 %0 to i64, !dbg !113
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !114
  ret ptr %call, !dbg !115
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !116 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !117, metadata !DIExpression()), !dbg !118
  %0 = load i32, ptr %n.addr, align 4, !dbg !119
  %conv = sext i32 %0 to i64, !dbg !119
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !120
  ret ptr %call, !dbg !121
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !122 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !123, metadata !DIExpression()), !dbg !124
  %0 = load i32, ptr %n.addr, align 4, !dbg !125
  %conv = sext i32 %0 to i64, !dbg !125
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !126
  ret ptr %call, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !128 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !129, metadata !DIExpression()), !dbg !130
  %0 = load i32, ptr %n.addr, align 4, !dbg !131
  %conv = sext i32 %0 to i64, !dbg !131
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !132
  ret ptr %call, !dbg !133
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !134 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !135, metadata !DIExpression()), !dbg !136
  %0 = load i32, ptr %n.addr, align 4, !dbg !137
  %conv = sext i32 %0 to i64, !dbg !137
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !138
  ret ptr %call, !dbg !139
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !140 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !143, metadata !DIExpression()), !dbg !144
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !145, metadata !DIExpression()), !dbg !146
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !147
  ret void, !dbg !148
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !149 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !153, metadata !DIExpression()), !dbg !154
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !155, metadata !DIExpression()), !dbg !156
  ret void, !dbg !157
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !158 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !159, metadata !DIExpression()), !dbg !160
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !161, metadata !DIExpression()), !dbg !162
  ret void, !dbg !163
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !164 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !167, metadata !DIExpression()), !dbg !168
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !169, metadata !DIExpression()), !dbg !170
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !171, metadata !DIExpression()), !dbg !172
  ret void, !dbg !173
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !174 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !177, metadata !DIExpression()), !dbg !178
  ret void, !dbg !179
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !180 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !181, metadata !DIExpression()), !dbg !182
  %0 = load ptr, ptr %str.addr, align 8, !dbg !183
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !184
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !185
  %call2 = call i32 @getchar(), !dbg !186
  ret void, !dbg !187
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !188 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !192, metadata !DIExpression()), !dbg !193
  %0 = load ptr, ptr %p.addr, align 8, !dbg !194
  store i32 0, ptr %0, align 4, !dbg !195
  %1 = load ptr, ptr %retval, align 8, !dbg !196
  ret ptr %1, !dbg !196
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !197 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !198, metadata !DIExpression()), !dbg !199
  %0 = load ptr, ptr %p.addr, align 8, !dbg !200
  store i32 0, ptr %0, align 4, !dbg !201
  %1 = load ptr, ptr %retval, align 8, !dbg !202
  ret ptr %1, !dbg !202
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !203 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !204, metadata !DIExpression()), !dbg !205
  %0 = load ptr, ptr %p.addr, align 8, !dbg !206
  call void @free(ptr noundef %0) #7, !dbg !207
  %1 = load ptr, ptr %retval, align 8, !dbg !208
  ret ptr %1, !dbg !208
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !209 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !210, metadata !DIExpression()), !dbg !211
  %0 = load ptr, ptr %p.addr, align 8, !dbg !212
  call void @free(ptr noundef %0) #7, !dbg !213
  %1 = load ptr, ptr %retval, align 8, !dbg !214
  ret ptr %1, !dbg !214
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !215 {
entry:
  ret void, !dbg !218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_08_bad() #0 !dbg !219 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !220, metadata !DIExpression()), !dbg !221
  store ptr null, ptr %data, align 8, !dbg !222
  %call = call i32 @staticReturnsTrue(), !dbg !223
  %tobool = icmp ne i32 %call, 0, !dbg !223
  br i1 %tobool, label %if.then, label %if.end5, !dbg !225

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !226
  store ptr %call1, ptr %data, align 8, !dbg !228
  %0 = load ptr, ptr %data, align 8, !dbg !229
  %cmp = icmp eq ptr %0, null, !dbg !231
  br i1 %cmp, label %if.then2, label %if.end, !dbg !232

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !233
  unreachable, !dbg !233

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !235, metadata !DIExpression()), !dbg !240
  store i64 0, ptr %i, align 8, !dbg !241
  br label %for.cond, !dbg !243

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !244
  %cmp3 = icmp ult i64 %1, 100, !dbg !246
  br i1 %cmp3, label %for.body, label %for.end, !dbg !247

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !248
  %3 = load i64, ptr %i, align 8, !dbg !250
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !248
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !251
  store i32 1, ptr %intOne, align 4, !dbg !252
  %4 = load ptr, ptr %data, align 8, !dbg !253
  %5 = load i64, ptr %i, align 8, !dbg !254
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !253
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !255
  store i32 2, ptr %intTwo, align 4, !dbg !256
  br label %for.inc, !dbg !257

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !258
  %inc = add i64 %6, 1, !dbg !258
  store i64 %inc, ptr %i, align 8, !dbg !258
  br label %for.cond, !dbg !259, !llvm.loop !260

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !263
  call void @free(ptr noundef %7) #7, !dbg !264
  br label %if.end5, !dbg !265

if.end5:                                          ; preds = %for.end, %entry
  %call6 = call i32 @staticReturnsTrue(), !dbg !266
  %tobool7 = icmp ne i32 %call6, 0, !dbg !266
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !268

if.then8:                                         ; preds = %if.end5
  %8 = load ptr, ptr %data, align 8, !dbg !269
  %call9 = call ptr @UAFFUNC(ptr noundef %8), !dbg !271
  br label %if.end10, !dbg !272

if.end10:                                         ; preds = %if.then8, %if.end5
  ret void, !dbg !273
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_08_good() #0 !dbg !274 {
entry:
  call void @goodB2G1(), !dbg !275
  call void @goodB2G2(), !dbg !276
  call void @goodG2B1(), !dbg !277
  call void @goodG2B2(), !dbg !278
  ret void, !dbg !279
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !280 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !284, metadata !DIExpression()), !dbg !285
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !286, metadata !DIExpression()), !dbg !287
  %call = call i64 @time(ptr noundef null) #7, !dbg !288
  %conv = trunc i64 %call to i32, !dbg !289
  call void @srand(i32 noundef %conv) #7, !dbg !290
  call void @CWE416_Use_After_Free__malloc_free_struct_08_good(), !dbg !291
  call void @CWE416_Use_After_Free__malloc_free_struct_08_bad(), !dbg !292
  ret i32 0, !dbg !293
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @staticReturnsTrue() #0 !dbg !294 {
entry:
  ret i32 1, !dbg !297
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !298 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !299, metadata !DIExpression()), !dbg !300
  store ptr null, ptr %data, align 8, !dbg !301
  %call = call i32 @staticReturnsTrue(), !dbg !302
  %tobool = icmp ne i32 %call, 0, !dbg !302
  br i1 %tobool, label %if.then, label %if.end5, !dbg !304

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !305
  store ptr %call1, ptr %data, align 8, !dbg !307
  %0 = load ptr, ptr %data, align 8, !dbg !308
  %cmp = icmp eq ptr %0, null, !dbg !310
  br i1 %cmp, label %if.then2, label %if.end, !dbg !311

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !312
  unreachable, !dbg !312

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !314, metadata !DIExpression()), !dbg !316
  store i64 0, ptr %i, align 8, !dbg !317
  br label %for.cond, !dbg !319

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !320
  %cmp3 = icmp ult i64 %1, 100, !dbg !322
  br i1 %cmp3, label %for.body, label %for.end, !dbg !323

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !324
  %3 = load i64, ptr %i, align 8, !dbg !326
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !324
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !327
  store i32 1, ptr %intOne, align 4, !dbg !328
  %4 = load ptr, ptr %data, align 8, !dbg !329
  %5 = load i64, ptr %i, align 8, !dbg !330
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !329
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !331
  store i32 2, ptr %intTwo, align 4, !dbg !332
  br label %for.inc, !dbg !333

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !334
  %inc = add i64 %6, 1, !dbg !334
  store i64 %inc, ptr %i, align 8, !dbg !334
  br label %for.cond, !dbg !335, !llvm.loop !336

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !338
  call void @free(ptr noundef %7) #7, !dbg !339
  br label %if.end5, !dbg !340

if.end5:                                          ; preds = %for.end, %entry
  %call6 = call i32 @staticReturnsFalse(), !dbg !341
  %tobool7 = icmp ne i32 %call6, 0, !dbg !341
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !343

if.then8:                                         ; preds = %if.end5
  call void @printLine(ptr noundef @.str.3), !dbg !344
  br label %if.end9, !dbg !346

if.else:                                          ; preds = %if.end5
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then8
  ret void, !dbg !347
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @staticReturnsFalse() #0 !dbg !348 {
entry:
  ret i32 0, !dbg !349
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !350 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !351, metadata !DIExpression()), !dbg !352
  store ptr null, ptr %data, align 8, !dbg !353
  %call = call i32 @staticReturnsTrue(), !dbg !354
  %tobool = icmp ne i32 %call, 0, !dbg !354
  br i1 %tobool, label %if.then, label %if.end5, !dbg !356

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !357
  store ptr %call1, ptr %data, align 8, !dbg !359
  %0 = load ptr, ptr %data, align 8, !dbg !360
  %cmp = icmp eq ptr %0, null, !dbg !362
  br i1 %cmp, label %if.then2, label %if.end, !dbg !363

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !364
  unreachable, !dbg !364

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !366, metadata !DIExpression()), !dbg !368
  store i64 0, ptr %i, align 8, !dbg !369
  br label %for.cond, !dbg !371

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !372
  %cmp3 = icmp ult i64 %1, 100, !dbg !374
  br i1 %cmp3, label %for.body, label %for.end, !dbg !375

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !376
  %3 = load i64, ptr %i, align 8, !dbg !378
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !376
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !379
  store i32 1, ptr %intOne, align 4, !dbg !380
  %4 = load ptr, ptr %data, align 8, !dbg !381
  %5 = load i64, ptr %i, align 8, !dbg !382
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !381
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !383
  store i32 2, ptr %intTwo, align 4, !dbg !384
  br label %for.inc, !dbg !385

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !386
  %inc = add i64 %6, 1, !dbg !386
  store i64 %inc, ptr %i, align 8, !dbg !386
  br label %for.cond, !dbg !387, !llvm.loop !388

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !390
  call void @free(ptr noundef %7) #7, !dbg !391
  br label %if.end5, !dbg !392

if.end5:                                          ; preds = %for.end, %entry
  %call6 = call i32 @staticReturnsTrue(), !dbg !393
  %tobool7 = icmp ne i32 %call6, 0, !dbg !393
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !395

if.then8:                                         ; preds = %if.end5
  br label %if.end9, !dbg !396

if.end9:                                          ; preds = %if.then8, %if.end5
  ret void, !dbg !398
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !399 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !400, metadata !DIExpression()), !dbg !401
  store ptr null, ptr %data, align 8, !dbg !402
  %call = call i32 @staticReturnsFalse(), !dbg !403
  %tobool = icmp ne i32 %call, 0, !dbg !403
  br i1 %tobool, label %if.then, label %if.else, !dbg !405

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !406
  br label %if.end5, !dbg !408

if.else:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !409
  store ptr %call1, ptr %data, align 8, !dbg !411
  %0 = load ptr, ptr %data, align 8, !dbg !412
  %cmp = icmp eq ptr %0, null, !dbg !414
  br i1 %cmp, label %if.then2, label %if.end, !dbg !415

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !416
  unreachable, !dbg !416

if.end:                                           ; preds = %if.else
  call void @llvm.dbg.declare(metadata ptr %i, metadata !418, metadata !DIExpression()), !dbg !420
  store i64 0, ptr %i, align 8, !dbg !421
  br label %for.cond, !dbg !423

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !424
  %cmp3 = icmp ult i64 %1, 100, !dbg !426
  br i1 %cmp3, label %for.body, label %for.end, !dbg !427

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !428
  %3 = load i64, ptr %i, align 8, !dbg !430
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !428
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !431
  store i32 1, ptr %intOne, align 4, !dbg !432
  %4 = load ptr, ptr %data, align 8, !dbg !433
  %5 = load i64, ptr %i, align 8, !dbg !434
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !433
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !435
  store i32 2, ptr %intTwo, align 4, !dbg !436
  br label %for.inc, !dbg !437

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !438
  %inc = add i64 %6, 1, !dbg !438
  store i64 %inc, ptr %i, align 8, !dbg !438
  br label %for.cond, !dbg !439, !llvm.loop !440

for.end:                                          ; preds = %for.cond
  br label %if.end5

if.end5:                                          ; preds = %for.end, %if.then
  %call6 = call i32 @staticReturnsTrue(), !dbg !442
  %tobool7 = icmp ne i32 %call6, 0, !dbg !442
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !444

if.then8:                                         ; preds = %if.end5
  %7 = load ptr, ptr %data, align 8, !dbg !445
  %call9 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !447
  br label %if.end10, !dbg !448

if.end10:                                         ; preds = %if.then8, %if.end5
  ret void, !dbg !449
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !450 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !451, metadata !DIExpression()), !dbg !452
  store ptr null, ptr %data, align 8, !dbg !453
  %call = call i32 @staticReturnsTrue(), !dbg !454
  %tobool = icmp ne i32 %call, 0, !dbg !454
  br i1 %tobool, label %if.then, label %if.end5, !dbg !456

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !457
  store ptr %call1, ptr %data, align 8, !dbg !459
  %0 = load ptr, ptr %data, align 8, !dbg !460
  %cmp = icmp eq ptr %0, null, !dbg !462
  br i1 %cmp, label %if.then2, label %if.end, !dbg !463

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !464
  unreachable, !dbg !464

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !466, metadata !DIExpression()), !dbg !468
  store i64 0, ptr %i, align 8, !dbg !469
  br label %for.cond, !dbg !471

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !472
  %cmp3 = icmp ult i64 %1, 100, !dbg !474
  br i1 %cmp3, label %for.body, label %for.end, !dbg !475

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !476
  %3 = load i64, ptr %i, align 8, !dbg !478
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 %3, !dbg !476
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !479
  store i32 1, ptr %intOne, align 4, !dbg !480
  %4 = load ptr, ptr %data, align 8, !dbg !481
  %5 = load i64, ptr %i, align 8, !dbg !482
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 %5, !dbg !481
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx4, i32 0, i32 1, !dbg !483
  store i32 2, ptr %intTwo, align 4, !dbg !484
  br label %for.inc, !dbg !485

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !486
  %inc = add i64 %6, 1, !dbg !486
  store i64 %inc, ptr %i, align 8, !dbg !486
  br label %for.cond, !dbg !487, !llvm.loop !488

for.end:                                          ; preds = %for.cond
  br label %if.end5, !dbg !490

if.end5:                                          ; preds = %for.end, %entry
  %call6 = call i32 @staticReturnsTrue(), !dbg !491
  %tobool7 = icmp ne i32 %call6, 0, !dbg !491
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !493

if.then8:                                         ; preds = %if.end5
  %7 = load ptr, ptr %data, align 8, !dbg !494
  %call9 = call ptr @SAFEUAFFUNC(ptr noundef %7), !dbg !496
  br label %if.end10, !dbg !497

if.end10:                                         ; preds = %if.then8, %if.end5
  ret void, !dbg !498
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!23}
!llvm.module.flags = !{!37, !38, !39, !40, !41, !42, !43}
!llvm.ident = !{!44}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 97, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/uaf/uaf41.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "de1fe0a574f1cc25de5e665cf701ed88")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 21)
!23 = distinct !DICompileUnit(language: DW_LANG_C11, file: !24, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !25, globals: !36, splitDebugInlining: false, nameTableKind: None)
!24 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf41.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "de1fe0a574f1cc25de5e665cf701ed88")
!25 = !{!26, !27, !35}
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64)
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !29, line: 100, baseType: !30)
!29 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!30 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !29, line: 96, size: 64, elements: !31)
!31 = !{!32, !34}
!32 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !30, file: !29, line: 98, baseType: !33, size: 32)
!33 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !30, file: !29, line: 99, baseType: !33, size: 32, offset: 32)
!35 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!36 = !{!0, !7, !12, !17}
!37 = !{i32 7, !"Dwarf Version", i32 5}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{i32 1, !"wchar_size", i32 4}
!40 = !{i32 8, !"PIC Level", i32 2}
!41 = !{i32 7, !"PIE Level", i32 2}
!42 = !{i32 7, !"uwtable", i32 2}
!43 = !{i32 7, !"frame-pointer", i32 2}
!44 = !{!"clang version 16.0.0"}
!45 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !46, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!46 = !DISubroutineType(types: !47)
!47 = !{null, !26, !26}
!48 = !{}
!49 = !DILocalVariable(name: "p", arg: 1, scope: !45, file: !2, line: 4, type: !26)
!50 = !DILocation(line: 4, column: 22, scope: !45)
!51 = !DILocalVariable(name: "q", arg: 2, scope: !45, file: !2, line: 4, type: !26)
!52 = !DILocation(line: 4, column: 31, scope: !45)
!53 = !DILocation(line: 5, column: 3, scope: !45)
!54 = !DILocation(line: 6, column: 1, scope: !45)
!55 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !46, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!56 = !DILocalVariable(name: "p", arg: 1, scope: !55, file: !2, line: 8, type: !26)
!57 = !DILocation(line: 8, column: 25, scope: !55)
!58 = !DILocalVariable(name: "q", arg: 2, scope: !55, file: !2, line: 8, type: !26)
!59 = !DILocation(line: 8, column: 34, scope: !55)
!60 = !DILocation(line: 9, column: 3, scope: !55)
!61 = !DILocation(line: 10, column: 1, scope: !55)
!62 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !46, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!63 = !DILocalVariable(name: "p", arg: 1, scope: !62, file: !2, line: 12, type: !26)
!64 = !DILocation(line: 12, column: 21, scope: !62)
!65 = !DILocalVariable(name: "q", arg: 2, scope: !62, file: !2, line: 12, type: !26)
!66 = !DILocation(line: 12, column: 30, scope: !62)
!67 = !DILocation(line: 13, column: 3, scope: !62)
!68 = !DILocation(line: 14, column: 1, scope: !62)
!69 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !46, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!70 = !DILocalVariable(name: "p", arg: 1, scope: !69, file: !2, line: 16, type: !26)
!71 = !DILocation(line: 16, column: 20, scope: !69)
!72 = !DILocalVariable(name: "q", arg: 2, scope: !69, file: !2, line: 16, type: !26)
!73 = !DILocation(line: 16, column: 29, scope: !69)
!74 = !DILocation(line: 17, column: 3, scope: !69)
!75 = !DILocation(line: 18, column: 1, scope: !69)
!76 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !46, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!77 = !DILocalVariable(name: "p", arg: 1, scope: !76, file: !2, line: 20, type: !26)
!78 = !DILocation(line: 20, column: 34, scope: !76)
!79 = !DILocalVariable(name: "q", arg: 2, scope: !76, file: !2, line: 20, type: !26)
!80 = !DILocation(line: 20, column: 43, scope: !76)
!81 = !DILocation(line: 21, column: 3, scope: !76)
!82 = !DILocation(line: 22, column: 1, scope: !76)
!83 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !46, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!84 = !DILocalVariable(name: "p", arg: 1, scope: !83, file: !2, line: 24, type: !26)
!85 = !DILocation(line: 24, column: 33, scope: !83)
!86 = !DILocalVariable(name: "q", arg: 2, scope: !83, file: !2, line: 24, type: !26)
!87 = !DILocation(line: 24, column: 42, scope: !83)
!88 = !DILocation(line: 25, column: 3, scope: !83)
!89 = !DILocation(line: 26, column: 1, scope: !83)
!90 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !91, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!91 = !DISubroutineType(types: !92)
!92 = !{!26, !33}
!93 = !DILocalVariable(name: "n", arg: 1, scope: !90, file: !2, line: 29, type: !33)
!94 = !DILocation(line: 29, column: 22, scope: !90)
!95 = !DILocation(line: 30, column: 17, scope: !90)
!96 = !DILocation(line: 30, column: 10, scope: !90)
!97 = !DILocation(line: 30, column: 3, scope: !90)
!98 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !91, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!99 = !DILocalVariable(name: "n", arg: 1, scope: !98, file: !2, line: 33, type: !33)
!100 = !DILocation(line: 33, column: 28, scope: !98)
!101 = !DILocation(line: 34, column: 19, scope: !98)
!102 = !DILocation(line: 34, column: 12, scope: !98)
!103 = !DILocation(line: 34, column: 5, scope: !98)
!104 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !91, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!105 = !DILocalVariable(name: "n", arg: 1, scope: !104, file: !2, line: 37, type: !33)
!106 = !DILocation(line: 37, column: 21, scope: !104)
!107 = !DILocation(line: 38, column: 17, scope: !104)
!108 = !DILocation(line: 38, column: 10, scope: !104)
!109 = !DILocation(line: 38, column: 3, scope: !104)
!110 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !91, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!111 = !DILocalVariable(name: "n", arg: 1, scope: !110, file: !2, line: 41, type: !33)
!112 = !DILocation(line: 41, column: 21, scope: !110)
!113 = !DILocation(line: 42, column: 17, scope: !110)
!114 = !DILocation(line: 42, column: 10, scope: !110)
!115 = !DILocation(line: 42, column: 3, scope: !110)
!116 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !91, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!117 = !DILocalVariable(name: "n", arg: 1, scope: !116, file: !2, line: 45, type: !33)
!118 = !DILocation(line: 45, column: 21, scope: !116)
!119 = !DILocation(line: 46, column: 17, scope: !116)
!120 = !DILocation(line: 46, column: 10, scope: !116)
!121 = !DILocation(line: 46, column: 3, scope: !116)
!122 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !91, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!123 = !DILocalVariable(name: "n", arg: 1, scope: !122, file: !2, line: 49, type: !33)
!124 = !DILocation(line: 49, column: 21, scope: !122)
!125 = !DILocation(line: 50, column: 17, scope: !122)
!126 = !DILocation(line: 50, column: 10, scope: !122)
!127 = !DILocation(line: 50, column: 3, scope: !122)
!128 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !91, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!129 = !DILocalVariable(name: "n", arg: 1, scope: !128, file: !2, line: 53, type: !33)
!130 = !DILocation(line: 53, column: 21, scope: !128)
!131 = !DILocation(line: 54, column: 17, scope: !128)
!132 = !DILocation(line: 54, column: 10, scope: !128)
!133 = !DILocation(line: 54, column: 3, scope: !128)
!134 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !91, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!135 = !DILocalVariable(name: "n", arg: 1, scope: !134, file: !2, line: 57, type: !33)
!136 = !DILocation(line: 57, column: 18, scope: !134)
!137 = !DILocation(line: 58, column: 17, scope: !134)
!138 = !DILocation(line: 58, column: 10, scope: !134)
!139 = !DILocation(line: 58, column: 3, scope: !134)
!140 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !141, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!141 = !DISubroutineType(types: !142)
!142 = !{null, !33, !33}
!143 = !DILocalVariable(name: "id", arg: 1, scope: !140, file: !2, line: 67, type: !33)
!144 = !DILocation(line: 67, column: 20, scope: !140)
!145 = !DILocalVariable(name: "flags", arg: 2, scope: !140, file: !2, line: 67, type: !33)
!146 = !DILocation(line: 67, column: 28, scope: !140)
!147 = !DILocation(line: 68, column: 3, scope: !140)
!148 = !DILocation(line: 69, column: 1, scope: !140)
!149 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !150, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!150 = !DISubroutineType(types: !151)
!151 = !{null, !33, !152}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!153 = !DILocalVariable(name: "thdid", arg: 1, scope: !149, file: !2, line: 79, type: !33)
!154 = !DILocation(line: 79, column: 21, scope: !149)
!155 = !DILocalVariable(name: "cxt", arg: 2, scope: !149, file: !2, line: 79, type: !152)
!156 = !DILocation(line: 79, column: 34, scope: !149)
!157 = !DILocation(line: 81, column: 1, scope: !149)
!158 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !150, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!159 = !DILocalVariable(name: "thdid", arg: 1, scope: !158, file: !2, line: 82, type: !33)
!160 = !DILocation(line: 82, column: 21, scope: !158)
!161 = !DILocalVariable(name: "cxt", arg: 2, scope: !158, file: !2, line: 82, type: !152)
!162 = !DILocation(line: 82, column: 33, scope: !158)
!163 = !DILocation(line: 84, column: 1, scope: !158)
!164 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !165, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!165 = !DISubroutineType(types: !166)
!166 = !{null, !33, !152, !152}
!167 = !DILocalVariable(name: "thdid", arg: 1, scope: !164, file: !2, line: 85, type: !33)
!168 = !DILocation(line: 85, column: 26, scope: !164)
!169 = !DILocalVariable(name: "cxt", arg: 2, scope: !164, file: !2, line: 85, type: !152)
!170 = !DILocation(line: 85, column: 38, scope: !164)
!171 = !DILocalVariable(name: "lev", arg: 3, scope: !164, file: !2, line: 85, type: !152)
!172 = !DILocation(line: 85, column: 49, scope: !164)
!173 = !DILocation(line: 87, column: 1, scope: !164)
!174 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !175, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!175 = !DISubroutineType(types: !176)
!176 = !{null, !152}
!177 = !DILocalVariable(name: "lockname", arg: 1, scope: !174, file: !2, line: 89, type: !152)
!178 = !DILocation(line: 89, column: 17, scope: !174)
!179 = !DILocation(line: 91, column: 1, scope: !174)
!180 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !175, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!181 = !DILocalVariable(name: "str", arg: 1, scope: !180, file: !2, line: 93, type: !152)
!182 = !DILocation(line: 93, column: 18, scope: !180)
!183 = !DILocation(line: 94, column: 18, scope: !180)
!184 = !DILocation(line: 94, column: 3, scope: !180)
!185 = !DILocation(line: 95, column: 3, scope: !180)
!186 = !DILocation(line: 96, column: 3, scope: !180)
!187 = !DILocation(line: 97, column: 1, scope: !180)
!188 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !189, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!189 = !DISubroutineType(types: !190)
!190 = !{!26, !191}
!191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64)
!192 = !DILocalVariable(name: "p", arg: 1, scope: !188, file: !2, line: 100, type: !191)
!193 = !DILocation(line: 100, column: 24, scope: !188)
!194 = !DILocation(line: 101, column: 6, scope: !188)
!195 = !DILocation(line: 101, column: 8, scope: !188)
!196 = !DILocation(line: 102, column: 1, scope: !188)
!197 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !189, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!198 = !DILocalVariable(name: "p", arg: 1, scope: !197, file: !2, line: 104, type: !191)
!199 = !DILocation(line: 104, column: 20, scope: !197)
!200 = !DILocation(line: 105, column: 6, scope: !197)
!201 = !DILocation(line: 105, column: 8, scope: !197)
!202 = !DILocation(line: 106, column: 1, scope: !197)
!203 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !189, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!204 = !DILocalVariable(name: "p", arg: 1, scope: !203, file: !2, line: 110, type: !191)
!205 = !DILocation(line: 110, column: 22, scope: !203)
!206 = !DILocation(line: 111, column: 10, scope: !203)
!207 = !DILocation(line: 111, column: 5, scope: !203)
!208 = !DILocation(line: 112, column: 1, scope: !203)
!209 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !189, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!210 = !DILocalVariable(name: "p", arg: 1, scope: !209, file: !2, line: 115, type: !191)
!211 = !DILocation(line: 115, column: 24, scope: !209)
!212 = !DILocation(line: 116, column: 10, scope: !209)
!213 = !DILocation(line: 116, column: 5, scope: !209)
!214 = !DILocation(line: 117, column: 1, scope: !209)
!215 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !216, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!216 = !DISubroutineType(types: !217)
!217 = !{null}
!218 = !DILocation(line: 135, column: 20, scope: !215)
!219 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_08_bad", scope: !19, file: !19, line: 44, type: !216, scopeLine: 45, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!220 = !DILocalVariable(name: "data", scope: !219, file: !19, line: 46, type: !27)
!221 = !DILocation(line: 46, column: 21, scope: !219)
!222 = !DILocation(line: 48, column: 10, scope: !219)
!223 = !DILocation(line: 49, column: 8, scope: !224)
!224 = distinct !DILexicalBlock(scope: !219, file: !19, line: 49, column: 8)
!225 = !DILocation(line: 49, column: 8, scope: !219)
!226 = !DILocation(line: 51, column: 33, scope: !227)
!227 = distinct !DILexicalBlock(scope: !224, file: !19, line: 50, column: 5)
!228 = !DILocation(line: 51, column: 14, scope: !227)
!229 = !DILocation(line: 52, column: 13, scope: !230)
!230 = distinct !DILexicalBlock(scope: !227, file: !19, line: 52, column: 13)
!231 = !DILocation(line: 52, column: 18, scope: !230)
!232 = !DILocation(line: 52, column: 13, scope: !227)
!233 = !DILocation(line: 52, column: 28, scope: !234)
!234 = distinct !DILexicalBlock(scope: !230, file: !19, line: 52, column: 27)
!235 = !DILocalVariable(name: "i", scope: !236, file: !19, line: 54, type: !237)
!236 = distinct !DILexicalBlock(scope: !227, file: !19, line: 53, column: 9)
!237 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !238, line: 46, baseType: !239)
!238 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!239 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!240 = !DILocation(line: 54, column: 20, scope: !236)
!241 = !DILocation(line: 55, column: 19, scope: !242)
!242 = distinct !DILexicalBlock(scope: !236, file: !19, line: 55, column: 13)
!243 = !DILocation(line: 55, column: 17, scope: !242)
!244 = !DILocation(line: 55, column: 24, scope: !245)
!245 = distinct !DILexicalBlock(scope: !242, file: !19, line: 55, column: 13)
!246 = !DILocation(line: 55, column: 26, scope: !245)
!247 = !DILocation(line: 55, column: 13, scope: !242)
!248 = !DILocation(line: 57, column: 17, scope: !249)
!249 = distinct !DILexicalBlock(scope: !245, file: !19, line: 56, column: 13)
!250 = !DILocation(line: 57, column: 22, scope: !249)
!251 = !DILocation(line: 57, column: 25, scope: !249)
!252 = !DILocation(line: 57, column: 32, scope: !249)
!253 = !DILocation(line: 58, column: 17, scope: !249)
!254 = !DILocation(line: 58, column: 22, scope: !249)
!255 = !DILocation(line: 58, column: 25, scope: !249)
!256 = !DILocation(line: 58, column: 32, scope: !249)
!257 = !DILocation(line: 59, column: 13, scope: !249)
!258 = !DILocation(line: 55, column: 34, scope: !245)
!259 = !DILocation(line: 55, column: 13, scope: !245)
!260 = distinct !{!260, !247, !261, !262}
!261 = !DILocation(line: 59, column: 13, scope: !242)
!262 = !{!"llvm.loop.mustprogress"}
!263 = !DILocation(line: 62, column: 14, scope: !227)
!264 = !DILocation(line: 62, column: 9, scope: !227)
!265 = !DILocation(line: 63, column: 5, scope: !227)
!266 = !DILocation(line: 64, column: 8, scope: !267)
!267 = distinct !DILexicalBlock(scope: !219, file: !19, line: 64, column: 8)
!268 = !DILocation(line: 64, column: 8, scope: !219)
!269 = !DILocation(line: 67, column: 17, scope: !270)
!270 = distinct !DILexicalBlock(scope: !267, file: !19, line: 65, column: 5)
!271 = !DILocation(line: 67, column: 9, scope: !270)
!272 = !DILocation(line: 69, column: 5, scope: !270)
!273 = !DILocation(line: 70, column: 1, scope: !219)
!274 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_08_good", scope: !19, file: !19, line: 199, type: !216, scopeLine: 200, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!275 = !DILocation(line: 201, column: 5, scope: !274)
!276 = !DILocation(line: 202, column: 5, scope: !274)
!277 = !DILocation(line: 203, column: 5, scope: !274)
!278 = !DILocation(line: 204, column: 5, scope: !274)
!279 = !DILocation(line: 205, column: 1, scope: !274)
!280 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 214, type: !281, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !23, retainedNodes: !48)
!281 = !DISubroutineType(types: !282)
!282 = !{!33, !33, !283}
!283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!284 = !DILocalVariable(name: "argc", arg: 1, scope: !280, file: !19, line: 214, type: !33)
!285 = !DILocation(line: 214, column: 14, scope: !280)
!286 = !DILocalVariable(name: "argv", arg: 2, scope: !280, file: !19, line: 214, type: !283)
!287 = !DILocation(line: 214, column: 27, scope: !280)
!288 = !DILocation(line: 217, column: 22, scope: !280)
!289 = !DILocation(line: 217, column: 12, scope: !280)
!290 = !DILocation(line: 217, column: 5, scope: !280)
!291 = !DILocation(line: 218, column: 5, scope: !280)
!292 = !DILocation(line: 219, column: 5, scope: !280)
!293 = !DILocation(line: 220, column: 5, scope: !280)
!294 = distinct !DISubprogram(name: "staticReturnsTrue", scope: !19, file: !19, line: 33, type: !295, scopeLine: 34, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !48)
!295 = !DISubroutineType(types: !296)
!296 = !{!33}
!297 = !DILocation(line: 35, column: 5, scope: !294)
!298 = distinct !DISubprogram(name: "goodB2G1", scope: !19, file: !19, line: 74, type: !216, scopeLine: 75, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !48)
!299 = !DILocalVariable(name: "data", scope: !298, file: !19, line: 76, type: !27)
!300 = !DILocation(line: 76, column: 21, scope: !298)
!301 = !DILocation(line: 78, column: 10, scope: !298)
!302 = !DILocation(line: 79, column: 8, scope: !303)
!303 = distinct !DILexicalBlock(scope: !298, file: !19, line: 79, column: 8)
!304 = !DILocation(line: 79, column: 8, scope: !298)
!305 = !DILocation(line: 81, column: 33, scope: !306)
!306 = distinct !DILexicalBlock(scope: !303, file: !19, line: 80, column: 5)
!307 = !DILocation(line: 81, column: 14, scope: !306)
!308 = !DILocation(line: 82, column: 13, scope: !309)
!309 = distinct !DILexicalBlock(scope: !306, file: !19, line: 82, column: 13)
!310 = !DILocation(line: 82, column: 18, scope: !309)
!311 = !DILocation(line: 82, column: 13, scope: !306)
!312 = !DILocation(line: 82, column: 28, scope: !313)
!313 = distinct !DILexicalBlock(scope: !309, file: !19, line: 82, column: 27)
!314 = !DILocalVariable(name: "i", scope: !315, file: !19, line: 84, type: !237)
!315 = distinct !DILexicalBlock(scope: !306, file: !19, line: 83, column: 9)
!316 = !DILocation(line: 84, column: 20, scope: !315)
!317 = !DILocation(line: 85, column: 19, scope: !318)
!318 = distinct !DILexicalBlock(scope: !315, file: !19, line: 85, column: 13)
!319 = !DILocation(line: 85, column: 17, scope: !318)
!320 = !DILocation(line: 85, column: 24, scope: !321)
!321 = distinct !DILexicalBlock(scope: !318, file: !19, line: 85, column: 13)
!322 = !DILocation(line: 85, column: 26, scope: !321)
!323 = !DILocation(line: 85, column: 13, scope: !318)
!324 = !DILocation(line: 87, column: 17, scope: !325)
!325 = distinct !DILexicalBlock(scope: !321, file: !19, line: 86, column: 13)
!326 = !DILocation(line: 87, column: 22, scope: !325)
!327 = !DILocation(line: 87, column: 25, scope: !325)
!328 = !DILocation(line: 87, column: 32, scope: !325)
!329 = !DILocation(line: 88, column: 17, scope: !325)
!330 = !DILocation(line: 88, column: 22, scope: !325)
!331 = !DILocation(line: 88, column: 25, scope: !325)
!332 = !DILocation(line: 88, column: 32, scope: !325)
!333 = !DILocation(line: 89, column: 13, scope: !325)
!334 = !DILocation(line: 85, column: 34, scope: !321)
!335 = !DILocation(line: 85, column: 13, scope: !321)
!336 = distinct !{!336, !323, !337, !262}
!337 = !DILocation(line: 89, column: 13, scope: !318)
!338 = !DILocation(line: 92, column: 14, scope: !306)
!339 = !DILocation(line: 92, column: 9, scope: !306)
!340 = !DILocation(line: 93, column: 5, scope: !306)
!341 = !DILocation(line: 94, column: 8, scope: !342)
!342 = distinct !DILexicalBlock(scope: !298, file: !19, line: 94, column: 8)
!343 = !DILocation(line: 94, column: 8, scope: !298)
!344 = !DILocation(line: 97, column: 9, scope: !345)
!345 = distinct !DILexicalBlock(scope: !342, file: !19, line: 95, column: 5)
!346 = !DILocation(line: 98, column: 5, scope: !345)
!347 = !DILocation(line: 106, column: 1, scope: !298)
!348 = distinct !DISubprogram(name: "staticReturnsFalse", scope: !19, file: !19, line: 38, type: !295, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !48)
!349 = !DILocation(line: 40, column: 5, scope: !348)
!350 = distinct !DISubprogram(name: "goodB2G2", scope: !19, file: !19, line: 109, type: !216, scopeLine: 110, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !48)
!351 = !DILocalVariable(name: "data", scope: !350, file: !19, line: 111, type: !27)
!352 = !DILocation(line: 111, column: 21, scope: !350)
!353 = !DILocation(line: 113, column: 10, scope: !350)
!354 = !DILocation(line: 114, column: 8, scope: !355)
!355 = distinct !DILexicalBlock(scope: !350, file: !19, line: 114, column: 8)
!356 = !DILocation(line: 114, column: 8, scope: !350)
!357 = !DILocation(line: 116, column: 33, scope: !358)
!358 = distinct !DILexicalBlock(scope: !355, file: !19, line: 115, column: 5)
!359 = !DILocation(line: 116, column: 14, scope: !358)
!360 = !DILocation(line: 117, column: 13, scope: !361)
!361 = distinct !DILexicalBlock(scope: !358, file: !19, line: 117, column: 13)
!362 = !DILocation(line: 117, column: 18, scope: !361)
!363 = !DILocation(line: 117, column: 13, scope: !358)
!364 = !DILocation(line: 117, column: 28, scope: !365)
!365 = distinct !DILexicalBlock(scope: !361, file: !19, line: 117, column: 27)
!366 = !DILocalVariable(name: "i", scope: !367, file: !19, line: 119, type: !237)
!367 = distinct !DILexicalBlock(scope: !358, file: !19, line: 118, column: 9)
!368 = !DILocation(line: 119, column: 20, scope: !367)
!369 = !DILocation(line: 120, column: 19, scope: !370)
!370 = distinct !DILexicalBlock(scope: !367, file: !19, line: 120, column: 13)
!371 = !DILocation(line: 120, column: 17, scope: !370)
!372 = !DILocation(line: 120, column: 24, scope: !373)
!373 = distinct !DILexicalBlock(scope: !370, file: !19, line: 120, column: 13)
!374 = !DILocation(line: 120, column: 26, scope: !373)
!375 = !DILocation(line: 120, column: 13, scope: !370)
!376 = !DILocation(line: 122, column: 17, scope: !377)
!377 = distinct !DILexicalBlock(scope: !373, file: !19, line: 121, column: 13)
!378 = !DILocation(line: 122, column: 22, scope: !377)
!379 = !DILocation(line: 122, column: 25, scope: !377)
!380 = !DILocation(line: 122, column: 32, scope: !377)
!381 = !DILocation(line: 123, column: 17, scope: !377)
!382 = !DILocation(line: 123, column: 22, scope: !377)
!383 = !DILocation(line: 123, column: 25, scope: !377)
!384 = !DILocation(line: 123, column: 32, scope: !377)
!385 = !DILocation(line: 124, column: 13, scope: !377)
!386 = !DILocation(line: 120, column: 34, scope: !373)
!387 = !DILocation(line: 120, column: 13, scope: !373)
!388 = distinct !{!388, !375, !389, !262}
!389 = !DILocation(line: 124, column: 13, scope: !370)
!390 = !DILocation(line: 127, column: 14, scope: !358)
!391 = !DILocation(line: 127, column: 9, scope: !358)
!392 = !DILocation(line: 128, column: 5, scope: !358)
!393 = !DILocation(line: 129, column: 8, scope: !394)
!394 = distinct !DILexicalBlock(scope: !350, file: !19, line: 129, column: 8)
!395 = !DILocation(line: 129, column: 8, scope: !350)
!396 = !DILocation(line: 135, column: 5, scope: !397)
!397 = distinct !DILexicalBlock(scope: !394, file: !19, line: 130, column: 5)
!398 = !DILocation(line: 136, column: 1, scope: !350)
!399 = distinct !DISubprogram(name: "goodG2B1", scope: !19, file: !19, line: 139, type: !216, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !48)
!400 = !DILocalVariable(name: "data", scope: !399, file: !19, line: 141, type: !27)
!401 = !DILocation(line: 141, column: 21, scope: !399)
!402 = !DILocation(line: 143, column: 10, scope: !399)
!403 = !DILocation(line: 144, column: 8, scope: !404)
!404 = distinct !DILexicalBlock(scope: !399, file: !19, line: 144, column: 8)
!405 = !DILocation(line: 144, column: 8, scope: !399)
!406 = !DILocation(line: 147, column: 9, scope: !407)
!407 = distinct !DILexicalBlock(scope: !404, file: !19, line: 145, column: 5)
!408 = !DILocation(line: 148, column: 5, scope: !407)
!409 = !DILocation(line: 151, column: 33, scope: !410)
!410 = distinct !DILexicalBlock(scope: !404, file: !19, line: 150, column: 5)
!411 = !DILocation(line: 151, column: 14, scope: !410)
!412 = !DILocation(line: 152, column: 13, scope: !413)
!413 = distinct !DILexicalBlock(scope: !410, file: !19, line: 152, column: 13)
!414 = !DILocation(line: 152, column: 18, scope: !413)
!415 = !DILocation(line: 152, column: 13, scope: !410)
!416 = !DILocation(line: 152, column: 28, scope: !417)
!417 = distinct !DILexicalBlock(scope: !413, file: !19, line: 152, column: 27)
!418 = !DILocalVariable(name: "i", scope: !419, file: !19, line: 154, type: !237)
!419 = distinct !DILexicalBlock(scope: !410, file: !19, line: 153, column: 9)
!420 = !DILocation(line: 154, column: 20, scope: !419)
!421 = !DILocation(line: 155, column: 19, scope: !422)
!422 = distinct !DILexicalBlock(scope: !419, file: !19, line: 155, column: 13)
!423 = !DILocation(line: 155, column: 17, scope: !422)
!424 = !DILocation(line: 155, column: 24, scope: !425)
!425 = distinct !DILexicalBlock(scope: !422, file: !19, line: 155, column: 13)
!426 = !DILocation(line: 155, column: 26, scope: !425)
!427 = !DILocation(line: 155, column: 13, scope: !422)
!428 = !DILocation(line: 157, column: 17, scope: !429)
!429 = distinct !DILexicalBlock(scope: !425, file: !19, line: 156, column: 13)
!430 = !DILocation(line: 157, column: 22, scope: !429)
!431 = !DILocation(line: 157, column: 25, scope: !429)
!432 = !DILocation(line: 157, column: 32, scope: !429)
!433 = !DILocation(line: 158, column: 17, scope: !429)
!434 = !DILocation(line: 158, column: 22, scope: !429)
!435 = !DILocation(line: 158, column: 25, scope: !429)
!436 = !DILocation(line: 158, column: 32, scope: !429)
!437 = !DILocation(line: 159, column: 13, scope: !429)
!438 = !DILocation(line: 155, column: 34, scope: !425)
!439 = !DILocation(line: 155, column: 13, scope: !425)
!440 = distinct !{!440, !427, !441, !262}
!441 = !DILocation(line: 159, column: 13, scope: !422)
!442 = !DILocation(line: 163, column: 8, scope: !443)
!443 = distinct !DILexicalBlock(scope: !399, file: !19, line: 163, column: 8)
!444 = !DILocation(line: 163, column: 8, scope: !399)
!445 = !DILocation(line: 166, column: 21, scope: !446)
!446 = distinct !DILexicalBlock(scope: !443, file: !19, line: 164, column: 5)
!447 = !DILocation(line: 166, column: 9, scope: !446)
!448 = !DILocation(line: 168, column: 5, scope: !446)
!449 = !DILocation(line: 169, column: 1, scope: !399)
!450 = distinct !DISubprogram(name: "goodG2B2", scope: !19, file: !19, line: 172, type: !216, scopeLine: 173, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !23, retainedNodes: !48)
!451 = !DILocalVariable(name: "data", scope: !450, file: !19, line: 174, type: !27)
!452 = !DILocation(line: 174, column: 21, scope: !450)
!453 = !DILocation(line: 176, column: 10, scope: !450)
!454 = !DILocation(line: 177, column: 8, scope: !455)
!455 = distinct !DILexicalBlock(scope: !450, file: !19, line: 177, column: 8)
!456 = !DILocation(line: 177, column: 8, scope: !450)
!457 = !DILocation(line: 179, column: 33, scope: !458)
!458 = distinct !DILexicalBlock(scope: !455, file: !19, line: 178, column: 5)
!459 = !DILocation(line: 179, column: 14, scope: !458)
!460 = !DILocation(line: 180, column: 13, scope: !461)
!461 = distinct !DILexicalBlock(scope: !458, file: !19, line: 180, column: 13)
!462 = !DILocation(line: 180, column: 18, scope: !461)
!463 = !DILocation(line: 180, column: 13, scope: !458)
!464 = !DILocation(line: 180, column: 28, scope: !465)
!465 = distinct !DILexicalBlock(scope: !461, file: !19, line: 180, column: 27)
!466 = !DILocalVariable(name: "i", scope: !467, file: !19, line: 182, type: !237)
!467 = distinct !DILexicalBlock(scope: !458, file: !19, line: 181, column: 9)
!468 = !DILocation(line: 182, column: 20, scope: !467)
!469 = !DILocation(line: 183, column: 19, scope: !470)
!470 = distinct !DILexicalBlock(scope: !467, file: !19, line: 183, column: 13)
!471 = !DILocation(line: 183, column: 17, scope: !470)
!472 = !DILocation(line: 183, column: 24, scope: !473)
!473 = distinct !DILexicalBlock(scope: !470, file: !19, line: 183, column: 13)
!474 = !DILocation(line: 183, column: 26, scope: !473)
!475 = !DILocation(line: 183, column: 13, scope: !470)
!476 = !DILocation(line: 185, column: 17, scope: !477)
!477 = distinct !DILexicalBlock(scope: !473, file: !19, line: 184, column: 13)
!478 = !DILocation(line: 185, column: 22, scope: !477)
!479 = !DILocation(line: 185, column: 25, scope: !477)
!480 = !DILocation(line: 185, column: 32, scope: !477)
!481 = !DILocation(line: 186, column: 17, scope: !477)
!482 = !DILocation(line: 186, column: 22, scope: !477)
!483 = !DILocation(line: 186, column: 25, scope: !477)
!484 = !DILocation(line: 186, column: 32, scope: !477)
!485 = !DILocation(line: 187, column: 13, scope: !477)
!486 = !DILocation(line: 183, column: 34, scope: !473)
!487 = !DILocation(line: 183, column: 13, scope: !473)
!488 = distinct !{!488, !475, !489, !262}
!489 = !DILocation(line: 187, column: 13, scope: !470)
!490 = !DILocation(line: 190, column: 5, scope: !458)
!491 = !DILocation(line: 191, column: 8, scope: !492)
!492 = distinct !DILexicalBlock(scope: !450, file: !19, line: 191, column: 8)
!493 = !DILocation(line: 191, column: 8, scope: !450)
!494 = !DILocation(line: 194, column: 21, scope: !495)
!495 = distinct !DILexicalBlock(scope: !492, file: !19, line: 192, column: 5)
!496 = !DILocation(line: 194, column: 9, scope: !495)
!497 = !DILocation(line: 196, column: 5, scope: !495)
!498 = !DILocation(line: 197, column: 1, scope: !450)
