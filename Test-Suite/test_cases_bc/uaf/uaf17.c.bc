; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/uaf/uaf17.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf17.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [8 x i8] c"BadSink\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [9 x i8] c"GoodSink\00", align 1, !dbg !28

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !48 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !52, metadata !DIExpression()), !dbg !53
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !56
  ret void, !dbg !57
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !58 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !59, metadata !DIExpression()), !dbg !60
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !63
  ret void, !dbg !64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !65 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !66, metadata !DIExpression()), !dbg !67
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !68, metadata !DIExpression()), !dbg !69
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !70
  ret void, !dbg !71
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !72 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !73, metadata !DIExpression()), !dbg !74
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !75, metadata !DIExpression()), !dbg !76
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !77
  ret void, !dbg !78
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !79 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !80, metadata !DIExpression()), !dbg !81
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !84
  ret void, !dbg !85
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !86 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !87, metadata !DIExpression()), !dbg !88
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !89, metadata !DIExpression()), !dbg !90
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !91
  ret void, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %0 = load i32, ptr %n.addr, align 4, !dbg !99
  %conv = sext i32 %0 to i64, !dbg !99
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !100
  ret ptr %call, !dbg !101
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !102 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %0 = load i32, ptr %n.addr, align 4, !dbg !105
  %conv = sext i32 %0 to i64, !dbg !105
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !106
  ret ptr %call, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !108 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !109, metadata !DIExpression()), !dbg !110
  %0 = load i32, ptr %n.addr, align 4, !dbg !111
  %conv = sext i32 %0 to i64, !dbg !111
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !112
  ret ptr %call, !dbg !113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !114 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %0 = load i32, ptr %n.addr, align 4, !dbg !117
  %conv = sext i32 %0 to i64, !dbg !117
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !118
  ret ptr %call, !dbg !119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !120 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !121, metadata !DIExpression()), !dbg !122
  %0 = load i32, ptr %n.addr, align 4, !dbg !123
  %conv = sext i32 %0 to i64, !dbg !123
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !124
  ret ptr %call, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !126 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !127, metadata !DIExpression()), !dbg !128
  %0 = load i32, ptr %n.addr, align 4, !dbg !129
  %conv = sext i32 %0 to i64, !dbg !129
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !130
  ret ptr %call, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !132 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !133, metadata !DIExpression()), !dbg !134
  %0 = load i32, ptr %n.addr, align 4, !dbg !135
  %conv = sext i32 %0 to i64, !dbg !135
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !136
  ret ptr %call, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !138 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !139, metadata !DIExpression()), !dbg !140
  %0 = load i32, ptr %n.addr, align 4, !dbg !141
  %conv = sext i32 %0 to i64, !dbg !141
  %call = call noalias ptr @malloc(i64 noundef %conv) #7, !dbg !142
  ret ptr %call, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !144 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !147, metadata !DIExpression()), !dbg !148
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !149, metadata !DIExpression()), !dbg !150
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !151
  ret void, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !153 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !156, metadata !DIExpression()), !dbg !157
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !158, metadata !DIExpression()), !dbg !159
  ret void, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !161 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !162, metadata !DIExpression()), !dbg !163
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !164, metadata !DIExpression()), !dbg !165
  ret void, !dbg !166
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !167 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !170, metadata !DIExpression()), !dbg !171
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !172, metadata !DIExpression()), !dbg !173
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !174, metadata !DIExpression()), !dbg !175
  ret void, !dbg !176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !177 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !180, metadata !DIExpression()), !dbg !181
  ret void, !dbg !182
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !183 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !184, metadata !DIExpression()), !dbg !185
  %0 = load ptr, ptr %str.addr, align 8, !dbg !186
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !187
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !188
  %call2 = call i32 @getchar(), !dbg !189
  ret void, !dbg !190
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !191 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !195, metadata !DIExpression()), !dbg !196
  %0 = load ptr, ptr %p.addr, align 8, !dbg !197
  store i32 0, ptr %0, align 4, !dbg !198
  %1 = load ptr, ptr %retval, align 8, !dbg !199
  ret ptr %1, !dbg !199
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !200 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !201, metadata !DIExpression()), !dbg !202
  %0 = load ptr, ptr %p.addr, align 8, !dbg !203
  store i32 0, ptr %0, align 4, !dbg !204
  %1 = load ptr, ptr %retval, align 8, !dbg !205
  ret ptr %1, !dbg !205
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !206 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !207, metadata !DIExpression()), !dbg !208
  %0 = load ptr, ptr %p.addr, align 8, !dbg !209
  call void @free(ptr noundef %0) #8, !dbg !210
  %1 = load ptr, ptr %retval, align 8, !dbg !211
  ret ptr %1, !dbg !211
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !212 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !213, metadata !DIExpression()), !dbg !214
  %0 = load ptr, ptr %p.addr, align 8, !dbg !215
  call void @free(ptr noundef %0) #8, !dbg !216
  %1 = load ptr, ptr %retval, align 8, !dbg !217
  ret ptr %1, !dbg !217
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !218 {
entry:
  ret void, !dbg !221
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__return_freed_ptr_08_bad() #0 !dbg !222 {
entry:
  %reversedString = alloca ptr, align 8
  %call = call i32 @staticReturnsTrue(), !dbg !223
  %tobool = icmp ne i32 %call, 0, !dbg !223
  br i1 %tobool, label %if.then, label %if.end, !dbg !225

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !226, metadata !DIExpression()), !dbg !229
  %call1 = call ptr @helperBad(ptr noundef @.str.3), !dbg !230
  store ptr %call1, ptr %reversedString, align 8, !dbg !229
  %0 = load ptr, ptr %reversedString, align 8, !dbg !231
  %call2 = call ptr @UAFFUNC(ptr noundef %0), !dbg !232
  br label %if.end, !dbg !233

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !234
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @helperBad(ptr noundef %aString) #0 !dbg !235 {
entry:
  %retval = alloca ptr, align 8
  %aString.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %reversedString = alloca ptr, align 8
  store ptr %aString, ptr %aString.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %aString.addr, metadata !238, metadata !DIExpression()), !dbg !239
  call void @llvm.dbg.declare(metadata ptr %i, metadata !240, metadata !DIExpression()), !dbg !244
  store i64 0, ptr %i, align 8, !dbg !244
  call void @llvm.dbg.declare(metadata ptr %j, metadata !245, metadata !DIExpression()), !dbg !246
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !247, metadata !DIExpression()), !dbg !248
  store ptr null, ptr %reversedString, align 8, !dbg !248
  %0 = load ptr, ptr %aString.addr, align 8, !dbg !249
  %cmp = icmp ne ptr %0, null, !dbg !251
  br i1 %cmp, label %if.then, label %if.else, !dbg !252

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %aString.addr, align 8, !dbg !253
  %call = call i64 @strlen(ptr noundef %1) #9, !dbg !255
  store i64 %call, ptr %i, align 8, !dbg !256
  %2 = load i64, ptr %i, align 8, !dbg !257
  %add = add i64 %2, 1, !dbg !258
  %conv = trunc i64 %add to i32, !dbg !257
  %call1 = call ptr @SAFEMALLOC(i32 noundef %conv), !dbg !259
  store ptr %call1, ptr %reversedString, align 8, !dbg !260
  %3 = load ptr, ptr %reversedString, align 8, !dbg !261
  %cmp2 = icmp eq ptr %3, null, !dbg !263
  br i1 %cmp2, label %if.then4, label %if.end, !dbg !264

if.then4:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #10, !dbg !265
  unreachable, !dbg !265

if.end:                                           ; preds = %if.then
  store i64 0, ptr %j, align 8, !dbg !267
  br label %for.cond, !dbg !269

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i64, ptr %j, align 8, !dbg !270
  %5 = load i64, ptr %i, align 8, !dbg !272
  %cmp5 = icmp ult i64 %4, %5, !dbg !273
  br i1 %cmp5, label %for.body, label %for.end, !dbg !274

for.body:                                         ; preds = %for.cond
  %6 = load ptr, ptr %aString.addr, align 8, !dbg !275
  %7 = load i64, ptr %i, align 8, !dbg !277
  %8 = load i64, ptr %j, align 8, !dbg !278
  %sub = sub i64 %7, %8, !dbg !279
  %sub7 = sub i64 %sub, 1, !dbg !280
  %arrayidx = getelementptr inbounds i8, ptr %6, i64 %sub7, !dbg !275
  %9 = load i8, ptr %arrayidx, align 1, !dbg !275
  %10 = load ptr, ptr %reversedString, align 8, !dbg !281
  %11 = load i64, ptr %j, align 8, !dbg !282
  %arrayidx8 = getelementptr inbounds i8, ptr %10, i64 %11, !dbg !281
  store i8 %9, ptr %arrayidx8, align 1, !dbg !283
  br label %for.inc, !dbg !284

for.inc:                                          ; preds = %for.body
  %12 = load i64, ptr %j, align 8, !dbg !285
  %inc = add i64 %12, 1, !dbg !285
  store i64 %inc, ptr %j, align 8, !dbg !285
  br label %for.cond, !dbg !286, !llvm.loop !287

for.end:                                          ; preds = %for.cond
  %13 = load ptr, ptr %reversedString, align 8, !dbg !290
  %14 = load i64, ptr %i, align 8, !dbg !291
  %arrayidx9 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !290
  store i8 0, ptr %arrayidx9, align 1, !dbg !292
  %15 = load ptr, ptr %reversedString, align 8, !dbg !293
  call void @free(ptr noundef %15) #8, !dbg !294
  %16 = load ptr, ptr %reversedString, align 8, !dbg !295
  store ptr %16, ptr %retval, align 8, !dbg !296
  br label %return, !dbg !296

if.else:                                          ; preds = %entry
  store ptr null, ptr %retval, align 8, !dbg !297
  br label %return, !dbg !297

return:                                           ; preds = %if.else, %for.end
  %17 = load ptr, ptr %retval, align 8, !dbg !299
  ret ptr %17, !dbg !299
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__return_freed_ptr_08_good() #0 !dbg !300 {
entry:
  call void @good1(), !dbg !301
  call void @good2(), !dbg !302
  ret void, !dbg !303
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !304 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !308, metadata !DIExpression()), !dbg !309
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !310, metadata !DIExpression()), !dbg !311
  %call = call i64 @time(ptr noundef null) #8, !dbg !312
  %conv = trunc i64 %call to i32, !dbg !313
  call void @srand(i32 noundef %conv) #8, !dbg !314
  call void @CWE416_Use_After_Free__return_freed_ptr_08_good(), !dbg !315
  call void @CWE416_Use_After_Free__return_freed_ptr_08_bad(), !dbg !316
  ret i32 0, !dbg !317
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @staticReturnsTrue() #0 !dbg !318 {
entry:
  ret i32 1, !dbg !321
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #5

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal void @good1() #0 !dbg !322 {
entry:
  %reversedString = alloca ptr, align 8
  %call = call i32 @staticReturnsFalse(), !dbg !323
  %tobool = icmp ne i32 %call, 0, !dbg !323
  br i1 %tobool, label %if.then, label %if.else, !dbg !325

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.4), !dbg !326
  br label %if.end, !dbg !328

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !329, metadata !DIExpression()), !dbg !332
  %call1 = call ptr @helperGood(ptr noundef @.str.5), !dbg !333
  store ptr %call1, ptr %reversedString, align 8, !dbg !332
  %0 = load ptr, ptr %reversedString, align 8, !dbg !334
  %call2 = call ptr @SAFEUAFFUNC(ptr noundef %0), !dbg !335
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !336
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @helperGood(ptr noundef %aString) #0 !dbg !337 {
entry:
  %retval = alloca ptr, align 8
  %aString.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %reversedString = alloca ptr, align 8
  store ptr %aString, ptr %aString.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %aString.addr, metadata !338, metadata !DIExpression()), !dbg !339
  call void @llvm.dbg.declare(metadata ptr %i, metadata !340, metadata !DIExpression()), !dbg !341
  store i64 0, ptr %i, align 8, !dbg !341
  call void @llvm.dbg.declare(metadata ptr %j, metadata !342, metadata !DIExpression()), !dbg !343
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !344, metadata !DIExpression()), !dbg !345
  store ptr null, ptr %reversedString, align 8, !dbg !345
  %0 = load ptr, ptr %aString.addr, align 8, !dbg !346
  %cmp = icmp ne ptr %0, null, !dbg !348
  br i1 %cmp, label %if.then, label %if.else, !dbg !349

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %aString.addr, align 8, !dbg !350
  %call = call i64 @strlen(ptr noundef %1) #9, !dbg !352
  store i64 %call, ptr %i, align 8, !dbg !353
  %2 = load i64, ptr %i, align 8, !dbg !354
  %add = add i64 %2, 1, !dbg !355
  %conv = trunc i64 %add to i32, !dbg !354
  %call1 = call ptr @SAFEMALLOC(i32 noundef %conv), !dbg !356
  store ptr %call1, ptr %reversedString, align 8, !dbg !357
  %3 = load ptr, ptr %reversedString, align 8, !dbg !358
  %cmp2 = icmp eq ptr %3, null, !dbg !360
  br i1 %cmp2, label %if.then4, label %if.end, !dbg !361

if.then4:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #10, !dbg !362
  unreachable, !dbg !362

if.end:                                           ; preds = %if.then
  store i64 0, ptr %j, align 8, !dbg !364
  br label %for.cond, !dbg !366

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i64, ptr %j, align 8, !dbg !367
  %5 = load i64, ptr %i, align 8, !dbg !369
  %cmp5 = icmp ult i64 %4, %5, !dbg !370
  br i1 %cmp5, label %for.body, label %for.end, !dbg !371

for.body:                                         ; preds = %for.cond
  %6 = load ptr, ptr %aString.addr, align 8, !dbg !372
  %7 = load i64, ptr %i, align 8, !dbg !374
  %8 = load i64, ptr %j, align 8, !dbg !375
  %sub = sub i64 %7, %8, !dbg !376
  %sub7 = sub i64 %sub, 1, !dbg !377
  %arrayidx = getelementptr inbounds i8, ptr %6, i64 %sub7, !dbg !372
  %9 = load i8, ptr %arrayidx, align 1, !dbg !372
  %10 = load ptr, ptr %reversedString, align 8, !dbg !378
  %11 = load i64, ptr %j, align 8, !dbg !379
  %arrayidx8 = getelementptr inbounds i8, ptr %10, i64 %11, !dbg !378
  store i8 %9, ptr %arrayidx8, align 1, !dbg !380
  br label %for.inc, !dbg !381

for.inc:                                          ; preds = %for.body
  %12 = load i64, ptr %j, align 8, !dbg !382
  %inc = add i64 %12, 1, !dbg !382
  store i64 %inc, ptr %j, align 8, !dbg !382
  br label %for.cond, !dbg !383, !llvm.loop !384

for.end:                                          ; preds = %for.cond
  %13 = load ptr, ptr %reversedString, align 8, !dbg !386
  %14 = load i64, ptr %i, align 8, !dbg !387
  %arrayidx9 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !386
  store i8 0, ptr %arrayidx9, align 1, !dbg !388
  %15 = load ptr, ptr %reversedString, align 8, !dbg !389
  store ptr %15, ptr %retval, align 8, !dbg !390
  br label %return, !dbg !390

if.else:                                          ; preds = %entry
  store ptr null, ptr %retval, align 8, !dbg !391
  br label %return, !dbg !391

return:                                           ; preds = %if.else, %for.end
  %16 = load ptr, ptr %retval, align 8, !dbg !393
  ret ptr %16, !dbg !393
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @staticReturnsFalse() #0 !dbg !394 {
entry:
  ret i32 0, !dbg !395
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @good2() #0 !dbg !396 {
entry:
  %reversedString = alloca ptr, align 8
  %call = call i32 @staticReturnsTrue(), !dbg !397
  %tobool = icmp ne i32 %call, 0, !dbg !397
  br i1 %tobool, label %if.then, label %if.end, !dbg !399

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %reversedString, metadata !400, metadata !DIExpression()), !dbg !403
  %call1 = call ptr @helperGood(ptr noundef @.str.5), !dbg !404
  store ptr %call1, ptr %reversedString, align 8, !dbg !403
  %0 = load ptr, ptr %reversedString, align 8, !dbg !405
  %call2 = call ptr @SAFEUAFFUNC(ptr noundef %0), !dbg !406
  br label %if.end, !dbg !407

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !408
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind allocsize(0) }
attributes #8 = { nounwind }
attributes #9 = { nounwind willreturn memory(read) }
attributes #10 = { noreturn nounwind }

!llvm.dbg.cu = !{!33}
!llvm.module.flags = !{!40, !41, !42, !43, !44, !45, !46}
!llvm.ident = !{!47}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 94, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/uaf/uaf17.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "5abcefb07f725649bac7cca3e279d271")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 64, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 8)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 111, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 21)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 117, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 72, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 9)
!33 = distinct !DICompileUnit(language: DW_LANG_C11, file: !34, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !35, globals: !39, splitDebugInlining: false, nameTableKind: None)
!34 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf17.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "5abcefb07f725649bac7cca3e279d271")
!35 = !{!36, !37, !38}
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!37 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!38 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!39 = !{!0, !7, !12, !17, !23, !28}
!40 = !{i32 7, !"Dwarf Version", i32 5}
!41 = !{i32 2, !"Debug Info Version", i32 3}
!42 = !{i32 1, !"wchar_size", i32 4}
!43 = !{i32 8, !"PIC Level", i32 2}
!44 = !{i32 7, !"PIE Level", i32 2}
!45 = !{i32 7, !"uwtable", i32 2}
!46 = !{i32 7, !"frame-pointer", i32 2}
!47 = !{!"clang version 16.0.0"}
!48 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !49, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!49 = !DISubroutineType(types: !50)
!50 = !{null, !36, !36}
!51 = !{}
!52 = !DILocalVariable(name: "p", arg: 1, scope: !48, file: !2, line: 4, type: !36)
!53 = !DILocation(line: 4, column: 22, scope: !48)
!54 = !DILocalVariable(name: "q", arg: 2, scope: !48, file: !2, line: 4, type: !36)
!55 = !DILocation(line: 4, column: 31, scope: !48)
!56 = !DILocation(line: 5, column: 3, scope: !48)
!57 = !DILocation(line: 6, column: 1, scope: !48)
!58 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !49, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!59 = !DILocalVariable(name: "p", arg: 1, scope: !58, file: !2, line: 8, type: !36)
!60 = !DILocation(line: 8, column: 25, scope: !58)
!61 = !DILocalVariable(name: "q", arg: 2, scope: !58, file: !2, line: 8, type: !36)
!62 = !DILocation(line: 8, column: 34, scope: !58)
!63 = !DILocation(line: 9, column: 3, scope: !58)
!64 = !DILocation(line: 10, column: 1, scope: !58)
!65 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !49, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!66 = !DILocalVariable(name: "p", arg: 1, scope: !65, file: !2, line: 12, type: !36)
!67 = !DILocation(line: 12, column: 21, scope: !65)
!68 = !DILocalVariable(name: "q", arg: 2, scope: !65, file: !2, line: 12, type: !36)
!69 = !DILocation(line: 12, column: 30, scope: !65)
!70 = !DILocation(line: 13, column: 3, scope: !65)
!71 = !DILocation(line: 14, column: 1, scope: !65)
!72 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !49, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!73 = !DILocalVariable(name: "p", arg: 1, scope: !72, file: !2, line: 16, type: !36)
!74 = !DILocation(line: 16, column: 20, scope: !72)
!75 = !DILocalVariable(name: "q", arg: 2, scope: !72, file: !2, line: 16, type: !36)
!76 = !DILocation(line: 16, column: 29, scope: !72)
!77 = !DILocation(line: 17, column: 3, scope: !72)
!78 = !DILocation(line: 18, column: 1, scope: !72)
!79 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !49, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!80 = !DILocalVariable(name: "p", arg: 1, scope: !79, file: !2, line: 20, type: !36)
!81 = !DILocation(line: 20, column: 34, scope: !79)
!82 = !DILocalVariable(name: "q", arg: 2, scope: !79, file: !2, line: 20, type: !36)
!83 = !DILocation(line: 20, column: 43, scope: !79)
!84 = !DILocation(line: 21, column: 3, scope: !79)
!85 = !DILocation(line: 22, column: 1, scope: !79)
!86 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !49, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!87 = !DILocalVariable(name: "p", arg: 1, scope: !86, file: !2, line: 24, type: !36)
!88 = !DILocation(line: 24, column: 33, scope: !86)
!89 = !DILocalVariable(name: "q", arg: 2, scope: !86, file: !2, line: 24, type: !36)
!90 = !DILocation(line: 24, column: 42, scope: !86)
!91 = !DILocation(line: 25, column: 3, scope: !86)
!92 = !DILocation(line: 26, column: 1, scope: !86)
!93 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !94, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!94 = !DISubroutineType(types: !95)
!95 = !{!36, !96}
!96 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!97 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !2, line: 29, type: !96)
!98 = !DILocation(line: 29, column: 22, scope: !93)
!99 = !DILocation(line: 30, column: 17, scope: !93)
!100 = !DILocation(line: 30, column: 10, scope: !93)
!101 = !DILocation(line: 30, column: 3, scope: !93)
!102 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !94, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!103 = !DILocalVariable(name: "n", arg: 1, scope: !102, file: !2, line: 33, type: !96)
!104 = !DILocation(line: 33, column: 28, scope: !102)
!105 = !DILocation(line: 34, column: 19, scope: !102)
!106 = !DILocation(line: 34, column: 12, scope: !102)
!107 = !DILocation(line: 34, column: 5, scope: !102)
!108 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !94, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!109 = !DILocalVariable(name: "n", arg: 1, scope: !108, file: !2, line: 37, type: !96)
!110 = !DILocation(line: 37, column: 21, scope: !108)
!111 = !DILocation(line: 38, column: 17, scope: !108)
!112 = !DILocation(line: 38, column: 10, scope: !108)
!113 = !DILocation(line: 38, column: 3, scope: !108)
!114 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !94, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!115 = !DILocalVariable(name: "n", arg: 1, scope: !114, file: !2, line: 41, type: !96)
!116 = !DILocation(line: 41, column: 21, scope: !114)
!117 = !DILocation(line: 42, column: 17, scope: !114)
!118 = !DILocation(line: 42, column: 10, scope: !114)
!119 = !DILocation(line: 42, column: 3, scope: !114)
!120 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !94, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!121 = !DILocalVariable(name: "n", arg: 1, scope: !120, file: !2, line: 45, type: !96)
!122 = !DILocation(line: 45, column: 21, scope: !120)
!123 = !DILocation(line: 46, column: 17, scope: !120)
!124 = !DILocation(line: 46, column: 10, scope: !120)
!125 = !DILocation(line: 46, column: 3, scope: !120)
!126 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !94, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!127 = !DILocalVariable(name: "n", arg: 1, scope: !126, file: !2, line: 49, type: !96)
!128 = !DILocation(line: 49, column: 21, scope: !126)
!129 = !DILocation(line: 50, column: 17, scope: !126)
!130 = !DILocation(line: 50, column: 10, scope: !126)
!131 = !DILocation(line: 50, column: 3, scope: !126)
!132 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !94, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!133 = !DILocalVariable(name: "n", arg: 1, scope: !132, file: !2, line: 53, type: !96)
!134 = !DILocation(line: 53, column: 21, scope: !132)
!135 = !DILocation(line: 54, column: 17, scope: !132)
!136 = !DILocation(line: 54, column: 10, scope: !132)
!137 = !DILocation(line: 54, column: 3, scope: !132)
!138 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !94, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!139 = !DILocalVariable(name: "n", arg: 1, scope: !138, file: !2, line: 57, type: !96)
!140 = !DILocation(line: 57, column: 18, scope: !138)
!141 = !DILocation(line: 58, column: 17, scope: !138)
!142 = !DILocation(line: 58, column: 10, scope: !138)
!143 = !DILocation(line: 58, column: 3, scope: !138)
!144 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !145, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!145 = !DISubroutineType(types: !146)
!146 = !{null, !96, !96}
!147 = !DILocalVariable(name: "id", arg: 1, scope: !144, file: !2, line: 67, type: !96)
!148 = !DILocation(line: 67, column: 20, scope: !144)
!149 = !DILocalVariable(name: "flags", arg: 2, scope: !144, file: !2, line: 67, type: !96)
!150 = !DILocation(line: 67, column: 28, scope: !144)
!151 = !DILocation(line: 68, column: 3, scope: !144)
!152 = !DILocation(line: 69, column: 1, scope: !144)
!153 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !154, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!154 = !DISubroutineType(types: !155)
!155 = !{null, !96, !38}
!156 = !DILocalVariable(name: "thdid", arg: 1, scope: !153, file: !2, line: 79, type: !96)
!157 = !DILocation(line: 79, column: 21, scope: !153)
!158 = !DILocalVariable(name: "cxt", arg: 2, scope: !153, file: !2, line: 79, type: !38)
!159 = !DILocation(line: 79, column: 34, scope: !153)
!160 = !DILocation(line: 81, column: 1, scope: !153)
!161 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !154, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!162 = !DILocalVariable(name: "thdid", arg: 1, scope: !161, file: !2, line: 82, type: !96)
!163 = !DILocation(line: 82, column: 21, scope: !161)
!164 = !DILocalVariable(name: "cxt", arg: 2, scope: !161, file: !2, line: 82, type: !38)
!165 = !DILocation(line: 82, column: 33, scope: !161)
!166 = !DILocation(line: 84, column: 1, scope: !161)
!167 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !168, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!168 = !DISubroutineType(types: !169)
!169 = !{null, !96, !38, !38}
!170 = !DILocalVariable(name: "thdid", arg: 1, scope: !167, file: !2, line: 85, type: !96)
!171 = !DILocation(line: 85, column: 26, scope: !167)
!172 = !DILocalVariable(name: "cxt", arg: 2, scope: !167, file: !2, line: 85, type: !38)
!173 = !DILocation(line: 85, column: 38, scope: !167)
!174 = !DILocalVariable(name: "lev", arg: 3, scope: !167, file: !2, line: 85, type: !38)
!175 = !DILocation(line: 85, column: 49, scope: !167)
!176 = !DILocation(line: 87, column: 1, scope: !167)
!177 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !178, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!178 = !DISubroutineType(types: !179)
!179 = !{null, !38}
!180 = !DILocalVariable(name: "lockname", arg: 1, scope: !177, file: !2, line: 89, type: !38)
!181 = !DILocation(line: 89, column: 17, scope: !177)
!182 = !DILocation(line: 91, column: 1, scope: !177)
!183 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !178, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!184 = !DILocalVariable(name: "str", arg: 1, scope: !183, file: !2, line: 93, type: !38)
!185 = !DILocation(line: 93, column: 18, scope: !183)
!186 = !DILocation(line: 94, column: 18, scope: !183)
!187 = !DILocation(line: 94, column: 3, scope: !183)
!188 = !DILocation(line: 95, column: 3, scope: !183)
!189 = !DILocation(line: 96, column: 3, scope: !183)
!190 = !DILocation(line: 97, column: 1, scope: !183)
!191 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !192, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!192 = !DISubroutineType(types: !193)
!193 = !{!36, !194}
!194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !96, size: 64)
!195 = !DILocalVariable(name: "p", arg: 1, scope: !191, file: !2, line: 100, type: !194)
!196 = !DILocation(line: 100, column: 24, scope: !191)
!197 = !DILocation(line: 101, column: 6, scope: !191)
!198 = !DILocation(line: 101, column: 8, scope: !191)
!199 = !DILocation(line: 102, column: 1, scope: !191)
!200 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !192, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!201 = !DILocalVariable(name: "p", arg: 1, scope: !200, file: !2, line: 104, type: !194)
!202 = !DILocation(line: 104, column: 20, scope: !200)
!203 = !DILocation(line: 105, column: 6, scope: !200)
!204 = !DILocation(line: 105, column: 8, scope: !200)
!205 = !DILocation(line: 106, column: 1, scope: !200)
!206 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !192, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!207 = !DILocalVariable(name: "p", arg: 1, scope: !206, file: !2, line: 110, type: !194)
!208 = !DILocation(line: 110, column: 22, scope: !206)
!209 = !DILocation(line: 111, column: 10, scope: !206)
!210 = !DILocation(line: 111, column: 5, scope: !206)
!211 = !DILocation(line: 112, column: 1, scope: !206)
!212 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !192, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!213 = !DILocalVariable(name: "p", arg: 1, scope: !212, file: !2, line: 115, type: !194)
!214 = !DILocation(line: 115, column: 24, scope: !212)
!215 = !DILocation(line: 116, column: 10, scope: !212)
!216 = !DILocation(line: 116, column: 5, scope: !212)
!217 = !DILocation(line: 117, column: 1, scope: !212)
!218 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !219, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!219 = !DISubroutineType(types: !220)
!220 = !{null}
!221 = !DILocation(line: 135, column: 20, scope: !218)
!222 = distinct !DISubprogram(name: "CWE416_Use_After_Free__return_freed_ptr_08_bad", scope: !19, file: !19, line: 88, type: !219, scopeLine: 89, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!223 = !DILocation(line: 90, column: 8, scope: !224)
!224 = distinct !DILexicalBlock(scope: !222, file: !19, line: 90, column: 8)
!225 = !DILocation(line: 90, column: 8, scope: !222)
!226 = !DILocalVariable(name: "reversedString", scope: !227, file: !19, line: 94, type: !38)
!227 = distinct !DILexicalBlock(scope: !228, file: !19, line: 92, column: 9)
!228 = distinct !DILexicalBlock(scope: !224, file: !19, line: 91, column: 5)
!229 = !DILocation(line: 94, column: 20, scope: !227)
!230 = !DILocation(line: 94, column: 37, scope: !227)
!231 = !DILocation(line: 95, column: 21, scope: !227)
!232 = !DILocation(line: 95, column: 13, scope: !227)
!233 = !DILocation(line: 101, column: 5, scope: !228)
!234 = !DILocation(line: 102, column: 1, scope: !222)
!235 = distinct !DISubprogram(name: "helperBad", scope: !19, file: !19, line: 25, type: !236, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !33, retainedNodes: !51)
!236 = !DISubroutineType(types: !237)
!237 = !{!38, !38}
!238 = !DILocalVariable(name: "aString", arg: 1, scope: !235, file: !19, line: 25, type: !38)
!239 = !DILocation(line: 25, column: 32, scope: !235)
!240 = !DILocalVariable(name: "i", scope: !235, file: !19, line: 27, type: !241)
!241 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !242, line: 46, baseType: !243)
!242 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!243 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!244 = !DILocation(line: 27, column: 12, scope: !235)
!245 = !DILocalVariable(name: "j", scope: !235, file: !19, line: 28, type: !241)
!246 = !DILocation(line: 28, column: 12, scope: !235)
!247 = !DILocalVariable(name: "reversedString", scope: !235, file: !19, line: 29, type: !38)
!248 = !DILocation(line: 29, column: 12, scope: !235)
!249 = !DILocation(line: 30, column: 9, scope: !250)
!250 = distinct !DILexicalBlock(scope: !235, file: !19, line: 30, column: 9)
!251 = !DILocation(line: 30, column: 17, scope: !250)
!252 = !DILocation(line: 30, column: 9, scope: !235)
!253 = !DILocation(line: 32, column: 20, scope: !254)
!254 = distinct !DILexicalBlock(scope: !250, file: !19, line: 31, column: 5)
!255 = !DILocation(line: 32, column: 13, scope: !254)
!256 = !DILocation(line: 32, column: 11, scope: !254)
!257 = !DILocation(line: 33, column: 46, scope: !254)
!258 = !DILocation(line: 33, column: 47, scope: !254)
!259 = !DILocation(line: 33, column: 35, scope: !254)
!260 = !DILocation(line: 33, column: 24, scope: !254)
!261 = !DILocation(line: 34, column: 13, scope: !262)
!262 = distinct !DILexicalBlock(scope: !254, file: !19, line: 34, column: 13)
!263 = !DILocation(line: 34, column: 28, scope: !262)
!264 = !DILocation(line: 34, column: 13, scope: !254)
!265 = !DILocation(line: 34, column: 38, scope: !266)
!266 = distinct !DILexicalBlock(scope: !262, file: !19, line: 34, column: 37)
!267 = !DILocation(line: 35, column: 16, scope: !268)
!268 = distinct !DILexicalBlock(scope: !254, file: !19, line: 35, column: 9)
!269 = !DILocation(line: 35, column: 14, scope: !268)
!270 = !DILocation(line: 35, column: 21, scope: !271)
!271 = distinct !DILexicalBlock(scope: !268, file: !19, line: 35, column: 9)
!272 = !DILocation(line: 35, column: 25, scope: !271)
!273 = !DILocation(line: 35, column: 23, scope: !271)
!274 = !DILocation(line: 35, column: 9, scope: !268)
!275 = !DILocation(line: 37, column: 33, scope: !276)
!276 = distinct !DILexicalBlock(scope: !271, file: !19, line: 36, column: 9)
!277 = !DILocation(line: 37, column: 41, scope: !276)
!278 = !DILocation(line: 37, column: 43, scope: !276)
!279 = !DILocation(line: 37, column: 42, scope: !276)
!280 = !DILocation(line: 37, column: 44, scope: !276)
!281 = !DILocation(line: 37, column: 13, scope: !276)
!282 = !DILocation(line: 37, column: 28, scope: !276)
!283 = !DILocation(line: 37, column: 31, scope: !276)
!284 = !DILocation(line: 38, column: 9, scope: !276)
!285 = !DILocation(line: 35, column: 29, scope: !271)
!286 = !DILocation(line: 35, column: 9, scope: !271)
!287 = distinct !{!287, !274, !288, !289}
!288 = !DILocation(line: 38, column: 9, scope: !268)
!289 = !{!"llvm.loop.mustprogress"}
!290 = !DILocation(line: 39, column: 9, scope: !254)
!291 = !DILocation(line: 39, column: 24, scope: !254)
!292 = !DILocation(line: 39, column: 27, scope: !254)
!293 = !DILocation(line: 41, column: 14, scope: !254)
!294 = !DILocation(line: 41, column: 9, scope: !254)
!295 = !DILocation(line: 42, column: 16, scope: !254)
!296 = !DILocation(line: 42, column: 9, scope: !254)
!297 = !DILocation(line: 46, column: 9, scope: !298)
!298 = distinct !DILexicalBlock(scope: !250, file: !19, line: 45, column: 5)
!299 = !DILocation(line: 48, column: 1, scope: !235)
!300 = distinct !DISubprogram(name: "CWE416_Use_After_Free__return_freed_ptr_08_good", scope: !19, file: !19, line: 144, type: !219, scopeLine: 145, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!301 = !DILocation(line: 146, column: 5, scope: !300)
!302 = !DILocation(line: 147, column: 5, scope: !300)
!303 = !DILocation(line: 148, column: 1, scope: !300)
!304 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 156, type: !305, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !33, retainedNodes: !51)
!305 = !DISubroutineType(types: !306)
!306 = !{!96, !96, !307}
!307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !38, size: 64)
!308 = !DILocalVariable(name: "argc", arg: 1, scope: !304, file: !19, line: 156, type: !96)
!309 = !DILocation(line: 156, column: 14, scope: !304)
!310 = !DILocalVariable(name: "argv", arg: 2, scope: !304, file: !19, line: 156, type: !307)
!311 = !DILocation(line: 156, column: 27, scope: !304)
!312 = !DILocation(line: 159, column: 22, scope: !304)
!313 = !DILocation(line: 159, column: 12, scope: !304)
!314 = !DILocation(line: 159, column: 5, scope: !304)
!315 = !DILocation(line: 160, column: 5, scope: !304)
!316 = !DILocation(line: 161, column: 5, scope: !304)
!317 = !DILocation(line: 162, column: 5, scope: !304)
!318 = distinct !DISubprogram(name: "staticReturnsTrue", scope: !19, file: !19, line: 77, type: !319, scopeLine: 78, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !33, retainedNodes: !51)
!319 = !DISubroutineType(types: !320)
!320 = !{!96}
!321 = !DILocation(line: 79, column: 5, scope: !318)
!322 = distinct !DISubprogram(name: "good1", scope: !19, file: !19, line: 106, type: !219, scopeLine: 107, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !33, retainedNodes: !51)
!323 = !DILocation(line: 108, column: 8, scope: !324)
!324 = distinct !DILexicalBlock(scope: !322, file: !19, line: 108, column: 8)
!325 = !DILocation(line: 108, column: 8, scope: !322)
!326 = !DILocation(line: 111, column: 9, scope: !327)
!327 = distinct !DILexicalBlock(scope: !324, file: !19, line: 109, column: 5)
!328 = !DILocation(line: 112, column: 5, scope: !327)
!329 = !DILocalVariable(name: "reversedString", scope: !330, file: !19, line: 117, type: !38)
!330 = distinct !DILexicalBlock(scope: !331, file: !19, line: 115, column: 9)
!331 = distinct !DILexicalBlock(scope: !324, file: !19, line: 114, column: 5)
!332 = !DILocation(line: 117, column: 20, scope: !330)
!333 = !DILocation(line: 117, column: 37, scope: !330)
!334 = !DILocation(line: 118, column: 25, scope: !330)
!335 = !DILocation(line: 118, column: 13, scope: !330)
!336 = !DILocation(line: 125, column: 1, scope: !322)
!337 = distinct !DISubprogram(name: "helperGood", scope: !19, file: !19, line: 50, type: !236, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !33, retainedNodes: !51)
!338 = !DILocalVariable(name: "aString", arg: 1, scope: !337, file: !19, line: 50, type: !38)
!339 = !DILocation(line: 50, column: 33, scope: !337)
!340 = !DILocalVariable(name: "i", scope: !337, file: !19, line: 52, type: !241)
!341 = !DILocation(line: 52, column: 12, scope: !337)
!342 = !DILocalVariable(name: "j", scope: !337, file: !19, line: 53, type: !241)
!343 = !DILocation(line: 53, column: 12, scope: !337)
!344 = !DILocalVariable(name: "reversedString", scope: !337, file: !19, line: 54, type: !38)
!345 = !DILocation(line: 54, column: 12, scope: !337)
!346 = !DILocation(line: 55, column: 9, scope: !347)
!347 = distinct !DILexicalBlock(scope: !337, file: !19, line: 55, column: 9)
!348 = !DILocation(line: 55, column: 17, scope: !347)
!349 = !DILocation(line: 55, column: 9, scope: !337)
!350 = !DILocation(line: 57, column: 20, scope: !351)
!351 = distinct !DILexicalBlock(scope: !347, file: !19, line: 56, column: 5)
!352 = !DILocation(line: 57, column: 13, scope: !351)
!353 = !DILocation(line: 57, column: 11, scope: !351)
!354 = !DILocation(line: 58, column: 46, scope: !351)
!355 = !DILocation(line: 58, column: 47, scope: !351)
!356 = !DILocation(line: 58, column: 35, scope: !351)
!357 = !DILocation(line: 58, column: 24, scope: !351)
!358 = !DILocation(line: 59, column: 13, scope: !359)
!359 = distinct !DILexicalBlock(scope: !351, file: !19, line: 59, column: 13)
!360 = !DILocation(line: 59, column: 28, scope: !359)
!361 = !DILocation(line: 59, column: 13, scope: !351)
!362 = !DILocation(line: 59, column: 38, scope: !363)
!363 = distinct !DILexicalBlock(scope: !359, file: !19, line: 59, column: 37)
!364 = !DILocation(line: 60, column: 16, scope: !365)
!365 = distinct !DILexicalBlock(scope: !351, file: !19, line: 60, column: 9)
!366 = !DILocation(line: 60, column: 14, scope: !365)
!367 = !DILocation(line: 60, column: 21, scope: !368)
!368 = distinct !DILexicalBlock(scope: !365, file: !19, line: 60, column: 9)
!369 = !DILocation(line: 60, column: 25, scope: !368)
!370 = !DILocation(line: 60, column: 23, scope: !368)
!371 = !DILocation(line: 60, column: 9, scope: !365)
!372 = !DILocation(line: 62, column: 33, scope: !373)
!373 = distinct !DILexicalBlock(scope: !368, file: !19, line: 61, column: 9)
!374 = !DILocation(line: 62, column: 41, scope: !373)
!375 = !DILocation(line: 62, column: 43, scope: !373)
!376 = !DILocation(line: 62, column: 42, scope: !373)
!377 = !DILocation(line: 62, column: 44, scope: !373)
!378 = !DILocation(line: 62, column: 13, scope: !373)
!379 = !DILocation(line: 62, column: 28, scope: !373)
!380 = !DILocation(line: 62, column: 31, scope: !373)
!381 = !DILocation(line: 63, column: 9, scope: !373)
!382 = !DILocation(line: 60, column: 29, scope: !368)
!383 = !DILocation(line: 60, column: 9, scope: !368)
!384 = distinct !{!384, !371, !385, !289}
!385 = !DILocation(line: 63, column: 9, scope: !365)
!386 = !DILocation(line: 64, column: 9, scope: !351)
!387 = !DILocation(line: 64, column: 24, scope: !351)
!388 = !DILocation(line: 64, column: 27, scope: !351)
!389 = !DILocation(line: 66, column: 16, scope: !351)
!390 = !DILocation(line: 66, column: 9, scope: !351)
!391 = !DILocation(line: 70, column: 9, scope: !392)
!392 = distinct !DILexicalBlock(scope: !347, file: !19, line: 69, column: 5)
!393 = !DILocation(line: 72, column: 1, scope: !337)
!394 = distinct !DISubprogram(name: "staticReturnsFalse", scope: !19, file: !19, line: 82, type: !319, scopeLine: 83, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !33, retainedNodes: !51)
!395 = !DILocation(line: 84, column: 5, scope: !394)
!396 = distinct !DISubprogram(name: "good2", scope: !19, file: !19, line: 128, type: !219, scopeLine: 129, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !33, retainedNodes: !51)
!397 = !DILocation(line: 130, column: 8, scope: !398)
!398 = distinct !DILexicalBlock(scope: !396, file: !19, line: 130, column: 8)
!399 = !DILocation(line: 130, column: 8, scope: !396)
!400 = !DILocalVariable(name: "reversedString", scope: !401, file: !19, line: 134, type: !38)
!401 = distinct !DILexicalBlock(scope: !402, file: !19, line: 132, column: 9)
!402 = distinct !DILexicalBlock(scope: !398, file: !19, line: 131, column: 5)
!403 = !DILocation(line: 134, column: 20, scope: !401)
!404 = !DILocation(line: 134, column: 37, scope: !401)
!405 = !DILocation(line: 135, column: 25, scope: !401)
!406 = !DILocation(line: 135, column: 13, scope: !401)
!407 = !DILocation(line: 141, column: 5, scope: !402)
!408 = !DILocation(line: 142, column: 1, scope: !396)
