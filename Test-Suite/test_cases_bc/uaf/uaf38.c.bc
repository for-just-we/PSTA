; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/uaf/uaf38.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf38.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@staticTrue = internal global i32 1, align 4, !dbg !17
@staticFalse = internal global i32 0, align 4, !dbg !39
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !33

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !49 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !53, metadata !DIExpression()), !dbg !54
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !57
  ret void, !dbg !58
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !59 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !60, metadata !DIExpression()), !dbg !61
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !62, metadata !DIExpression()), !dbg !63
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !64
  ret void, !dbg !65
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !66 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !67, metadata !DIExpression()), !dbg !68
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !69, metadata !DIExpression()), !dbg !70
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !71
  ret void, !dbg !72
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !73 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !74, metadata !DIExpression()), !dbg !75
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !76, metadata !DIExpression()), !dbg !77
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !78
  ret void, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !80 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !81, metadata !DIExpression()), !dbg !82
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !85
  ret void, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !87 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !88, metadata !DIExpression()), !dbg !89
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !90, metadata !DIExpression()), !dbg !91
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !92
  ret void, !dbg !93
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !94 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %0 = load i32, ptr %n.addr, align 4, !dbg !99
  %conv = sext i32 %0 to i64, !dbg !99
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !100
  ret ptr %call, !dbg !101
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !102 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %0 = load i32, ptr %n.addr, align 4, !dbg !105
  %conv = sext i32 %0 to i64, !dbg !105
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !106
  ret ptr %call, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !108 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !109, metadata !DIExpression()), !dbg !110
  %0 = load i32, ptr %n.addr, align 4, !dbg !111
  %conv = sext i32 %0 to i64, !dbg !111
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !112
  ret ptr %call, !dbg !113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !114 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %0 = load i32, ptr %n.addr, align 4, !dbg !117
  %conv = sext i32 %0 to i64, !dbg !117
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !118
  ret ptr %call, !dbg !119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !120 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !121, metadata !DIExpression()), !dbg !122
  %0 = load i32, ptr %n.addr, align 4, !dbg !123
  %conv = sext i32 %0 to i64, !dbg !123
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !124
  ret ptr %call, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !126 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !127, metadata !DIExpression()), !dbg !128
  %0 = load i32, ptr %n.addr, align 4, !dbg !129
  %conv = sext i32 %0 to i64, !dbg !129
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !130
  ret ptr %call, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !132 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !133, metadata !DIExpression()), !dbg !134
  %0 = load i32, ptr %n.addr, align 4, !dbg !135
  %conv = sext i32 %0 to i64, !dbg !135
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !136
  ret ptr %call, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !138 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !139, metadata !DIExpression()), !dbg !140
  %0 = load i32, ptr %n.addr, align 4, !dbg !141
  %conv = sext i32 %0 to i64, !dbg !141
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !142
  ret ptr %call, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !144 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !147, metadata !DIExpression()), !dbg !148
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !149, metadata !DIExpression()), !dbg !150
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !151
  ret void, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !153 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !157, metadata !DIExpression()), !dbg !158
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !159, metadata !DIExpression()), !dbg !160
  ret void, !dbg !161
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !162 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !163, metadata !DIExpression()), !dbg !164
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !165, metadata !DIExpression()), !dbg !166
  ret void, !dbg !167
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !168 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !171, metadata !DIExpression()), !dbg !172
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !173, metadata !DIExpression()), !dbg !174
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !175, metadata !DIExpression()), !dbg !176
  ret void, !dbg !177
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !178 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !181, metadata !DIExpression()), !dbg !182
  ret void, !dbg !183
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !184 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !185, metadata !DIExpression()), !dbg !186
  %0 = load ptr, ptr %str.addr, align 8, !dbg !187
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !188
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !189
  %call2 = call i32 @getchar(), !dbg !190
  ret void, !dbg !191
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !192 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !196, metadata !DIExpression()), !dbg !197
  %0 = load ptr, ptr %p.addr, align 8, !dbg !198
  store i32 0, ptr %0, align 4, !dbg !199
  %1 = load ptr, ptr %retval, align 8, !dbg !200
  ret ptr %1, !dbg !200
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !201 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !202, metadata !DIExpression()), !dbg !203
  %0 = load ptr, ptr %p.addr, align 8, !dbg !204
  store i32 0, ptr %0, align 4, !dbg !205
  %1 = load ptr, ptr %retval, align 8, !dbg !206
  ret ptr %1, !dbg !206
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !207 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !208, metadata !DIExpression()), !dbg !209
  %0 = load ptr, ptr %p.addr, align 8, !dbg !210
  call void @free(ptr noundef %0) #7, !dbg !211
  %1 = load ptr, ptr %retval, align 8, !dbg !212
  ret ptr %1, !dbg !212
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !213 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !214, metadata !DIExpression()), !dbg !215
  %0 = load ptr, ptr %p.addr, align 8, !dbg !216
  call void @free(ptr noundef %0) #7, !dbg !217
  %1 = load ptr, ptr %retval, align 8, !dbg !218
  ret ptr %1, !dbg !218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !219 {
entry:
  ret void, !dbg !222
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_05_bad() #0 !dbg !223 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !224, metadata !DIExpression()), !dbg !225
  store ptr null, ptr %data, align 8, !dbg !226
  %0 = load i32, ptr @staticTrue, align 4, !dbg !227
  %tobool = icmp ne i32 %0, 0, !dbg !227
  br i1 %tobool, label %if.then, label %if.end4, !dbg !229

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !230
  store ptr %call, ptr %data, align 8, !dbg !232
  %1 = load ptr, ptr %data, align 8, !dbg !233
  %cmp = icmp eq ptr %1, null, !dbg !235
  br i1 %cmp, label %if.then1, label %if.end, !dbg !236

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !237
  unreachable, !dbg !237

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !239, metadata !DIExpression()), !dbg !244
  store i64 0, ptr %i, align 8, !dbg !245
  br label %for.cond, !dbg !247

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !248
  %cmp2 = icmp ult i64 %2, 100, !dbg !250
  br i1 %cmp2, label %for.body, label %for.end, !dbg !251

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !252
  %4 = load i64, ptr %i, align 8, !dbg !254
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 %4, !dbg !252
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !255
  store i32 1, ptr %intOne, align 4, !dbg !256
  %5 = load ptr, ptr %data, align 8, !dbg !257
  %6 = load i64, ptr %i, align 8, !dbg !258
  %arrayidx3 = getelementptr inbounds %struct._twoIntsStruct, ptr %5, i64 %6, !dbg !257
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx3, i32 0, i32 1, !dbg !259
  store i32 2, ptr %intTwo, align 4, !dbg !260
  br label %for.inc, !dbg !261

for.inc:                                          ; preds = %for.body
  %7 = load i64, ptr %i, align 8, !dbg !262
  %inc = add i64 %7, 1, !dbg !262
  store i64 %inc, ptr %i, align 8, !dbg !262
  br label %for.cond, !dbg !263, !llvm.loop !264

for.end:                                          ; preds = %for.cond
  %8 = load ptr, ptr %data, align 8, !dbg !267
  call void @free(ptr noundef %8) #7, !dbg !268
  br label %if.end4, !dbg !269

if.end4:                                          ; preds = %for.end, %entry
  %9 = load i32, ptr @staticTrue, align 4, !dbg !270
  %tobool5 = icmp ne i32 %9, 0, !dbg !270
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !272

if.then6:                                         ; preds = %if.end4
  %10 = load ptr, ptr %data, align 8, !dbg !273
  %call7 = call ptr @UAFFUNC(ptr noundef %10), !dbg !275
  br label %if.end8, !dbg !276

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !277
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE416_Use_After_Free__malloc_free_struct_05_good() #0 !dbg !278 {
entry:
  call void @goodB2G1(), !dbg !279
  call void @goodB2G2(), !dbg !280
  call void @goodG2B1(), !dbg !281
  call void @goodG2B2(), !dbg !282
  ret void, !dbg !283
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !284 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !288, metadata !DIExpression()), !dbg !289
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !290, metadata !DIExpression()), !dbg !291
  %call = call i64 @time(ptr noundef null) #7, !dbg !292
  %conv = trunc i64 %call to i32, !dbg !293
  call void @srand(i32 noundef %conv) #7, !dbg !294
  call void @CWE416_Use_After_Free__malloc_free_struct_05_good(), !dbg !295
  call void @CWE416_Use_After_Free__malloc_free_struct_05_bad(), !dbg !296
  ret i32 0, !dbg !297
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !298 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !299, metadata !DIExpression()), !dbg !300
  store ptr null, ptr %data, align 8, !dbg !301
  %0 = load i32, ptr @staticTrue, align 4, !dbg !302
  %tobool = icmp ne i32 %0, 0, !dbg !302
  br i1 %tobool, label %if.then, label %if.end4, !dbg !304

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !305
  store ptr %call, ptr %data, align 8, !dbg !307
  %1 = load ptr, ptr %data, align 8, !dbg !308
  %cmp = icmp eq ptr %1, null, !dbg !310
  br i1 %cmp, label %if.then1, label %if.end, !dbg !311

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !312
  unreachable, !dbg !312

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !314, metadata !DIExpression()), !dbg !316
  store i64 0, ptr %i, align 8, !dbg !317
  br label %for.cond, !dbg !319

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !320
  %cmp2 = icmp ult i64 %2, 100, !dbg !322
  br i1 %cmp2, label %for.body, label %for.end, !dbg !323

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !324
  %4 = load i64, ptr %i, align 8, !dbg !326
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 %4, !dbg !324
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !327
  store i32 1, ptr %intOne, align 4, !dbg !328
  %5 = load ptr, ptr %data, align 8, !dbg !329
  %6 = load i64, ptr %i, align 8, !dbg !330
  %arrayidx3 = getelementptr inbounds %struct._twoIntsStruct, ptr %5, i64 %6, !dbg !329
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx3, i32 0, i32 1, !dbg !331
  store i32 2, ptr %intTwo, align 4, !dbg !332
  br label %for.inc, !dbg !333

for.inc:                                          ; preds = %for.body
  %7 = load i64, ptr %i, align 8, !dbg !334
  %inc = add i64 %7, 1, !dbg !334
  store i64 %inc, ptr %i, align 8, !dbg !334
  br label %for.cond, !dbg !335, !llvm.loop !336

for.end:                                          ; preds = %for.cond
  %8 = load ptr, ptr %data, align 8, !dbg !338
  call void @free(ptr noundef %8) #7, !dbg !339
  br label %if.end4, !dbg !340

if.end4:                                          ; preds = %for.end, %entry
  %9 = load i32, ptr @staticFalse, align 4, !dbg !341
  %tobool5 = icmp ne i32 %9, 0, !dbg !341
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !343

if.then6:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.3), !dbg !344
  br label %if.end7, !dbg !346

if.else:                                          ; preds = %if.end4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void, !dbg !347
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !348 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !349, metadata !DIExpression()), !dbg !350
  store ptr null, ptr %data, align 8, !dbg !351
  %0 = load i32, ptr @staticTrue, align 4, !dbg !352
  %tobool = icmp ne i32 %0, 0, !dbg !352
  br i1 %tobool, label %if.then, label %if.end4, !dbg !354

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !355
  store ptr %call, ptr %data, align 8, !dbg !357
  %1 = load ptr, ptr %data, align 8, !dbg !358
  %cmp = icmp eq ptr %1, null, !dbg !360
  br i1 %cmp, label %if.then1, label %if.end, !dbg !361

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !362
  unreachable, !dbg !362

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !364, metadata !DIExpression()), !dbg !366
  store i64 0, ptr %i, align 8, !dbg !367
  br label %for.cond, !dbg !369

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !370
  %cmp2 = icmp ult i64 %2, 100, !dbg !372
  br i1 %cmp2, label %for.body, label %for.end, !dbg !373

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !374
  %4 = load i64, ptr %i, align 8, !dbg !376
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 %4, !dbg !374
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !377
  store i32 1, ptr %intOne, align 4, !dbg !378
  %5 = load ptr, ptr %data, align 8, !dbg !379
  %6 = load i64, ptr %i, align 8, !dbg !380
  %arrayidx3 = getelementptr inbounds %struct._twoIntsStruct, ptr %5, i64 %6, !dbg !379
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx3, i32 0, i32 1, !dbg !381
  store i32 2, ptr %intTwo, align 4, !dbg !382
  br label %for.inc, !dbg !383

for.inc:                                          ; preds = %for.body
  %7 = load i64, ptr %i, align 8, !dbg !384
  %inc = add i64 %7, 1, !dbg !384
  store i64 %inc, ptr %i, align 8, !dbg !384
  br label %for.cond, !dbg !385, !llvm.loop !386

for.end:                                          ; preds = %for.cond
  %8 = load ptr, ptr %data, align 8, !dbg !388
  call void @free(ptr noundef %8) #7, !dbg !389
  br label %if.end4, !dbg !390

if.end4:                                          ; preds = %for.end, %entry
  %9 = load i32, ptr @staticTrue, align 4, !dbg !391
  %tobool5 = icmp ne i32 %9, 0, !dbg !391
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !393

if.then6:                                         ; preds = %if.end4
  br label %if.end7, !dbg !394

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !396
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !397 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !398, metadata !DIExpression()), !dbg !399
  store ptr null, ptr %data, align 8, !dbg !400
  %0 = load i32, ptr @staticFalse, align 4, !dbg !401
  %tobool = icmp ne i32 %0, 0, !dbg !401
  br i1 %tobool, label %if.then, label %if.else, !dbg !403

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !404
  br label %if.end4, !dbg !406

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !407
  store ptr %call, ptr %data, align 8, !dbg !409
  %1 = load ptr, ptr %data, align 8, !dbg !410
  %cmp = icmp eq ptr %1, null, !dbg !412
  br i1 %cmp, label %if.then1, label %if.end, !dbg !413

if.then1:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #8, !dbg !414
  unreachable, !dbg !414

if.end:                                           ; preds = %if.else
  call void @llvm.dbg.declare(metadata ptr %i, metadata !416, metadata !DIExpression()), !dbg !418
  store i64 0, ptr %i, align 8, !dbg !419
  br label %for.cond, !dbg !421

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !422
  %cmp2 = icmp ult i64 %2, 100, !dbg !424
  br i1 %cmp2, label %for.body, label %for.end, !dbg !425

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !426
  %4 = load i64, ptr %i, align 8, !dbg !428
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 %4, !dbg !426
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !429
  store i32 1, ptr %intOne, align 4, !dbg !430
  %5 = load ptr, ptr %data, align 8, !dbg !431
  %6 = load i64, ptr %i, align 8, !dbg !432
  %arrayidx3 = getelementptr inbounds %struct._twoIntsStruct, ptr %5, i64 %6, !dbg !431
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx3, i32 0, i32 1, !dbg !433
  store i32 2, ptr %intTwo, align 4, !dbg !434
  br label %for.inc, !dbg !435

for.inc:                                          ; preds = %for.body
  %7 = load i64, ptr %i, align 8, !dbg !436
  %inc = add i64 %7, 1, !dbg !436
  store i64 %inc, ptr %i, align 8, !dbg !436
  br label %for.cond, !dbg !437, !llvm.loop !438

for.end:                                          ; preds = %for.cond
  br label %if.end4

if.end4:                                          ; preds = %for.end, %if.then
  %8 = load i32, ptr @staticTrue, align 4, !dbg !440
  %tobool5 = icmp ne i32 %8, 0, !dbg !440
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !442

if.then6:                                         ; preds = %if.end4
  %9 = load ptr, ptr %data, align 8, !dbg !443
  %call7 = call ptr @SAFEUAFFUNC(ptr noundef %9), !dbg !445
  br label %if.end8, !dbg !446

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !447
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !448 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !449, metadata !DIExpression()), !dbg !450
  store ptr null, ptr %data, align 8, !dbg !451
  %0 = load i32, ptr @staticTrue, align 4, !dbg !452
  %tobool = icmp ne i32 %0, 0, !dbg !452
  br i1 %tobool, label %if.then, label %if.end4, !dbg !454

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !455
  store ptr %call, ptr %data, align 8, !dbg !457
  %1 = load ptr, ptr %data, align 8, !dbg !458
  %cmp = icmp eq ptr %1, null, !dbg !460
  br i1 %cmp, label %if.then1, label %if.end, !dbg !461

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !462
  unreachable, !dbg !462

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata ptr %i, metadata !464, metadata !DIExpression()), !dbg !466
  store i64 0, ptr %i, align 8, !dbg !467
  br label %for.cond, !dbg !469

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, ptr %i, align 8, !dbg !470
  %cmp2 = icmp ult i64 %2, 100, !dbg !472
  br i1 %cmp2, label %for.body, label %for.end, !dbg !473

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %data, align 8, !dbg !474
  %4 = load i64, ptr %i, align 8, !dbg !476
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 %4, !dbg !474
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !477
  store i32 1, ptr %intOne, align 4, !dbg !478
  %5 = load ptr, ptr %data, align 8, !dbg !479
  %6 = load i64, ptr %i, align 8, !dbg !480
  %arrayidx3 = getelementptr inbounds %struct._twoIntsStruct, ptr %5, i64 %6, !dbg !479
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx3, i32 0, i32 1, !dbg !481
  store i32 2, ptr %intTwo, align 4, !dbg !482
  br label %for.inc, !dbg !483

for.inc:                                          ; preds = %for.body
  %7 = load i64, ptr %i, align 8, !dbg !484
  %inc = add i64 %7, 1, !dbg !484
  store i64 %inc, ptr %i, align 8, !dbg !484
  br label %for.cond, !dbg !485, !llvm.loop !486

for.end:                                          ; preds = %for.cond
  br label %if.end4, !dbg !488

if.end4:                                          ; preds = %for.end, %entry
  %8 = load i32, ptr @staticTrue, align 4, !dbg !489
  %tobool5 = icmp ne i32 %8, 0, !dbg !489
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !491

if.then6:                                         ; preds = %if.end4
  %9 = load ptr, ptr %data, align 8, !dbg !492
  %call7 = call ptr @SAFEUAFFUNC(ptr noundef %9), !dbg !494
  br label %if.end8, !dbg !495

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !496
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!41, !42, !43, !44, !45, !46, !47}
!llvm.ident = !{!48}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "staticTrue", scope: !19, file: !35, line: 32, type: !29, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !32, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/uaf/uaf38.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "407443484a932a1916cdfac032a0d579")
!21 = !{!22, !23, !31}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !25, line: 100, baseType: !26)
!25 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !25, line: 96, size: 64, elements: !27)
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !26, file: !25, line: 98, baseType: !29, size: 32)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !26, file: !25, line: 99, baseType: !29, size: 32, offset: 32)
!31 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!32 = !{!0, !7, !12, !17, !33, !39}
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !35, line: 89, type: !36, isLocal: true, isDefinition: true)
!35 = !DIFile(filename: "src/uaf/uaf38.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "407443484a932a1916cdfac032a0d579")
!36 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !37)
!37 = !{!38}
!38 = !DISubrange(count: 21)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "staticFalse", scope: !19, file: !35, line: 33, type: !29, isLocal: true, isDefinition: true)
!41 = !{i32 7, !"Dwarf Version", i32 5}
!42 = !{i32 2, !"Debug Info Version", i32 3}
!43 = !{i32 1, !"wchar_size", i32 4}
!44 = !{i32 8, !"PIC Level", i32 2}
!45 = !{i32 7, !"PIE Level", i32 2}
!46 = !{i32 7, !"uwtable", i32 2}
!47 = !{i32 7, !"frame-pointer", i32 2}
!48 = !{!"clang version 16.0.0"}
!49 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !50, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!50 = !DISubroutineType(types: !51)
!51 = !{null, !22, !22}
!52 = !{}
!53 = !DILocalVariable(name: "p", arg: 1, scope: !49, file: !2, line: 4, type: !22)
!54 = !DILocation(line: 4, column: 22, scope: !49)
!55 = !DILocalVariable(name: "q", arg: 2, scope: !49, file: !2, line: 4, type: !22)
!56 = !DILocation(line: 4, column: 31, scope: !49)
!57 = !DILocation(line: 5, column: 3, scope: !49)
!58 = !DILocation(line: 6, column: 1, scope: !49)
!59 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !50, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!60 = !DILocalVariable(name: "p", arg: 1, scope: !59, file: !2, line: 8, type: !22)
!61 = !DILocation(line: 8, column: 25, scope: !59)
!62 = !DILocalVariable(name: "q", arg: 2, scope: !59, file: !2, line: 8, type: !22)
!63 = !DILocation(line: 8, column: 34, scope: !59)
!64 = !DILocation(line: 9, column: 3, scope: !59)
!65 = !DILocation(line: 10, column: 1, scope: !59)
!66 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !50, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!67 = !DILocalVariable(name: "p", arg: 1, scope: !66, file: !2, line: 12, type: !22)
!68 = !DILocation(line: 12, column: 21, scope: !66)
!69 = !DILocalVariable(name: "q", arg: 2, scope: !66, file: !2, line: 12, type: !22)
!70 = !DILocation(line: 12, column: 30, scope: !66)
!71 = !DILocation(line: 13, column: 3, scope: !66)
!72 = !DILocation(line: 14, column: 1, scope: !66)
!73 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !50, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!74 = !DILocalVariable(name: "p", arg: 1, scope: !73, file: !2, line: 16, type: !22)
!75 = !DILocation(line: 16, column: 20, scope: !73)
!76 = !DILocalVariable(name: "q", arg: 2, scope: !73, file: !2, line: 16, type: !22)
!77 = !DILocation(line: 16, column: 29, scope: !73)
!78 = !DILocation(line: 17, column: 3, scope: !73)
!79 = !DILocation(line: 18, column: 1, scope: !73)
!80 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !50, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!81 = !DILocalVariable(name: "p", arg: 1, scope: !80, file: !2, line: 20, type: !22)
!82 = !DILocation(line: 20, column: 34, scope: !80)
!83 = !DILocalVariable(name: "q", arg: 2, scope: !80, file: !2, line: 20, type: !22)
!84 = !DILocation(line: 20, column: 43, scope: !80)
!85 = !DILocation(line: 21, column: 3, scope: !80)
!86 = !DILocation(line: 22, column: 1, scope: !80)
!87 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !50, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!88 = !DILocalVariable(name: "p", arg: 1, scope: !87, file: !2, line: 24, type: !22)
!89 = !DILocation(line: 24, column: 33, scope: !87)
!90 = !DILocalVariable(name: "q", arg: 2, scope: !87, file: !2, line: 24, type: !22)
!91 = !DILocation(line: 24, column: 42, scope: !87)
!92 = !DILocation(line: 25, column: 3, scope: !87)
!93 = !DILocation(line: 26, column: 1, scope: !87)
!94 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !95, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!95 = !DISubroutineType(types: !96)
!96 = !{!22, !29}
!97 = !DILocalVariable(name: "n", arg: 1, scope: !94, file: !2, line: 29, type: !29)
!98 = !DILocation(line: 29, column: 22, scope: !94)
!99 = !DILocation(line: 30, column: 17, scope: !94)
!100 = !DILocation(line: 30, column: 10, scope: !94)
!101 = !DILocation(line: 30, column: 3, scope: !94)
!102 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !95, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!103 = !DILocalVariable(name: "n", arg: 1, scope: !102, file: !2, line: 33, type: !29)
!104 = !DILocation(line: 33, column: 28, scope: !102)
!105 = !DILocation(line: 34, column: 19, scope: !102)
!106 = !DILocation(line: 34, column: 12, scope: !102)
!107 = !DILocation(line: 34, column: 5, scope: !102)
!108 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !95, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!109 = !DILocalVariable(name: "n", arg: 1, scope: !108, file: !2, line: 37, type: !29)
!110 = !DILocation(line: 37, column: 21, scope: !108)
!111 = !DILocation(line: 38, column: 17, scope: !108)
!112 = !DILocation(line: 38, column: 10, scope: !108)
!113 = !DILocation(line: 38, column: 3, scope: !108)
!114 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !95, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!115 = !DILocalVariable(name: "n", arg: 1, scope: !114, file: !2, line: 41, type: !29)
!116 = !DILocation(line: 41, column: 21, scope: !114)
!117 = !DILocation(line: 42, column: 17, scope: !114)
!118 = !DILocation(line: 42, column: 10, scope: !114)
!119 = !DILocation(line: 42, column: 3, scope: !114)
!120 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !95, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!121 = !DILocalVariable(name: "n", arg: 1, scope: !120, file: !2, line: 45, type: !29)
!122 = !DILocation(line: 45, column: 21, scope: !120)
!123 = !DILocation(line: 46, column: 17, scope: !120)
!124 = !DILocation(line: 46, column: 10, scope: !120)
!125 = !DILocation(line: 46, column: 3, scope: !120)
!126 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !95, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!127 = !DILocalVariable(name: "n", arg: 1, scope: !126, file: !2, line: 49, type: !29)
!128 = !DILocation(line: 49, column: 21, scope: !126)
!129 = !DILocation(line: 50, column: 17, scope: !126)
!130 = !DILocation(line: 50, column: 10, scope: !126)
!131 = !DILocation(line: 50, column: 3, scope: !126)
!132 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !95, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!133 = !DILocalVariable(name: "n", arg: 1, scope: !132, file: !2, line: 53, type: !29)
!134 = !DILocation(line: 53, column: 21, scope: !132)
!135 = !DILocation(line: 54, column: 17, scope: !132)
!136 = !DILocation(line: 54, column: 10, scope: !132)
!137 = !DILocation(line: 54, column: 3, scope: !132)
!138 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !95, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!139 = !DILocalVariable(name: "n", arg: 1, scope: !138, file: !2, line: 57, type: !29)
!140 = !DILocation(line: 57, column: 18, scope: !138)
!141 = !DILocation(line: 58, column: 17, scope: !138)
!142 = !DILocation(line: 58, column: 10, scope: !138)
!143 = !DILocation(line: 58, column: 3, scope: !138)
!144 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !145, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!145 = !DISubroutineType(types: !146)
!146 = !{null, !29, !29}
!147 = !DILocalVariable(name: "id", arg: 1, scope: !144, file: !2, line: 67, type: !29)
!148 = !DILocation(line: 67, column: 20, scope: !144)
!149 = !DILocalVariable(name: "flags", arg: 2, scope: !144, file: !2, line: 67, type: !29)
!150 = !DILocation(line: 67, column: 28, scope: !144)
!151 = !DILocation(line: 68, column: 3, scope: !144)
!152 = !DILocation(line: 69, column: 1, scope: !144)
!153 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !154, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!154 = !DISubroutineType(types: !155)
!155 = !{null, !29, !156}
!156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!157 = !DILocalVariable(name: "thdid", arg: 1, scope: !153, file: !2, line: 79, type: !29)
!158 = !DILocation(line: 79, column: 21, scope: !153)
!159 = !DILocalVariable(name: "cxt", arg: 2, scope: !153, file: !2, line: 79, type: !156)
!160 = !DILocation(line: 79, column: 34, scope: !153)
!161 = !DILocation(line: 81, column: 1, scope: !153)
!162 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !154, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!163 = !DILocalVariable(name: "thdid", arg: 1, scope: !162, file: !2, line: 82, type: !29)
!164 = !DILocation(line: 82, column: 21, scope: !162)
!165 = !DILocalVariable(name: "cxt", arg: 2, scope: !162, file: !2, line: 82, type: !156)
!166 = !DILocation(line: 82, column: 33, scope: !162)
!167 = !DILocation(line: 84, column: 1, scope: !162)
!168 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !169, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!169 = !DISubroutineType(types: !170)
!170 = !{null, !29, !156, !156}
!171 = !DILocalVariable(name: "thdid", arg: 1, scope: !168, file: !2, line: 85, type: !29)
!172 = !DILocation(line: 85, column: 26, scope: !168)
!173 = !DILocalVariable(name: "cxt", arg: 2, scope: !168, file: !2, line: 85, type: !156)
!174 = !DILocation(line: 85, column: 38, scope: !168)
!175 = !DILocalVariable(name: "lev", arg: 3, scope: !168, file: !2, line: 85, type: !156)
!176 = !DILocation(line: 85, column: 49, scope: !168)
!177 = !DILocation(line: 87, column: 1, scope: !168)
!178 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !179, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!179 = !DISubroutineType(types: !180)
!180 = !{null, !156}
!181 = !DILocalVariable(name: "lockname", arg: 1, scope: !178, file: !2, line: 89, type: !156)
!182 = !DILocation(line: 89, column: 17, scope: !178)
!183 = !DILocation(line: 91, column: 1, scope: !178)
!184 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !179, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!185 = !DILocalVariable(name: "str", arg: 1, scope: !184, file: !2, line: 93, type: !156)
!186 = !DILocation(line: 93, column: 18, scope: !184)
!187 = !DILocation(line: 94, column: 18, scope: !184)
!188 = !DILocation(line: 94, column: 3, scope: !184)
!189 = !DILocation(line: 95, column: 3, scope: !184)
!190 = !DILocation(line: 96, column: 3, scope: !184)
!191 = !DILocation(line: 97, column: 1, scope: !184)
!192 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !193, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!193 = !DISubroutineType(types: !194)
!194 = !{!22, !195}
!195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!196 = !DILocalVariable(name: "p", arg: 1, scope: !192, file: !2, line: 100, type: !195)
!197 = !DILocation(line: 100, column: 24, scope: !192)
!198 = !DILocation(line: 101, column: 6, scope: !192)
!199 = !DILocation(line: 101, column: 8, scope: !192)
!200 = !DILocation(line: 102, column: 1, scope: !192)
!201 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !193, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!202 = !DILocalVariable(name: "p", arg: 1, scope: !201, file: !2, line: 104, type: !195)
!203 = !DILocation(line: 104, column: 20, scope: !201)
!204 = !DILocation(line: 105, column: 6, scope: !201)
!205 = !DILocation(line: 105, column: 8, scope: !201)
!206 = !DILocation(line: 106, column: 1, scope: !201)
!207 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !193, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!208 = !DILocalVariable(name: "p", arg: 1, scope: !207, file: !2, line: 110, type: !195)
!209 = !DILocation(line: 110, column: 22, scope: !207)
!210 = !DILocation(line: 111, column: 10, scope: !207)
!211 = !DILocation(line: 111, column: 5, scope: !207)
!212 = !DILocation(line: 112, column: 1, scope: !207)
!213 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !193, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!214 = !DILocalVariable(name: "p", arg: 1, scope: !213, file: !2, line: 115, type: !195)
!215 = !DILocation(line: 115, column: 24, scope: !213)
!216 = !DILocation(line: 116, column: 10, scope: !213)
!217 = !DILocation(line: 116, column: 5, scope: !213)
!218 = !DILocation(line: 117, column: 1, scope: !213)
!219 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !220, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!220 = !DISubroutineType(types: !221)
!221 = !{null}
!222 = !DILocation(line: 135, column: 20, scope: !219)
!223 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_05_bad", scope: !35, file: !35, line: 36, type: !220, scopeLine: 37, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!224 = !DILocalVariable(name: "data", scope: !223, file: !35, line: 38, type: !23)
!225 = !DILocation(line: 38, column: 21, scope: !223)
!226 = !DILocation(line: 40, column: 10, scope: !223)
!227 = !DILocation(line: 41, column: 8, scope: !228)
!228 = distinct !DILexicalBlock(scope: !223, file: !35, line: 41, column: 8)
!229 = !DILocation(line: 41, column: 8, scope: !223)
!230 = !DILocation(line: 43, column: 33, scope: !231)
!231 = distinct !DILexicalBlock(scope: !228, file: !35, line: 42, column: 5)
!232 = !DILocation(line: 43, column: 14, scope: !231)
!233 = !DILocation(line: 44, column: 13, scope: !234)
!234 = distinct !DILexicalBlock(scope: !231, file: !35, line: 44, column: 13)
!235 = !DILocation(line: 44, column: 18, scope: !234)
!236 = !DILocation(line: 44, column: 13, scope: !231)
!237 = !DILocation(line: 44, column: 28, scope: !238)
!238 = distinct !DILexicalBlock(scope: !234, file: !35, line: 44, column: 27)
!239 = !DILocalVariable(name: "i", scope: !240, file: !35, line: 46, type: !241)
!240 = distinct !DILexicalBlock(scope: !231, file: !35, line: 45, column: 9)
!241 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !242, line: 46, baseType: !243)
!242 = !DIFile(filename: "SVF-xiao/llvm-16.0.0.obj/lib/clang/16/include/stddef.h", directory: "/g/data/ey69/xiao/project", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!243 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!244 = !DILocation(line: 46, column: 20, scope: !240)
!245 = !DILocation(line: 47, column: 19, scope: !246)
!246 = distinct !DILexicalBlock(scope: !240, file: !35, line: 47, column: 13)
!247 = !DILocation(line: 47, column: 17, scope: !246)
!248 = !DILocation(line: 47, column: 24, scope: !249)
!249 = distinct !DILexicalBlock(scope: !246, file: !35, line: 47, column: 13)
!250 = !DILocation(line: 47, column: 26, scope: !249)
!251 = !DILocation(line: 47, column: 13, scope: !246)
!252 = !DILocation(line: 49, column: 17, scope: !253)
!253 = distinct !DILexicalBlock(scope: !249, file: !35, line: 48, column: 13)
!254 = !DILocation(line: 49, column: 22, scope: !253)
!255 = !DILocation(line: 49, column: 25, scope: !253)
!256 = !DILocation(line: 49, column: 32, scope: !253)
!257 = !DILocation(line: 50, column: 17, scope: !253)
!258 = !DILocation(line: 50, column: 22, scope: !253)
!259 = !DILocation(line: 50, column: 25, scope: !253)
!260 = !DILocation(line: 50, column: 32, scope: !253)
!261 = !DILocation(line: 51, column: 13, scope: !253)
!262 = !DILocation(line: 47, column: 34, scope: !249)
!263 = !DILocation(line: 47, column: 13, scope: !249)
!264 = distinct !{!264, !251, !265, !266}
!265 = !DILocation(line: 51, column: 13, scope: !246)
!266 = !{!"llvm.loop.mustprogress"}
!267 = !DILocation(line: 54, column: 14, scope: !231)
!268 = !DILocation(line: 54, column: 9, scope: !231)
!269 = !DILocation(line: 55, column: 5, scope: !231)
!270 = !DILocation(line: 56, column: 8, scope: !271)
!271 = distinct !DILexicalBlock(scope: !223, file: !35, line: 56, column: 8)
!272 = !DILocation(line: 56, column: 8, scope: !223)
!273 = !DILocation(line: 59, column: 17, scope: !274)
!274 = distinct !DILexicalBlock(scope: !271, file: !35, line: 57, column: 5)
!275 = !DILocation(line: 59, column: 9, scope: !274)
!276 = !DILocation(line: 61, column: 5, scope: !274)
!277 = !DILocation(line: 62, column: 1, scope: !223)
!278 = distinct !DISubprogram(name: "CWE416_Use_After_Free__malloc_free_struct_05_good", scope: !35, file: !35, line: 191, type: !220, scopeLine: 192, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!279 = !DILocation(line: 193, column: 5, scope: !278)
!280 = !DILocation(line: 194, column: 5, scope: !278)
!281 = !DILocation(line: 195, column: 5, scope: !278)
!282 = !DILocation(line: 196, column: 5, scope: !278)
!283 = !DILocation(line: 197, column: 1, scope: !278)
!284 = distinct !DISubprogram(name: "main", scope: !35, file: !35, line: 206, type: !285, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !52)
!285 = !DISubroutineType(types: !286)
!286 = !{!29, !29, !287}
!287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !156, size: 64)
!288 = !DILocalVariable(name: "argc", arg: 1, scope: !284, file: !35, line: 206, type: !29)
!289 = !DILocation(line: 206, column: 14, scope: !284)
!290 = !DILocalVariable(name: "argv", arg: 2, scope: !284, file: !35, line: 206, type: !287)
!291 = !DILocation(line: 206, column: 27, scope: !284)
!292 = !DILocation(line: 209, column: 22, scope: !284)
!293 = !DILocation(line: 209, column: 12, scope: !284)
!294 = !DILocation(line: 209, column: 5, scope: !284)
!295 = !DILocation(line: 210, column: 5, scope: !284)
!296 = !DILocation(line: 211, column: 5, scope: !284)
!297 = !DILocation(line: 212, column: 5, scope: !284)
!298 = distinct !DISubprogram(name: "goodB2G1", scope: !35, file: !35, line: 66, type: !220, scopeLine: 67, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !52)
!299 = !DILocalVariable(name: "data", scope: !298, file: !35, line: 68, type: !23)
!300 = !DILocation(line: 68, column: 21, scope: !298)
!301 = !DILocation(line: 70, column: 10, scope: !298)
!302 = !DILocation(line: 71, column: 8, scope: !303)
!303 = distinct !DILexicalBlock(scope: !298, file: !35, line: 71, column: 8)
!304 = !DILocation(line: 71, column: 8, scope: !298)
!305 = !DILocation(line: 73, column: 33, scope: !306)
!306 = distinct !DILexicalBlock(scope: !303, file: !35, line: 72, column: 5)
!307 = !DILocation(line: 73, column: 14, scope: !306)
!308 = !DILocation(line: 74, column: 13, scope: !309)
!309 = distinct !DILexicalBlock(scope: !306, file: !35, line: 74, column: 13)
!310 = !DILocation(line: 74, column: 18, scope: !309)
!311 = !DILocation(line: 74, column: 13, scope: !306)
!312 = !DILocation(line: 74, column: 28, scope: !313)
!313 = distinct !DILexicalBlock(scope: !309, file: !35, line: 74, column: 27)
!314 = !DILocalVariable(name: "i", scope: !315, file: !35, line: 76, type: !241)
!315 = distinct !DILexicalBlock(scope: !306, file: !35, line: 75, column: 9)
!316 = !DILocation(line: 76, column: 20, scope: !315)
!317 = !DILocation(line: 77, column: 19, scope: !318)
!318 = distinct !DILexicalBlock(scope: !315, file: !35, line: 77, column: 13)
!319 = !DILocation(line: 77, column: 17, scope: !318)
!320 = !DILocation(line: 77, column: 24, scope: !321)
!321 = distinct !DILexicalBlock(scope: !318, file: !35, line: 77, column: 13)
!322 = !DILocation(line: 77, column: 26, scope: !321)
!323 = !DILocation(line: 77, column: 13, scope: !318)
!324 = !DILocation(line: 79, column: 17, scope: !325)
!325 = distinct !DILexicalBlock(scope: !321, file: !35, line: 78, column: 13)
!326 = !DILocation(line: 79, column: 22, scope: !325)
!327 = !DILocation(line: 79, column: 25, scope: !325)
!328 = !DILocation(line: 79, column: 32, scope: !325)
!329 = !DILocation(line: 80, column: 17, scope: !325)
!330 = !DILocation(line: 80, column: 22, scope: !325)
!331 = !DILocation(line: 80, column: 25, scope: !325)
!332 = !DILocation(line: 80, column: 32, scope: !325)
!333 = !DILocation(line: 81, column: 13, scope: !325)
!334 = !DILocation(line: 77, column: 34, scope: !321)
!335 = !DILocation(line: 77, column: 13, scope: !321)
!336 = distinct !{!336, !323, !337, !266}
!337 = !DILocation(line: 81, column: 13, scope: !318)
!338 = !DILocation(line: 84, column: 14, scope: !306)
!339 = !DILocation(line: 84, column: 9, scope: !306)
!340 = !DILocation(line: 85, column: 5, scope: !306)
!341 = !DILocation(line: 86, column: 8, scope: !342)
!342 = distinct !DILexicalBlock(scope: !298, file: !35, line: 86, column: 8)
!343 = !DILocation(line: 86, column: 8, scope: !298)
!344 = !DILocation(line: 89, column: 9, scope: !345)
!345 = distinct !DILexicalBlock(scope: !342, file: !35, line: 87, column: 5)
!346 = !DILocation(line: 90, column: 5, scope: !345)
!347 = !DILocation(line: 98, column: 1, scope: !298)
!348 = distinct !DISubprogram(name: "goodB2G2", scope: !35, file: !35, line: 101, type: !220, scopeLine: 102, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !52)
!349 = !DILocalVariable(name: "data", scope: !348, file: !35, line: 103, type: !23)
!350 = !DILocation(line: 103, column: 21, scope: !348)
!351 = !DILocation(line: 105, column: 10, scope: !348)
!352 = !DILocation(line: 106, column: 8, scope: !353)
!353 = distinct !DILexicalBlock(scope: !348, file: !35, line: 106, column: 8)
!354 = !DILocation(line: 106, column: 8, scope: !348)
!355 = !DILocation(line: 108, column: 33, scope: !356)
!356 = distinct !DILexicalBlock(scope: !353, file: !35, line: 107, column: 5)
!357 = !DILocation(line: 108, column: 14, scope: !356)
!358 = !DILocation(line: 109, column: 13, scope: !359)
!359 = distinct !DILexicalBlock(scope: !356, file: !35, line: 109, column: 13)
!360 = !DILocation(line: 109, column: 18, scope: !359)
!361 = !DILocation(line: 109, column: 13, scope: !356)
!362 = !DILocation(line: 109, column: 28, scope: !363)
!363 = distinct !DILexicalBlock(scope: !359, file: !35, line: 109, column: 27)
!364 = !DILocalVariable(name: "i", scope: !365, file: !35, line: 111, type: !241)
!365 = distinct !DILexicalBlock(scope: !356, file: !35, line: 110, column: 9)
!366 = !DILocation(line: 111, column: 20, scope: !365)
!367 = !DILocation(line: 112, column: 19, scope: !368)
!368 = distinct !DILexicalBlock(scope: !365, file: !35, line: 112, column: 13)
!369 = !DILocation(line: 112, column: 17, scope: !368)
!370 = !DILocation(line: 112, column: 24, scope: !371)
!371 = distinct !DILexicalBlock(scope: !368, file: !35, line: 112, column: 13)
!372 = !DILocation(line: 112, column: 26, scope: !371)
!373 = !DILocation(line: 112, column: 13, scope: !368)
!374 = !DILocation(line: 114, column: 17, scope: !375)
!375 = distinct !DILexicalBlock(scope: !371, file: !35, line: 113, column: 13)
!376 = !DILocation(line: 114, column: 22, scope: !375)
!377 = !DILocation(line: 114, column: 25, scope: !375)
!378 = !DILocation(line: 114, column: 32, scope: !375)
!379 = !DILocation(line: 115, column: 17, scope: !375)
!380 = !DILocation(line: 115, column: 22, scope: !375)
!381 = !DILocation(line: 115, column: 25, scope: !375)
!382 = !DILocation(line: 115, column: 32, scope: !375)
!383 = !DILocation(line: 116, column: 13, scope: !375)
!384 = !DILocation(line: 112, column: 34, scope: !371)
!385 = !DILocation(line: 112, column: 13, scope: !371)
!386 = distinct !{!386, !373, !387, !266}
!387 = !DILocation(line: 116, column: 13, scope: !368)
!388 = !DILocation(line: 119, column: 14, scope: !356)
!389 = !DILocation(line: 119, column: 9, scope: !356)
!390 = !DILocation(line: 120, column: 5, scope: !356)
!391 = !DILocation(line: 121, column: 8, scope: !392)
!392 = distinct !DILexicalBlock(scope: !348, file: !35, line: 121, column: 8)
!393 = !DILocation(line: 121, column: 8, scope: !348)
!394 = !DILocation(line: 127, column: 5, scope: !395)
!395 = distinct !DILexicalBlock(scope: !392, file: !35, line: 122, column: 5)
!396 = !DILocation(line: 128, column: 1, scope: !348)
!397 = distinct !DISubprogram(name: "goodG2B1", scope: !35, file: !35, line: 131, type: !220, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !52)
!398 = !DILocalVariable(name: "data", scope: !397, file: !35, line: 133, type: !23)
!399 = !DILocation(line: 133, column: 21, scope: !397)
!400 = !DILocation(line: 135, column: 10, scope: !397)
!401 = !DILocation(line: 136, column: 8, scope: !402)
!402 = distinct !DILexicalBlock(scope: !397, file: !35, line: 136, column: 8)
!403 = !DILocation(line: 136, column: 8, scope: !397)
!404 = !DILocation(line: 139, column: 9, scope: !405)
!405 = distinct !DILexicalBlock(scope: !402, file: !35, line: 137, column: 5)
!406 = !DILocation(line: 140, column: 5, scope: !405)
!407 = !DILocation(line: 143, column: 33, scope: !408)
!408 = distinct !DILexicalBlock(scope: !402, file: !35, line: 142, column: 5)
!409 = !DILocation(line: 143, column: 14, scope: !408)
!410 = !DILocation(line: 144, column: 13, scope: !411)
!411 = distinct !DILexicalBlock(scope: !408, file: !35, line: 144, column: 13)
!412 = !DILocation(line: 144, column: 18, scope: !411)
!413 = !DILocation(line: 144, column: 13, scope: !408)
!414 = !DILocation(line: 144, column: 28, scope: !415)
!415 = distinct !DILexicalBlock(scope: !411, file: !35, line: 144, column: 27)
!416 = !DILocalVariable(name: "i", scope: !417, file: !35, line: 146, type: !241)
!417 = distinct !DILexicalBlock(scope: !408, file: !35, line: 145, column: 9)
!418 = !DILocation(line: 146, column: 20, scope: !417)
!419 = !DILocation(line: 147, column: 19, scope: !420)
!420 = distinct !DILexicalBlock(scope: !417, file: !35, line: 147, column: 13)
!421 = !DILocation(line: 147, column: 17, scope: !420)
!422 = !DILocation(line: 147, column: 24, scope: !423)
!423 = distinct !DILexicalBlock(scope: !420, file: !35, line: 147, column: 13)
!424 = !DILocation(line: 147, column: 26, scope: !423)
!425 = !DILocation(line: 147, column: 13, scope: !420)
!426 = !DILocation(line: 149, column: 17, scope: !427)
!427 = distinct !DILexicalBlock(scope: !423, file: !35, line: 148, column: 13)
!428 = !DILocation(line: 149, column: 22, scope: !427)
!429 = !DILocation(line: 149, column: 25, scope: !427)
!430 = !DILocation(line: 149, column: 32, scope: !427)
!431 = !DILocation(line: 150, column: 17, scope: !427)
!432 = !DILocation(line: 150, column: 22, scope: !427)
!433 = !DILocation(line: 150, column: 25, scope: !427)
!434 = !DILocation(line: 150, column: 32, scope: !427)
!435 = !DILocation(line: 151, column: 13, scope: !427)
!436 = !DILocation(line: 147, column: 34, scope: !423)
!437 = !DILocation(line: 147, column: 13, scope: !423)
!438 = distinct !{!438, !425, !439, !266}
!439 = !DILocation(line: 151, column: 13, scope: !420)
!440 = !DILocation(line: 155, column: 8, scope: !441)
!441 = distinct !DILexicalBlock(scope: !397, file: !35, line: 155, column: 8)
!442 = !DILocation(line: 155, column: 8, scope: !397)
!443 = !DILocation(line: 158, column: 21, scope: !444)
!444 = distinct !DILexicalBlock(scope: !441, file: !35, line: 156, column: 5)
!445 = !DILocation(line: 158, column: 9, scope: !444)
!446 = !DILocation(line: 160, column: 5, scope: !444)
!447 = !DILocation(line: 161, column: 1, scope: !397)
!448 = distinct !DISubprogram(name: "goodG2B2", scope: !35, file: !35, line: 164, type: !220, scopeLine: 165, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !52)
!449 = !DILocalVariable(name: "data", scope: !448, file: !35, line: 166, type: !23)
!450 = !DILocation(line: 166, column: 21, scope: !448)
!451 = !DILocation(line: 168, column: 10, scope: !448)
!452 = !DILocation(line: 169, column: 8, scope: !453)
!453 = distinct !DILexicalBlock(scope: !448, file: !35, line: 169, column: 8)
!454 = !DILocation(line: 169, column: 8, scope: !448)
!455 = !DILocation(line: 171, column: 33, scope: !456)
!456 = distinct !DILexicalBlock(scope: !453, file: !35, line: 170, column: 5)
!457 = !DILocation(line: 171, column: 14, scope: !456)
!458 = !DILocation(line: 172, column: 13, scope: !459)
!459 = distinct !DILexicalBlock(scope: !456, file: !35, line: 172, column: 13)
!460 = !DILocation(line: 172, column: 18, scope: !459)
!461 = !DILocation(line: 172, column: 13, scope: !456)
!462 = !DILocation(line: 172, column: 28, scope: !463)
!463 = distinct !DILexicalBlock(scope: !459, file: !35, line: 172, column: 27)
!464 = !DILocalVariable(name: "i", scope: !465, file: !35, line: 174, type: !241)
!465 = distinct !DILexicalBlock(scope: !456, file: !35, line: 173, column: 9)
!466 = !DILocation(line: 174, column: 20, scope: !465)
!467 = !DILocation(line: 175, column: 19, scope: !468)
!468 = distinct !DILexicalBlock(scope: !465, file: !35, line: 175, column: 13)
!469 = !DILocation(line: 175, column: 17, scope: !468)
!470 = !DILocation(line: 175, column: 24, scope: !471)
!471 = distinct !DILexicalBlock(scope: !468, file: !35, line: 175, column: 13)
!472 = !DILocation(line: 175, column: 26, scope: !471)
!473 = !DILocation(line: 175, column: 13, scope: !468)
!474 = !DILocation(line: 177, column: 17, scope: !475)
!475 = distinct !DILexicalBlock(scope: !471, file: !35, line: 176, column: 13)
!476 = !DILocation(line: 177, column: 22, scope: !475)
!477 = !DILocation(line: 177, column: 25, scope: !475)
!478 = !DILocation(line: 177, column: 32, scope: !475)
!479 = !DILocation(line: 178, column: 17, scope: !475)
!480 = !DILocation(line: 178, column: 22, scope: !475)
!481 = !DILocation(line: 178, column: 25, scope: !475)
!482 = !DILocation(line: 178, column: 32, scope: !475)
!483 = !DILocation(line: 179, column: 13, scope: !475)
!484 = !DILocation(line: 175, column: 34, scope: !471)
!485 = !DILocation(line: 175, column: 13, scope: !471)
!486 = distinct !{!486, !473, !487, !266}
!487 = !DILocation(line: 179, column: 13, scope: !468)
!488 = !DILocation(line: 182, column: 5, scope: !456)
!489 = !DILocation(line: 183, column: 8, scope: !490)
!490 = distinct !DILexicalBlock(scope: !448, file: !35, line: 183, column: 8)
!491 = !DILocation(line: 183, column: 8, scope: !448)
!492 = !DILocation(line: 186, column: 21, scope: !493)
!493 = distinct !DILexicalBlock(scope: !490, file: !35, line: 184, column: 5)
!494 = !DILocation(line: 186, column: 9, scope: !493)
!495 = !DILocation(line: 188, column: 5, scope: !493)
!496 = !DILocation(line: 189, column: 1, scope: !448)
