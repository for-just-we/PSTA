; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tmem_leak/CWE401_Memory_Leak__char_malloc_31.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__char_malloc_31.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [9 x i8] c"A String\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !33
@.str.7 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !38

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !58 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !62, metadata !DIExpression()), !dbg !63
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !66
  ret void, !dbg !67
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !68 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !69, metadata !DIExpression()), !dbg !70
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !73
  ret void, !dbg !74
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !75 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !76, metadata !DIExpression()), !dbg !77
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !82 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !83, metadata !DIExpression()), !dbg !84
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !87
  ret void, !dbg !88
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !89 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !90, metadata !DIExpression()), !dbg !91
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !94
  ret void, !dbg !95
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !96 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !97, metadata !DIExpression()), !dbg !98
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !101
  ret void, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !103 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !107, metadata !DIExpression()), !dbg !108
  %0 = load i32, ptr %n.addr, align 4, !dbg !109
  %conv = sext i32 %0 to i64, !dbg !109
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !110
  ret ptr %call, !dbg !111
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !112 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %0 = load i32, ptr %n.addr, align 4, !dbg !115
  %conv = sext i32 %0 to i64, !dbg !115
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !116
  ret ptr %call, !dbg !117
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !118 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !119, metadata !DIExpression()), !dbg !120
  %0 = load i32, ptr %n.addr, align 4, !dbg !121
  %conv = sext i32 %0 to i64, !dbg !121
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !122
  ret ptr %call, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !124 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !125, metadata !DIExpression()), !dbg !126
  %0 = load i32, ptr %n.addr, align 4, !dbg !127
  %conv = sext i32 %0 to i64, !dbg !127
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !128
  ret ptr %call, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !130 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !131, metadata !DIExpression()), !dbg !132
  %0 = load i32, ptr %n.addr, align 4, !dbg !133
  %conv = sext i32 %0 to i64, !dbg !133
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !134
  ret ptr %call, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !136 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !137, metadata !DIExpression()), !dbg !138
  %0 = load i32, ptr %n.addr, align 4, !dbg !139
  %conv = sext i32 %0 to i64, !dbg !139
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !140
  ret ptr %call, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !142 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !143, metadata !DIExpression()), !dbg !144
  %0 = load i32, ptr %n.addr, align 4, !dbg !145
  %conv = sext i32 %0 to i64, !dbg !145
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !146
  ret ptr %call, !dbg !147
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !148 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !149, metadata !DIExpression()), !dbg !150
  %0 = load i32, ptr %n.addr, align 4, !dbg !151
  %conv = sext i32 %0 to i64, !dbg !151
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !152
  ret ptr %call, !dbg !153
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !154 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !157, metadata !DIExpression()), !dbg !158
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !159, metadata !DIExpression()), !dbg !160
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !161
  ret void, !dbg !162
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !163 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !166, metadata !DIExpression()), !dbg !167
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !168, metadata !DIExpression()), !dbg !169
  ret void, !dbg !170
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !171 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !172, metadata !DIExpression()), !dbg !173
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !174, metadata !DIExpression()), !dbg !175
  ret void, !dbg !176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !177 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !180, metadata !DIExpression()), !dbg !181
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !182, metadata !DIExpression()), !dbg !183
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !184, metadata !DIExpression()), !dbg !185
  ret void, !dbg !186
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !187 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !190, metadata !DIExpression()), !dbg !191
  ret void, !dbg !192
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !193 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !194, metadata !DIExpression()), !dbg !195
  %0 = load ptr, ptr %str.addr, align 8, !dbg !196
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !197
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !198
  %call2 = call i32 @getchar(), !dbg !199
  ret void, !dbg !200
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !201 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !205, metadata !DIExpression()), !dbg !206
  %0 = load ptr, ptr %p.addr, align 8, !dbg !207
  store i32 0, ptr %0, align 4, !dbg !208
  %1 = load ptr, ptr %retval, align 8, !dbg !209
  ret ptr %1, !dbg !209
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !210 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !211, metadata !DIExpression()), !dbg !212
  %0 = load ptr, ptr %p.addr, align 8, !dbg !213
  store i32 0, ptr %0, align 4, !dbg !214
  %1 = load ptr, ptr %retval, align 8, !dbg !215
  ret ptr %1, !dbg !215
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !216 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !217, metadata !DIExpression()), !dbg !218
  %0 = load ptr, ptr %p.addr, align 8, !dbg !219
  call void @free(ptr noundef %0) #7, !dbg !220
  %1 = load ptr, ptr %retval, align 8, !dbg !221
  ret ptr %1, !dbg !221
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !222 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !223, metadata !DIExpression()), !dbg !224
  %0 = load ptr, ptr %p.addr, align 8, !dbg !225
  call void @free(ptr noundef %0) #7, !dbg !226
  %1 = load ptr, ptr %retval, align 8, !dbg !227
  ret ptr %1, !dbg !227
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !228 {
entry:
  ret void, !dbg !231
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__char_malloc_31_bad() #0 !dbg !232 {
entry:
  %data = alloca ptr, align 8
  %dataCopy = alloca ptr, align 8
  %data2 = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !233, metadata !DIExpression()), !dbg !234
  store ptr null, ptr %data, align 8, !dbg !235
  %call = call ptr @NFRMALLOC(i32 noundef 100), !dbg !236
  store ptr %call, ptr %data, align 8, !dbg !237
  %0 = load ptr, ptr %data, align 8, !dbg !238
  %cmp = icmp eq ptr %0, null, !dbg !240
  br i1 %cmp, label %if.then, label %if.end, !dbg !241

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !242
  unreachable, !dbg !242

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !244
  %call1 = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !245
  %2 = load ptr, ptr %data, align 8, !dbg !246
  call void @printLine(ptr noundef %2), !dbg !247
  call void @llvm.dbg.declare(metadata ptr %dataCopy, metadata !248, metadata !DIExpression()), !dbg !250
  %3 = load ptr, ptr %data, align 8, !dbg !251
  store ptr %3, ptr %dataCopy, align 8, !dbg !250
  call void @llvm.dbg.declare(metadata ptr %data2, metadata !252, metadata !DIExpression()), !dbg !253
  %4 = load ptr, ptr %dataCopy, align 8, !dbg !254
  store ptr %4, ptr %data2, align 8, !dbg !253
  ret void, !dbg !255
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__char_malloc_31_good() #0 !dbg !256 {
entry:
  call void @goodG2B(), !dbg !257
  call void @goodB2G(), !dbg !258
  ret void, !dbg !259
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !260 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !264, metadata !DIExpression()), !dbg !265
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !266, metadata !DIExpression()), !dbg !267
  %call = call i64 @time(ptr noundef null) #7, !dbg !268
  %conv = trunc i64 %call to i32, !dbg !269
  call void @srand(i32 noundef %conv) #7, !dbg !270
  call void @printLine(ptr noundef @.str.4), !dbg !271
  call void @CWE401_Memory_Leak__char_malloc_31_good(), !dbg !272
  call void @printLine(ptr noundef @.str.5), !dbg !273
  call void @printLine(ptr noundef @.str.6), !dbg !274
  call void @CWE401_Memory_Leak__char_malloc_31_bad(), !dbg !275
  call void @printLine(ptr noundef @.str.7), !dbg !276
  ret i32 0, !dbg !277
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !278 {
entry:
  %data = alloca ptr, align 8
  %dataCopy = alloca ptr, align 8
  %data1 = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !279, metadata !DIExpression()), !dbg !280
  store ptr null, ptr %data, align 8, !dbg !281
  %0 = alloca i8, i64 100, align 16, !dbg !282
  store ptr %0, ptr %data, align 8, !dbg !283
  %1 = load ptr, ptr %data, align 8, !dbg !284
  %call = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !285
  %2 = load ptr, ptr %data, align 8, !dbg !286
  call void @printLine(ptr noundef %2), !dbg !287
  call void @llvm.dbg.declare(metadata ptr %dataCopy, metadata !288, metadata !DIExpression()), !dbg !290
  %3 = load ptr, ptr %data, align 8, !dbg !291
  store ptr %3, ptr %dataCopy, align 8, !dbg !290
  call void @llvm.dbg.declare(metadata ptr %data1, metadata !292, metadata !DIExpression()), !dbg !293
  %4 = load ptr, ptr %dataCopy, align 8, !dbg !294
  store ptr %4, ptr %data1, align 8, !dbg !293
  ret void, !dbg !295
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !296 {
entry:
  %data = alloca ptr, align 8
  %dataCopy = alloca ptr, align 8
  %data2 = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !297, metadata !DIExpression()), !dbg !298
  store ptr null, ptr %data, align 8, !dbg !299
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !300
  store ptr %call, ptr %data, align 8, !dbg !301
  %0 = load ptr, ptr %data, align 8, !dbg !302
  %cmp = icmp eq ptr %0, null, !dbg !304
  br i1 %cmp, label %if.then, label %if.end, !dbg !305

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !306
  unreachable, !dbg !306

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !308
  %call1 = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !309
  %2 = load ptr, ptr %data, align 8, !dbg !310
  call void @printLine(ptr noundef %2), !dbg !311
  call void @llvm.dbg.declare(metadata ptr %dataCopy, metadata !312, metadata !DIExpression()), !dbg !314
  %3 = load ptr, ptr %data, align 8, !dbg !315
  store ptr %3, ptr %dataCopy, align 8, !dbg !314
  call void @llvm.dbg.declare(metadata ptr %data2, metadata !316, metadata !DIExpression()), !dbg !317
  %4 = load ptr, ptr %dataCopy, align 8, !dbg !318
  store ptr %4, ptr %data2, align 8, !dbg !317
  %5 = load ptr, ptr %data2, align 8, !dbg !319
  call void @free(ptr noundef %5) #7, !dbg !320
  ret void, !dbg !321
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!43}
!llvm.module.flags = !{!50, !51, !52, !53, !54, !55, !56}
!llvm.ident = !{!57}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 32, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tmem_leak/CWE401_Memory_Leak__char_malloc_31.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "af2f9cf119f26ee2b3a49d8199841204")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 72, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 9)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 102, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 18)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 104, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 16)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 107, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 17)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(scope: null, file: !19, line: 109, type: !40, isLocal: true, isDefinition: true)
!40 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !41)
!41 = !{!42}
!42 = !DISubrange(count: 15)
!43 = distinct !DICompileUnit(language: DW_LANG_C11, file: !44, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !45, globals: !49, splitDebugInlining: false, nameTableKind: None)
!44 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__char_malloc_31.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "af2f9cf119f26ee2b3a49d8199841204")
!45 = !{!46, !47, !48}
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!48 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!49 = !{!0, !7, !12, !17, !23, !28, !33, !38}
!50 = !{i32 7, !"Dwarf Version", i32 5}
!51 = !{i32 2, !"Debug Info Version", i32 3}
!52 = !{i32 1, !"wchar_size", i32 4}
!53 = !{i32 8, !"PIC Level", i32 2}
!54 = !{i32 7, !"PIE Level", i32 2}
!55 = !{i32 7, !"uwtable", i32 2}
!56 = !{i32 7, !"frame-pointer", i32 2}
!57 = !{!"clang version 16.0.0"}
!58 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !59, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!59 = !DISubroutineType(types: !60)
!60 = !{null, !46, !46}
!61 = !{}
!62 = !DILocalVariable(name: "p", arg: 1, scope: !58, file: !2, line: 4, type: !46)
!63 = !DILocation(line: 4, column: 22, scope: !58)
!64 = !DILocalVariable(name: "q", arg: 2, scope: !58, file: !2, line: 4, type: !46)
!65 = !DILocation(line: 4, column: 31, scope: !58)
!66 = !DILocation(line: 5, column: 3, scope: !58)
!67 = !DILocation(line: 6, column: 1, scope: !58)
!68 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !59, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!69 = !DILocalVariable(name: "p", arg: 1, scope: !68, file: !2, line: 8, type: !46)
!70 = !DILocation(line: 8, column: 25, scope: !68)
!71 = !DILocalVariable(name: "q", arg: 2, scope: !68, file: !2, line: 8, type: !46)
!72 = !DILocation(line: 8, column: 34, scope: !68)
!73 = !DILocation(line: 9, column: 3, scope: !68)
!74 = !DILocation(line: 10, column: 1, scope: !68)
!75 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !59, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!76 = !DILocalVariable(name: "p", arg: 1, scope: !75, file: !2, line: 12, type: !46)
!77 = !DILocation(line: 12, column: 21, scope: !75)
!78 = !DILocalVariable(name: "q", arg: 2, scope: !75, file: !2, line: 12, type: !46)
!79 = !DILocation(line: 12, column: 30, scope: !75)
!80 = !DILocation(line: 13, column: 3, scope: !75)
!81 = !DILocation(line: 14, column: 1, scope: !75)
!82 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !59, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!83 = !DILocalVariable(name: "p", arg: 1, scope: !82, file: !2, line: 16, type: !46)
!84 = !DILocation(line: 16, column: 20, scope: !82)
!85 = !DILocalVariable(name: "q", arg: 2, scope: !82, file: !2, line: 16, type: !46)
!86 = !DILocation(line: 16, column: 29, scope: !82)
!87 = !DILocation(line: 17, column: 3, scope: !82)
!88 = !DILocation(line: 18, column: 1, scope: !82)
!89 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !59, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!90 = !DILocalVariable(name: "p", arg: 1, scope: !89, file: !2, line: 20, type: !46)
!91 = !DILocation(line: 20, column: 34, scope: !89)
!92 = !DILocalVariable(name: "q", arg: 2, scope: !89, file: !2, line: 20, type: !46)
!93 = !DILocation(line: 20, column: 43, scope: !89)
!94 = !DILocation(line: 21, column: 3, scope: !89)
!95 = !DILocation(line: 22, column: 1, scope: !89)
!96 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !59, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!97 = !DILocalVariable(name: "p", arg: 1, scope: !96, file: !2, line: 24, type: !46)
!98 = !DILocation(line: 24, column: 33, scope: !96)
!99 = !DILocalVariable(name: "q", arg: 2, scope: !96, file: !2, line: 24, type: !46)
!100 = !DILocation(line: 24, column: 42, scope: !96)
!101 = !DILocation(line: 25, column: 3, scope: !96)
!102 = !DILocation(line: 26, column: 1, scope: !96)
!103 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !104, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!104 = !DISubroutineType(types: !105)
!105 = !{!46, !106}
!106 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!107 = !DILocalVariable(name: "n", arg: 1, scope: !103, file: !2, line: 29, type: !106)
!108 = !DILocation(line: 29, column: 22, scope: !103)
!109 = !DILocation(line: 30, column: 17, scope: !103)
!110 = !DILocation(line: 30, column: 10, scope: !103)
!111 = !DILocation(line: 30, column: 3, scope: !103)
!112 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !104, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!113 = !DILocalVariable(name: "n", arg: 1, scope: !112, file: !2, line: 33, type: !106)
!114 = !DILocation(line: 33, column: 28, scope: !112)
!115 = !DILocation(line: 34, column: 19, scope: !112)
!116 = !DILocation(line: 34, column: 12, scope: !112)
!117 = !DILocation(line: 34, column: 5, scope: !112)
!118 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !104, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!119 = !DILocalVariable(name: "n", arg: 1, scope: !118, file: !2, line: 37, type: !106)
!120 = !DILocation(line: 37, column: 21, scope: !118)
!121 = !DILocation(line: 38, column: 17, scope: !118)
!122 = !DILocation(line: 38, column: 10, scope: !118)
!123 = !DILocation(line: 38, column: 3, scope: !118)
!124 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !104, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!125 = !DILocalVariable(name: "n", arg: 1, scope: !124, file: !2, line: 41, type: !106)
!126 = !DILocation(line: 41, column: 21, scope: !124)
!127 = !DILocation(line: 42, column: 17, scope: !124)
!128 = !DILocation(line: 42, column: 10, scope: !124)
!129 = !DILocation(line: 42, column: 3, scope: !124)
!130 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !104, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!131 = !DILocalVariable(name: "n", arg: 1, scope: !130, file: !2, line: 45, type: !106)
!132 = !DILocation(line: 45, column: 21, scope: !130)
!133 = !DILocation(line: 46, column: 17, scope: !130)
!134 = !DILocation(line: 46, column: 10, scope: !130)
!135 = !DILocation(line: 46, column: 3, scope: !130)
!136 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !104, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!137 = !DILocalVariable(name: "n", arg: 1, scope: !136, file: !2, line: 49, type: !106)
!138 = !DILocation(line: 49, column: 21, scope: !136)
!139 = !DILocation(line: 50, column: 17, scope: !136)
!140 = !DILocation(line: 50, column: 10, scope: !136)
!141 = !DILocation(line: 50, column: 3, scope: !136)
!142 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !104, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!143 = !DILocalVariable(name: "n", arg: 1, scope: !142, file: !2, line: 53, type: !106)
!144 = !DILocation(line: 53, column: 21, scope: !142)
!145 = !DILocation(line: 54, column: 17, scope: !142)
!146 = !DILocation(line: 54, column: 10, scope: !142)
!147 = !DILocation(line: 54, column: 3, scope: !142)
!148 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !104, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!149 = !DILocalVariable(name: "n", arg: 1, scope: !148, file: !2, line: 57, type: !106)
!150 = !DILocation(line: 57, column: 18, scope: !148)
!151 = !DILocation(line: 58, column: 17, scope: !148)
!152 = !DILocation(line: 58, column: 10, scope: !148)
!153 = !DILocation(line: 58, column: 3, scope: !148)
!154 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !155, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!155 = !DISubroutineType(types: !156)
!156 = !{null, !106, !106}
!157 = !DILocalVariable(name: "id", arg: 1, scope: !154, file: !2, line: 67, type: !106)
!158 = !DILocation(line: 67, column: 20, scope: !154)
!159 = !DILocalVariable(name: "flags", arg: 2, scope: !154, file: !2, line: 67, type: !106)
!160 = !DILocation(line: 67, column: 28, scope: !154)
!161 = !DILocation(line: 68, column: 3, scope: !154)
!162 = !DILocation(line: 69, column: 1, scope: !154)
!163 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !164, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!164 = !DISubroutineType(types: !165)
!165 = !{null, !106, !47}
!166 = !DILocalVariable(name: "thdid", arg: 1, scope: !163, file: !2, line: 79, type: !106)
!167 = !DILocation(line: 79, column: 21, scope: !163)
!168 = !DILocalVariable(name: "cxt", arg: 2, scope: !163, file: !2, line: 79, type: !47)
!169 = !DILocation(line: 79, column: 34, scope: !163)
!170 = !DILocation(line: 81, column: 1, scope: !163)
!171 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !164, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!172 = !DILocalVariable(name: "thdid", arg: 1, scope: !171, file: !2, line: 82, type: !106)
!173 = !DILocation(line: 82, column: 21, scope: !171)
!174 = !DILocalVariable(name: "cxt", arg: 2, scope: !171, file: !2, line: 82, type: !47)
!175 = !DILocation(line: 82, column: 33, scope: !171)
!176 = !DILocation(line: 84, column: 1, scope: !171)
!177 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !178, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!178 = !DISubroutineType(types: !179)
!179 = !{null, !106, !47, !47}
!180 = !DILocalVariable(name: "thdid", arg: 1, scope: !177, file: !2, line: 85, type: !106)
!181 = !DILocation(line: 85, column: 26, scope: !177)
!182 = !DILocalVariable(name: "cxt", arg: 2, scope: !177, file: !2, line: 85, type: !47)
!183 = !DILocation(line: 85, column: 38, scope: !177)
!184 = !DILocalVariable(name: "lev", arg: 3, scope: !177, file: !2, line: 85, type: !47)
!185 = !DILocation(line: 85, column: 49, scope: !177)
!186 = !DILocation(line: 87, column: 1, scope: !177)
!187 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !188, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!188 = !DISubroutineType(types: !189)
!189 = !{null, !47}
!190 = !DILocalVariable(name: "lockname", arg: 1, scope: !187, file: !2, line: 89, type: !47)
!191 = !DILocation(line: 89, column: 17, scope: !187)
!192 = !DILocation(line: 91, column: 1, scope: !187)
!193 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !188, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!194 = !DILocalVariable(name: "str", arg: 1, scope: !193, file: !2, line: 93, type: !47)
!195 = !DILocation(line: 93, column: 18, scope: !193)
!196 = !DILocation(line: 94, column: 18, scope: !193)
!197 = !DILocation(line: 94, column: 3, scope: !193)
!198 = !DILocation(line: 95, column: 3, scope: !193)
!199 = !DILocation(line: 96, column: 3, scope: !193)
!200 = !DILocation(line: 97, column: 1, scope: !193)
!201 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !202, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!202 = !DISubroutineType(types: !203)
!203 = !{!46, !204}
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64)
!205 = !DILocalVariable(name: "p", arg: 1, scope: !201, file: !2, line: 100, type: !204)
!206 = !DILocation(line: 100, column: 24, scope: !201)
!207 = !DILocation(line: 101, column: 6, scope: !201)
!208 = !DILocation(line: 101, column: 8, scope: !201)
!209 = !DILocation(line: 102, column: 1, scope: !201)
!210 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !202, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!211 = !DILocalVariable(name: "p", arg: 1, scope: !210, file: !2, line: 104, type: !204)
!212 = !DILocation(line: 104, column: 20, scope: !210)
!213 = !DILocation(line: 105, column: 6, scope: !210)
!214 = !DILocation(line: 105, column: 8, scope: !210)
!215 = !DILocation(line: 106, column: 1, scope: !210)
!216 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !202, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!217 = !DILocalVariable(name: "p", arg: 1, scope: !216, file: !2, line: 110, type: !204)
!218 = !DILocation(line: 110, column: 22, scope: !216)
!219 = !DILocation(line: 111, column: 10, scope: !216)
!220 = !DILocation(line: 111, column: 5, scope: !216)
!221 = !DILocation(line: 112, column: 1, scope: !216)
!222 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !202, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!223 = !DILocalVariable(name: "p", arg: 1, scope: !222, file: !2, line: 115, type: !204)
!224 = !DILocation(line: 115, column: 24, scope: !222)
!225 = !DILocation(line: 116, column: 10, scope: !222)
!226 = !DILocation(line: 116, column: 5, scope: !222)
!227 = !DILocation(line: 117, column: 1, scope: !222)
!228 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !229, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!229 = !DISubroutineType(types: !230)
!230 = !{null}
!231 = !DILocation(line: 135, column: 20, scope: !228)
!232 = distinct !DISubprogram(name: "CWE401_Memory_Leak__char_malloc_31_bad", scope: !19, file: !19, line: 24, type: !229, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!233 = !DILocalVariable(name: "data", scope: !232, file: !19, line: 26, type: !47)
!234 = !DILocation(line: 26, column: 12, scope: !232)
!235 = !DILocation(line: 27, column: 10, scope: !232)
!236 = !DILocation(line: 29, column: 20, scope: !232)
!237 = !DILocation(line: 29, column: 10, scope: !232)
!238 = !DILocation(line: 30, column: 9, scope: !239)
!239 = distinct !DILexicalBlock(scope: !232, file: !19, line: 30, column: 9)
!240 = !DILocation(line: 30, column: 14, scope: !239)
!241 = !DILocation(line: 30, column: 9, scope: !232)
!242 = !DILocation(line: 30, column: 24, scope: !243)
!243 = distinct !DILexicalBlock(scope: !239, file: !19, line: 30, column: 23)
!244 = !DILocation(line: 32, column: 12, scope: !232)
!245 = !DILocation(line: 32, column: 5, scope: !232)
!246 = !DILocation(line: 33, column: 15, scope: !232)
!247 = !DILocation(line: 33, column: 5, scope: !232)
!248 = !DILocalVariable(name: "dataCopy", scope: !249, file: !19, line: 35, type: !47)
!249 = distinct !DILexicalBlock(scope: !232, file: !19, line: 34, column: 5)
!250 = !DILocation(line: 35, column: 16, scope: !249)
!251 = !DILocation(line: 35, column: 27, scope: !249)
!252 = !DILocalVariable(name: "data", scope: !249, file: !19, line: 36, type: !47)
!253 = !DILocation(line: 36, column: 16, scope: !249)
!254 = !DILocation(line: 36, column: 23, scope: !249)
!255 = !DILocation(line: 40, column: 1, scope: !232)
!256 = distinct !DISubprogram(name: "CWE401_Memory_Leak__char_malloc_31_good", scope: !19, file: !19, line: 83, type: !229, scopeLine: 84, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!257 = !DILocation(line: 85, column: 5, scope: !256)
!258 = !DILocation(line: 86, column: 5, scope: !256)
!259 = !DILocation(line: 87, column: 1, scope: !256)
!260 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 97, type: !261, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !61)
!261 = !DISubroutineType(types: !262)
!262 = !{!106, !106, !263}
!263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!264 = !DILocalVariable(name: "argc", arg: 1, scope: !260, file: !19, line: 97, type: !106)
!265 = !DILocation(line: 97, column: 14, scope: !260)
!266 = !DILocalVariable(name: "argv", arg: 2, scope: !260, file: !19, line: 97, type: !263)
!267 = !DILocation(line: 97, column: 27, scope: !260)
!268 = !DILocation(line: 100, column: 22, scope: !260)
!269 = !DILocation(line: 100, column: 12, scope: !260)
!270 = !DILocation(line: 100, column: 5, scope: !260)
!271 = !DILocation(line: 102, column: 5, scope: !260)
!272 = !DILocation(line: 103, column: 5, scope: !260)
!273 = !DILocation(line: 104, column: 5, scope: !260)
!274 = !DILocation(line: 107, column: 5, scope: !260)
!275 = !DILocation(line: 108, column: 5, scope: !260)
!276 = !DILocation(line: 109, column: 5, scope: !260)
!277 = !DILocation(line: 111, column: 5, scope: !260)
!278 = distinct !DISubprogram(name: "goodG2B", scope: !19, file: !19, line: 47, type: !229, scopeLine: 48, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !61)
!279 = !DILocalVariable(name: "data", scope: !278, file: !19, line: 49, type: !47)
!280 = !DILocation(line: 49, column: 12, scope: !278)
!281 = !DILocation(line: 50, column: 10, scope: !278)
!282 = !DILocation(line: 52, column: 20, scope: !278)
!283 = !DILocation(line: 52, column: 10, scope: !278)
!284 = !DILocation(line: 54, column: 12, scope: !278)
!285 = !DILocation(line: 54, column: 5, scope: !278)
!286 = !DILocation(line: 55, column: 15, scope: !278)
!287 = !DILocation(line: 55, column: 5, scope: !278)
!288 = !DILocalVariable(name: "dataCopy", scope: !289, file: !19, line: 57, type: !47)
!289 = distinct !DILexicalBlock(scope: !278, file: !19, line: 56, column: 5)
!290 = !DILocation(line: 57, column: 16, scope: !289)
!291 = !DILocation(line: 57, column: 27, scope: !289)
!292 = !DILocalVariable(name: "data", scope: !289, file: !19, line: 58, type: !47)
!293 = !DILocation(line: 58, column: 16, scope: !289)
!294 = !DILocation(line: 58, column: 23, scope: !289)
!295 = !DILocation(line: 62, column: 1, scope: !278)
!296 = distinct !DISubprogram(name: "goodB2G", scope: !19, file: !19, line: 65, type: !229, scopeLine: 66, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !61)
!297 = !DILocalVariable(name: "data", scope: !296, file: !19, line: 67, type: !47)
!298 = !DILocation(line: 67, column: 12, scope: !296)
!299 = !DILocation(line: 68, column: 10, scope: !296)
!300 = !DILocation(line: 70, column: 20, scope: !296)
!301 = !DILocation(line: 70, column: 10, scope: !296)
!302 = !DILocation(line: 71, column: 9, scope: !303)
!303 = distinct !DILexicalBlock(scope: !296, file: !19, line: 71, column: 9)
!304 = !DILocation(line: 71, column: 14, scope: !303)
!305 = !DILocation(line: 71, column: 9, scope: !296)
!306 = !DILocation(line: 71, column: 24, scope: !307)
!307 = distinct !DILexicalBlock(scope: !303, file: !19, line: 71, column: 23)
!308 = !DILocation(line: 73, column: 12, scope: !296)
!309 = !DILocation(line: 73, column: 5, scope: !296)
!310 = !DILocation(line: 74, column: 15, scope: !296)
!311 = !DILocation(line: 74, column: 5, scope: !296)
!312 = !DILocalVariable(name: "dataCopy", scope: !313, file: !19, line: 76, type: !47)
!313 = distinct !DILexicalBlock(scope: !296, file: !19, line: 75, column: 5)
!314 = !DILocation(line: 76, column: 16, scope: !313)
!315 = !DILocation(line: 76, column: 27, scope: !313)
!316 = !DILocalVariable(name: "data", scope: !313, file: !19, line: 77, type: !47)
!317 = !DILocation(line: 77, column: 16, scope: !313)
!318 = !DILocation(line: 77, column: 23, scope: !313)
!319 = !DILocation(line: 79, column: 14, scope: !313)
!320 = !DILocation(line: 79, column: 9, scope: !313)
!321 = !DILocation(line: 81, column: 1, scope: !296)
