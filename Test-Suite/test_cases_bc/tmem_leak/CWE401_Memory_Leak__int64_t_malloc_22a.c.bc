; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tmem_leak/CWE401_Memory_Leak__int64_t_malloc_22a.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__int64_t_malloc_22a.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@CWE401_Memory_Leak__int64_t_malloc_22_badGlobal = dso_local global i32 0, align 4, !dbg !17
@CWE401_Memory_Leak__int64_t_malloc_22_goodB2G1Global = dso_local global i32 0, align 4, !dbg !37
@.str.3 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !31
@CWE401_Memory_Leak__int64_t_malloc_22_goodB2G2Global = dso_local global i32 0, align 4, !dbg !40
@CWE401_Memory_Leak__int64_t_malloc_22_goodG2BGlobal = dso_local global i32 0, align 4, !dbg !42
@.str.4 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !44
@.str.5 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !49
@.str.6 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !54
@.str.7 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !59

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !72 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !76, metadata !DIExpression()), !dbg !77
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !82 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !83, metadata !DIExpression()), !dbg !84
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !87
  ret void, !dbg !88
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !89 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !90, metadata !DIExpression()), !dbg !91
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !94
  ret void, !dbg !95
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !96 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !97, metadata !DIExpression()), !dbg !98
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !101
  ret void, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !103 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !104, metadata !DIExpression()), !dbg !105
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !106, metadata !DIExpression()), !dbg !107
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !108
  ret void, !dbg !109
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !110 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !111, metadata !DIExpression()), !dbg !112
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !115
  ret void, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !117 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !120, metadata !DIExpression()), !dbg !121
  %0 = load i32, ptr %n.addr, align 4, !dbg !122
  %conv = sext i32 %0 to i64, !dbg !122
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !123
  ret ptr %call, !dbg !124
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !125 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !126, metadata !DIExpression()), !dbg !127
  %0 = load i32, ptr %n.addr, align 4, !dbg !128
  %conv = sext i32 %0 to i64, !dbg !128
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !129
  ret ptr %call, !dbg !130
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !131 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !132, metadata !DIExpression()), !dbg !133
  %0 = load i32, ptr %n.addr, align 4, !dbg !134
  %conv = sext i32 %0 to i64, !dbg !134
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !135
  ret ptr %call, !dbg !136
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !137 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !138, metadata !DIExpression()), !dbg !139
  %0 = load i32, ptr %n.addr, align 4, !dbg !140
  %conv = sext i32 %0 to i64, !dbg !140
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !141
  ret ptr %call, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !143 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !144, metadata !DIExpression()), !dbg !145
  %0 = load i32, ptr %n.addr, align 4, !dbg !146
  %conv = sext i32 %0 to i64, !dbg !146
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !147
  ret ptr %call, !dbg !148
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !149 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !150, metadata !DIExpression()), !dbg !151
  %0 = load i32, ptr %n.addr, align 4, !dbg !152
  %conv = sext i32 %0 to i64, !dbg !152
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !153
  ret ptr %call, !dbg !154
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !155 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !156, metadata !DIExpression()), !dbg !157
  %0 = load i32, ptr %n.addr, align 4, !dbg !158
  %conv = sext i32 %0 to i64, !dbg !158
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !159
  ret ptr %call, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !161 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !162, metadata !DIExpression()), !dbg !163
  %0 = load i32, ptr %n.addr, align 4, !dbg !164
  %conv = sext i32 %0 to i64, !dbg !164
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !165
  ret ptr %call, !dbg !166
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !167 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !170, metadata !DIExpression()), !dbg !171
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !172, metadata !DIExpression()), !dbg !173
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !174
  ret void, !dbg !175
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !176 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !180, metadata !DIExpression()), !dbg !181
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !182, metadata !DIExpression()), !dbg !183
  ret void, !dbg !184
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !185 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !186, metadata !DIExpression()), !dbg !187
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !188, metadata !DIExpression()), !dbg !189
  ret void, !dbg !190
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !191 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !194, metadata !DIExpression()), !dbg !195
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !196, metadata !DIExpression()), !dbg !197
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !198, metadata !DIExpression()), !dbg !199
  ret void, !dbg !200
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !201 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !204, metadata !DIExpression()), !dbg !205
  ret void, !dbg !206
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !207 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !208, metadata !DIExpression()), !dbg !209
  %0 = load ptr, ptr %str.addr, align 8, !dbg !210
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !211
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !212
  %call2 = call i32 @getchar(), !dbg !213
  ret void, !dbg !214
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !215 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !219, metadata !DIExpression()), !dbg !220
  %0 = load ptr, ptr %p.addr, align 8, !dbg !221
  store i32 0, ptr %0, align 4, !dbg !222
  %1 = load ptr, ptr %retval, align 8, !dbg !223
  ret ptr %1, !dbg !223
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !224 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !225, metadata !DIExpression()), !dbg !226
  %0 = load ptr, ptr %p.addr, align 8, !dbg !227
  store i32 0, ptr %0, align 4, !dbg !228
  %1 = load ptr, ptr %retval, align 8, !dbg !229
  ret ptr %1, !dbg !229
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !230 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !231, metadata !DIExpression()), !dbg !232
  %0 = load ptr, ptr %p.addr, align 8, !dbg !233
  call void @free(ptr noundef %0) #6, !dbg !234
  %1 = load ptr, ptr %retval, align 8, !dbg !235
  ret ptr %1, !dbg !235
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !236 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !237, metadata !DIExpression()), !dbg !238
  %0 = load ptr, ptr %p.addr, align 8, !dbg !239
  call void @free(ptr noundef %0) #6, !dbg !240
  %1 = load ptr, ptr %retval, align 8, !dbg !241
  ret ptr %1, !dbg !241
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !242 {
entry:
  ret void, !dbg !245
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__int64_t_malloc_22_badSink(ptr noundef %data) #0 !dbg !246 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !249, metadata !DIExpression()), !dbg !250
  %0 = load i32, ptr @CWE401_Memory_Leak__int64_t_malloc_22_badGlobal, align 4, !dbg !251
  %tobool = icmp ne i32 %0, 0, !dbg !251
  br i1 %tobool, label %if.then, label %if.end, !dbg !253

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !254

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !256
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__int64_t_malloc_22_goodB2G1Sink(ptr noundef %data) #0 !dbg !257 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !258, metadata !DIExpression()), !dbg !259
  %0 = load i32, ptr @CWE401_Memory_Leak__int64_t_malloc_22_goodB2G1Global, align 4, !dbg !260
  %tobool = icmp ne i32 %0, 0, !dbg !260
  br i1 %tobool, label %if.then, label %if.else, !dbg !262

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.3), !dbg !263
  br label %if.end, !dbg !265

if.else:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !266
  call void @free(ptr noundef %1) #6, !dbg !268
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !269
}

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__int64_t_malloc_22_goodB2G2Sink(ptr noundef %data) #0 !dbg !270 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !271, metadata !DIExpression()), !dbg !272
  %0 = load i32, ptr @CWE401_Memory_Leak__int64_t_malloc_22_goodB2G2Global, align 4, !dbg !273
  %tobool = icmp ne i32 %0, 0, !dbg !273
  br i1 %tobool, label %if.then, label %if.end, !dbg !275

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !276
  call void @free(ptr noundef %1) #6, !dbg !278
  br label %if.end, !dbg !279

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !280
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__int64_t_malloc_22_goodG2BSink(ptr noundef %data) #0 !dbg !281 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !282, metadata !DIExpression()), !dbg !283
  %0 = load i32, ptr @CWE401_Memory_Leak__int64_t_malloc_22_goodG2BGlobal, align 4, !dbg !284
  %tobool = icmp ne i32 %0, 0, !dbg !284
  br i1 %tobool, label %if.then, label %if.end, !dbg !286

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !287

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !289
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__int64_t_malloc_22_bad() #0 !dbg !290 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !291, metadata !DIExpression()), !dbg !292
  store ptr null, ptr %data, align 8, !dbg !293
  %call = call ptr @NFRMALLOC(i32 noundef 800), !dbg !294
  store ptr %call, ptr %data, align 8, !dbg !295
  %0 = load ptr, ptr %data, align 8, !dbg !296
  %arrayidx = getelementptr inbounds i64, ptr %0, i64 0, !dbg !296
  store i64 5, ptr %arrayidx, align 8, !dbg !297
  %1 = load ptr, ptr %data, align 8, !dbg !298
  %arrayidx1 = getelementptr inbounds i64, ptr %1, i64 0, !dbg !298
  %2 = load i64, ptr %arrayidx1, align 8, !dbg !298
  call void @printLongLongLine(i64 noundef %2), !dbg !299
  store i32 1, ptr @CWE401_Memory_Leak__int64_t_malloc_22_badGlobal, align 4, !dbg !300
  %3 = load ptr, ptr %data, align 8, !dbg !301
  call void @CWE401_Memory_Leak__int64_t_malloc_22_badSink(ptr noundef %3), !dbg !302
  ret void, !dbg !303
}

declare void @printLongLongLine(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__int64_t_malloc_22_good() #0 !dbg !304 {
entry:
  call void @goodB2G1(), !dbg !305
  call void @goodB2G2(), !dbg !306
  call void @goodG2B(), !dbg !307
  ret void, !dbg !308
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !309 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !313, metadata !DIExpression()), !dbg !314
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !315, metadata !DIExpression()), !dbg !316
  %call = call i64 @time(ptr noundef null) #6, !dbg !317
  %conv = trunc i64 %call to i32, !dbg !318
  call void @srand(i32 noundef %conv) #6, !dbg !319
  call void @printLine(ptr noundef @.str.4), !dbg !320
  call void @CWE401_Memory_Leak__int64_t_malloc_22_good(), !dbg !321
  call void @printLine(ptr noundef @.str.5), !dbg !322
  call void @printLine(ptr noundef @.str.6), !dbg !323
  call void @CWE401_Memory_Leak__int64_t_malloc_22_bad(), !dbg !324
  call void @printLine(ptr noundef @.str.7), !dbg !325
  ret i32 0, !dbg !326
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !327 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !328, metadata !DIExpression()), !dbg !329
  store ptr null, ptr %data, align 8, !dbg !330
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !331
  store ptr %call, ptr %data, align 8, !dbg !332
  %0 = load ptr, ptr %data, align 8, !dbg !333
  %arrayidx = getelementptr inbounds i64, ptr %0, i64 0, !dbg !333
  store i64 5, ptr %arrayidx, align 8, !dbg !334
  %1 = load ptr, ptr %data, align 8, !dbg !335
  %arrayidx1 = getelementptr inbounds i64, ptr %1, i64 0, !dbg !335
  %2 = load i64, ptr %arrayidx1, align 8, !dbg !335
  call void @printLongLongLine(i64 noundef %2), !dbg !336
  store i32 0, ptr @CWE401_Memory_Leak__int64_t_malloc_22_goodB2G1Global, align 4, !dbg !337
  %3 = load ptr, ptr %data, align 8, !dbg !338
  call void @CWE401_Memory_Leak__int64_t_malloc_22_goodB2G1Sink(ptr noundef %3), !dbg !339
  ret void, !dbg !340
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !341 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !342, metadata !DIExpression()), !dbg !343
  store ptr null, ptr %data, align 8, !dbg !344
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !345
  store ptr %call, ptr %data, align 8, !dbg !346
  %0 = load ptr, ptr %data, align 8, !dbg !347
  %arrayidx = getelementptr inbounds i64, ptr %0, i64 0, !dbg !347
  store i64 5, ptr %arrayidx, align 8, !dbg !348
  %1 = load ptr, ptr %data, align 8, !dbg !349
  %arrayidx1 = getelementptr inbounds i64, ptr %1, i64 0, !dbg !349
  %2 = load i64, ptr %arrayidx1, align 8, !dbg !349
  call void @printLongLongLine(i64 noundef %2), !dbg !350
  store i32 1, ptr @CWE401_Memory_Leak__int64_t_malloc_22_goodB2G2Global, align 4, !dbg !351
  %3 = load ptr, ptr %data, align 8, !dbg !352
  call void @CWE401_Memory_Leak__int64_t_malloc_22_goodB2G2Sink(ptr noundef %3), !dbg !353
  ret void, !dbg !354
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !355 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !356, metadata !DIExpression()), !dbg !357
  store ptr null, ptr %data, align 8, !dbg !358
  %0 = alloca i8, i64 800, align 16, !dbg !359
  store ptr %0, ptr %data, align 8, !dbg !360
  %1 = load ptr, ptr %data, align 8, !dbg !361
  %arrayidx = getelementptr inbounds i64, ptr %1, i64 0, !dbg !361
  store i64 5, ptr %arrayidx, align 8, !dbg !362
  %2 = load ptr, ptr %data, align 8, !dbg !363
  %arrayidx1 = getelementptr inbounds i64, ptr %2, i64 0, !dbg !363
  %3 = load i64, ptr %arrayidx1, align 8, !dbg !363
  call void @printLongLongLine(i64 noundef %3), !dbg !364
  store i32 1, ptr @CWE401_Memory_Leak__int64_t_malloc_22_goodG2BGlobal, align 4, !dbg !365
  %4 = load ptr, ptr %data, align 8, !dbg !366
  call void @CWE401_Memory_Leak__int64_t_malloc_22_goodG2BSink(ptr noundef %4), !dbg !367
  ret void, !dbg !368
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!64, !65, !66, !67, !68, !69, !70}
!llvm.ident = !{!71}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__int64_t_malloc_22_badGlobal", scope: !19, file: !33, line: 85, type: !39, isLocal: false, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !30, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__int64_t_malloc_22a.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "99de9c04d197a149f46a9c1210b2bcc4")
!21 = !{!22, !23, !29}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !25, line: 27, baseType: !26)
!25 = !DIFile(filename: "/usr/include/bits/stdint-intn.h", directory: "", checksumkind: CSK_MD5, checksum: "457547631e07cd24d9a14c8410e28e57")
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !27, line: 43, baseType: !28)
!27 = !DIFile(filename: "/usr/include/bits/types.h", directory: "", checksumkind: CSK_MD5, checksum: "eac2c46b20ddc2be81186b6ffebfd845")
!28 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!29 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!30 = !{!0, !7, !12, !31, !17, !37, !40, !42, !44, !49, !54, !59}
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(scope: null, file: !33, line: 51, type: !34, isLocal: true, isDefinition: true)
!33 = !DIFile(filename: "src/tmem_leak/CWE401_Memory_Leak__int64_t_malloc_22a.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "99de9c04d197a149f46a9c1210b2bcc4")
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !35)
!35 = !{!36}
!36 = !DISubrange(count: 21)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__int64_t_malloc_22_goodB2G1Global", scope: !19, file: !33, line: 107, type: !39, isLocal: false, isDefinition: true)
!39 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!40 = !DIGlobalVariableExpression(var: !41, expr: !DIExpression())
!41 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__int64_t_malloc_22_goodB2G2Global", scope: !19, file: !33, line: 108, type: !39, isLocal: false, isDefinition: true)
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__int64_t_malloc_22_goodG2BGlobal", scope: !19, file: !33, line: 109, type: !39, isLocal: false, isDefinition: true)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(scope: null, file: !33, line: 180, type: !46, isLocal: true, isDefinition: true)
!46 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !47)
!47 = !{!48}
!48 = !DISubrange(count: 18)
!49 = !DIGlobalVariableExpression(var: !50, expr: !DIExpression())
!50 = distinct !DIGlobalVariable(scope: null, file: !33, line: 182, type: !51, isLocal: true, isDefinition: true)
!51 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !52)
!52 = !{!53}
!53 = !DISubrange(count: 16)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(scope: null, file: !33, line: 185, type: !56, isLocal: true, isDefinition: true)
!56 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !57)
!57 = !{!58}
!58 = !DISubrange(count: 17)
!59 = !DIGlobalVariableExpression(var: !60, expr: !DIExpression())
!60 = distinct !DIGlobalVariable(scope: null, file: !33, line: 187, type: !61, isLocal: true, isDefinition: true)
!61 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !62)
!62 = !{!63}
!63 = !DISubrange(count: 15)
!64 = !{i32 7, !"Dwarf Version", i32 5}
!65 = !{i32 2, !"Debug Info Version", i32 3}
!66 = !{i32 1, !"wchar_size", i32 4}
!67 = !{i32 8, !"PIC Level", i32 2}
!68 = !{i32 7, !"PIE Level", i32 2}
!69 = !{i32 7, !"uwtable", i32 2}
!70 = !{i32 7, !"frame-pointer", i32 2}
!71 = !{!"clang version 16.0.0"}
!72 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !73, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!73 = !DISubroutineType(types: !74)
!74 = !{null, !22, !22}
!75 = !{}
!76 = !DILocalVariable(name: "p", arg: 1, scope: !72, file: !2, line: 4, type: !22)
!77 = !DILocation(line: 4, column: 22, scope: !72)
!78 = !DILocalVariable(name: "q", arg: 2, scope: !72, file: !2, line: 4, type: !22)
!79 = !DILocation(line: 4, column: 31, scope: !72)
!80 = !DILocation(line: 5, column: 3, scope: !72)
!81 = !DILocation(line: 6, column: 1, scope: !72)
!82 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !73, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!83 = !DILocalVariable(name: "p", arg: 1, scope: !82, file: !2, line: 8, type: !22)
!84 = !DILocation(line: 8, column: 25, scope: !82)
!85 = !DILocalVariable(name: "q", arg: 2, scope: !82, file: !2, line: 8, type: !22)
!86 = !DILocation(line: 8, column: 34, scope: !82)
!87 = !DILocation(line: 9, column: 3, scope: !82)
!88 = !DILocation(line: 10, column: 1, scope: !82)
!89 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !73, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!90 = !DILocalVariable(name: "p", arg: 1, scope: !89, file: !2, line: 12, type: !22)
!91 = !DILocation(line: 12, column: 21, scope: !89)
!92 = !DILocalVariable(name: "q", arg: 2, scope: !89, file: !2, line: 12, type: !22)
!93 = !DILocation(line: 12, column: 30, scope: !89)
!94 = !DILocation(line: 13, column: 3, scope: !89)
!95 = !DILocation(line: 14, column: 1, scope: !89)
!96 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !73, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!97 = !DILocalVariable(name: "p", arg: 1, scope: !96, file: !2, line: 16, type: !22)
!98 = !DILocation(line: 16, column: 20, scope: !96)
!99 = !DILocalVariable(name: "q", arg: 2, scope: !96, file: !2, line: 16, type: !22)
!100 = !DILocation(line: 16, column: 29, scope: !96)
!101 = !DILocation(line: 17, column: 3, scope: !96)
!102 = !DILocation(line: 18, column: 1, scope: !96)
!103 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !73, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!104 = !DILocalVariable(name: "p", arg: 1, scope: !103, file: !2, line: 20, type: !22)
!105 = !DILocation(line: 20, column: 34, scope: !103)
!106 = !DILocalVariable(name: "q", arg: 2, scope: !103, file: !2, line: 20, type: !22)
!107 = !DILocation(line: 20, column: 43, scope: !103)
!108 = !DILocation(line: 21, column: 3, scope: !103)
!109 = !DILocation(line: 22, column: 1, scope: !103)
!110 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !73, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!111 = !DILocalVariable(name: "p", arg: 1, scope: !110, file: !2, line: 24, type: !22)
!112 = !DILocation(line: 24, column: 33, scope: !110)
!113 = !DILocalVariable(name: "q", arg: 2, scope: !110, file: !2, line: 24, type: !22)
!114 = !DILocation(line: 24, column: 42, scope: !110)
!115 = !DILocation(line: 25, column: 3, scope: !110)
!116 = !DILocation(line: 26, column: 1, scope: !110)
!117 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !118, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!118 = !DISubroutineType(types: !119)
!119 = !{!22, !39}
!120 = !DILocalVariable(name: "n", arg: 1, scope: !117, file: !2, line: 29, type: !39)
!121 = !DILocation(line: 29, column: 22, scope: !117)
!122 = !DILocation(line: 30, column: 17, scope: !117)
!123 = !DILocation(line: 30, column: 10, scope: !117)
!124 = !DILocation(line: 30, column: 3, scope: !117)
!125 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !118, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!126 = !DILocalVariable(name: "n", arg: 1, scope: !125, file: !2, line: 33, type: !39)
!127 = !DILocation(line: 33, column: 28, scope: !125)
!128 = !DILocation(line: 34, column: 19, scope: !125)
!129 = !DILocation(line: 34, column: 12, scope: !125)
!130 = !DILocation(line: 34, column: 5, scope: !125)
!131 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !118, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!132 = !DILocalVariable(name: "n", arg: 1, scope: !131, file: !2, line: 37, type: !39)
!133 = !DILocation(line: 37, column: 21, scope: !131)
!134 = !DILocation(line: 38, column: 17, scope: !131)
!135 = !DILocation(line: 38, column: 10, scope: !131)
!136 = !DILocation(line: 38, column: 3, scope: !131)
!137 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !118, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!138 = !DILocalVariable(name: "n", arg: 1, scope: !137, file: !2, line: 41, type: !39)
!139 = !DILocation(line: 41, column: 21, scope: !137)
!140 = !DILocation(line: 42, column: 17, scope: !137)
!141 = !DILocation(line: 42, column: 10, scope: !137)
!142 = !DILocation(line: 42, column: 3, scope: !137)
!143 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !118, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!144 = !DILocalVariable(name: "n", arg: 1, scope: !143, file: !2, line: 45, type: !39)
!145 = !DILocation(line: 45, column: 21, scope: !143)
!146 = !DILocation(line: 46, column: 17, scope: !143)
!147 = !DILocation(line: 46, column: 10, scope: !143)
!148 = !DILocation(line: 46, column: 3, scope: !143)
!149 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !118, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!150 = !DILocalVariable(name: "n", arg: 1, scope: !149, file: !2, line: 49, type: !39)
!151 = !DILocation(line: 49, column: 21, scope: !149)
!152 = !DILocation(line: 50, column: 17, scope: !149)
!153 = !DILocation(line: 50, column: 10, scope: !149)
!154 = !DILocation(line: 50, column: 3, scope: !149)
!155 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !118, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!156 = !DILocalVariable(name: "n", arg: 1, scope: !155, file: !2, line: 53, type: !39)
!157 = !DILocation(line: 53, column: 21, scope: !155)
!158 = !DILocation(line: 54, column: 17, scope: !155)
!159 = !DILocation(line: 54, column: 10, scope: !155)
!160 = !DILocation(line: 54, column: 3, scope: !155)
!161 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !118, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!162 = !DILocalVariable(name: "n", arg: 1, scope: !161, file: !2, line: 57, type: !39)
!163 = !DILocation(line: 57, column: 18, scope: !161)
!164 = !DILocation(line: 58, column: 17, scope: !161)
!165 = !DILocation(line: 58, column: 10, scope: !161)
!166 = !DILocation(line: 58, column: 3, scope: !161)
!167 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !168, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!168 = !DISubroutineType(types: !169)
!169 = !{null, !39, !39}
!170 = !DILocalVariable(name: "id", arg: 1, scope: !167, file: !2, line: 67, type: !39)
!171 = !DILocation(line: 67, column: 20, scope: !167)
!172 = !DILocalVariable(name: "flags", arg: 2, scope: !167, file: !2, line: 67, type: !39)
!173 = !DILocation(line: 67, column: 28, scope: !167)
!174 = !DILocation(line: 68, column: 3, scope: !167)
!175 = !DILocation(line: 69, column: 1, scope: !167)
!176 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !177, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!177 = !DISubroutineType(types: !178)
!178 = !{null, !39, !179}
!179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!180 = !DILocalVariable(name: "thdid", arg: 1, scope: !176, file: !2, line: 79, type: !39)
!181 = !DILocation(line: 79, column: 21, scope: !176)
!182 = !DILocalVariable(name: "cxt", arg: 2, scope: !176, file: !2, line: 79, type: !179)
!183 = !DILocation(line: 79, column: 34, scope: !176)
!184 = !DILocation(line: 81, column: 1, scope: !176)
!185 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !177, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!186 = !DILocalVariable(name: "thdid", arg: 1, scope: !185, file: !2, line: 82, type: !39)
!187 = !DILocation(line: 82, column: 21, scope: !185)
!188 = !DILocalVariable(name: "cxt", arg: 2, scope: !185, file: !2, line: 82, type: !179)
!189 = !DILocation(line: 82, column: 33, scope: !185)
!190 = !DILocation(line: 84, column: 1, scope: !185)
!191 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !192, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!192 = !DISubroutineType(types: !193)
!193 = !{null, !39, !179, !179}
!194 = !DILocalVariable(name: "thdid", arg: 1, scope: !191, file: !2, line: 85, type: !39)
!195 = !DILocation(line: 85, column: 26, scope: !191)
!196 = !DILocalVariable(name: "cxt", arg: 2, scope: !191, file: !2, line: 85, type: !179)
!197 = !DILocation(line: 85, column: 38, scope: !191)
!198 = !DILocalVariable(name: "lev", arg: 3, scope: !191, file: !2, line: 85, type: !179)
!199 = !DILocation(line: 85, column: 49, scope: !191)
!200 = !DILocation(line: 87, column: 1, scope: !191)
!201 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !202, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!202 = !DISubroutineType(types: !203)
!203 = !{null, !179}
!204 = !DILocalVariable(name: "lockname", arg: 1, scope: !201, file: !2, line: 89, type: !179)
!205 = !DILocation(line: 89, column: 17, scope: !201)
!206 = !DILocation(line: 91, column: 1, scope: !201)
!207 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !202, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!208 = !DILocalVariable(name: "str", arg: 1, scope: !207, file: !2, line: 93, type: !179)
!209 = !DILocation(line: 93, column: 18, scope: !207)
!210 = !DILocation(line: 94, column: 18, scope: !207)
!211 = !DILocation(line: 94, column: 3, scope: !207)
!212 = !DILocation(line: 95, column: 3, scope: !207)
!213 = !DILocation(line: 96, column: 3, scope: !207)
!214 = !DILocation(line: 97, column: 1, scope: !207)
!215 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !216, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!216 = !DISubroutineType(types: !217)
!217 = !{!22, !218}
!218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !39, size: 64)
!219 = !DILocalVariable(name: "p", arg: 1, scope: !215, file: !2, line: 100, type: !218)
!220 = !DILocation(line: 100, column: 24, scope: !215)
!221 = !DILocation(line: 101, column: 6, scope: !215)
!222 = !DILocation(line: 101, column: 8, scope: !215)
!223 = !DILocation(line: 102, column: 1, scope: !215)
!224 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !216, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!225 = !DILocalVariable(name: "p", arg: 1, scope: !224, file: !2, line: 104, type: !218)
!226 = !DILocation(line: 104, column: 20, scope: !224)
!227 = !DILocation(line: 105, column: 6, scope: !224)
!228 = !DILocation(line: 105, column: 8, scope: !224)
!229 = !DILocation(line: 106, column: 1, scope: !224)
!230 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !216, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!231 = !DILocalVariable(name: "p", arg: 1, scope: !230, file: !2, line: 110, type: !218)
!232 = !DILocation(line: 110, column: 22, scope: !230)
!233 = !DILocation(line: 111, column: 10, scope: !230)
!234 = !DILocation(line: 111, column: 5, scope: !230)
!235 = !DILocation(line: 112, column: 1, scope: !230)
!236 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !216, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!237 = !DILocalVariable(name: "p", arg: 1, scope: !236, file: !2, line: 115, type: !218)
!238 = !DILocation(line: 115, column: 24, scope: !236)
!239 = !DILocation(line: 116, column: 10, scope: !236)
!240 = !DILocation(line: 116, column: 5, scope: !236)
!241 = !DILocation(line: 117, column: 1, scope: !236)
!242 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !243, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!243 = !DISubroutineType(types: !244)
!244 = !{null}
!245 = !DILocation(line: 135, column: 20, scope: !242)
!246 = distinct !DISubprogram(name: "CWE401_Memory_Leak__int64_t_malloc_22_badSink", scope: !33, file: !33, line: 27, type: !247, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!247 = !DISubroutineType(types: !248)
!248 = !{null, !23}
!249 = !DILocalVariable(name: "data", arg: 1, scope: !246, file: !33, line: 27, type: !23)
!250 = !DILocation(line: 27, column: 62, scope: !246)
!251 = !DILocation(line: 29, column: 8, scope: !252)
!252 = distinct !DILexicalBlock(scope: !246, file: !33, line: 29, column: 8)
!253 = !DILocation(line: 29, column: 8, scope: !246)
!254 = !DILocation(line: 33, column: 5, scope: !255)
!255 = distinct !DILexicalBlock(scope: !252, file: !33, line: 30, column: 5)
!256 = !DILocation(line: 34, column: 1, scope: !246)
!257 = distinct !DISubprogram(name: "CWE401_Memory_Leak__int64_t_malloc_22_goodB2G1Sink", scope: !33, file: !33, line: 46, type: !247, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!258 = !DILocalVariable(name: "data", arg: 1, scope: !257, file: !33, line: 46, type: !23)
!259 = !DILocation(line: 46, column: 67, scope: !257)
!260 = !DILocation(line: 48, column: 8, scope: !261)
!261 = distinct !DILexicalBlock(scope: !257, file: !33, line: 48, column: 8)
!262 = !DILocation(line: 48, column: 8, scope: !257)
!263 = !DILocation(line: 51, column: 9, scope: !264)
!264 = distinct !DILexicalBlock(scope: !261, file: !33, line: 49, column: 5)
!265 = !DILocation(line: 52, column: 5, scope: !264)
!266 = !DILocation(line: 56, column: 14, scope: !267)
!267 = distinct !DILexicalBlock(scope: !261, file: !33, line: 54, column: 5)
!268 = !DILocation(line: 56, column: 9, scope: !267)
!269 = !DILocation(line: 58, column: 1, scope: !257)
!270 = distinct !DISubprogram(name: "CWE401_Memory_Leak__int64_t_malloc_22_goodB2G2Sink", scope: !33, file: !33, line: 61, type: !247, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!271 = !DILocalVariable(name: "data", arg: 1, scope: !270, file: !33, line: 61, type: !23)
!272 = !DILocation(line: 61, column: 67, scope: !270)
!273 = !DILocation(line: 63, column: 8, scope: !274)
!274 = distinct !DILexicalBlock(scope: !270, file: !33, line: 63, column: 8)
!275 = !DILocation(line: 63, column: 8, scope: !270)
!276 = !DILocation(line: 66, column: 14, scope: !277)
!277 = distinct !DILexicalBlock(scope: !274, file: !33, line: 64, column: 5)
!278 = !DILocation(line: 66, column: 9, scope: !277)
!279 = !DILocation(line: 67, column: 5, scope: !277)
!280 = !DILocation(line: 68, column: 1, scope: !270)
!281 = distinct !DISubprogram(name: "CWE401_Memory_Leak__int64_t_malloc_22_goodG2BSink", scope: !33, file: !33, line: 71, type: !247, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!282 = !DILocalVariable(name: "data", arg: 1, scope: !281, file: !33, line: 71, type: !23)
!283 = !DILocation(line: 71, column: 66, scope: !281)
!284 = !DILocation(line: 73, column: 8, scope: !285)
!285 = distinct !DILexicalBlock(scope: !281, file: !33, line: 73, column: 8)
!286 = !DILocation(line: 73, column: 8, scope: !281)
!287 = !DILocation(line: 77, column: 5, scope: !288)
!288 = distinct !DILexicalBlock(scope: !285, file: !33, line: 74, column: 5)
!289 = !DILocation(line: 78, column: 1, scope: !281)
!290 = distinct !DISubprogram(name: "CWE401_Memory_Leak__int64_t_malloc_22_bad", scope: !33, file: !33, line: 89, type: !243, scopeLine: 90, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!291 = !DILocalVariable(name: "data", scope: !290, file: !33, line: 91, type: !23)
!292 = !DILocation(line: 91, column: 15, scope: !290)
!293 = !DILocation(line: 92, column: 10, scope: !290)
!294 = !DILocation(line: 94, column: 23, scope: !290)
!295 = !DILocation(line: 94, column: 10, scope: !290)
!296 = !DILocation(line: 96, column: 5, scope: !290)
!297 = !DILocation(line: 96, column: 13, scope: !290)
!298 = !DILocation(line: 97, column: 23, scope: !290)
!299 = !DILocation(line: 97, column: 5, scope: !290)
!300 = !DILocation(line: 98, column: 53, scope: !290)
!301 = !DILocation(line: 99, column: 51, scope: !290)
!302 = !DILocation(line: 99, column: 5, scope: !290)
!303 = !DILocation(line: 100, column: 1, scope: !290)
!304 = distinct !DISubprogram(name: "CWE401_Memory_Leak__int64_t_malloc_22_good", scope: !33, file: !33, line: 159, type: !243, scopeLine: 160, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!305 = !DILocation(line: 161, column: 5, scope: !304)
!306 = !DILocation(line: 162, column: 5, scope: !304)
!307 = !DILocation(line: 163, column: 5, scope: !304)
!308 = !DILocation(line: 164, column: 1, scope: !304)
!309 = distinct !DISubprogram(name: "main", scope: !33, file: !33, line: 175, type: !310, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !75)
!310 = !DISubroutineType(types: !311)
!311 = !{!39, !39, !312}
!312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !179, size: 64)
!313 = !DILocalVariable(name: "argc", arg: 1, scope: !309, file: !33, line: 175, type: !39)
!314 = !DILocation(line: 175, column: 14, scope: !309)
!315 = !DILocalVariable(name: "argv", arg: 2, scope: !309, file: !33, line: 175, type: !312)
!316 = !DILocation(line: 175, column: 27, scope: !309)
!317 = !DILocation(line: 178, column: 22, scope: !309)
!318 = !DILocation(line: 178, column: 12, scope: !309)
!319 = !DILocation(line: 178, column: 5, scope: !309)
!320 = !DILocation(line: 180, column: 5, scope: !309)
!321 = !DILocation(line: 181, column: 5, scope: !309)
!322 = !DILocation(line: 182, column: 5, scope: !309)
!323 = !DILocation(line: 185, column: 5, scope: !309)
!324 = !DILocation(line: 186, column: 5, scope: !309)
!325 = !DILocation(line: 187, column: 5, scope: !309)
!326 = !DILocation(line: 189, column: 5, scope: !309)
!327 = distinct !DISubprogram(name: "goodB2G1", scope: !33, file: !33, line: 114, type: !243, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !75)
!328 = !DILocalVariable(name: "data", scope: !327, file: !33, line: 116, type: !23)
!329 = !DILocation(line: 116, column: 15, scope: !327)
!330 = !DILocation(line: 117, column: 10, scope: !327)
!331 = !DILocation(line: 119, column: 23, scope: !327)
!332 = !DILocation(line: 119, column: 10, scope: !327)
!333 = !DILocation(line: 121, column: 5, scope: !327)
!334 = !DILocation(line: 121, column: 13, scope: !327)
!335 = !DILocation(line: 122, column: 23, scope: !327)
!336 = !DILocation(line: 122, column: 5, scope: !327)
!337 = !DILocation(line: 123, column: 58, scope: !327)
!338 = !DILocation(line: 124, column: 56, scope: !327)
!339 = !DILocation(line: 124, column: 5, scope: !327)
!340 = !DILocation(line: 125, column: 1, scope: !327)
!341 = distinct !DISubprogram(name: "goodB2G2", scope: !33, file: !33, line: 130, type: !243, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !75)
!342 = !DILocalVariable(name: "data", scope: !341, file: !33, line: 132, type: !23)
!343 = !DILocation(line: 132, column: 15, scope: !341)
!344 = !DILocation(line: 133, column: 10, scope: !341)
!345 = !DILocation(line: 135, column: 23, scope: !341)
!346 = !DILocation(line: 135, column: 10, scope: !341)
!347 = !DILocation(line: 137, column: 5, scope: !341)
!348 = !DILocation(line: 137, column: 13, scope: !341)
!349 = !DILocation(line: 138, column: 23, scope: !341)
!350 = !DILocation(line: 138, column: 5, scope: !341)
!351 = !DILocation(line: 139, column: 58, scope: !341)
!352 = !DILocation(line: 140, column: 56, scope: !341)
!353 = !DILocation(line: 140, column: 5, scope: !341)
!354 = !DILocation(line: 141, column: 1, scope: !341)
!355 = distinct !DISubprogram(name: "goodG2B", scope: !33, file: !33, line: 146, type: !243, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !75)
!356 = !DILocalVariable(name: "data", scope: !355, file: !33, line: 148, type: !23)
!357 = !DILocation(line: 148, column: 15, scope: !355)
!358 = !DILocation(line: 149, column: 10, scope: !355)
!359 = !DILocation(line: 151, column: 23, scope: !355)
!360 = !DILocation(line: 151, column: 10, scope: !355)
!361 = !DILocation(line: 153, column: 5, scope: !355)
!362 = !DILocation(line: 153, column: 13, scope: !355)
!363 = !DILocation(line: 154, column: 23, scope: !355)
!364 = !DILocation(line: 154, column: 5, scope: !355)
!365 = !DILocation(line: 155, column: 57, scope: !355)
!366 = !DILocation(line: 156, column: 55, scope: !355)
!367 = !DILocation(line: 156, column: 5, scope: !355)
!368 = !DILocation(line: 157, column: 1, scope: !355)
