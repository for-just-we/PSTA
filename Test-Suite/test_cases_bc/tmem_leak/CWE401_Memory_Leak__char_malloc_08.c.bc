; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tmem_leak/CWE401_Memory_Leak__char_malloc_08.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__char_malloc_08.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [9 x i8] c"A String\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !33
@.str.7 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !38
@.str.8 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !43

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !63 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !67, metadata !DIExpression()), !dbg !68
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !69, metadata !DIExpression()), !dbg !70
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !71
  ret void, !dbg !72
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !73 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !74, metadata !DIExpression()), !dbg !75
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !76, metadata !DIExpression()), !dbg !77
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !78
  ret void, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !80 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !81, metadata !DIExpression()), !dbg !82
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !85
  ret void, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !87 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !88, metadata !DIExpression()), !dbg !89
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !90, metadata !DIExpression()), !dbg !91
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !92
  ret void, !dbg !93
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !94 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !95, metadata !DIExpression()), !dbg !96
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !99
  ret void, !dbg !100
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !101 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !102, metadata !DIExpression()), !dbg !103
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !104, metadata !DIExpression()), !dbg !105
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !106
  ret void, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !108 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !112, metadata !DIExpression()), !dbg !113
  %0 = load i32, ptr %n.addr, align 4, !dbg !114
  %conv = sext i32 %0 to i64, !dbg !114
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !115
  ret ptr %call, !dbg !116
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !117 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !118, metadata !DIExpression()), !dbg !119
  %0 = load i32, ptr %n.addr, align 4, !dbg !120
  %conv = sext i32 %0 to i64, !dbg !120
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !121
  ret ptr %call, !dbg !122
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !123 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !124, metadata !DIExpression()), !dbg !125
  %0 = load i32, ptr %n.addr, align 4, !dbg !126
  %conv = sext i32 %0 to i64, !dbg !126
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !127
  ret ptr %call, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !129 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !130, metadata !DIExpression()), !dbg !131
  %0 = load i32, ptr %n.addr, align 4, !dbg !132
  %conv = sext i32 %0 to i64, !dbg !132
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !133
  ret ptr %call, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !135 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !136, metadata !DIExpression()), !dbg !137
  %0 = load i32, ptr %n.addr, align 4, !dbg !138
  %conv = sext i32 %0 to i64, !dbg !138
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !139
  ret ptr %call, !dbg !140
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !141 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !142, metadata !DIExpression()), !dbg !143
  %0 = load i32, ptr %n.addr, align 4, !dbg !144
  %conv = sext i32 %0 to i64, !dbg !144
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !145
  ret ptr %call, !dbg !146
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !147 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !148, metadata !DIExpression()), !dbg !149
  %0 = load i32, ptr %n.addr, align 4, !dbg !150
  %conv = sext i32 %0 to i64, !dbg !150
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !151
  ret ptr %call, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !153 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !154, metadata !DIExpression()), !dbg !155
  %0 = load i32, ptr %n.addr, align 4, !dbg !156
  %conv = sext i32 %0 to i64, !dbg !156
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !157
  ret ptr %call, !dbg !158
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !159 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !162, metadata !DIExpression()), !dbg !163
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !164, metadata !DIExpression()), !dbg !165
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !166
  ret void, !dbg !167
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !168 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !171, metadata !DIExpression()), !dbg !172
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !173, metadata !DIExpression()), !dbg !174
  ret void, !dbg !175
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !176 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !177, metadata !DIExpression()), !dbg !178
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !179, metadata !DIExpression()), !dbg !180
  ret void, !dbg !181
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !182 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !185, metadata !DIExpression()), !dbg !186
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !187, metadata !DIExpression()), !dbg !188
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !189, metadata !DIExpression()), !dbg !190
  ret void, !dbg !191
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !192 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !195, metadata !DIExpression()), !dbg !196
  ret void, !dbg !197
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !198 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !199, metadata !DIExpression()), !dbg !200
  %0 = load ptr, ptr %str.addr, align 8, !dbg !201
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !202
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !203
  %call2 = call i32 @getchar(), !dbg !204
  ret void, !dbg !205
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !206 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !210, metadata !DIExpression()), !dbg !211
  %0 = load ptr, ptr %p.addr, align 8, !dbg !212
  store i32 0, ptr %0, align 4, !dbg !213
  %1 = load ptr, ptr %retval, align 8, !dbg !214
  ret ptr %1, !dbg !214
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !215 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !216, metadata !DIExpression()), !dbg !217
  %0 = load ptr, ptr %p.addr, align 8, !dbg !218
  store i32 0, ptr %0, align 4, !dbg !219
  %1 = load ptr, ptr %retval, align 8, !dbg !220
  ret ptr %1, !dbg !220
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !221 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !222, metadata !DIExpression()), !dbg !223
  %0 = load ptr, ptr %p.addr, align 8, !dbg !224
  call void @free(ptr noundef %0) #7, !dbg !225
  %1 = load ptr, ptr %retval, align 8, !dbg !226
  ret ptr %1, !dbg !226
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !227 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !228, metadata !DIExpression()), !dbg !229
  %0 = load ptr, ptr %p.addr, align 8, !dbg !230
  call void @free(ptr noundef %0) #7, !dbg !231
  %1 = load ptr, ptr %retval, align 8, !dbg !232
  ret ptr %1, !dbg !232
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !233 {
entry:
  ret void, !dbg !236
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__char_malloc_08_bad() #0 !dbg !237 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !238, metadata !DIExpression()), !dbg !239
  store ptr null, ptr %data, align 8, !dbg !240
  %call = call i32 @staticReturnsTrue(), !dbg !241
  %tobool = icmp ne i32 %call, 0, !dbg !241
  br i1 %tobool, label %if.then, label %if.end4, !dbg !243

if.then:                                          ; preds = %entry
  %call1 = call ptr @NFRMALLOC(i32 noundef 100), !dbg !244
  store ptr %call1, ptr %data, align 8, !dbg !246
  %0 = load ptr, ptr %data, align 8, !dbg !247
  %cmp = icmp eq ptr %0, null, !dbg !249
  br i1 %cmp, label %if.then2, label %if.end, !dbg !250

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !251
  unreachable, !dbg !251

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !253
  %call3 = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !254
  %2 = load ptr, ptr %data, align 8, !dbg !255
  call void @printLine(ptr noundef %2), !dbg !256
  br label %if.end4, !dbg !257

if.end4:                                          ; preds = %if.end, %entry
  %call5 = call i32 @staticReturnsTrue(), !dbg !258
  %tobool6 = icmp ne i32 %call5, 0, !dbg !258
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !260

if.then7:                                         ; preds = %if.end4
  br label %if.end8, !dbg !261

if.end8:                                          ; preds = %if.then7, %if.end4
  ret void, !dbg !263
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__char_malloc_08_good() #0 !dbg !264 {
entry:
  call void @goodB2G1(), !dbg !265
  call void @goodB2G2(), !dbg !266
  call void @goodG2B1(), !dbg !267
  call void @goodG2B2(), !dbg !268
  ret void, !dbg !269
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !270 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !274, metadata !DIExpression()), !dbg !275
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !276, metadata !DIExpression()), !dbg !277
  %call = call i64 @time(ptr noundef null) #7, !dbg !278
  %conv = trunc i64 %call to i32, !dbg !279
  call void @srand(i32 noundef %conv) #7, !dbg !280
  call void @printLine(ptr noundef @.str.4), !dbg !281
  call void @CWE401_Memory_Leak__char_malloc_08_good(), !dbg !282
  call void @printLine(ptr noundef @.str.5), !dbg !283
  call void @printLine(ptr noundef @.str.6), !dbg !284
  call void @CWE401_Memory_Leak__char_malloc_08_bad(), !dbg !285
  call void @printLine(ptr noundef @.str.7), !dbg !286
  ret i32 0, !dbg !287
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @staticReturnsTrue() #0 !dbg !288 {
entry:
  ret i32 1, !dbg !291
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !292 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !293, metadata !DIExpression()), !dbg !294
  store ptr null, ptr %data, align 8, !dbg !295
  %call = call i32 @staticReturnsTrue(), !dbg !296
  %tobool = icmp ne i32 %call, 0, !dbg !296
  br i1 %tobool, label %if.then, label %if.end4, !dbg !298

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !299
  store ptr %call1, ptr %data, align 8, !dbg !301
  %0 = load ptr, ptr %data, align 8, !dbg !302
  %cmp = icmp eq ptr %0, null, !dbg !304
  br i1 %cmp, label %if.then2, label %if.end, !dbg !305

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !306
  unreachable, !dbg !306

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !308
  %call3 = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !309
  %2 = load ptr, ptr %data, align 8, !dbg !310
  call void @printLine(ptr noundef %2), !dbg !311
  br label %if.end4, !dbg !312

if.end4:                                          ; preds = %if.end, %entry
  %call5 = call i32 @staticReturnsFalse(), !dbg !313
  %tobool6 = icmp ne i32 %call5, 0, !dbg !313
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !315

if.then7:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.8), !dbg !316
  br label %if.end8, !dbg !318

if.else:                                          ; preds = %if.end4
  %3 = load ptr, ptr %data, align 8, !dbg !319
  call void @free(ptr noundef %3) #7, !dbg !321
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then7
  ret void, !dbg !322
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @staticReturnsFalse() #0 !dbg !323 {
entry:
  ret i32 0, !dbg !324
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !325 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !326, metadata !DIExpression()), !dbg !327
  store ptr null, ptr %data, align 8, !dbg !328
  %call = call i32 @staticReturnsTrue(), !dbg !329
  %tobool = icmp ne i32 %call, 0, !dbg !329
  br i1 %tobool, label %if.then, label %if.end4, !dbg !331

if.then:                                          ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !332
  store ptr %call1, ptr %data, align 8, !dbg !334
  %0 = load ptr, ptr %data, align 8, !dbg !335
  %cmp = icmp eq ptr %0, null, !dbg !337
  br i1 %cmp, label %if.then2, label %if.end, !dbg !338

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !339
  unreachable, !dbg !339

if.end:                                           ; preds = %if.then
  %1 = load ptr, ptr %data, align 8, !dbg !341
  %call3 = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !342
  %2 = load ptr, ptr %data, align 8, !dbg !343
  call void @printLine(ptr noundef %2), !dbg !344
  br label %if.end4, !dbg !345

if.end4:                                          ; preds = %if.end, %entry
  %call5 = call i32 @staticReturnsTrue(), !dbg !346
  %tobool6 = icmp ne i32 %call5, 0, !dbg !346
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !348

if.then7:                                         ; preds = %if.end4
  %3 = load ptr, ptr %data, align 8, !dbg !349
  call void @free(ptr noundef %3) #7, !dbg !351
  br label %if.end8, !dbg !352

if.end8:                                          ; preds = %if.then7, %if.end4
  ret void, !dbg !353
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !354 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !355, metadata !DIExpression()), !dbg !356
  store ptr null, ptr %data, align 8, !dbg !357
  %call = call i32 @staticReturnsFalse(), !dbg !358
  %tobool = icmp ne i32 %call, 0, !dbg !358
  br i1 %tobool, label %if.then, label %if.else, !dbg !360

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.8), !dbg !361
  br label %if.end, !dbg !363

if.else:                                          ; preds = %entry
  %0 = alloca i8, i64 100, align 16, !dbg !364
  store ptr %0, ptr %data, align 8, !dbg !366
  %1 = load ptr, ptr %data, align 8, !dbg !367
  %call1 = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !368
  %2 = load ptr, ptr %data, align 8, !dbg !369
  call void @printLine(ptr noundef %2), !dbg !370
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call2 = call i32 @staticReturnsTrue(), !dbg !371
  %tobool3 = icmp ne i32 %call2, 0, !dbg !371
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !373

if.then4:                                         ; preds = %if.end
  br label %if.end5, !dbg !374

if.end5:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !376
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !377 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !378, metadata !DIExpression()), !dbg !379
  store ptr null, ptr %data, align 8, !dbg !380
  %call = call i32 @staticReturnsTrue(), !dbg !381
  %tobool = icmp ne i32 %call, 0, !dbg !381
  br i1 %tobool, label %if.then, label %if.end, !dbg !383

if.then:                                          ; preds = %entry
  %0 = alloca i8, i64 100, align 16, !dbg !384
  store ptr %0, ptr %data, align 8, !dbg !386
  %1 = load ptr, ptr %data, align 8, !dbg !387
  %call1 = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !388
  %2 = load ptr, ptr %data, align 8, !dbg !389
  call void @printLine(ptr noundef %2), !dbg !390
  br label %if.end, !dbg !391

if.end:                                           ; preds = %if.then, %entry
  %call2 = call i32 @staticReturnsTrue(), !dbg !392
  %tobool3 = icmp ne i32 %call2, 0, !dbg !392
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !394

if.then4:                                         ; preds = %if.end
  br label %if.end5, !dbg !395

if.end5:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !397
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!48}
!llvm.module.flags = !{!55, !56, !57, !58, !59, !60, !61}
!llvm.ident = !{!62}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 47, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tmem_leak/CWE401_Memory_Leak__char_malloc_08.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "3065c13c89aa41ce0529df2e730e6784")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 72, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 9)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 175, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 18)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 177, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 16)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 180, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 17)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(scope: null, file: !19, line: 182, type: !40, isLocal: true, isDefinition: true)
!40 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !41)
!41 = !{!42}
!42 = !DISubrange(count: 15)
!43 = !DIGlobalVariableExpression(var: !44, expr: !DIExpression())
!44 = distinct !DIGlobalVariable(scope: null, file: !19, line: 78, type: !45, isLocal: true, isDefinition: true)
!45 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !46)
!46 = !{!47}
!47 = !DISubrange(count: 21)
!48 = distinct !DICompileUnit(language: DW_LANG_C11, file: !49, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !50, globals: !54, splitDebugInlining: false, nameTableKind: None)
!49 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__char_malloc_08.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "3065c13c89aa41ce0529df2e730e6784")
!50 = !{!51, !52, !53}
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!52 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!53 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!54 = !{!0, !7, !12, !17, !23, !28, !33, !38, !43}
!55 = !{i32 7, !"Dwarf Version", i32 5}
!56 = !{i32 2, !"Debug Info Version", i32 3}
!57 = !{i32 1, !"wchar_size", i32 4}
!58 = !{i32 8, !"PIC Level", i32 2}
!59 = !{i32 7, !"PIE Level", i32 2}
!60 = !{i32 7, !"uwtable", i32 2}
!61 = !{i32 7, !"frame-pointer", i32 2}
!62 = !{!"clang version 16.0.0"}
!63 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !64, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!64 = !DISubroutineType(types: !65)
!65 = !{null, !51, !51}
!66 = !{}
!67 = !DILocalVariable(name: "p", arg: 1, scope: !63, file: !2, line: 4, type: !51)
!68 = !DILocation(line: 4, column: 22, scope: !63)
!69 = !DILocalVariable(name: "q", arg: 2, scope: !63, file: !2, line: 4, type: !51)
!70 = !DILocation(line: 4, column: 31, scope: !63)
!71 = !DILocation(line: 5, column: 3, scope: !63)
!72 = !DILocation(line: 6, column: 1, scope: !63)
!73 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !64, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!74 = !DILocalVariable(name: "p", arg: 1, scope: !73, file: !2, line: 8, type: !51)
!75 = !DILocation(line: 8, column: 25, scope: !73)
!76 = !DILocalVariable(name: "q", arg: 2, scope: !73, file: !2, line: 8, type: !51)
!77 = !DILocation(line: 8, column: 34, scope: !73)
!78 = !DILocation(line: 9, column: 3, scope: !73)
!79 = !DILocation(line: 10, column: 1, scope: !73)
!80 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !64, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!81 = !DILocalVariable(name: "p", arg: 1, scope: !80, file: !2, line: 12, type: !51)
!82 = !DILocation(line: 12, column: 21, scope: !80)
!83 = !DILocalVariable(name: "q", arg: 2, scope: !80, file: !2, line: 12, type: !51)
!84 = !DILocation(line: 12, column: 30, scope: !80)
!85 = !DILocation(line: 13, column: 3, scope: !80)
!86 = !DILocation(line: 14, column: 1, scope: !80)
!87 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !64, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!88 = !DILocalVariable(name: "p", arg: 1, scope: !87, file: !2, line: 16, type: !51)
!89 = !DILocation(line: 16, column: 20, scope: !87)
!90 = !DILocalVariable(name: "q", arg: 2, scope: !87, file: !2, line: 16, type: !51)
!91 = !DILocation(line: 16, column: 29, scope: !87)
!92 = !DILocation(line: 17, column: 3, scope: !87)
!93 = !DILocation(line: 18, column: 1, scope: !87)
!94 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !64, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!95 = !DILocalVariable(name: "p", arg: 1, scope: !94, file: !2, line: 20, type: !51)
!96 = !DILocation(line: 20, column: 34, scope: !94)
!97 = !DILocalVariable(name: "q", arg: 2, scope: !94, file: !2, line: 20, type: !51)
!98 = !DILocation(line: 20, column: 43, scope: !94)
!99 = !DILocation(line: 21, column: 3, scope: !94)
!100 = !DILocation(line: 22, column: 1, scope: !94)
!101 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !64, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!102 = !DILocalVariable(name: "p", arg: 1, scope: !101, file: !2, line: 24, type: !51)
!103 = !DILocation(line: 24, column: 33, scope: !101)
!104 = !DILocalVariable(name: "q", arg: 2, scope: !101, file: !2, line: 24, type: !51)
!105 = !DILocation(line: 24, column: 42, scope: !101)
!106 = !DILocation(line: 25, column: 3, scope: !101)
!107 = !DILocation(line: 26, column: 1, scope: !101)
!108 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !109, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!109 = !DISubroutineType(types: !110)
!110 = !{!51, !111}
!111 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!112 = !DILocalVariable(name: "n", arg: 1, scope: !108, file: !2, line: 29, type: !111)
!113 = !DILocation(line: 29, column: 22, scope: !108)
!114 = !DILocation(line: 30, column: 17, scope: !108)
!115 = !DILocation(line: 30, column: 10, scope: !108)
!116 = !DILocation(line: 30, column: 3, scope: !108)
!117 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !109, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!118 = !DILocalVariable(name: "n", arg: 1, scope: !117, file: !2, line: 33, type: !111)
!119 = !DILocation(line: 33, column: 28, scope: !117)
!120 = !DILocation(line: 34, column: 19, scope: !117)
!121 = !DILocation(line: 34, column: 12, scope: !117)
!122 = !DILocation(line: 34, column: 5, scope: !117)
!123 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !109, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!124 = !DILocalVariable(name: "n", arg: 1, scope: !123, file: !2, line: 37, type: !111)
!125 = !DILocation(line: 37, column: 21, scope: !123)
!126 = !DILocation(line: 38, column: 17, scope: !123)
!127 = !DILocation(line: 38, column: 10, scope: !123)
!128 = !DILocation(line: 38, column: 3, scope: !123)
!129 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !109, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!130 = !DILocalVariable(name: "n", arg: 1, scope: !129, file: !2, line: 41, type: !111)
!131 = !DILocation(line: 41, column: 21, scope: !129)
!132 = !DILocation(line: 42, column: 17, scope: !129)
!133 = !DILocation(line: 42, column: 10, scope: !129)
!134 = !DILocation(line: 42, column: 3, scope: !129)
!135 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !109, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!136 = !DILocalVariable(name: "n", arg: 1, scope: !135, file: !2, line: 45, type: !111)
!137 = !DILocation(line: 45, column: 21, scope: !135)
!138 = !DILocation(line: 46, column: 17, scope: !135)
!139 = !DILocation(line: 46, column: 10, scope: !135)
!140 = !DILocation(line: 46, column: 3, scope: !135)
!141 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !109, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!142 = !DILocalVariable(name: "n", arg: 1, scope: !141, file: !2, line: 49, type: !111)
!143 = !DILocation(line: 49, column: 21, scope: !141)
!144 = !DILocation(line: 50, column: 17, scope: !141)
!145 = !DILocation(line: 50, column: 10, scope: !141)
!146 = !DILocation(line: 50, column: 3, scope: !141)
!147 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !109, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!148 = !DILocalVariable(name: "n", arg: 1, scope: !147, file: !2, line: 53, type: !111)
!149 = !DILocation(line: 53, column: 21, scope: !147)
!150 = !DILocation(line: 54, column: 17, scope: !147)
!151 = !DILocation(line: 54, column: 10, scope: !147)
!152 = !DILocation(line: 54, column: 3, scope: !147)
!153 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !109, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!154 = !DILocalVariable(name: "n", arg: 1, scope: !153, file: !2, line: 57, type: !111)
!155 = !DILocation(line: 57, column: 18, scope: !153)
!156 = !DILocation(line: 58, column: 17, scope: !153)
!157 = !DILocation(line: 58, column: 10, scope: !153)
!158 = !DILocation(line: 58, column: 3, scope: !153)
!159 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !160, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!160 = !DISubroutineType(types: !161)
!161 = !{null, !111, !111}
!162 = !DILocalVariable(name: "id", arg: 1, scope: !159, file: !2, line: 67, type: !111)
!163 = !DILocation(line: 67, column: 20, scope: !159)
!164 = !DILocalVariable(name: "flags", arg: 2, scope: !159, file: !2, line: 67, type: !111)
!165 = !DILocation(line: 67, column: 28, scope: !159)
!166 = !DILocation(line: 68, column: 3, scope: !159)
!167 = !DILocation(line: 69, column: 1, scope: !159)
!168 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !169, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!169 = !DISubroutineType(types: !170)
!170 = !{null, !111, !52}
!171 = !DILocalVariable(name: "thdid", arg: 1, scope: !168, file: !2, line: 79, type: !111)
!172 = !DILocation(line: 79, column: 21, scope: !168)
!173 = !DILocalVariable(name: "cxt", arg: 2, scope: !168, file: !2, line: 79, type: !52)
!174 = !DILocation(line: 79, column: 34, scope: !168)
!175 = !DILocation(line: 81, column: 1, scope: !168)
!176 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !169, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!177 = !DILocalVariable(name: "thdid", arg: 1, scope: !176, file: !2, line: 82, type: !111)
!178 = !DILocation(line: 82, column: 21, scope: !176)
!179 = !DILocalVariable(name: "cxt", arg: 2, scope: !176, file: !2, line: 82, type: !52)
!180 = !DILocation(line: 82, column: 33, scope: !176)
!181 = !DILocation(line: 84, column: 1, scope: !176)
!182 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !183, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !111, !52, !52}
!185 = !DILocalVariable(name: "thdid", arg: 1, scope: !182, file: !2, line: 85, type: !111)
!186 = !DILocation(line: 85, column: 26, scope: !182)
!187 = !DILocalVariable(name: "cxt", arg: 2, scope: !182, file: !2, line: 85, type: !52)
!188 = !DILocation(line: 85, column: 38, scope: !182)
!189 = !DILocalVariable(name: "lev", arg: 3, scope: !182, file: !2, line: 85, type: !52)
!190 = !DILocation(line: 85, column: 49, scope: !182)
!191 = !DILocation(line: 87, column: 1, scope: !182)
!192 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !193, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!193 = !DISubroutineType(types: !194)
!194 = !{null, !52}
!195 = !DILocalVariable(name: "lockname", arg: 1, scope: !192, file: !2, line: 89, type: !52)
!196 = !DILocation(line: 89, column: 17, scope: !192)
!197 = !DILocation(line: 91, column: 1, scope: !192)
!198 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !193, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!199 = !DILocalVariable(name: "str", arg: 1, scope: !198, file: !2, line: 93, type: !52)
!200 = !DILocation(line: 93, column: 18, scope: !198)
!201 = !DILocation(line: 94, column: 18, scope: !198)
!202 = !DILocation(line: 94, column: 3, scope: !198)
!203 = !DILocation(line: 95, column: 3, scope: !198)
!204 = !DILocation(line: 96, column: 3, scope: !198)
!205 = !DILocation(line: 97, column: 1, scope: !198)
!206 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !207, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!207 = !DISubroutineType(types: !208)
!208 = !{!51, !209}
!209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!210 = !DILocalVariable(name: "p", arg: 1, scope: !206, file: !2, line: 100, type: !209)
!211 = !DILocation(line: 100, column: 24, scope: !206)
!212 = !DILocation(line: 101, column: 6, scope: !206)
!213 = !DILocation(line: 101, column: 8, scope: !206)
!214 = !DILocation(line: 102, column: 1, scope: !206)
!215 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !207, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!216 = !DILocalVariable(name: "p", arg: 1, scope: !215, file: !2, line: 104, type: !209)
!217 = !DILocation(line: 104, column: 20, scope: !215)
!218 = !DILocation(line: 105, column: 6, scope: !215)
!219 = !DILocation(line: 105, column: 8, scope: !215)
!220 = !DILocation(line: 106, column: 1, scope: !215)
!221 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !207, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!222 = !DILocalVariable(name: "p", arg: 1, scope: !221, file: !2, line: 110, type: !209)
!223 = !DILocation(line: 110, column: 22, scope: !221)
!224 = !DILocation(line: 111, column: 10, scope: !221)
!225 = !DILocation(line: 111, column: 5, scope: !221)
!226 = !DILocation(line: 112, column: 1, scope: !221)
!227 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !207, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!228 = !DILocalVariable(name: "p", arg: 1, scope: !227, file: !2, line: 115, type: !209)
!229 = !DILocation(line: 115, column: 24, scope: !227)
!230 = !DILocation(line: 116, column: 10, scope: !227)
!231 = !DILocation(line: 116, column: 5, scope: !227)
!232 = !DILocation(line: 117, column: 1, scope: !227)
!233 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !234, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!234 = !DISubroutineType(types: !235)
!235 = !{null}
!236 = !DILocation(line: 135, column: 20, scope: !233)
!237 = distinct !DISubprogram(name: "CWE401_Memory_Leak__char_malloc_08_bad", scope: !19, file: !19, line: 37, type: !234, scopeLine: 38, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!238 = !DILocalVariable(name: "data", scope: !237, file: !19, line: 39, type: !52)
!239 = !DILocation(line: 39, column: 12, scope: !237)
!240 = !DILocation(line: 40, column: 10, scope: !237)
!241 = !DILocation(line: 41, column: 8, scope: !242)
!242 = distinct !DILexicalBlock(scope: !237, file: !19, line: 41, column: 8)
!243 = !DILocation(line: 41, column: 8, scope: !237)
!244 = !DILocation(line: 44, column: 24, scope: !245)
!245 = distinct !DILexicalBlock(scope: !242, file: !19, line: 42, column: 5)
!246 = !DILocation(line: 44, column: 14, scope: !245)
!247 = !DILocation(line: 45, column: 13, scope: !248)
!248 = distinct !DILexicalBlock(scope: !245, file: !19, line: 45, column: 13)
!249 = !DILocation(line: 45, column: 18, scope: !248)
!250 = !DILocation(line: 45, column: 13, scope: !245)
!251 = !DILocation(line: 45, column: 28, scope: !252)
!252 = distinct !DILexicalBlock(scope: !248, file: !19, line: 45, column: 27)
!253 = !DILocation(line: 47, column: 16, scope: !245)
!254 = !DILocation(line: 47, column: 9, scope: !245)
!255 = !DILocation(line: 48, column: 19, scope: !245)
!256 = !DILocation(line: 48, column: 9, scope: !245)
!257 = !DILocation(line: 49, column: 5, scope: !245)
!258 = !DILocation(line: 50, column: 8, scope: !259)
!259 = distinct !DILexicalBlock(scope: !237, file: !19, line: 50, column: 8)
!260 = !DILocation(line: 50, column: 8, scope: !237)
!261 = !DILocation(line: 54, column: 5, scope: !262)
!262 = distinct !DILexicalBlock(scope: !259, file: !19, line: 51, column: 5)
!263 = !DILocation(line: 55, column: 1, scope: !237)
!264 = distinct !DISubprogram(name: "CWE401_Memory_Leak__char_malloc_08_good", scope: !19, file: !19, line: 153, type: !234, scopeLine: 154, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!265 = !DILocation(line: 155, column: 5, scope: !264)
!266 = !DILocation(line: 156, column: 5, scope: !264)
!267 = !DILocation(line: 157, column: 5, scope: !264)
!268 = !DILocation(line: 158, column: 5, scope: !264)
!269 = !DILocation(line: 159, column: 1, scope: !264)
!270 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 170, type: !271, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !66)
!271 = !DISubroutineType(types: !272)
!272 = !{!111, !111, !273}
!273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!274 = !DILocalVariable(name: "argc", arg: 1, scope: !270, file: !19, line: 170, type: !111)
!275 = !DILocation(line: 170, column: 14, scope: !270)
!276 = !DILocalVariable(name: "argv", arg: 2, scope: !270, file: !19, line: 170, type: !273)
!277 = !DILocation(line: 170, column: 27, scope: !270)
!278 = !DILocation(line: 173, column: 22, scope: !270)
!279 = !DILocation(line: 173, column: 12, scope: !270)
!280 = !DILocation(line: 173, column: 5, scope: !270)
!281 = !DILocation(line: 175, column: 5, scope: !270)
!282 = !DILocation(line: 176, column: 5, scope: !270)
!283 = !DILocation(line: 177, column: 5, scope: !270)
!284 = !DILocation(line: 180, column: 5, scope: !270)
!285 = !DILocation(line: 181, column: 5, scope: !270)
!286 = !DILocation(line: 182, column: 5, scope: !270)
!287 = !DILocation(line: 184, column: 5, scope: !270)
!288 = distinct !DISubprogram(name: "staticReturnsTrue", scope: !19, file: !19, line: 25, type: !289, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !48, retainedNodes: !66)
!289 = !DISubroutineType(types: !290)
!290 = !{!111}
!291 = !DILocation(line: 27, column: 5, scope: !288)
!292 = distinct !DISubprogram(name: "goodB2G1", scope: !19, file: !19, line: 62, type: !234, scopeLine: 63, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !48, retainedNodes: !66)
!293 = !DILocalVariable(name: "data", scope: !292, file: !19, line: 64, type: !52)
!294 = !DILocation(line: 64, column: 12, scope: !292)
!295 = !DILocation(line: 65, column: 10, scope: !292)
!296 = !DILocation(line: 66, column: 8, scope: !297)
!297 = distinct !DILexicalBlock(scope: !292, file: !19, line: 66, column: 8)
!298 = !DILocation(line: 66, column: 8, scope: !292)
!299 = !DILocation(line: 69, column: 24, scope: !300)
!300 = distinct !DILexicalBlock(scope: !297, file: !19, line: 67, column: 5)
!301 = !DILocation(line: 69, column: 14, scope: !300)
!302 = !DILocation(line: 70, column: 13, scope: !303)
!303 = distinct !DILexicalBlock(scope: !300, file: !19, line: 70, column: 13)
!304 = !DILocation(line: 70, column: 18, scope: !303)
!305 = !DILocation(line: 70, column: 13, scope: !300)
!306 = !DILocation(line: 70, column: 28, scope: !307)
!307 = distinct !DILexicalBlock(scope: !303, file: !19, line: 70, column: 27)
!308 = !DILocation(line: 72, column: 16, scope: !300)
!309 = !DILocation(line: 72, column: 9, scope: !300)
!310 = !DILocation(line: 73, column: 19, scope: !300)
!311 = !DILocation(line: 73, column: 9, scope: !300)
!312 = !DILocation(line: 74, column: 5, scope: !300)
!313 = !DILocation(line: 75, column: 8, scope: !314)
!314 = distinct !DILexicalBlock(scope: !292, file: !19, line: 75, column: 8)
!315 = !DILocation(line: 75, column: 8, scope: !292)
!316 = !DILocation(line: 78, column: 9, scope: !317)
!317 = distinct !DILexicalBlock(scope: !314, file: !19, line: 76, column: 5)
!318 = !DILocation(line: 79, column: 5, scope: !317)
!319 = !DILocation(line: 83, column: 14, scope: !320)
!320 = distinct !DILexicalBlock(scope: !314, file: !19, line: 81, column: 5)
!321 = !DILocation(line: 83, column: 9, scope: !320)
!322 = !DILocation(line: 85, column: 1, scope: !292)
!323 = distinct !DISubprogram(name: "staticReturnsFalse", scope: !19, file: !19, line: 30, type: !289, scopeLine: 31, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !48, retainedNodes: !66)
!324 = !DILocation(line: 32, column: 5, scope: !323)
!325 = distinct !DISubprogram(name: "goodB2G2", scope: !19, file: !19, line: 88, type: !234, scopeLine: 89, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !48, retainedNodes: !66)
!326 = !DILocalVariable(name: "data", scope: !325, file: !19, line: 90, type: !52)
!327 = !DILocation(line: 90, column: 12, scope: !325)
!328 = !DILocation(line: 91, column: 10, scope: !325)
!329 = !DILocation(line: 92, column: 8, scope: !330)
!330 = distinct !DILexicalBlock(scope: !325, file: !19, line: 92, column: 8)
!331 = !DILocation(line: 92, column: 8, scope: !325)
!332 = !DILocation(line: 95, column: 24, scope: !333)
!333 = distinct !DILexicalBlock(scope: !330, file: !19, line: 93, column: 5)
!334 = !DILocation(line: 95, column: 14, scope: !333)
!335 = !DILocation(line: 96, column: 13, scope: !336)
!336 = distinct !DILexicalBlock(scope: !333, file: !19, line: 96, column: 13)
!337 = !DILocation(line: 96, column: 18, scope: !336)
!338 = !DILocation(line: 96, column: 13, scope: !333)
!339 = !DILocation(line: 96, column: 28, scope: !340)
!340 = distinct !DILexicalBlock(scope: !336, file: !19, line: 96, column: 27)
!341 = !DILocation(line: 98, column: 16, scope: !333)
!342 = !DILocation(line: 98, column: 9, scope: !333)
!343 = !DILocation(line: 99, column: 19, scope: !333)
!344 = !DILocation(line: 99, column: 9, scope: !333)
!345 = !DILocation(line: 100, column: 5, scope: !333)
!346 = !DILocation(line: 101, column: 8, scope: !347)
!347 = distinct !DILexicalBlock(scope: !325, file: !19, line: 101, column: 8)
!348 = !DILocation(line: 101, column: 8, scope: !325)
!349 = !DILocation(line: 104, column: 14, scope: !350)
!350 = distinct !DILexicalBlock(scope: !347, file: !19, line: 102, column: 5)
!351 = !DILocation(line: 104, column: 9, scope: !350)
!352 = !DILocation(line: 105, column: 5, scope: !350)
!353 = !DILocation(line: 106, column: 1, scope: !325)
!354 = distinct !DISubprogram(name: "goodG2B1", scope: !19, file: !19, line: 109, type: !234, scopeLine: 110, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !48, retainedNodes: !66)
!355 = !DILocalVariable(name: "data", scope: !354, file: !19, line: 111, type: !52)
!356 = !DILocation(line: 111, column: 12, scope: !354)
!357 = !DILocation(line: 112, column: 10, scope: !354)
!358 = !DILocation(line: 113, column: 8, scope: !359)
!359 = distinct !DILexicalBlock(scope: !354, file: !19, line: 113, column: 8)
!360 = !DILocation(line: 113, column: 8, scope: !354)
!361 = !DILocation(line: 116, column: 9, scope: !362)
!362 = distinct !DILexicalBlock(scope: !359, file: !19, line: 114, column: 5)
!363 = !DILocation(line: 117, column: 5, scope: !362)
!364 = !DILocation(line: 121, column: 24, scope: !365)
!365 = distinct !DILexicalBlock(scope: !359, file: !19, line: 119, column: 5)
!366 = !DILocation(line: 121, column: 14, scope: !365)
!367 = !DILocation(line: 123, column: 16, scope: !365)
!368 = !DILocation(line: 123, column: 9, scope: !365)
!369 = !DILocation(line: 124, column: 19, scope: !365)
!370 = !DILocation(line: 124, column: 9, scope: !365)
!371 = !DILocation(line: 126, column: 8, scope: !372)
!372 = distinct !DILexicalBlock(scope: !354, file: !19, line: 126, column: 8)
!373 = !DILocation(line: 126, column: 8, scope: !354)
!374 = !DILocation(line: 130, column: 5, scope: !375)
!375 = distinct !DILexicalBlock(scope: !372, file: !19, line: 127, column: 5)
!376 = !DILocation(line: 131, column: 1, scope: !354)
!377 = distinct !DISubprogram(name: "goodG2B2", scope: !19, file: !19, line: 134, type: !234, scopeLine: 135, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !48, retainedNodes: !66)
!378 = !DILocalVariable(name: "data", scope: !377, file: !19, line: 136, type: !52)
!379 = !DILocation(line: 136, column: 12, scope: !377)
!380 = !DILocation(line: 137, column: 10, scope: !377)
!381 = !DILocation(line: 138, column: 8, scope: !382)
!382 = distinct !DILexicalBlock(scope: !377, file: !19, line: 138, column: 8)
!383 = !DILocation(line: 138, column: 8, scope: !377)
!384 = !DILocation(line: 141, column: 24, scope: !385)
!385 = distinct !DILexicalBlock(scope: !382, file: !19, line: 139, column: 5)
!386 = !DILocation(line: 141, column: 14, scope: !385)
!387 = !DILocation(line: 143, column: 16, scope: !385)
!388 = !DILocation(line: 143, column: 9, scope: !385)
!389 = !DILocation(line: 144, column: 19, scope: !385)
!390 = !DILocation(line: 144, column: 9, scope: !385)
!391 = !DILocation(line: 145, column: 5, scope: !385)
!392 = !DILocation(line: 146, column: 8, scope: !393)
!393 = distinct !DILexicalBlock(scope: !377, file: !19, line: 146, column: 8)
!394 = !DILocation(line: 146, column: 8, scope: !377)
!395 = !DILocation(line: 150, column: 5, scope: !396)
!396 = distinct !DILexicalBlock(scope: !393, file: !19, line: 147, column: 5)
!397 = !DILocation(line: 151, column: 1, scope: !377)
