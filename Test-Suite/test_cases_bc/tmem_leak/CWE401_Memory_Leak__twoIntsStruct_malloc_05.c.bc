; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tmem_leak/CWE401_Memory_Leak__twoIntsStruct_malloc_05.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__twoIntsStruct_malloc_05.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@staticTrue = internal global i32 1, align 4, !dbg !17
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !33
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !39
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !44
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !49
@staticFalse = internal global i32 0, align 4, !dbg !59
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !54

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !69 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !73, metadata !DIExpression()), !dbg !74
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !75, metadata !DIExpression()), !dbg !76
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !77
  ret void, !dbg !78
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !79 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !80, metadata !DIExpression()), !dbg !81
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !84
  ret void, !dbg !85
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !86 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !87, metadata !DIExpression()), !dbg !88
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !89, metadata !DIExpression()), !dbg !90
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !91
  ret void, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !93 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !94, metadata !DIExpression()), !dbg !95
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !96, metadata !DIExpression()), !dbg !97
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !98
  ret void, !dbg !99
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !100 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !101, metadata !DIExpression()), !dbg !102
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !105
  ret void, !dbg !106
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !107 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !108, metadata !DIExpression()), !dbg !109
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !110, metadata !DIExpression()), !dbg !111
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !112
  ret void, !dbg !113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !114 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !117, metadata !DIExpression()), !dbg !118
  %0 = load i32, ptr %n.addr, align 4, !dbg !119
  %conv = sext i32 %0 to i64, !dbg !119
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !120
  ret ptr %call, !dbg !121
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !122 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !123, metadata !DIExpression()), !dbg !124
  %0 = load i32, ptr %n.addr, align 4, !dbg !125
  %conv = sext i32 %0 to i64, !dbg !125
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !126
  ret ptr %call, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !128 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !129, metadata !DIExpression()), !dbg !130
  %0 = load i32, ptr %n.addr, align 4, !dbg !131
  %conv = sext i32 %0 to i64, !dbg !131
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !132
  ret ptr %call, !dbg !133
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !134 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !135, metadata !DIExpression()), !dbg !136
  %0 = load i32, ptr %n.addr, align 4, !dbg !137
  %conv = sext i32 %0 to i64, !dbg !137
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !138
  ret ptr %call, !dbg !139
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !140 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !141, metadata !DIExpression()), !dbg !142
  %0 = load i32, ptr %n.addr, align 4, !dbg !143
  %conv = sext i32 %0 to i64, !dbg !143
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !144
  ret ptr %call, !dbg !145
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !146 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !147, metadata !DIExpression()), !dbg !148
  %0 = load i32, ptr %n.addr, align 4, !dbg !149
  %conv = sext i32 %0 to i64, !dbg !149
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !150
  ret ptr %call, !dbg !151
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !152 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !153, metadata !DIExpression()), !dbg !154
  %0 = load i32, ptr %n.addr, align 4, !dbg !155
  %conv = sext i32 %0 to i64, !dbg !155
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !156
  ret ptr %call, !dbg !157
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !158 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !159, metadata !DIExpression()), !dbg !160
  %0 = load i32, ptr %n.addr, align 4, !dbg !161
  %conv = sext i32 %0 to i64, !dbg !161
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !162
  ret ptr %call, !dbg !163
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !164 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !167, metadata !DIExpression()), !dbg !168
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !169, metadata !DIExpression()), !dbg !170
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !171
  ret void, !dbg !172
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !173 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !177, metadata !DIExpression()), !dbg !178
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !179, metadata !DIExpression()), !dbg !180
  ret void, !dbg !181
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !182 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !183, metadata !DIExpression()), !dbg !184
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !185, metadata !DIExpression()), !dbg !186
  ret void, !dbg !187
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !188 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !191, metadata !DIExpression()), !dbg !192
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !193, metadata !DIExpression()), !dbg !194
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !195, metadata !DIExpression()), !dbg !196
  ret void, !dbg !197
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !198 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !201, metadata !DIExpression()), !dbg !202
  ret void, !dbg !203
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !204 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !205, metadata !DIExpression()), !dbg !206
  %0 = load ptr, ptr %str.addr, align 8, !dbg !207
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !208
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !209
  %call2 = call i32 @getchar(), !dbg !210
  ret void, !dbg !211
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !212 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !216, metadata !DIExpression()), !dbg !217
  %0 = load ptr, ptr %p.addr, align 8, !dbg !218
  store i32 0, ptr %0, align 4, !dbg !219
  %1 = load ptr, ptr %retval, align 8, !dbg !220
  ret ptr %1, !dbg !220
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !221 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !222, metadata !DIExpression()), !dbg !223
  %0 = load ptr, ptr %p.addr, align 8, !dbg !224
  store i32 0, ptr %0, align 4, !dbg !225
  %1 = load ptr, ptr %retval, align 8, !dbg !226
  ret ptr %1, !dbg !226
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !227 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !228, metadata !DIExpression()), !dbg !229
  %0 = load ptr, ptr %p.addr, align 8, !dbg !230
  call void @free(ptr noundef %0) #7, !dbg !231
  %1 = load ptr, ptr %retval, align 8, !dbg !232
  ret ptr %1, !dbg !232
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !233 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !234, metadata !DIExpression()), !dbg !235
  %0 = load ptr, ptr %p.addr, align 8, !dbg !236
  call void @free(ptr noundef %0) #7, !dbg !237
  %1 = load ptr, ptr %retval, align 8, !dbg !238
  ret ptr %1, !dbg !238
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !239 {
entry:
  ret void, !dbg !242
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad() #0 !dbg !243 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !244, metadata !DIExpression()), !dbg !245
  store ptr null, ptr %data, align 8, !dbg !246
  %0 = load i32, ptr @staticTrue, align 4, !dbg !247
  %tobool = icmp ne i32 %0, 0, !dbg !247
  br i1 %tobool, label %if.then, label %if.end4, !dbg !249

if.then:                                          ; preds = %entry
  %call = call ptr @NFRMALLOC(i32 noundef 800), !dbg !250
  store ptr %call, ptr %data, align 8, !dbg !252
  %1 = load ptr, ptr %data, align 8, !dbg !253
  %cmp = icmp eq ptr %1, null, !dbg !255
  br i1 %cmp, label %if.then1, label %if.end, !dbg !256

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !257
  unreachable, !dbg !257

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !259
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !259
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !260
  store i32 0, ptr %intOne, align 4, !dbg !261
  %3 = load ptr, ptr %data, align 8, !dbg !262
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !262
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx2, i32 0, i32 1, !dbg !263
  store i32 0, ptr %intTwo, align 4, !dbg !264
  %4 = load ptr, ptr %data, align 8, !dbg !265
  %arrayidx3 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 0, !dbg !265
  call void @printStructLine(ptr noundef %arrayidx3), !dbg !266
  br label %if.end4, !dbg !267

if.end4:                                          ; preds = %if.end, %entry
  %5 = load i32, ptr @staticTrue, align 4, !dbg !268
  %tobool5 = icmp ne i32 %5, 0, !dbg !268
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !270

if.then6:                                         ; preds = %if.end4
  br label %if.end7, !dbg !271

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !273
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

declare void @printStructLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__twoIntsStruct_malloc_05_good() #0 !dbg !274 {
entry:
  call void @goodB2G1(), !dbg !275
  call void @goodB2G2(), !dbg !276
  call void @goodG2B1(), !dbg !277
  call void @goodG2B2(), !dbg !278
  ret void, !dbg !279
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !280 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !284, metadata !DIExpression()), !dbg !285
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !286, metadata !DIExpression()), !dbg !287
  %call = call i64 @time(ptr noundef null) #7, !dbg !288
  %conv = trunc i64 %call to i32, !dbg !289
  call void @srand(i32 noundef %conv) #7, !dbg !290
  call void @printLine(ptr noundef @.str.3), !dbg !291
  call void @CWE401_Memory_Leak__twoIntsStruct_malloc_05_good(), !dbg !292
  call void @printLine(ptr noundef @.str.4), !dbg !293
  call void @printLine(ptr noundef @.str.5), !dbg !294
  call void @CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad(), !dbg !295
  call void @printLine(ptr noundef @.str.6), !dbg !296
  ret i32 0, !dbg !297
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !298 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !299, metadata !DIExpression()), !dbg !300
  store ptr null, ptr %data, align 8, !dbg !301
  %0 = load i32, ptr @staticTrue, align 4, !dbg !302
  %tobool = icmp ne i32 %0, 0, !dbg !302
  br i1 %tobool, label %if.then, label %if.end4, !dbg !304

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !305
  store ptr %call, ptr %data, align 8, !dbg !307
  %1 = load ptr, ptr %data, align 8, !dbg !308
  %cmp = icmp eq ptr %1, null, !dbg !310
  br i1 %cmp, label %if.then1, label %if.end, !dbg !311

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !312
  unreachable, !dbg !312

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !314
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !314
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !315
  store i32 0, ptr %intOne, align 4, !dbg !316
  %3 = load ptr, ptr %data, align 8, !dbg !317
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !317
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx2, i32 0, i32 1, !dbg !318
  store i32 0, ptr %intTwo, align 4, !dbg !319
  %4 = load ptr, ptr %data, align 8, !dbg !320
  %arrayidx3 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 0, !dbg !320
  call void @printStructLine(ptr noundef %arrayidx3), !dbg !321
  br label %if.end4, !dbg !322

if.end4:                                          ; preds = %if.end, %entry
  %5 = load i32, ptr @staticFalse, align 4, !dbg !323
  %tobool5 = icmp ne i32 %5, 0, !dbg !323
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !325

if.then6:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.7), !dbg !326
  br label %if.end7, !dbg !328

if.else:                                          ; preds = %if.end4
  %6 = load ptr, ptr %data, align 8, !dbg !329
  call void @free(ptr noundef %6) #7, !dbg !331
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void, !dbg !332
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !333 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !334, metadata !DIExpression()), !dbg !335
  store ptr null, ptr %data, align 8, !dbg !336
  %0 = load i32, ptr @staticTrue, align 4, !dbg !337
  %tobool = icmp ne i32 %0, 0, !dbg !337
  br i1 %tobool, label %if.then, label %if.end4, !dbg !339

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !340
  store ptr %call, ptr %data, align 8, !dbg !342
  %1 = load ptr, ptr %data, align 8, !dbg !343
  %cmp = icmp eq ptr %1, null, !dbg !345
  br i1 %cmp, label %if.then1, label %if.end, !dbg !346

if.then1:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #8, !dbg !347
  unreachable, !dbg !347

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8, !dbg !349
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !349
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !350
  store i32 0, ptr %intOne, align 4, !dbg !351
  %3 = load ptr, ptr %data, align 8, !dbg !352
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !352
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx2, i32 0, i32 1, !dbg !353
  store i32 0, ptr %intTwo, align 4, !dbg !354
  %4 = load ptr, ptr %data, align 8, !dbg !355
  %arrayidx3 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 0, !dbg !355
  call void @printStructLine(ptr noundef %arrayidx3), !dbg !356
  br label %if.end4, !dbg !357

if.end4:                                          ; preds = %if.end, %entry
  %5 = load i32, ptr @staticTrue, align 4, !dbg !358
  %tobool5 = icmp ne i32 %5, 0, !dbg !358
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !360

if.then6:                                         ; preds = %if.end4
  %6 = load ptr, ptr %data, align 8, !dbg !361
  call void @free(ptr noundef %6) #7, !dbg !363
  br label %if.end7, !dbg !364

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !365
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 !dbg !366 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !367, metadata !DIExpression()), !dbg !368
  store ptr null, ptr %data, align 8, !dbg !369
  %0 = load i32, ptr @staticFalse, align 4, !dbg !370
  %tobool = icmp ne i32 %0, 0, !dbg !370
  br i1 %tobool, label %if.then, label %if.else, !dbg !372

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !373
  br label %if.end, !dbg !375

if.else:                                          ; preds = %entry
  %1 = alloca i8, i64 800, align 16, !dbg !376
  store ptr %1, ptr %data, align 8, !dbg !378
  %2 = load ptr, ptr %data, align 8, !dbg !379
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !379
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !380
  store i32 0, ptr %intOne, align 4, !dbg !381
  %3 = load ptr, ptr %data, align 8, !dbg !382
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !382
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !383
  store i32 0, ptr %intTwo, align 4, !dbg !384
  %4 = load ptr, ptr %data, align 8, !dbg !385
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 0, !dbg !385
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !386
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i32, ptr @staticTrue, align 4, !dbg !387
  %tobool3 = icmp ne i32 %5, 0, !dbg !387
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !389

if.then4:                                         ; preds = %if.end
  br label %if.end5, !dbg !390

if.end5:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !392
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 !dbg !393 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !394, metadata !DIExpression()), !dbg !395
  store ptr null, ptr %data, align 8, !dbg !396
  %0 = load i32, ptr @staticTrue, align 4, !dbg !397
  %tobool = icmp ne i32 %0, 0, !dbg !397
  br i1 %tobool, label %if.then, label %if.end, !dbg !399

if.then:                                          ; preds = %entry
  %1 = alloca i8, i64 800, align 16, !dbg !400
  store ptr %1, ptr %data, align 8, !dbg !402
  %2 = load ptr, ptr %data, align 8, !dbg !403
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !403
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !404
  store i32 0, ptr %intOne, align 4, !dbg !405
  %3 = load ptr, ptr %data, align 8, !dbg !406
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !406
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !407
  store i32 0, ptr %intTwo, align 4, !dbg !408
  %4 = load ptr, ptr %data, align 8, !dbg !409
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %4, i64 0, !dbg !409
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !410
  br label %if.end, !dbg !411

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, ptr @staticTrue, align 4, !dbg !412
  %tobool3 = icmp ne i32 %5, 0, !dbg !412
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !414

if.then4:                                         ; preds = %if.end
  br label %if.end5, !dbg !415

if.end5:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !417
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!61, !62, !63, !64, !65, !66, !67}
!llvm.ident = !{!68}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "staticTrue", scope: !19, file: !35, line: 25, type: !29, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !32, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__twoIntsStruct_malloc_05.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "052ebf59092c8164f18ad3b14e2d2a34")
!21 = !{!22, !23, !31}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !25, line: 100, baseType: !26)
!25 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !25, line: 96, size: 64, elements: !27)
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !26, file: !25, line: 98, baseType: !29, size: 32)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !26, file: !25, line: 99, baseType: !29, size: 32, offset: 32)
!31 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!32 = !{!0, !7, !12, !33, !39, !44, !49, !17, !54, !59}
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !35, line: 173, type: !36, isLocal: true, isDefinition: true)
!35 = !DIFile(filename: "src/tmem_leak/CWE401_Memory_Leak__twoIntsStruct_malloc_05.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "052ebf59092c8164f18ad3b14e2d2a34")
!36 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !37)
!37 = !{!38}
!38 = !DISubrange(count: 18)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(scope: null, file: !35, line: 175, type: !41, isLocal: true, isDefinition: true)
!41 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !42)
!42 = !{!43}
!43 = !DISubrange(count: 16)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(scope: null, file: !35, line: 178, type: !46, isLocal: true, isDefinition: true)
!46 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !47)
!47 = !{!48}
!48 = !DISubrange(count: 17)
!49 = !DIGlobalVariableExpression(var: !50, expr: !DIExpression())
!50 = distinct !DIGlobalVariable(scope: null, file: !35, line: 180, type: !51, isLocal: true, isDefinition: true)
!51 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !52)
!52 = !{!53}
!53 = !DISubrange(count: 15)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(scope: null, file: !35, line: 73, type: !56, isLocal: true, isDefinition: true)
!56 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !57)
!57 = !{!58}
!58 = !DISubrange(count: 21)
!59 = !DIGlobalVariableExpression(var: !60, expr: !DIExpression())
!60 = distinct !DIGlobalVariable(name: "staticFalse", scope: !19, file: !35, line: 26, type: !29, isLocal: true, isDefinition: true)
!61 = !{i32 7, !"Dwarf Version", i32 5}
!62 = !{i32 2, !"Debug Info Version", i32 3}
!63 = !{i32 1, !"wchar_size", i32 4}
!64 = !{i32 8, !"PIC Level", i32 2}
!65 = !{i32 7, !"PIE Level", i32 2}
!66 = !{i32 7, !"uwtable", i32 2}
!67 = !{i32 7, !"frame-pointer", i32 2}
!68 = !{!"clang version 16.0.0"}
!69 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !70, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!70 = !DISubroutineType(types: !71)
!71 = !{null, !22, !22}
!72 = !{}
!73 = !DILocalVariable(name: "p", arg: 1, scope: !69, file: !2, line: 4, type: !22)
!74 = !DILocation(line: 4, column: 22, scope: !69)
!75 = !DILocalVariable(name: "q", arg: 2, scope: !69, file: !2, line: 4, type: !22)
!76 = !DILocation(line: 4, column: 31, scope: !69)
!77 = !DILocation(line: 5, column: 3, scope: !69)
!78 = !DILocation(line: 6, column: 1, scope: !69)
!79 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !70, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!80 = !DILocalVariable(name: "p", arg: 1, scope: !79, file: !2, line: 8, type: !22)
!81 = !DILocation(line: 8, column: 25, scope: !79)
!82 = !DILocalVariable(name: "q", arg: 2, scope: !79, file: !2, line: 8, type: !22)
!83 = !DILocation(line: 8, column: 34, scope: !79)
!84 = !DILocation(line: 9, column: 3, scope: !79)
!85 = !DILocation(line: 10, column: 1, scope: !79)
!86 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !70, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!87 = !DILocalVariable(name: "p", arg: 1, scope: !86, file: !2, line: 12, type: !22)
!88 = !DILocation(line: 12, column: 21, scope: !86)
!89 = !DILocalVariable(name: "q", arg: 2, scope: !86, file: !2, line: 12, type: !22)
!90 = !DILocation(line: 12, column: 30, scope: !86)
!91 = !DILocation(line: 13, column: 3, scope: !86)
!92 = !DILocation(line: 14, column: 1, scope: !86)
!93 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !70, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!94 = !DILocalVariable(name: "p", arg: 1, scope: !93, file: !2, line: 16, type: !22)
!95 = !DILocation(line: 16, column: 20, scope: !93)
!96 = !DILocalVariable(name: "q", arg: 2, scope: !93, file: !2, line: 16, type: !22)
!97 = !DILocation(line: 16, column: 29, scope: !93)
!98 = !DILocation(line: 17, column: 3, scope: !93)
!99 = !DILocation(line: 18, column: 1, scope: !93)
!100 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !70, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!101 = !DILocalVariable(name: "p", arg: 1, scope: !100, file: !2, line: 20, type: !22)
!102 = !DILocation(line: 20, column: 34, scope: !100)
!103 = !DILocalVariable(name: "q", arg: 2, scope: !100, file: !2, line: 20, type: !22)
!104 = !DILocation(line: 20, column: 43, scope: !100)
!105 = !DILocation(line: 21, column: 3, scope: !100)
!106 = !DILocation(line: 22, column: 1, scope: !100)
!107 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !70, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!108 = !DILocalVariable(name: "p", arg: 1, scope: !107, file: !2, line: 24, type: !22)
!109 = !DILocation(line: 24, column: 33, scope: !107)
!110 = !DILocalVariable(name: "q", arg: 2, scope: !107, file: !2, line: 24, type: !22)
!111 = !DILocation(line: 24, column: 42, scope: !107)
!112 = !DILocation(line: 25, column: 3, scope: !107)
!113 = !DILocation(line: 26, column: 1, scope: !107)
!114 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !115, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!115 = !DISubroutineType(types: !116)
!116 = !{!22, !29}
!117 = !DILocalVariable(name: "n", arg: 1, scope: !114, file: !2, line: 29, type: !29)
!118 = !DILocation(line: 29, column: 22, scope: !114)
!119 = !DILocation(line: 30, column: 17, scope: !114)
!120 = !DILocation(line: 30, column: 10, scope: !114)
!121 = !DILocation(line: 30, column: 3, scope: !114)
!122 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !115, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!123 = !DILocalVariable(name: "n", arg: 1, scope: !122, file: !2, line: 33, type: !29)
!124 = !DILocation(line: 33, column: 28, scope: !122)
!125 = !DILocation(line: 34, column: 19, scope: !122)
!126 = !DILocation(line: 34, column: 12, scope: !122)
!127 = !DILocation(line: 34, column: 5, scope: !122)
!128 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !115, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!129 = !DILocalVariable(name: "n", arg: 1, scope: !128, file: !2, line: 37, type: !29)
!130 = !DILocation(line: 37, column: 21, scope: !128)
!131 = !DILocation(line: 38, column: 17, scope: !128)
!132 = !DILocation(line: 38, column: 10, scope: !128)
!133 = !DILocation(line: 38, column: 3, scope: !128)
!134 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !115, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!135 = !DILocalVariable(name: "n", arg: 1, scope: !134, file: !2, line: 41, type: !29)
!136 = !DILocation(line: 41, column: 21, scope: !134)
!137 = !DILocation(line: 42, column: 17, scope: !134)
!138 = !DILocation(line: 42, column: 10, scope: !134)
!139 = !DILocation(line: 42, column: 3, scope: !134)
!140 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !115, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!141 = !DILocalVariable(name: "n", arg: 1, scope: !140, file: !2, line: 45, type: !29)
!142 = !DILocation(line: 45, column: 21, scope: !140)
!143 = !DILocation(line: 46, column: 17, scope: !140)
!144 = !DILocation(line: 46, column: 10, scope: !140)
!145 = !DILocation(line: 46, column: 3, scope: !140)
!146 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !115, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!147 = !DILocalVariable(name: "n", arg: 1, scope: !146, file: !2, line: 49, type: !29)
!148 = !DILocation(line: 49, column: 21, scope: !146)
!149 = !DILocation(line: 50, column: 17, scope: !146)
!150 = !DILocation(line: 50, column: 10, scope: !146)
!151 = !DILocation(line: 50, column: 3, scope: !146)
!152 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !115, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!153 = !DILocalVariable(name: "n", arg: 1, scope: !152, file: !2, line: 53, type: !29)
!154 = !DILocation(line: 53, column: 21, scope: !152)
!155 = !DILocation(line: 54, column: 17, scope: !152)
!156 = !DILocation(line: 54, column: 10, scope: !152)
!157 = !DILocation(line: 54, column: 3, scope: !152)
!158 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !115, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!159 = !DILocalVariable(name: "n", arg: 1, scope: !158, file: !2, line: 57, type: !29)
!160 = !DILocation(line: 57, column: 18, scope: !158)
!161 = !DILocation(line: 58, column: 17, scope: !158)
!162 = !DILocation(line: 58, column: 10, scope: !158)
!163 = !DILocation(line: 58, column: 3, scope: !158)
!164 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !165, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!165 = !DISubroutineType(types: !166)
!166 = !{null, !29, !29}
!167 = !DILocalVariable(name: "id", arg: 1, scope: !164, file: !2, line: 67, type: !29)
!168 = !DILocation(line: 67, column: 20, scope: !164)
!169 = !DILocalVariable(name: "flags", arg: 2, scope: !164, file: !2, line: 67, type: !29)
!170 = !DILocation(line: 67, column: 28, scope: !164)
!171 = !DILocation(line: 68, column: 3, scope: !164)
!172 = !DILocation(line: 69, column: 1, scope: !164)
!173 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !174, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!174 = !DISubroutineType(types: !175)
!175 = !{null, !29, !176}
!176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!177 = !DILocalVariable(name: "thdid", arg: 1, scope: !173, file: !2, line: 79, type: !29)
!178 = !DILocation(line: 79, column: 21, scope: !173)
!179 = !DILocalVariable(name: "cxt", arg: 2, scope: !173, file: !2, line: 79, type: !176)
!180 = !DILocation(line: 79, column: 34, scope: !173)
!181 = !DILocation(line: 81, column: 1, scope: !173)
!182 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !174, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!183 = !DILocalVariable(name: "thdid", arg: 1, scope: !182, file: !2, line: 82, type: !29)
!184 = !DILocation(line: 82, column: 21, scope: !182)
!185 = !DILocalVariable(name: "cxt", arg: 2, scope: !182, file: !2, line: 82, type: !176)
!186 = !DILocation(line: 82, column: 33, scope: !182)
!187 = !DILocation(line: 84, column: 1, scope: !182)
!188 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !189, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!189 = !DISubroutineType(types: !190)
!190 = !{null, !29, !176, !176}
!191 = !DILocalVariable(name: "thdid", arg: 1, scope: !188, file: !2, line: 85, type: !29)
!192 = !DILocation(line: 85, column: 26, scope: !188)
!193 = !DILocalVariable(name: "cxt", arg: 2, scope: !188, file: !2, line: 85, type: !176)
!194 = !DILocation(line: 85, column: 38, scope: !188)
!195 = !DILocalVariable(name: "lev", arg: 3, scope: !188, file: !2, line: 85, type: !176)
!196 = !DILocation(line: 85, column: 49, scope: !188)
!197 = !DILocation(line: 87, column: 1, scope: !188)
!198 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !199, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!199 = !DISubroutineType(types: !200)
!200 = !{null, !176}
!201 = !DILocalVariable(name: "lockname", arg: 1, scope: !198, file: !2, line: 89, type: !176)
!202 = !DILocation(line: 89, column: 17, scope: !198)
!203 = !DILocation(line: 91, column: 1, scope: !198)
!204 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !199, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!205 = !DILocalVariable(name: "str", arg: 1, scope: !204, file: !2, line: 93, type: !176)
!206 = !DILocation(line: 93, column: 18, scope: !204)
!207 = !DILocation(line: 94, column: 18, scope: !204)
!208 = !DILocation(line: 94, column: 3, scope: !204)
!209 = !DILocation(line: 95, column: 3, scope: !204)
!210 = !DILocation(line: 96, column: 3, scope: !204)
!211 = !DILocation(line: 97, column: 1, scope: !204)
!212 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !213, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!213 = !DISubroutineType(types: !214)
!214 = !{!22, !215}
!215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!216 = !DILocalVariable(name: "p", arg: 1, scope: !212, file: !2, line: 100, type: !215)
!217 = !DILocation(line: 100, column: 24, scope: !212)
!218 = !DILocation(line: 101, column: 6, scope: !212)
!219 = !DILocation(line: 101, column: 8, scope: !212)
!220 = !DILocation(line: 102, column: 1, scope: !212)
!221 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !213, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!222 = !DILocalVariable(name: "p", arg: 1, scope: !221, file: !2, line: 104, type: !215)
!223 = !DILocation(line: 104, column: 20, scope: !221)
!224 = !DILocation(line: 105, column: 6, scope: !221)
!225 = !DILocation(line: 105, column: 8, scope: !221)
!226 = !DILocation(line: 106, column: 1, scope: !221)
!227 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !213, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!228 = !DILocalVariable(name: "p", arg: 1, scope: !227, file: !2, line: 110, type: !215)
!229 = !DILocation(line: 110, column: 22, scope: !227)
!230 = !DILocation(line: 111, column: 10, scope: !227)
!231 = !DILocation(line: 111, column: 5, scope: !227)
!232 = !DILocation(line: 112, column: 1, scope: !227)
!233 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !213, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!234 = !DILocalVariable(name: "p", arg: 1, scope: !233, file: !2, line: 115, type: !215)
!235 = !DILocation(line: 115, column: 24, scope: !233)
!236 = !DILocation(line: 116, column: 10, scope: !233)
!237 = !DILocation(line: 116, column: 5, scope: !233)
!238 = !DILocation(line: 117, column: 1, scope: !233)
!239 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !240, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!240 = !DISubroutineType(types: !241)
!241 = !{null}
!242 = !DILocation(line: 135, column: 20, scope: !239)
!243 = distinct !DISubprogram(name: "CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad", scope: !35, file: !35, line: 30, type: !240, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!244 = !DILocalVariable(name: "data", scope: !243, file: !35, line: 32, type: !23)
!245 = !DILocation(line: 32, column: 21, scope: !243)
!246 = !DILocation(line: 33, column: 10, scope: !243)
!247 = !DILocation(line: 34, column: 8, scope: !248)
!248 = distinct !DILexicalBlock(scope: !243, file: !35, line: 34, column: 8)
!249 = !DILocation(line: 34, column: 8, scope: !243)
!250 = !DILocation(line: 37, column: 33, scope: !251)
!251 = distinct !DILexicalBlock(scope: !248, file: !35, line: 35, column: 5)
!252 = !DILocation(line: 37, column: 14, scope: !251)
!253 = !DILocation(line: 38, column: 13, scope: !254)
!254 = distinct !DILexicalBlock(scope: !251, file: !35, line: 38, column: 13)
!255 = !DILocation(line: 38, column: 18, scope: !254)
!256 = !DILocation(line: 38, column: 13, scope: !251)
!257 = !DILocation(line: 38, column: 28, scope: !258)
!258 = distinct !DILexicalBlock(scope: !254, file: !35, line: 38, column: 27)
!259 = !DILocation(line: 40, column: 9, scope: !251)
!260 = !DILocation(line: 40, column: 17, scope: !251)
!261 = !DILocation(line: 40, column: 24, scope: !251)
!262 = !DILocation(line: 41, column: 9, scope: !251)
!263 = !DILocation(line: 41, column: 17, scope: !251)
!264 = !DILocation(line: 41, column: 24, scope: !251)
!265 = !DILocation(line: 42, column: 26, scope: !251)
!266 = !DILocation(line: 42, column: 9, scope: !251)
!267 = !DILocation(line: 43, column: 5, scope: !251)
!268 = !DILocation(line: 44, column: 8, scope: !269)
!269 = distinct !DILexicalBlock(scope: !243, file: !35, line: 44, column: 8)
!270 = !DILocation(line: 44, column: 8, scope: !243)
!271 = !DILocation(line: 48, column: 5, scope: !272)
!272 = distinct !DILexicalBlock(scope: !269, file: !35, line: 45, column: 5)
!273 = !DILocation(line: 49, column: 1, scope: !243)
!274 = distinct !DISubprogram(name: "CWE401_Memory_Leak__twoIntsStruct_malloc_05_good", scope: !35, file: !35, line: 151, type: !240, scopeLine: 152, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!275 = !DILocation(line: 153, column: 5, scope: !274)
!276 = !DILocation(line: 154, column: 5, scope: !274)
!277 = !DILocation(line: 155, column: 5, scope: !274)
!278 = !DILocation(line: 156, column: 5, scope: !274)
!279 = !DILocation(line: 157, column: 1, scope: !274)
!280 = distinct !DISubprogram(name: "main", scope: !35, file: !35, line: 168, type: !281, scopeLine: 169, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !72)
!281 = !DISubroutineType(types: !282)
!282 = !{!29, !29, !283}
!283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !176, size: 64)
!284 = !DILocalVariable(name: "argc", arg: 1, scope: !280, file: !35, line: 168, type: !29)
!285 = !DILocation(line: 168, column: 14, scope: !280)
!286 = !DILocalVariable(name: "argv", arg: 2, scope: !280, file: !35, line: 168, type: !283)
!287 = !DILocation(line: 168, column: 27, scope: !280)
!288 = !DILocation(line: 171, column: 22, scope: !280)
!289 = !DILocation(line: 171, column: 12, scope: !280)
!290 = !DILocation(line: 171, column: 5, scope: !280)
!291 = !DILocation(line: 173, column: 5, scope: !280)
!292 = !DILocation(line: 174, column: 5, scope: !280)
!293 = !DILocation(line: 175, column: 5, scope: !280)
!294 = !DILocation(line: 178, column: 5, scope: !280)
!295 = !DILocation(line: 179, column: 5, scope: !280)
!296 = !DILocation(line: 180, column: 5, scope: !280)
!297 = !DILocation(line: 182, column: 5, scope: !280)
!298 = distinct !DISubprogram(name: "goodB2G1", scope: !35, file: !35, line: 56, type: !240, scopeLine: 57, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !72)
!299 = !DILocalVariable(name: "data", scope: !298, file: !35, line: 58, type: !23)
!300 = !DILocation(line: 58, column: 21, scope: !298)
!301 = !DILocation(line: 59, column: 10, scope: !298)
!302 = !DILocation(line: 60, column: 8, scope: !303)
!303 = distinct !DILexicalBlock(scope: !298, file: !35, line: 60, column: 8)
!304 = !DILocation(line: 60, column: 8, scope: !298)
!305 = !DILocation(line: 63, column: 33, scope: !306)
!306 = distinct !DILexicalBlock(scope: !303, file: !35, line: 61, column: 5)
!307 = !DILocation(line: 63, column: 14, scope: !306)
!308 = !DILocation(line: 64, column: 13, scope: !309)
!309 = distinct !DILexicalBlock(scope: !306, file: !35, line: 64, column: 13)
!310 = !DILocation(line: 64, column: 18, scope: !309)
!311 = !DILocation(line: 64, column: 13, scope: !306)
!312 = !DILocation(line: 64, column: 28, scope: !313)
!313 = distinct !DILexicalBlock(scope: !309, file: !35, line: 64, column: 27)
!314 = !DILocation(line: 66, column: 9, scope: !306)
!315 = !DILocation(line: 66, column: 17, scope: !306)
!316 = !DILocation(line: 66, column: 24, scope: !306)
!317 = !DILocation(line: 67, column: 9, scope: !306)
!318 = !DILocation(line: 67, column: 17, scope: !306)
!319 = !DILocation(line: 67, column: 24, scope: !306)
!320 = !DILocation(line: 68, column: 26, scope: !306)
!321 = !DILocation(line: 68, column: 9, scope: !306)
!322 = !DILocation(line: 69, column: 5, scope: !306)
!323 = !DILocation(line: 70, column: 8, scope: !324)
!324 = distinct !DILexicalBlock(scope: !298, file: !35, line: 70, column: 8)
!325 = !DILocation(line: 70, column: 8, scope: !298)
!326 = !DILocation(line: 73, column: 9, scope: !327)
!327 = distinct !DILexicalBlock(scope: !324, file: !35, line: 71, column: 5)
!328 = !DILocation(line: 74, column: 5, scope: !327)
!329 = !DILocation(line: 78, column: 14, scope: !330)
!330 = distinct !DILexicalBlock(scope: !324, file: !35, line: 76, column: 5)
!331 = !DILocation(line: 78, column: 9, scope: !330)
!332 = !DILocation(line: 80, column: 1, scope: !298)
!333 = distinct !DISubprogram(name: "goodB2G2", scope: !35, file: !35, line: 83, type: !240, scopeLine: 84, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !72)
!334 = !DILocalVariable(name: "data", scope: !333, file: !35, line: 85, type: !23)
!335 = !DILocation(line: 85, column: 21, scope: !333)
!336 = !DILocation(line: 86, column: 10, scope: !333)
!337 = !DILocation(line: 87, column: 8, scope: !338)
!338 = distinct !DILexicalBlock(scope: !333, file: !35, line: 87, column: 8)
!339 = !DILocation(line: 87, column: 8, scope: !333)
!340 = !DILocation(line: 90, column: 33, scope: !341)
!341 = distinct !DILexicalBlock(scope: !338, file: !35, line: 88, column: 5)
!342 = !DILocation(line: 90, column: 14, scope: !341)
!343 = !DILocation(line: 91, column: 13, scope: !344)
!344 = distinct !DILexicalBlock(scope: !341, file: !35, line: 91, column: 13)
!345 = !DILocation(line: 91, column: 18, scope: !344)
!346 = !DILocation(line: 91, column: 13, scope: !341)
!347 = !DILocation(line: 91, column: 28, scope: !348)
!348 = distinct !DILexicalBlock(scope: !344, file: !35, line: 91, column: 27)
!349 = !DILocation(line: 93, column: 9, scope: !341)
!350 = !DILocation(line: 93, column: 17, scope: !341)
!351 = !DILocation(line: 93, column: 24, scope: !341)
!352 = !DILocation(line: 94, column: 9, scope: !341)
!353 = !DILocation(line: 94, column: 17, scope: !341)
!354 = !DILocation(line: 94, column: 24, scope: !341)
!355 = !DILocation(line: 95, column: 26, scope: !341)
!356 = !DILocation(line: 95, column: 9, scope: !341)
!357 = !DILocation(line: 96, column: 5, scope: !341)
!358 = !DILocation(line: 97, column: 8, scope: !359)
!359 = distinct !DILexicalBlock(scope: !333, file: !35, line: 97, column: 8)
!360 = !DILocation(line: 97, column: 8, scope: !333)
!361 = !DILocation(line: 100, column: 14, scope: !362)
!362 = distinct !DILexicalBlock(scope: !359, file: !35, line: 98, column: 5)
!363 = !DILocation(line: 100, column: 9, scope: !362)
!364 = !DILocation(line: 101, column: 5, scope: !362)
!365 = !DILocation(line: 102, column: 1, scope: !333)
!366 = distinct !DISubprogram(name: "goodG2B1", scope: !35, file: !35, line: 105, type: !240, scopeLine: 106, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !72)
!367 = !DILocalVariable(name: "data", scope: !366, file: !35, line: 107, type: !23)
!368 = !DILocation(line: 107, column: 21, scope: !366)
!369 = !DILocation(line: 108, column: 10, scope: !366)
!370 = !DILocation(line: 109, column: 8, scope: !371)
!371 = distinct !DILexicalBlock(scope: !366, file: !35, line: 109, column: 8)
!372 = !DILocation(line: 109, column: 8, scope: !366)
!373 = !DILocation(line: 112, column: 9, scope: !374)
!374 = distinct !DILexicalBlock(scope: !371, file: !35, line: 110, column: 5)
!375 = !DILocation(line: 113, column: 5, scope: !374)
!376 = !DILocation(line: 117, column: 33, scope: !377)
!377 = distinct !DILexicalBlock(scope: !371, file: !35, line: 115, column: 5)
!378 = !DILocation(line: 117, column: 14, scope: !377)
!379 = !DILocation(line: 119, column: 9, scope: !377)
!380 = !DILocation(line: 119, column: 17, scope: !377)
!381 = !DILocation(line: 119, column: 24, scope: !377)
!382 = !DILocation(line: 120, column: 9, scope: !377)
!383 = !DILocation(line: 120, column: 17, scope: !377)
!384 = !DILocation(line: 120, column: 24, scope: !377)
!385 = !DILocation(line: 121, column: 26, scope: !377)
!386 = !DILocation(line: 121, column: 9, scope: !377)
!387 = !DILocation(line: 123, column: 8, scope: !388)
!388 = distinct !DILexicalBlock(scope: !366, file: !35, line: 123, column: 8)
!389 = !DILocation(line: 123, column: 8, scope: !366)
!390 = !DILocation(line: 127, column: 5, scope: !391)
!391 = distinct !DILexicalBlock(scope: !388, file: !35, line: 124, column: 5)
!392 = !DILocation(line: 128, column: 1, scope: !366)
!393 = distinct !DISubprogram(name: "goodG2B2", scope: !35, file: !35, line: 131, type: !240, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !72)
!394 = !DILocalVariable(name: "data", scope: !393, file: !35, line: 133, type: !23)
!395 = !DILocation(line: 133, column: 21, scope: !393)
!396 = !DILocation(line: 134, column: 10, scope: !393)
!397 = !DILocation(line: 135, column: 8, scope: !398)
!398 = distinct !DILexicalBlock(scope: !393, file: !35, line: 135, column: 8)
!399 = !DILocation(line: 135, column: 8, scope: !393)
!400 = !DILocation(line: 138, column: 33, scope: !401)
!401 = distinct !DILexicalBlock(scope: !398, file: !35, line: 136, column: 5)
!402 = !DILocation(line: 138, column: 14, scope: !401)
!403 = !DILocation(line: 140, column: 9, scope: !401)
!404 = !DILocation(line: 140, column: 17, scope: !401)
!405 = !DILocation(line: 140, column: 24, scope: !401)
!406 = !DILocation(line: 141, column: 9, scope: !401)
!407 = !DILocation(line: 141, column: 17, scope: !401)
!408 = !DILocation(line: 141, column: 24, scope: !401)
!409 = !DILocation(line: 142, column: 26, scope: !401)
!410 = !DILocation(line: 142, column: 9, scope: !401)
!411 = !DILocation(line: 143, column: 5, scope: !401)
!412 = !DILocation(line: 144, column: 8, scope: !413)
!413 = distinct !DILexicalBlock(scope: !393, file: !35, line: 144, column: 8)
!414 = !DILocation(line: 144, column: 8, scope: !393)
!415 = !DILocation(line: 148, column: 5, scope: !416)
!416 = distinct !DILexicalBlock(scope: !413, file: !35, line: 145, column: 5)
!417 = !DILocation(line: 149, column: 1, scope: !393)
