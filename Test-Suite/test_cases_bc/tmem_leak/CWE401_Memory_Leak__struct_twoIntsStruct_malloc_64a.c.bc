; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tmem_leak/CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64a.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64a.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !33

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !62 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !66, metadata !DIExpression()), !dbg !67
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !68, metadata !DIExpression()), !dbg !69
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !70
  ret void, !dbg !71
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !72 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !73, metadata !DIExpression()), !dbg !74
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !75, metadata !DIExpression()), !dbg !76
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !77
  ret void, !dbg !78
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !79 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !80, metadata !DIExpression()), !dbg !81
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !84
  ret void, !dbg !85
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !86 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !87, metadata !DIExpression()), !dbg !88
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !89, metadata !DIExpression()), !dbg !90
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !91
  ret void, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !93 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !94, metadata !DIExpression()), !dbg !95
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !96, metadata !DIExpression()), !dbg !97
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !98
  ret void, !dbg !99
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !100 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !101, metadata !DIExpression()), !dbg !102
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !105
  ret void, !dbg !106
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !107 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !110, metadata !DIExpression()), !dbg !111
  %0 = load i32, ptr %n.addr, align 4, !dbg !112
  %conv = sext i32 %0 to i64, !dbg !112
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !113
  ret ptr %call, !dbg !114
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !115 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !116, metadata !DIExpression()), !dbg !117
  %0 = load i32, ptr %n.addr, align 4, !dbg !118
  %conv = sext i32 %0 to i64, !dbg !118
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !119
  ret ptr %call, !dbg !120
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !121 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !122, metadata !DIExpression()), !dbg !123
  %0 = load i32, ptr %n.addr, align 4, !dbg !124
  %conv = sext i32 %0 to i64, !dbg !124
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !125
  ret ptr %call, !dbg !126
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !127 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !128, metadata !DIExpression()), !dbg !129
  %0 = load i32, ptr %n.addr, align 4, !dbg !130
  %conv = sext i32 %0 to i64, !dbg !130
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !131
  ret ptr %call, !dbg !132
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !133 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !134, metadata !DIExpression()), !dbg !135
  %0 = load i32, ptr %n.addr, align 4, !dbg !136
  %conv = sext i32 %0 to i64, !dbg !136
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !137
  ret ptr %call, !dbg !138
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !139 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !140, metadata !DIExpression()), !dbg !141
  %0 = load i32, ptr %n.addr, align 4, !dbg !142
  %conv = sext i32 %0 to i64, !dbg !142
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !143
  ret ptr %call, !dbg !144
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !145 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !146, metadata !DIExpression()), !dbg !147
  %0 = load i32, ptr %n.addr, align 4, !dbg !148
  %conv = sext i32 %0 to i64, !dbg !148
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !149
  ret ptr %call, !dbg !150
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !151 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !152, metadata !DIExpression()), !dbg !153
  %0 = load i32, ptr %n.addr, align 4, !dbg !154
  %conv = sext i32 %0 to i64, !dbg !154
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !155
  ret ptr %call, !dbg !156
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !157 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !160, metadata !DIExpression()), !dbg !161
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !162, metadata !DIExpression()), !dbg !163
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !164
  ret void, !dbg !165
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !166 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !170, metadata !DIExpression()), !dbg !171
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !172, metadata !DIExpression()), !dbg !173
  ret void, !dbg !174
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !175 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !176, metadata !DIExpression()), !dbg !177
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !178, metadata !DIExpression()), !dbg !179
  ret void, !dbg !180
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !181 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !184, metadata !DIExpression()), !dbg !185
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !186, metadata !DIExpression()), !dbg !187
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !188, metadata !DIExpression()), !dbg !189
  ret void, !dbg !190
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !191 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !194, metadata !DIExpression()), !dbg !195
  ret void, !dbg !196
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !197 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !198, metadata !DIExpression()), !dbg !199
  %0 = load ptr, ptr %str.addr, align 8, !dbg !200
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !201
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !202
  %call2 = call i32 @getchar(), !dbg !203
  ret void, !dbg !204
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !205 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !209, metadata !DIExpression()), !dbg !210
  %0 = load ptr, ptr %p.addr, align 8, !dbg !211
  store i32 0, ptr %0, align 4, !dbg !212
  %1 = load ptr, ptr %retval, align 8, !dbg !213
  ret ptr %1, !dbg !213
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !214 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !215, metadata !DIExpression()), !dbg !216
  %0 = load ptr, ptr %p.addr, align 8, !dbg !217
  store i32 0, ptr %0, align 4, !dbg !218
  %1 = load ptr, ptr %retval, align 8, !dbg !219
  ret ptr %1, !dbg !219
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !220 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !221, metadata !DIExpression()), !dbg !222
  %0 = load ptr, ptr %p.addr, align 8, !dbg !223
  call void @free(ptr noundef %0) #6, !dbg !224
  %1 = load ptr, ptr %retval, align 8, !dbg !225
  ret ptr %1, !dbg !225
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !226 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !227, metadata !DIExpression()), !dbg !228
  %0 = load ptr, ptr %p.addr, align 8, !dbg !229
  call void @free(ptr noundef %0) #6, !dbg !230
  %1 = load ptr, ptr %retval, align 8, !dbg !231
  ret ptr %1, !dbg !231
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !232 {
entry:
  ret void, !dbg !235
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_badSink(ptr noundef %dataVoidPtr) #0 !dbg !236 {
entry:
  %dataVoidPtr.addr = alloca ptr, align 8
  %dataPtr = alloca ptr, align 8
  %data = alloca ptr, align 8
  store ptr %dataVoidPtr, ptr %dataVoidPtr.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %dataVoidPtr.addr, metadata !239, metadata !DIExpression()), !dbg !240
  call void @llvm.dbg.declare(metadata ptr %dataPtr, metadata !241, metadata !DIExpression()), !dbg !242
  %0 = load ptr, ptr %dataVoidPtr.addr, align 8, !dbg !243
  store ptr %0, ptr %dataPtr, align 8, !dbg !242
  call void @llvm.dbg.declare(metadata ptr %data, metadata !244, metadata !DIExpression()), !dbg !245
  %1 = load ptr, ptr %dataPtr, align 8, !dbg !246
  %2 = load ptr, ptr %1, align 8, !dbg !247
  store ptr %2, ptr %data, align 8, !dbg !245
  ret void, !dbg !248
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_goodG2BSink(ptr noundef %dataVoidPtr) #0 !dbg !249 {
entry:
  %dataVoidPtr.addr = alloca ptr, align 8
  %dataPtr = alloca ptr, align 8
  %data = alloca ptr, align 8
  store ptr %dataVoidPtr, ptr %dataVoidPtr.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %dataVoidPtr.addr, metadata !250, metadata !DIExpression()), !dbg !251
  call void @llvm.dbg.declare(metadata ptr %dataPtr, metadata !252, metadata !DIExpression()), !dbg !253
  %0 = load ptr, ptr %dataVoidPtr.addr, align 8, !dbg !254
  store ptr %0, ptr %dataPtr, align 8, !dbg !253
  call void @llvm.dbg.declare(metadata ptr %data, metadata !255, metadata !DIExpression()), !dbg !256
  %1 = load ptr, ptr %dataPtr, align 8, !dbg !257
  %2 = load ptr, ptr %1, align 8, !dbg !258
  store ptr %2, ptr %data, align 8, !dbg !256
  ret void, !dbg !259
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_goodB2GSink(ptr noundef %dataVoidPtr) #0 !dbg !260 {
entry:
  %dataVoidPtr.addr = alloca ptr, align 8
  %dataPtr = alloca ptr, align 8
  %data = alloca ptr, align 8
  store ptr %dataVoidPtr, ptr %dataVoidPtr.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %dataVoidPtr.addr, metadata !261, metadata !DIExpression()), !dbg !262
  call void @llvm.dbg.declare(metadata ptr %dataPtr, metadata !263, metadata !DIExpression()), !dbg !264
  %0 = load ptr, ptr %dataVoidPtr.addr, align 8, !dbg !265
  store ptr %0, ptr %dataPtr, align 8, !dbg !264
  call void @llvm.dbg.declare(metadata ptr %data, metadata !266, metadata !DIExpression()), !dbg !267
  %1 = load ptr, ptr %dataPtr, align 8, !dbg !268
  %2 = load ptr, ptr %1, align 8, !dbg !269
  store ptr %2, ptr %data, align 8, !dbg !267
  %3 = load ptr, ptr %data, align 8, !dbg !270
  call void @free(ptr noundef %3) #6, !dbg !271
  ret void, !dbg !272
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64_bad() #0 !dbg !273 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !274, metadata !DIExpression()), !dbg !275
  store ptr null, ptr %data, align 8, !dbg !276
  %call = call ptr @NFRMALLOC(i32 noundef 800), !dbg !277
  store ptr %call, ptr %data, align 8, !dbg !278
  %0 = load ptr, ptr %data, align 8, !dbg !279
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %0, i64 0, !dbg !279
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !280
  store i32 0, ptr %intOne, align 4, !dbg !281
  %1 = load ptr, ptr %data, align 8, !dbg !282
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %1, i64 0, !dbg !282
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !283
  store i32 0, ptr %intTwo, align 4, !dbg !284
  %2 = load ptr, ptr %data, align 8, !dbg !285
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !285
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !286
  call void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_badSink(ptr noundef %data), !dbg !287
  ret void, !dbg !288
}

declare void @printStructLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64_good() #0 !dbg !289 {
entry:
  call void @goodG2B(), !dbg !290
  call void @goodB2G(), !dbg !291
  ret void, !dbg !292
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !293 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !297, metadata !DIExpression()), !dbg !298
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !299, metadata !DIExpression()), !dbg !300
  %call = call i64 @time(ptr noundef null) #6, !dbg !301
  %conv = trunc i64 %call to i32, !dbg !302
  call void @srand(i32 noundef %conv) #6, !dbg !303
  call void @printLine(ptr noundef @.str.3), !dbg !304
  call void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64_good(), !dbg !305
  call void @printLine(ptr noundef @.str.4), !dbg !306
  call void @printLine(ptr noundef @.str.5), !dbg !307
  call void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64_bad(), !dbg !308
  call void @printLine(ptr noundef @.str.6), !dbg !309
  ret i32 0, !dbg !310
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !311 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !312, metadata !DIExpression()), !dbg !313
  store ptr null, ptr %data, align 8, !dbg !314
  %0 = alloca i8, i64 800, align 16, !dbg !315
  store ptr %0, ptr %data, align 8, !dbg !316
  %1 = load ptr, ptr %data, align 8, !dbg !317
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %1, i64 0, !dbg !317
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !318
  store i32 0, ptr %intOne, align 4, !dbg !319
  %2 = load ptr, ptr %data, align 8, !dbg !320
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !320
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !321
  store i32 0, ptr %intTwo, align 4, !dbg !322
  %3 = load ptr, ptr %data, align 8, !dbg !323
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !323
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !324
  call void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_goodG2BSink(ptr noundef %data), !dbg !325
  ret void, !dbg !326
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !327 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !328, metadata !DIExpression()), !dbg !329
  store ptr null, ptr %data, align 8, !dbg !330
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !331
  store ptr %call, ptr %data, align 8, !dbg !332
  %0 = load ptr, ptr %data, align 8, !dbg !333
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %0, i64 0, !dbg !333
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !334
  store i32 0, ptr %intOne, align 4, !dbg !335
  %1 = load ptr, ptr %data, align 8, !dbg !336
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %1, i64 0, !dbg !336
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !337
  store i32 0, ptr %intTwo, align 4, !dbg !338
  %2 = load ptr, ptr %data, align 8, !dbg !339
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !339
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !340
  call void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_goodB2GSink(ptr noundef %data), !dbg !341
  ret void, !dbg !342
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!38}
!llvm.module.flags = !{!54, !55, !56, !57, !58, !59, !60}
!llvm.ident = !{!61}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 136, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tmem_leak/CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64a.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "9d75f81ec96585a60453ea22ba97233b")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 18)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 138, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 16)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 141, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 17)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 143, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 15)
!38 = distinct !DICompileUnit(language: DW_LANG_C11, file: !39, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !40, globals: !53, splitDebugInlining: false, nameTableKind: None)
!39 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64a.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "9d75f81ec96585a60453ea22ba97233b")
!40 = !{!41, !42, !43, !50, !52}
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64)
!43 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64)
!44 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !45, line: 96, size: 64, elements: !46)
!45 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!46 = !{!47, !49}
!47 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !44, file: !45, line: 98, baseType: !48, size: 32)
!48 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !44, file: !45, line: 99, baseType: !48, size: 32, offset: 32)
!50 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64)
!51 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !45, line: 100, baseType: !44)
!52 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!53 = !{!0, !7, !12, !17, !23, !28, !33}
!54 = !{i32 7, !"Dwarf Version", i32 5}
!55 = !{i32 2, !"Debug Info Version", i32 3}
!56 = !{i32 1, !"wchar_size", i32 4}
!57 = !{i32 8, !"PIC Level", i32 2}
!58 = !{i32 7, !"PIE Level", i32 2}
!59 = !{i32 7, !"uwtable", i32 2}
!60 = !{i32 7, !"frame-pointer", i32 2}
!61 = !{!"clang version 16.0.0"}
!62 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !63, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!63 = !DISubroutineType(types: !64)
!64 = !{null, !41, !41}
!65 = !{}
!66 = !DILocalVariable(name: "p", arg: 1, scope: !62, file: !2, line: 4, type: !41)
!67 = !DILocation(line: 4, column: 22, scope: !62)
!68 = !DILocalVariable(name: "q", arg: 2, scope: !62, file: !2, line: 4, type: !41)
!69 = !DILocation(line: 4, column: 31, scope: !62)
!70 = !DILocation(line: 5, column: 3, scope: !62)
!71 = !DILocation(line: 6, column: 1, scope: !62)
!72 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !63, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!73 = !DILocalVariable(name: "p", arg: 1, scope: !72, file: !2, line: 8, type: !41)
!74 = !DILocation(line: 8, column: 25, scope: !72)
!75 = !DILocalVariable(name: "q", arg: 2, scope: !72, file: !2, line: 8, type: !41)
!76 = !DILocation(line: 8, column: 34, scope: !72)
!77 = !DILocation(line: 9, column: 3, scope: !72)
!78 = !DILocation(line: 10, column: 1, scope: !72)
!79 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !63, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!80 = !DILocalVariable(name: "p", arg: 1, scope: !79, file: !2, line: 12, type: !41)
!81 = !DILocation(line: 12, column: 21, scope: !79)
!82 = !DILocalVariable(name: "q", arg: 2, scope: !79, file: !2, line: 12, type: !41)
!83 = !DILocation(line: 12, column: 30, scope: !79)
!84 = !DILocation(line: 13, column: 3, scope: !79)
!85 = !DILocation(line: 14, column: 1, scope: !79)
!86 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !63, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!87 = !DILocalVariable(name: "p", arg: 1, scope: !86, file: !2, line: 16, type: !41)
!88 = !DILocation(line: 16, column: 20, scope: !86)
!89 = !DILocalVariable(name: "q", arg: 2, scope: !86, file: !2, line: 16, type: !41)
!90 = !DILocation(line: 16, column: 29, scope: !86)
!91 = !DILocation(line: 17, column: 3, scope: !86)
!92 = !DILocation(line: 18, column: 1, scope: !86)
!93 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !63, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!94 = !DILocalVariable(name: "p", arg: 1, scope: !93, file: !2, line: 20, type: !41)
!95 = !DILocation(line: 20, column: 34, scope: !93)
!96 = !DILocalVariable(name: "q", arg: 2, scope: !93, file: !2, line: 20, type: !41)
!97 = !DILocation(line: 20, column: 43, scope: !93)
!98 = !DILocation(line: 21, column: 3, scope: !93)
!99 = !DILocation(line: 22, column: 1, scope: !93)
!100 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !63, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!101 = !DILocalVariable(name: "p", arg: 1, scope: !100, file: !2, line: 24, type: !41)
!102 = !DILocation(line: 24, column: 33, scope: !100)
!103 = !DILocalVariable(name: "q", arg: 2, scope: !100, file: !2, line: 24, type: !41)
!104 = !DILocation(line: 24, column: 42, scope: !100)
!105 = !DILocation(line: 25, column: 3, scope: !100)
!106 = !DILocation(line: 26, column: 1, scope: !100)
!107 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !108, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!108 = !DISubroutineType(types: !109)
!109 = !{!41, !48}
!110 = !DILocalVariable(name: "n", arg: 1, scope: !107, file: !2, line: 29, type: !48)
!111 = !DILocation(line: 29, column: 22, scope: !107)
!112 = !DILocation(line: 30, column: 17, scope: !107)
!113 = !DILocation(line: 30, column: 10, scope: !107)
!114 = !DILocation(line: 30, column: 3, scope: !107)
!115 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !108, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!116 = !DILocalVariable(name: "n", arg: 1, scope: !115, file: !2, line: 33, type: !48)
!117 = !DILocation(line: 33, column: 28, scope: !115)
!118 = !DILocation(line: 34, column: 19, scope: !115)
!119 = !DILocation(line: 34, column: 12, scope: !115)
!120 = !DILocation(line: 34, column: 5, scope: !115)
!121 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !108, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!122 = !DILocalVariable(name: "n", arg: 1, scope: !121, file: !2, line: 37, type: !48)
!123 = !DILocation(line: 37, column: 21, scope: !121)
!124 = !DILocation(line: 38, column: 17, scope: !121)
!125 = !DILocation(line: 38, column: 10, scope: !121)
!126 = !DILocation(line: 38, column: 3, scope: !121)
!127 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !108, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!128 = !DILocalVariable(name: "n", arg: 1, scope: !127, file: !2, line: 41, type: !48)
!129 = !DILocation(line: 41, column: 21, scope: !127)
!130 = !DILocation(line: 42, column: 17, scope: !127)
!131 = !DILocation(line: 42, column: 10, scope: !127)
!132 = !DILocation(line: 42, column: 3, scope: !127)
!133 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !108, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!134 = !DILocalVariable(name: "n", arg: 1, scope: !133, file: !2, line: 45, type: !48)
!135 = !DILocation(line: 45, column: 21, scope: !133)
!136 = !DILocation(line: 46, column: 17, scope: !133)
!137 = !DILocation(line: 46, column: 10, scope: !133)
!138 = !DILocation(line: 46, column: 3, scope: !133)
!139 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !108, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!140 = !DILocalVariable(name: "n", arg: 1, scope: !139, file: !2, line: 49, type: !48)
!141 = !DILocation(line: 49, column: 21, scope: !139)
!142 = !DILocation(line: 50, column: 17, scope: !139)
!143 = !DILocation(line: 50, column: 10, scope: !139)
!144 = !DILocation(line: 50, column: 3, scope: !139)
!145 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !108, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!146 = !DILocalVariable(name: "n", arg: 1, scope: !145, file: !2, line: 53, type: !48)
!147 = !DILocation(line: 53, column: 21, scope: !145)
!148 = !DILocation(line: 54, column: 17, scope: !145)
!149 = !DILocation(line: 54, column: 10, scope: !145)
!150 = !DILocation(line: 54, column: 3, scope: !145)
!151 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !108, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!152 = !DILocalVariable(name: "n", arg: 1, scope: !151, file: !2, line: 57, type: !48)
!153 = !DILocation(line: 57, column: 18, scope: !151)
!154 = !DILocation(line: 58, column: 17, scope: !151)
!155 = !DILocation(line: 58, column: 10, scope: !151)
!156 = !DILocation(line: 58, column: 3, scope: !151)
!157 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !158, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!158 = !DISubroutineType(types: !159)
!159 = !{null, !48, !48}
!160 = !DILocalVariable(name: "id", arg: 1, scope: !157, file: !2, line: 67, type: !48)
!161 = !DILocation(line: 67, column: 20, scope: !157)
!162 = !DILocalVariable(name: "flags", arg: 2, scope: !157, file: !2, line: 67, type: !48)
!163 = !DILocation(line: 67, column: 28, scope: !157)
!164 = !DILocation(line: 68, column: 3, scope: !157)
!165 = !DILocation(line: 69, column: 1, scope: !157)
!166 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !167, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!167 = !DISubroutineType(types: !168)
!168 = !{null, !48, !169}
!169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!170 = !DILocalVariable(name: "thdid", arg: 1, scope: !166, file: !2, line: 79, type: !48)
!171 = !DILocation(line: 79, column: 21, scope: !166)
!172 = !DILocalVariable(name: "cxt", arg: 2, scope: !166, file: !2, line: 79, type: !169)
!173 = !DILocation(line: 79, column: 34, scope: !166)
!174 = !DILocation(line: 81, column: 1, scope: !166)
!175 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !167, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!176 = !DILocalVariable(name: "thdid", arg: 1, scope: !175, file: !2, line: 82, type: !48)
!177 = !DILocation(line: 82, column: 21, scope: !175)
!178 = !DILocalVariable(name: "cxt", arg: 2, scope: !175, file: !2, line: 82, type: !169)
!179 = !DILocation(line: 82, column: 33, scope: !175)
!180 = !DILocation(line: 84, column: 1, scope: !175)
!181 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !182, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!182 = !DISubroutineType(types: !183)
!183 = !{null, !48, !169, !169}
!184 = !DILocalVariable(name: "thdid", arg: 1, scope: !181, file: !2, line: 85, type: !48)
!185 = !DILocation(line: 85, column: 26, scope: !181)
!186 = !DILocalVariable(name: "cxt", arg: 2, scope: !181, file: !2, line: 85, type: !169)
!187 = !DILocation(line: 85, column: 38, scope: !181)
!188 = !DILocalVariable(name: "lev", arg: 3, scope: !181, file: !2, line: 85, type: !169)
!189 = !DILocation(line: 85, column: 49, scope: !181)
!190 = !DILocation(line: 87, column: 1, scope: !181)
!191 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !192, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!192 = !DISubroutineType(types: !193)
!193 = !{null, !169}
!194 = !DILocalVariable(name: "lockname", arg: 1, scope: !191, file: !2, line: 89, type: !169)
!195 = !DILocation(line: 89, column: 17, scope: !191)
!196 = !DILocation(line: 91, column: 1, scope: !191)
!197 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !192, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!198 = !DILocalVariable(name: "str", arg: 1, scope: !197, file: !2, line: 93, type: !169)
!199 = !DILocation(line: 93, column: 18, scope: !197)
!200 = !DILocation(line: 94, column: 18, scope: !197)
!201 = !DILocation(line: 94, column: 3, scope: !197)
!202 = !DILocation(line: 95, column: 3, scope: !197)
!203 = !DILocation(line: 96, column: 3, scope: !197)
!204 = !DILocation(line: 97, column: 1, scope: !197)
!205 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !206, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!206 = !DISubroutineType(types: !207)
!207 = !{!41, !208}
!208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!209 = !DILocalVariable(name: "p", arg: 1, scope: !205, file: !2, line: 100, type: !208)
!210 = !DILocation(line: 100, column: 24, scope: !205)
!211 = !DILocation(line: 101, column: 6, scope: !205)
!212 = !DILocation(line: 101, column: 8, scope: !205)
!213 = !DILocation(line: 102, column: 1, scope: !205)
!214 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !206, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!215 = !DILocalVariable(name: "p", arg: 1, scope: !214, file: !2, line: 104, type: !208)
!216 = !DILocation(line: 104, column: 20, scope: !214)
!217 = !DILocation(line: 105, column: 6, scope: !214)
!218 = !DILocation(line: 105, column: 8, scope: !214)
!219 = !DILocation(line: 106, column: 1, scope: !214)
!220 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !206, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!221 = !DILocalVariable(name: "p", arg: 1, scope: !220, file: !2, line: 110, type: !208)
!222 = !DILocation(line: 110, column: 22, scope: !220)
!223 = !DILocation(line: 111, column: 10, scope: !220)
!224 = !DILocation(line: 111, column: 5, scope: !220)
!225 = !DILocation(line: 112, column: 1, scope: !220)
!226 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !206, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!227 = !DILocalVariable(name: "p", arg: 1, scope: !226, file: !2, line: 115, type: !208)
!228 = !DILocation(line: 115, column: 24, scope: !226)
!229 = !DILocation(line: 116, column: 10, scope: !226)
!230 = !DILocation(line: 116, column: 5, scope: !226)
!231 = !DILocation(line: 117, column: 1, scope: !226)
!232 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !233, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!233 = !DISubroutineType(types: !234)
!234 = !{null}
!235 = !DILocation(line: 135, column: 20, scope: !232)
!236 = distinct !DISubprogram(name: "CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_badSink", scope: !19, file: !19, line: 24, type: !237, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!237 = !DISubroutineType(types: !238)
!238 = !{null, !41}
!239 = !DILocalVariable(name: "dataVoidPtr", arg: 1, scope: !236, file: !19, line: 24, type: !41)
!240 = !DILocation(line: 24, column: 73, scope: !236)
!241 = !DILocalVariable(name: "dataPtr", scope: !236, file: !19, line: 27, type: !42)
!242 = !DILocation(line: 27, column: 31, scope: !236)
!243 = !DILocation(line: 27, column: 68, scope: !236)
!244 = !DILocalVariable(name: "data", scope: !236, file: !19, line: 29, type: !43)
!245 = !DILocation(line: 29, column: 29, scope: !236)
!246 = !DILocation(line: 29, column: 38, scope: !236)
!247 = !DILocation(line: 29, column: 37, scope: !236)
!248 = !DILocation(line: 32, column: 1, scope: !236)
!249 = distinct !DISubprogram(name: "CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_goodG2BSink", scope: !19, file: !19, line: 39, type: !237, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!250 = !DILocalVariable(name: "dataVoidPtr", arg: 1, scope: !249, file: !19, line: 39, type: !41)
!251 = !DILocation(line: 39, column: 77, scope: !249)
!252 = !DILocalVariable(name: "dataPtr", scope: !249, file: !19, line: 42, type: !42)
!253 = !DILocation(line: 42, column: 31, scope: !249)
!254 = !DILocation(line: 42, column: 68, scope: !249)
!255 = !DILocalVariable(name: "data", scope: !249, file: !19, line: 44, type: !43)
!256 = !DILocation(line: 44, column: 29, scope: !249)
!257 = !DILocation(line: 44, column: 38, scope: !249)
!258 = !DILocation(line: 44, column: 37, scope: !249)
!259 = !DILocation(line: 47, column: 1, scope: !249)
!260 = distinct !DISubprogram(name: "CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_goodB2GSink", scope: !19, file: !19, line: 50, type: !237, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!261 = !DILocalVariable(name: "dataVoidPtr", arg: 1, scope: !260, file: !19, line: 50, type: !41)
!262 = !DILocation(line: 50, column: 77, scope: !260)
!263 = !DILocalVariable(name: "dataPtr", scope: !260, file: !19, line: 53, type: !42)
!264 = !DILocation(line: 53, column: 31, scope: !260)
!265 = !DILocation(line: 53, column: 68, scope: !260)
!266 = !DILocalVariable(name: "data", scope: !260, file: !19, line: 55, type: !43)
!267 = !DILocation(line: 55, column: 29, scope: !260)
!268 = !DILocation(line: 55, column: 38, scope: !260)
!269 = !DILocation(line: 55, column: 37, scope: !260)
!270 = !DILocation(line: 57, column: 10, scope: !260)
!271 = !DILocation(line: 57, column: 5, scope: !260)
!272 = !DILocation(line: 58, column: 1, scope: !260)
!273 = distinct !DISubprogram(name: "CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64_bad", scope: !19, file: !19, line: 67, type: !233, scopeLine: 68, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!274 = !DILocalVariable(name: "data", scope: !273, file: !19, line: 69, type: !43)
!275 = !DILocation(line: 69, column: 29, scope: !273)
!276 = !DILocation(line: 70, column: 10, scope: !273)
!277 = !DILocation(line: 72, column: 37, scope: !273)
!278 = !DILocation(line: 72, column: 10, scope: !273)
!279 = !DILocation(line: 74, column: 5, scope: !273)
!280 = !DILocation(line: 74, column: 13, scope: !273)
!281 = !DILocation(line: 74, column: 20, scope: !273)
!282 = !DILocation(line: 75, column: 5, scope: !273)
!283 = !DILocation(line: 75, column: 13, scope: !273)
!284 = !DILocation(line: 75, column: 20, scope: !273)
!285 = !DILocation(line: 76, column: 39, scope: !273)
!286 = !DILocation(line: 76, column: 5, scope: !273)
!287 = !DILocation(line: 77, column: 5, scope: !273)
!288 = !DILocation(line: 78, column: 1, scope: !273)
!289 = distinct !DISubprogram(name: "CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64_good", scope: !19, file: !19, line: 116, type: !233, scopeLine: 117, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!290 = !DILocation(line: 118, column: 5, scope: !289)
!291 = !DILocation(line: 119, column: 5, scope: !289)
!292 = !DILocation(line: 120, column: 1, scope: !289)
!293 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 131, type: !294, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !65)
!294 = !DISubroutineType(types: !295)
!295 = !{!48, !48, !296}
!296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !169, size: 64)
!297 = !DILocalVariable(name: "argc", arg: 1, scope: !293, file: !19, line: 131, type: !48)
!298 = !DILocation(line: 131, column: 14, scope: !293)
!299 = !DILocalVariable(name: "argv", arg: 2, scope: !293, file: !19, line: 131, type: !296)
!300 = !DILocation(line: 131, column: 27, scope: !293)
!301 = !DILocation(line: 134, column: 22, scope: !293)
!302 = !DILocation(line: 134, column: 12, scope: !293)
!303 = !DILocation(line: 134, column: 5, scope: !293)
!304 = !DILocation(line: 136, column: 5, scope: !293)
!305 = !DILocation(line: 137, column: 5, scope: !293)
!306 = !DILocation(line: 138, column: 5, scope: !293)
!307 = !DILocation(line: 141, column: 5, scope: !293)
!308 = !DILocation(line: 142, column: 5, scope: !293)
!309 = !DILocation(line: 143, column: 5, scope: !293)
!310 = !DILocation(line: 145, column: 5, scope: !293)
!311 = distinct !DISubprogram(name: "goodG2B", scope: !19, file: !19, line: 87, type: !233, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !65)
!312 = !DILocalVariable(name: "data", scope: !311, file: !19, line: 89, type: !43)
!313 = !DILocation(line: 89, column: 29, scope: !311)
!314 = !DILocation(line: 90, column: 10, scope: !311)
!315 = !DILocation(line: 92, column: 37, scope: !311)
!316 = !DILocation(line: 92, column: 10, scope: !311)
!317 = !DILocation(line: 94, column: 5, scope: !311)
!318 = !DILocation(line: 94, column: 13, scope: !311)
!319 = !DILocation(line: 94, column: 20, scope: !311)
!320 = !DILocation(line: 95, column: 5, scope: !311)
!321 = !DILocation(line: 95, column: 13, scope: !311)
!322 = !DILocation(line: 95, column: 20, scope: !311)
!323 = !DILocation(line: 96, column: 39, scope: !311)
!324 = !DILocation(line: 96, column: 5, scope: !311)
!325 = !DILocation(line: 97, column: 5, scope: !311)
!326 = !DILocation(line: 98, column: 1, scope: !311)
!327 = distinct !DISubprogram(name: "goodB2G", scope: !19, file: !19, line: 103, type: !233, scopeLine: 104, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !65)
!328 = !DILocalVariable(name: "data", scope: !327, file: !19, line: 105, type: !43)
!329 = !DILocation(line: 105, column: 29, scope: !327)
!330 = !DILocation(line: 106, column: 10, scope: !327)
!331 = !DILocation(line: 108, column: 37, scope: !327)
!332 = !DILocation(line: 108, column: 10, scope: !327)
!333 = !DILocation(line: 110, column: 5, scope: !327)
!334 = !DILocation(line: 110, column: 13, scope: !327)
!335 = !DILocation(line: 110, column: 20, scope: !327)
!336 = !DILocation(line: 111, column: 5, scope: !327)
!337 = !DILocation(line: 111, column: 13, scope: !327)
!338 = !DILocation(line: 111, column: 20, scope: !327)
!339 = !DILocation(line: 112, column: 39, scope: !327)
!340 = !DILocation(line: 112, column: 5, scope: !327)
!341 = !DILocation(line: 113, column: 5, scope: !327)
!342 = !DILocation(line: 114, column: 1, scope: !327)
