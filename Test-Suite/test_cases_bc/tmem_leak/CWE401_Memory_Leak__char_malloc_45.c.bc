; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tmem_leak/CWE401_Memory_Leak__char_malloc_45.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__char_malloc_45.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [9 x i8] c"A String\00", align 1, !dbg !17
@CWE401_Memory_Leak__char_malloc_45_badData = internal global ptr null, align 8, !dbg !23
@.str.4 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !32
@.str.5 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !37
@.str.6 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !42
@.str.7 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !47
@CWE401_Memory_Leak__char_malloc_45_goodG2BData = internal global ptr null, align 8, !dbg !52
@CWE401_Memory_Leak__char_malloc_45_goodB2GData = internal global ptr null, align 8, !dbg !54

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !64 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !68, metadata !DIExpression()), !dbg !69
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !70, metadata !DIExpression()), !dbg !71
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !72
  ret void, !dbg !73
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !74 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !75, metadata !DIExpression()), !dbg !76
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !77, metadata !DIExpression()), !dbg !78
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !79
  ret void, !dbg !80
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !81 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !82, metadata !DIExpression()), !dbg !83
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !84, metadata !DIExpression()), !dbg !85
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !86
  ret void, !dbg !87
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !88 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !89, metadata !DIExpression()), !dbg !90
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !91, metadata !DIExpression()), !dbg !92
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !93
  ret void, !dbg !94
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !95 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !96, metadata !DIExpression()), !dbg !97
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !98, metadata !DIExpression()), !dbg !99
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !100
  ret void, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !102 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !103, metadata !DIExpression()), !dbg !104
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !107
  ret void, !dbg !108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !109 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %0 = load i32, ptr %n.addr, align 4, !dbg !115
  %conv = sext i32 %0 to i64, !dbg !115
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !116
  ret ptr %call, !dbg !117
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !118 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !119, metadata !DIExpression()), !dbg !120
  %0 = load i32, ptr %n.addr, align 4, !dbg !121
  %conv = sext i32 %0 to i64, !dbg !121
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !122
  ret ptr %call, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !124 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !125, metadata !DIExpression()), !dbg !126
  %0 = load i32, ptr %n.addr, align 4, !dbg !127
  %conv = sext i32 %0 to i64, !dbg !127
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !128
  ret ptr %call, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !130 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !131, metadata !DIExpression()), !dbg !132
  %0 = load i32, ptr %n.addr, align 4, !dbg !133
  %conv = sext i32 %0 to i64, !dbg !133
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !134
  ret ptr %call, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !136 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !137, metadata !DIExpression()), !dbg !138
  %0 = load i32, ptr %n.addr, align 4, !dbg !139
  %conv = sext i32 %0 to i64, !dbg !139
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !140
  ret ptr %call, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !142 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !143, metadata !DIExpression()), !dbg !144
  %0 = load i32, ptr %n.addr, align 4, !dbg !145
  %conv = sext i32 %0 to i64, !dbg !145
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !146
  ret ptr %call, !dbg !147
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !148 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !149, metadata !DIExpression()), !dbg !150
  %0 = load i32, ptr %n.addr, align 4, !dbg !151
  %conv = sext i32 %0 to i64, !dbg !151
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !152
  ret ptr %call, !dbg !153
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !154 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !155, metadata !DIExpression()), !dbg !156
  %0 = load i32, ptr %n.addr, align 4, !dbg !157
  %conv = sext i32 %0 to i64, !dbg !157
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !158
  ret ptr %call, !dbg !159
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !160 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !163, metadata !DIExpression()), !dbg !164
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !165, metadata !DIExpression()), !dbg !166
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !167
  ret void, !dbg !168
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !169 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !172, metadata !DIExpression()), !dbg !173
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !174, metadata !DIExpression()), !dbg !175
  ret void, !dbg !176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !177 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !178, metadata !DIExpression()), !dbg !179
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !180, metadata !DIExpression()), !dbg !181
  ret void, !dbg !182
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !183 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !186, metadata !DIExpression()), !dbg !187
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !188, metadata !DIExpression()), !dbg !189
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !190, metadata !DIExpression()), !dbg !191
  ret void, !dbg !192
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !193 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !196, metadata !DIExpression()), !dbg !197
  ret void, !dbg !198
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !199 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !200, metadata !DIExpression()), !dbg !201
  %0 = load ptr, ptr %str.addr, align 8, !dbg !202
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !203
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !204
  %call2 = call i32 @getchar(), !dbg !205
  ret void, !dbg !206
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !207 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !211, metadata !DIExpression()), !dbg !212
  %0 = load ptr, ptr %p.addr, align 8, !dbg !213
  store i32 0, ptr %0, align 4, !dbg !214
  %1 = load ptr, ptr %retval, align 8, !dbg !215
  ret ptr %1, !dbg !215
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !216 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !217, metadata !DIExpression()), !dbg !218
  %0 = load ptr, ptr %p.addr, align 8, !dbg !219
  store i32 0, ptr %0, align 4, !dbg !220
  %1 = load ptr, ptr %retval, align 8, !dbg !221
  ret ptr %1, !dbg !221
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !222 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !223, metadata !DIExpression()), !dbg !224
  %0 = load ptr, ptr %p.addr, align 8, !dbg !225
  call void @free(ptr noundef %0) #7, !dbg !226
  %1 = load ptr, ptr %retval, align 8, !dbg !227
  ret ptr %1, !dbg !227
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !228 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !229, metadata !DIExpression()), !dbg !230
  %0 = load ptr, ptr %p.addr, align 8, !dbg !231
  call void @free(ptr noundef %0) #7, !dbg !232
  %1 = load ptr, ptr %retval, align 8, !dbg !233
  ret ptr %1, !dbg !233
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !234 {
entry:
  ret void, !dbg !237
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__char_malloc_45_bad() #0 !dbg !238 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !239, metadata !DIExpression()), !dbg !240
  store ptr null, ptr %data, align 8, !dbg !241
  %call = call ptr @NFRMALLOC(i32 noundef 100), !dbg !242
  store ptr %call, ptr %data, align 8, !dbg !243
  %0 = load ptr, ptr %data, align 8, !dbg !244
  %cmp = icmp eq ptr %0, null, !dbg !246
  br i1 %cmp, label %if.then, label %if.end, !dbg !247

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !248
  unreachable, !dbg !248

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !250
  %call1 = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !251
  %2 = load ptr, ptr %data, align 8, !dbg !252
  call void @printLine(ptr noundef %2), !dbg !253
  %3 = load ptr, ptr %data, align 8, !dbg !254
  store ptr %3, ptr @CWE401_Memory_Leak__char_malloc_45_badData, align 8, !dbg !255
  call void @badSink(), !dbg !256
  ret void, !dbg !257
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__char_malloc_45_good() #0 !dbg !258 {
entry:
  call void @goodG2B(), !dbg !259
  call void @goodB2G(), !dbg !260
  ret void, !dbg !261
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !262 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !266, metadata !DIExpression()), !dbg !267
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !268, metadata !DIExpression()), !dbg !269
  %call = call i64 @time(ptr noundef null) #7, !dbg !270
  %conv = trunc i64 %call to i32, !dbg !271
  call void @srand(i32 noundef %conv) #7, !dbg !272
  call void @printLine(ptr noundef @.str.4), !dbg !273
  call void @CWE401_Memory_Leak__char_malloc_45_good(), !dbg !274
  call void @printLine(ptr noundef @.str.5), !dbg !275
  call void @printLine(ptr noundef @.str.6), !dbg !276
  call void @CWE401_Memory_Leak__char_malloc_45_bad(), !dbg !277
  call void @printLine(ptr noundef @.str.7), !dbg !278
  ret i32 0, !dbg !279
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @badSink() #0 !dbg !280 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !281, metadata !DIExpression()), !dbg !282
  %0 = load ptr, ptr @CWE401_Memory_Leak__char_malloc_45_badData, align 8, !dbg !283
  store ptr %0, ptr %data, align 8, !dbg !282
  ret void, !dbg !284
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !285 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !286, metadata !DIExpression()), !dbg !287
  store ptr null, ptr %data, align 8, !dbg !288
  %0 = alloca i8, i64 100, align 16, !dbg !289
  store ptr %0, ptr %data, align 8, !dbg !290
  %1 = load ptr, ptr %data, align 8, !dbg !291
  %call = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !292
  %2 = load ptr, ptr %data, align 8, !dbg !293
  call void @printLine(ptr noundef %2), !dbg !294
  %3 = load ptr, ptr %data, align 8, !dbg !295
  store ptr %3, ptr @CWE401_Memory_Leak__char_malloc_45_goodG2BData, align 8, !dbg !296
  call void @goodG2BSink(), !dbg !297
  ret void, !dbg !298
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2BSink() #0 !dbg !299 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !300, metadata !DIExpression()), !dbg !301
  %0 = load ptr, ptr @CWE401_Memory_Leak__char_malloc_45_goodG2BData, align 8, !dbg !302
  store ptr %0, ptr %data, align 8, !dbg !301
  ret void, !dbg !303
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !304 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !305, metadata !DIExpression()), !dbg !306
  store ptr null, ptr %data, align 8, !dbg !307
  %call = call ptr @SAFEMALLOC(i32 noundef 100), !dbg !308
  store ptr %call, ptr %data, align 8, !dbg !309
  %0 = load ptr, ptr %data, align 8, !dbg !310
  %cmp = icmp eq ptr %0, null, !dbg !312
  br i1 %cmp, label %if.then, label %if.end, !dbg !313

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !314
  unreachable, !dbg !314

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !316
  %call1 = call ptr @strcpy(ptr noundef %1, ptr noundef @.str.3) #7, !dbg !317
  %2 = load ptr, ptr %data, align 8, !dbg !318
  call void @printLine(ptr noundef %2), !dbg !319
  %3 = load ptr, ptr %data, align 8, !dbg !320
  store ptr %3, ptr @CWE401_Memory_Leak__char_malloc_45_goodB2GData, align 8, !dbg !321
  call void @goodB2GSink(), !dbg !322
  ret void, !dbg !323
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2GSink() #0 !dbg !324 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !325, metadata !DIExpression()), !dbg !326
  %0 = load ptr, ptr @CWE401_Memory_Leak__char_malloc_45_goodB2GData, align 8, !dbg !327
  store ptr %0, ptr %data, align 8, !dbg !326
  %1 = load ptr, ptr %data, align 8, !dbg !328
  call void @free(ptr noundef %1) #7, !dbg !329
  ret void, !dbg !330
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!25}
!llvm.module.flags = !{!56, !57, !58, !59, !60, !61, !62}
!llvm.ident = !{!63}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 43, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tmem_leak/CWE401_Memory_Leak__char_malloc_45.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "3ee1dd0ae996f9b0f6ea9f59f9872084")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 72, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 9)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__char_malloc_45_badData", scope: !25, file: !19, line: 22, type: !29, isLocal: true, isDefinition: true)
!25 = distinct !DICompileUnit(language: DW_LANG_C11, file: !26, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !27, globals: !31, splitDebugInlining: false, nameTableKind: None)
!26 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__char_malloc_45.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "3ee1dd0ae996f9b0f6ea9f59f9872084")
!27 = !{!28, !29, !30}
!28 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!30 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!31 = !{!0, !7, !12, !17, !32, !37, !42, !47, !23, !52, !54}
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(scope: null, file: !19, line: 115, type: !34, isLocal: true, isDefinition: true)
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !35)
!35 = !{!36}
!36 = !DISubrange(count: 18)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(scope: null, file: !19, line: 117, type: !39, isLocal: true, isDefinition: true)
!39 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !40)
!40 = !{!41}
!41 = !DISubrange(count: 16)
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(scope: null, file: !19, line: 120, type: !44, isLocal: true, isDefinition: true)
!44 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !45)
!45 = !{!46}
!46 = !DISubrange(count: 17)
!47 = !DIGlobalVariableExpression(var: !48, expr: !DIExpression())
!48 = distinct !DIGlobalVariable(scope: null, file: !19, line: 122, type: !49, isLocal: true, isDefinition: true)
!49 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !50)
!50 = !{!51}
!51 = !DISubrange(count: 15)
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__char_malloc_45_goodG2BData", scope: !25, file: !19, line: 23, type: !29, isLocal: true, isDefinition: true)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__char_malloc_45_goodB2GData", scope: !25, file: !19, line: 24, type: !29, isLocal: true, isDefinition: true)
!56 = !{i32 7, !"Dwarf Version", i32 5}
!57 = !{i32 2, !"Debug Info Version", i32 3}
!58 = !{i32 1, !"wchar_size", i32 4}
!59 = !{i32 8, !"PIC Level", i32 2}
!60 = !{i32 7, !"PIE Level", i32 2}
!61 = !{i32 7, !"uwtable", i32 2}
!62 = !{i32 7, !"frame-pointer", i32 2}
!63 = !{!"clang version 16.0.0"}
!64 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !65, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!65 = !DISubroutineType(types: !66)
!66 = !{null, !28, !28}
!67 = !{}
!68 = !DILocalVariable(name: "p", arg: 1, scope: !64, file: !2, line: 4, type: !28)
!69 = !DILocation(line: 4, column: 22, scope: !64)
!70 = !DILocalVariable(name: "q", arg: 2, scope: !64, file: !2, line: 4, type: !28)
!71 = !DILocation(line: 4, column: 31, scope: !64)
!72 = !DILocation(line: 5, column: 3, scope: !64)
!73 = !DILocation(line: 6, column: 1, scope: !64)
!74 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !65, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!75 = !DILocalVariable(name: "p", arg: 1, scope: !74, file: !2, line: 8, type: !28)
!76 = !DILocation(line: 8, column: 25, scope: !74)
!77 = !DILocalVariable(name: "q", arg: 2, scope: !74, file: !2, line: 8, type: !28)
!78 = !DILocation(line: 8, column: 34, scope: !74)
!79 = !DILocation(line: 9, column: 3, scope: !74)
!80 = !DILocation(line: 10, column: 1, scope: !74)
!81 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !65, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!82 = !DILocalVariable(name: "p", arg: 1, scope: !81, file: !2, line: 12, type: !28)
!83 = !DILocation(line: 12, column: 21, scope: !81)
!84 = !DILocalVariable(name: "q", arg: 2, scope: !81, file: !2, line: 12, type: !28)
!85 = !DILocation(line: 12, column: 30, scope: !81)
!86 = !DILocation(line: 13, column: 3, scope: !81)
!87 = !DILocation(line: 14, column: 1, scope: !81)
!88 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !65, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!89 = !DILocalVariable(name: "p", arg: 1, scope: !88, file: !2, line: 16, type: !28)
!90 = !DILocation(line: 16, column: 20, scope: !88)
!91 = !DILocalVariable(name: "q", arg: 2, scope: !88, file: !2, line: 16, type: !28)
!92 = !DILocation(line: 16, column: 29, scope: !88)
!93 = !DILocation(line: 17, column: 3, scope: !88)
!94 = !DILocation(line: 18, column: 1, scope: !88)
!95 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !65, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!96 = !DILocalVariable(name: "p", arg: 1, scope: !95, file: !2, line: 20, type: !28)
!97 = !DILocation(line: 20, column: 34, scope: !95)
!98 = !DILocalVariable(name: "q", arg: 2, scope: !95, file: !2, line: 20, type: !28)
!99 = !DILocation(line: 20, column: 43, scope: !95)
!100 = !DILocation(line: 21, column: 3, scope: !95)
!101 = !DILocation(line: 22, column: 1, scope: !95)
!102 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !65, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!103 = !DILocalVariable(name: "p", arg: 1, scope: !102, file: !2, line: 24, type: !28)
!104 = !DILocation(line: 24, column: 33, scope: !102)
!105 = !DILocalVariable(name: "q", arg: 2, scope: !102, file: !2, line: 24, type: !28)
!106 = !DILocation(line: 24, column: 42, scope: !102)
!107 = !DILocation(line: 25, column: 3, scope: !102)
!108 = !DILocation(line: 26, column: 1, scope: !102)
!109 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !110, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!110 = !DISubroutineType(types: !111)
!111 = !{!28, !112}
!112 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!113 = !DILocalVariable(name: "n", arg: 1, scope: !109, file: !2, line: 29, type: !112)
!114 = !DILocation(line: 29, column: 22, scope: !109)
!115 = !DILocation(line: 30, column: 17, scope: !109)
!116 = !DILocation(line: 30, column: 10, scope: !109)
!117 = !DILocation(line: 30, column: 3, scope: !109)
!118 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !110, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!119 = !DILocalVariable(name: "n", arg: 1, scope: !118, file: !2, line: 33, type: !112)
!120 = !DILocation(line: 33, column: 28, scope: !118)
!121 = !DILocation(line: 34, column: 19, scope: !118)
!122 = !DILocation(line: 34, column: 12, scope: !118)
!123 = !DILocation(line: 34, column: 5, scope: !118)
!124 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !110, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!125 = !DILocalVariable(name: "n", arg: 1, scope: !124, file: !2, line: 37, type: !112)
!126 = !DILocation(line: 37, column: 21, scope: !124)
!127 = !DILocation(line: 38, column: 17, scope: !124)
!128 = !DILocation(line: 38, column: 10, scope: !124)
!129 = !DILocation(line: 38, column: 3, scope: !124)
!130 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !110, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!131 = !DILocalVariable(name: "n", arg: 1, scope: !130, file: !2, line: 41, type: !112)
!132 = !DILocation(line: 41, column: 21, scope: !130)
!133 = !DILocation(line: 42, column: 17, scope: !130)
!134 = !DILocation(line: 42, column: 10, scope: !130)
!135 = !DILocation(line: 42, column: 3, scope: !130)
!136 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !110, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!137 = !DILocalVariable(name: "n", arg: 1, scope: !136, file: !2, line: 45, type: !112)
!138 = !DILocation(line: 45, column: 21, scope: !136)
!139 = !DILocation(line: 46, column: 17, scope: !136)
!140 = !DILocation(line: 46, column: 10, scope: !136)
!141 = !DILocation(line: 46, column: 3, scope: !136)
!142 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !110, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!143 = !DILocalVariable(name: "n", arg: 1, scope: !142, file: !2, line: 49, type: !112)
!144 = !DILocation(line: 49, column: 21, scope: !142)
!145 = !DILocation(line: 50, column: 17, scope: !142)
!146 = !DILocation(line: 50, column: 10, scope: !142)
!147 = !DILocation(line: 50, column: 3, scope: !142)
!148 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !110, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!149 = !DILocalVariable(name: "n", arg: 1, scope: !148, file: !2, line: 53, type: !112)
!150 = !DILocation(line: 53, column: 21, scope: !148)
!151 = !DILocation(line: 54, column: 17, scope: !148)
!152 = !DILocation(line: 54, column: 10, scope: !148)
!153 = !DILocation(line: 54, column: 3, scope: !148)
!154 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !110, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!155 = !DILocalVariable(name: "n", arg: 1, scope: !154, file: !2, line: 57, type: !112)
!156 = !DILocation(line: 57, column: 18, scope: !154)
!157 = !DILocation(line: 58, column: 17, scope: !154)
!158 = !DILocation(line: 58, column: 10, scope: !154)
!159 = !DILocation(line: 58, column: 3, scope: !154)
!160 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !161, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!161 = !DISubroutineType(types: !162)
!162 = !{null, !112, !112}
!163 = !DILocalVariable(name: "id", arg: 1, scope: !160, file: !2, line: 67, type: !112)
!164 = !DILocation(line: 67, column: 20, scope: !160)
!165 = !DILocalVariable(name: "flags", arg: 2, scope: !160, file: !2, line: 67, type: !112)
!166 = !DILocation(line: 67, column: 28, scope: !160)
!167 = !DILocation(line: 68, column: 3, scope: !160)
!168 = !DILocation(line: 69, column: 1, scope: !160)
!169 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !170, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!170 = !DISubroutineType(types: !171)
!171 = !{null, !112, !29}
!172 = !DILocalVariable(name: "thdid", arg: 1, scope: !169, file: !2, line: 79, type: !112)
!173 = !DILocation(line: 79, column: 21, scope: !169)
!174 = !DILocalVariable(name: "cxt", arg: 2, scope: !169, file: !2, line: 79, type: !29)
!175 = !DILocation(line: 79, column: 34, scope: !169)
!176 = !DILocation(line: 81, column: 1, scope: !169)
!177 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !170, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!178 = !DILocalVariable(name: "thdid", arg: 1, scope: !177, file: !2, line: 82, type: !112)
!179 = !DILocation(line: 82, column: 21, scope: !177)
!180 = !DILocalVariable(name: "cxt", arg: 2, scope: !177, file: !2, line: 82, type: !29)
!181 = !DILocation(line: 82, column: 33, scope: !177)
!182 = !DILocation(line: 84, column: 1, scope: !177)
!183 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !184, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!184 = !DISubroutineType(types: !185)
!185 = !{null, !112, !29, !29}
!186 = !DILocalVariable(name: "thdid", arg: 1, scope: !183, file: !2, line: 85, type: !112)
!187 = !DILocation(line: 85, column: 26, scope: !183)
!188 = !DILocalVariable(name: "cxt", arg: 2, scope: !183, file: !2, line: 85, type: !29)
!189 = !DILocation(line: 85, column: 38, scope: !183)
!190 = !DILocalVariable(name: "lev", arg: 3, scope: !183, file: !2, line: 85, type: !29)
!191 = !DILocation(line: 85, column: 49, scope: !183)
!192 = !DILocation(line: 87, column: 1, scope: !183)
!193 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !194, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!194 = !DISubroutineType(types: !195)
!195 = !{null, !29}
!196 = !DILocalVariable(name: "lockname", arg: 1, scope: !193, file: !2, line: 89, type: !29)
!197 = !DILocation(line: 89, column: 17, scope: !193)
!198 = !DILocation(line: 91, column: 1, scope: !193)
!199 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !194, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!200 = !DILocalVariable(name: "str", arg: 1, scope: !199, file: !2, line: 93, type: !29)
!201 = !DILocation(line: 93, column: 18, scope: !199)
!202 = !DILocation(line: 94, column: 18, scope: !199)
!203 = !DILocation(line: 94, column: 3, scope: !199)
!204 = !DILocation(line: 95, column: 3, scope: !199)
!205 = !DILocation(line: 96, column: 3, scope: !199)
!206 = !DILocation(line: 97, column: 1, scope: !199)
!207 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !208, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!208 = !DISubroutineType(types: !209)
!209 = !{!28, !210}
!210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !112, size: 64)
!211 = !DILocalVariable(name: "p", arg: 1, scope: !207, file: !2, line: 100, type: !210)
!212 = !DILocation(line: 100, column: 24, scope: !207)
!213 = !DILocation(line: 101, column: 6, scope: !207)
!214 = !DILocation(line: 101, column: 8, scope: !207)
!215 = !DILocation(line: 102, column: 1, scope: !207)
!216 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !208, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!217 = !DILocalVariable(name: "p", arg: 1, scope: !216, file: !2, line: 104, type: !210)
!218 = !DILocation(line: 104, column: 20, scope: !216)
!219 = !DILocation(line: 105, column: 6, scope: !216)
!220 = !DILocation(line: 105, column: 8, scope: !216)
!221 = !DILocation(line: 106, column: 1, scope: !216)
!222 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !208, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!223 = !DILocalVariable(name: "p", arg: 1, scope: !222, file: !2, line: 110, type: !210)
!224 = !DILocation(line: 110, column: 22, scope: !222)
!225 = !DILocation(line: 111, column: 10, scope: !222)
!226 = !DILocation(line: 111, column: 5, scope: !222)
!227 = !DILocation(line: 112, column: 1, scope: !222)
!228 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !208, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!229 = !DILocalVariable(name: "p", arg: 1, scope: !228, file: !2, line: 115, type: !210)
!230 = !DILocation(line: 115, column: 24, scope: !228)
!231 = !DILocation(line: 116, column: 10, scope: !228)
!232 = !DILocation(line: 116, column: 5, scope: !228)
!233 = !DILocation(line: 117, column: 1, scope: !228)
!234 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !235, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!235 = !DISubroutineType(types: !236)
!236 = !{null}
!237 = !DILocation(line: 135, column: 20, scope: !234)
!238 = distinct !DISubprogram(name: "CWE401_Memory_Leak__char_malloc_45_bad", scope: !19, file: !19, line: 35, type: !235, scopeLine: 36, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!239 = !DILocalVariable(name: "data", scope: !238, file: !19, line: 37, type: !29)
!240 = !DILocation(line: 37, column: 12, scope: !238)
!241 = !DILocation(line: 38, column: 10, scope: !238)
!242 = !DILocation(line: 40, column: 20, scope: !238)
!243 = !DILocation(line: 40, column: 10, scope: !238)
!244 = !DILocation(line: 41, column: 9, scope: !245)
!245 = distinct !DILexicalBlock(scope: !238, file: !19, line: 41, column: 9)
!246 = !DILocation(line: 41, column: 14, scope: !245)
!247 = !DILocation(line: 41, column: 9, scope: !238)
!248 = !DILocation(line: 41, column: 24, scope: !249)
!249 = distinct !DILexicalBlock(scope: !245, file: !19, line: 41, column: 23)
!250 = !DILocation(line: 43, column: 12, scope: !238)
!251 = !DILocation(line: 43, column: 5, scope: !238)
!252 = !DILocation(line: 44, column: 15, scope: !238)
!253 = !DILocation(line: 44, column: 5, scope: !238)
!254 = !DILocation(line: 45, column: 50, scope: !238)
!255 = !DILocation(line: 45, column: 48, scope: !238)
!256 = !DILocation(line: 46, column: 5, scope: !238)
!257 = !DILocation(line: 47, column: 1, scope: !238)
!258 = distinct !DISubprogram(name: "CWE401_Memory_Leak__char_malloc_45_good", scope: !19, file: !19, line: 96, type: !235, scopeLine: 97, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!259 = !DILocation(line: 98, column: 5, scope: !258)
!260 = !DILocation(line: 99, column: 5, scope: !258)
!261 = !DILocation(line: 100, column: 1, scope: !258)
!262 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 110, type: !263, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !25, retainedNodes: !67)
!263 = !DISubroutineType(types: !264)
!264 = !{!112, !112, !265}
!265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!266 = !DILocalVariable(name: "argc", arg: 1, scope: !262, file: !19, line: 110, type: !112)
!267 = !DILocation(line: 110, column: 14, scope: !262)
!268 = !DILocalVariable(name: "argv", arg: 2, scope: !262, file: !19, line: 110, type: !265)
!269 = !DILocation(line: 110, column: 27, scope: !262)
!270 = !DILocation(line: 113, column: 22, scope: !262)
!271 = !DILocation(line: 113, column: 12, scope: !262)
!272 = !DILocation(line: 113, column: 5, scope: !262)
!273 = !DILocation(line: 115, column: 5, scope: !262)
!274 = !DILocation(line: 116, column: 5, scope: !262)
!275 = !DILocation(line: 117, column: 5, scope: !262)
!276 = !DILocation(line: 120, column: 5, scope: !262)
!277 = !DILocation(line: 121, column: 5, scope: !262)
!278 = !DILocation(line: 122, column: 5, scope: !262)
!279 = !DILocation(line: 124, column: 5, scope: !262)
!280 = distinct !DISubprogram(name: "badSink", scope: !19, file: !19, line: 28, type: !235, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !25, retainedNodes: !67)
!281 = !DILocalVariable(name: "data", scope: !280, file: !19, line: 30, type: !29)
!282 = !DILocation(line: 30, column: 12, scope: !280)
!283 = !DILocation(line: 30, column: 19, scope: !280)
!284 = !DILocation(line: 33, column: 1, scope: !280)
!285 = distinct !DISubprogram(name: "goodG2B", scope: !19, file: !19, line: 61, type: !235, scopeLine: 62, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !25, retainedNodes: !67)
!286 = !DILocalVariable(name: "data", scope: !285, file: !19, line: 63, type: !29)
!287 = !DILocation(line: 63, column: 12, scope: !285)
!288 = !DILocation(line: 64, column: 10, scope: !285)
!289 = !DILocation(line: 66, column: 20, scope: !285)
!290 = !DILocation(line: 66, column: 10, scope: !285)
!291 = !DILocation(line: 68, column: 12, scope: !285)
!292 = !DILocation(line: 68, column: 5, scope: !285)
!293 = !DILocation(line: 69, column: 15, scope: !285)
!294 = !DILocation(line: 69, column: 5, scope: !285)
!295 = !DILocation(line: 70, column: 54, scope: !285)
!296 = !DILocation(line: 70, column: 52, scope: !285)
!297 = !DILocation(line: 71, column: 5, scope: !285)
!298 = !DILocation(line: 72, column: 1, scope: !285)
!299 = distinct !DISubprogram(name: "goodG2BSink", scope: !19, file: !19, line: 54, type: !235, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !25, retainedNodes: !67)
!300 = !DILocalVariable(name: "data", scope: !299, file: !19, line: 56, type: !29)
!301 = !DILocation(line: 56, column: 12, scope: !299)
!302 = !DILocation(line: 56, column: 19, scope: !299)
!303 = !DILocation(line: 59, column: 1, scope: !299)
!304 = distinct !DISubprogram(name: "goodB2G", scope: !19, file: !19, line: 82, type: !235, scopeLine: 83, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !25, retainedNodes: !67)
!305 = !DILocalVariable(name: "data", scope: !304, file: !19, line: 84, type: !29)
!306 = !DILocation(line: 84, column: 12, scope: !304)
!307 = !DILocation(line: 85, column: 10, scope: !304)
!308 = !DILocation(line: 87, column: 20, scope: !304)
!309 = !DILocation(line: 87, column: 10, scope: !304)
!310 = !DILocation(line: 88, column: 9, scope: !311)
!311 = distinct !DILexicalBlock(scope: !304, file: !19, line: 88, column: 9)
!312 = !DILocation(line: 88, column: 14, scope: !311)
!313 = !DILocation(line: 88, column: 9, scope: !304)
!314 = !DILocation(line: 88, column: 24, scope: !315)
!315 = distinct !DILexicalBlock(scope: !311, file: !19, line: 88, column: 23)
!316 = !DILocation(line: 90, column: 12, scope: !304)
!317 = !DILocation(line: 90, column: 5, scope: !304)
!318 = !DILocation(line: 91, column: 15, scope: !304)
!319 = !DILocation(line: 91, column: 5, scope: !304)
!320 = !DILocation(line: 92, column: 54, scope: !304)
!321 = !DILocation(line: 92, column: 52, scope: !304)
!322 = !DILocation(line: 93, column: 5, scope: !304)
!323 = !DILocation(line: 94, column: 1, scope: !304)
!324 = distinct !DISubprogram(name: "goodB2GSink", scope: !19, file: !19, line: 75, type: !235, scopeLine: 76, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !25, retainedNodes: !67)
!325 = !DILocalVariable(name: "data", scope: !324, file: !19, line: 77, type: !29)
!326 = !DILocation(line: 77, column: 12, scope: !324)
!327 = !DILocation(line: 77, column: 19, scope: !324)
!328 = !DILocation(line: 79, column: 10, scope: !324)
!329 = !DILocation(line: 79, column: 5, scope: !324)
!330 = !DILocation(line: 80, column: 1, scope: !324)
