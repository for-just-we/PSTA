; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tmem_leak/CWE401_Memory_Leak__int64_t_malloc_45.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__int64_t_malloc_45.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@CWE401_Memory_Leak__int64_t_malloc_45_badData = internal global ptr null, align 8, !dbg !17
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !31
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !37
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !42
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !47
@CWE401_Memory_Leak__int64_t_malloc_45_goodG2BData = internal global ptr null, align 8, !dbg !52
@CWE401_Memory_Leak__int64_t_malloc_45_goodB2GData = internal global ptr null, align 8, !dbg !54

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !64 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !68, metadata !DIExpression()), !dbg !69
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !70, metadata !DIExpression()), !dbg !71
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !72
  ret void, !dbg !73
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !74 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !75, metadata !DIExpression()), !dbg !76
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !77, metadata !DIExpression()), !dbg !78
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !79
  ret void, !dbg !80
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !81 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !82, metadata !DIExpression()), !dbg !83
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !84, metadata !DIExpression()), !dbg !85
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !86
  ret void, !dbg !87
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !88 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !89, metadata !DIExpression()), !dbg !90
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !91, metadata !DIExpression()), !dbg !92
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !93
  ret void, !dbg !94
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !95 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !96, metadata !DIExpression()), !dbg !97
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !98, metadata !DIExpression()), !dbg !99
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !100
  ret void, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !102 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !103, metadata !DIExpression()), !dbg !104
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !107
  ret void, !dbg !108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !109 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %0 = load i32, ptr %n.addr, align 4, !dbg !115
  %conv = sext i32 %0 to i64, !dbg !115
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !116
  ret ptr %call, !dbg !117
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !118 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !119, metadata !DIExpression()), !dbg !120
  %0 = load i32, ptr %n.addr, align 4, !dbg !121
  %conv = sext i32 %0 to i64, !dbg !121
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !122
  ret ptr %call, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !124 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !125, metadata !DIExpression()), !dbg !126
  %0 = load i32, ptr %n.addr, align 4, !dbg !127
  %conv = sext i32 %0 to i64, !dbg !127
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !128
  ret ptr %call, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !130 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !131, metadata !DIExpression()), !dbg !132
  %0 = load i32, ptr %n.addr, align 4, !dbg !133
  %conv = sext i32 %0 to i64, !dbg !133
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !134
  ret ptr %call, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !136 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !137, metadata !DIExpression()), !dbg !138
  %0 = load i32, ptr %n.addr, align 4, !dbg !139
  %conv = sext i32 %0 to i64, !dbg !139
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !140
  ret ptr %call, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !142 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !143, metadata !DIExpression()), !dbg !144
  %0 = load i32, ptr %n.addr, align 4, !dbg !145
  %conv = sext i32 %0 to i64, !dbg !145
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !146
  ret ptr %call, !dbg !147
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !148 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !149, metadata !DIExpression()), !dbg !150
  %0 = load i32, ptr %n.addr, align 4, !dbg !151
  %conv = sext i32 %0 to i64, !dbg !151
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !152
  ret ptr %call, !dbg !153
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !154 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !155, metadata !DIExpression()), !dbg !156
  %0 = load i32, ptr %n.addr, align 4, !dbg !157
  %conv = sext i32 %0 to i64, !dbg !157
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !158
  ret ptr %call, !dbg !159
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !160 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !163, metadata !DIExpression()), !dbg !164
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !165, metadata !DIExpression()), !dbg !166
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !167
  ret void, !dbg !168
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !169 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !173, metadata !DIExpression()), !dbg !174
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !175, metadata !DIExpression()), !dbg !176
  ret void, !dbg !177
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !178 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !179, metadata !DIExpression()), !dbg !180
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !181, metadata !DIExpression()), !dbg !182
  ret void, !dbg !183
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !184 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !187, metadata !DIExpression()), !dbg !188
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !189, metadata !DIExpression()), !dbg !190
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !191, metadata !DIExpression()), !dbg !192
  ret void, !dbg !193
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !194 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !197, metadata !DIExpression()), !dbg !198
  ret void, !dbg !199
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !200 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !201, metadata !DIExpression()), !dbg !202
  %0 = load ptr, ptr %str.addr, align 8, !dbg !203
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !204
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !205
  %call2 = call i32 @getchar(), !dbg !206
  ret void, !dbg !207
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !208 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !212, metadata !DIExpression()), !dbg !213
  %0 = load ptr, ptr %p.addr, align 8, !dbg !214
  store i32 0, ptr %0, align 4, !dbg !215
  %1 = load ptr, ptr %retval, align 8, !dbg !216
  ret ptr %1, !dbg !216
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !217 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !218, metadata !DIExpression()), !dbg !219
  %0 = load ptr, ptr %p.addr, align 8, !dbg !220
  store i32 0, ptr %0, align 4, !dbg !221
  %1 = load ptr, ptr %retval, align 8, !dbg !222
  ret ptr %1, !dbg !222
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !223 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !224, metadata !DIExpression()), !dbg !225
  %0 = load ptr, ptr %p.addr, align 8, !dbg !226
  call void @free(ptr noundef %0) #7, !dbg !227
  %1 = load ptr, ptr %retval, align 8, !dbg !228
  ret ptr %1, !dbg !228
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !229 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !230, metadata !DIExpression()), !dbg !231
  %0 = load ptr, ptr %p.addr, align 8, !dbg !232
  call void @free(ptr noundef %0) #7, !dbg !233
  %1 = load ptr, ptr %retval, align 8, !dbg !234
  ret ptr %1, !dbg !234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !235 {
entry:
  ret void, !dbg !238
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__int64_t_malloc_45_bad() #0 !dbg !239 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !240, metadata !DIExpression()), !dbg !241
  store ptr null, ptr %data, align 8, !dbg !242
  %call = call ptr @NFRMALLOC(i32 noundef 800), !dbg !243
  store ptr %call, ptr %data, align 8, !dbg !244
  %0 = load ptr, ptr %data, align 8, !dbg !245
  %cmp = icmp eq ptr %0, null, !dbg !247
  br i1 %cmp, label %if.then, label %if.end, !dbg !248

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !249
  unreachable, !dbg !249

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !251
  %arrayidx = getelementptr inbounds i64, ptr %1, i64 0, !dbg !251
  store i64 5, ptr %arrayidx, align 8, !dbg !252
  %2 = load ptr, ptr %data, align 8, !dbg !253
  %arrayidx1 = getelementptr inbounds i64, ptr %2, i64 0, !dbg !253
  %3 = load i64, ptr %arrayidx1, align 8, !dbg !253
  call void @printLongLongLine(i64 noundef %3), !dbg !254
  %4 = load ptr, ptr %data, align 8, !dbg !255
  store ptr %4, ptr @CWE401_Memory_Leak__int64_t_malloc_45_badData, align 8, !dbg !256
  call void @badSink(), !dbg !257
  ret void, !dbg !258
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

declare void @printLongLongLine(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__int64_t_malloc_45_good() #0 !dbg !259 {
entry:
  call void @goodG2B(), !dbg !260
  call void @goodB2G(), !dbg !261
  ret void, !dbg !262
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !263 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !267, metadata !DIExpression()), !dbg !268
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !269, metadata !DIExpression()), !dbg !270
  %call = call i64 @time(ptr noundef null) #7, !dbg !271
  %conv = trunc i64 %call to i32, !dbg !272
  call void @srand(i32 noundef %conv) #7, !dbg !273
  call void @printLine(ptr noundef @.str.3), !dbg !274
  call void @CWE401_Memory_Leak__int64_t_malloc_45_good(), !dbg !275
  call void @printLine(ptr noundef @.str.4), !dbg !276
  call void @printLine(ptr noundef @.str.5), !dbg !277
  call void @CWE401_Memory_Leak__int64_t_malloc_45_bad(), !dbg !278
  call void @printLine(ptr noundef @.str.6), !dbg !279
  ret i32 0, !dbg !280
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @badSink() #0 !dbg !281 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !282, metadata !DIExpression()), !dbg !283
  %0 = load ptr, ptr @CWE401_Memory_Leak__int64_t_malloc_45_badData, align 8, !dbg !284
  store ptr %0, ptr %data, align 8, !dbg !283
  ret void, !dbg !285
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !286 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !287, metadata !DIExpression()), !dbg !288
  store ptr null, ptr %data, align 8, !dbg !289
  %0 = alloca i8, i64 800, align 16, !dbg !290
  store ptr %0, ptr %data, align 8, !dbg !291
  %1 = load ptr, ptr %data, align 8, !dbg !292
  %arrayidx = getelementptr inbounds i64, ptr %1, i64 0, !dbg !292
  store i64 5, ptr %arrayidx, align 8, !dbg !293
  %2 = load ptr, ptr %data, align 8, !dbg !294
  %arrayidx1 = getelementptr inbounds i64, ptr %2, i64 0, !dbg !294
  %3 = load i64, ptr %arrayidx1, align 8, !dbg !294
  call void @printLongLongLine(i64 noundef %3), !dbg !295
  %4 = load ptr, ptr %data, align 8, !dbg !296
  store ptr %4, ptr @CWE401_Memory_Leak__int64_t_malloc_45_goodG2BData, align 8, !dbg !297
  call void @goodG2BSink(), !dbg !298
  ret void, !dbg !299
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2BSink() #0 !dbg !300 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !301, metadata !DIExpression()), !dbg !302
  %0 = load ptr, ptr @CWE401_Memory_Leak__int64_t_malloc_45_goodG2BData, align 8, !dbg !303
  store ptr %0, ptr %data, align 8, !dbg !302
  ret void, !dbg !304
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !305 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !306, metadata !DIExpression()), !dbg !307
  store ptr null, ptr %data, align 8, !dbg !308
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !309
  store ptr %call, ptr %data, align 8, !dbg !310
  %0 = load ptr, ptr %data, align 8, !dbg !311
  %cmp = icmp eq ptr %0, null, !dbg !313
  br i1 %cmp, label %if.then, label %if.end, !dbg !314

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !315
  unreachable, !dbg !315

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !317
  %arrayidx = getelementptr inbounds i64, ptr %1, i64 0, !dbg !317
  store i64 5, ptr %arrayidx, align 8, !dbg !318
  %2 = load ptr, ptr %data, align 8, !dbg !319
  %arrayidx1 = getelementptr inbounds i64, ptr %2, i64 0, !dbg !319
  %3 = load i64, ptr %arrayidx1, align 8, !dbg !319
  call void @printLongLongLine(i64 noundef %3), !dbg !320
  %4 = load ptr, ptr %data, align 8, !dbg !321
  store ptr %4, ptr @CWE401_Memory_Leak__int64_t_malloc_45_goodB2GData, align 8, !dbg !322
  call void @goodB2GSink(), !dbg !323
  ret void, !dbg !324
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2GSink() #0 !dbg !325 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !326, metadata !DIExpression()), !dbg !327
  %0 = load ptr, ptr @CWE401_Memory_Leak__int64_t_malloc_45_goodB2GData, align 8, !dbg !328
  store ptr %0, ptr %data, align 8, !dbg !327
  %1 = load ptr, ptr %data, align 8, !dbg !329
  call void @free(ptr noundef %1) #7, !dbg !330
  ret void, !dbg !331
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!56, !57, !58, !59, !60, !61, !62}
!llvm.ident = !{!63}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__int64_t_malloc_45_badData", scope: !19, file: !33, line: 22, type: !23, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !30, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__int64_t_malloc_45.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "2e841d956f6991ba959af6713525117a")
!21 = !{!22, !23, !29}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !25, line: 27, baseType: !26)
!25 = !DIFile(filename: "/usr/include/bits/stdint-intn.h", directory: "", checksumkind: CSK_MD5, checksum: "457547631e07cd24d9a14c8410e28e57")
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !27, line: 43, baseType: !28)
!27 = !DIFile(filename: "/usr/include/bits/types.h", directory: "", checksumkind: CSK_MD5, checksum: "eac2c46b20ddc2be81186b6ffebfd845")
!28 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!29 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!30 = !{!0, !7, !12, !31, !37, !42, !47, !17, !52, !54}
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(scope: null, file: !33, line: 115, type: !34, isLocal: true, isDefinition: true)
!33 = !DIFile(filename: "src/tmem_leak/CWE401_Memory_Leak__int64_t_malloc_45.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "2e841d956f6991ba959af6713525117a")
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !35)
!35 = !{!36}
!36 = !DISubrange(count: 18)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(scope: null, file: !33, line: 117, type: !39, isLocal: true, isDefinition: true)
!39 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !40)
!40 = !{!41}
!41 = !DISubrange(count: 16)
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(scope: null, file: !33, line: 120, type: !44, isLocal: true, isDefinition: true)
!44 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !45)
!45 = !{!46}
!46 = !DISubrange(count: 17)
!47 = !DIGlobalVariableExpression(var: !48, expr: !DIExpression())
!48 = distinct !DIGlobalVariable(scope: null, file: !33, line: 122, type: !49, isLocal: true, isDefinition: true)
!49 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !50)
!50 = !{!51}
!51 = !DISubrange(count: 15)
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__int64_t_malloc_45_goodG2BData", scope: !19, file: !33, line: 23, type: !23, isLocal: true, isDefinition: true)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__int64_t_malloc_45_goodB2GData", scope: !19, file: !33, line: 24, type: !23, isLocal: true, isDefinition: true)
!56 = !{i32 7, !"Dwarf Version", i32 5}
!57 = !{i32 2, !"Debug Info Version", i32 3}
!58 = !{i32 1, !"wchar_size", i32 4}
!59 = !{i32 8, !"PIC Level", i32 2}
!60 = !{i32 7, !"PIE Level", i32 2}
!61 = !{i32 7, !"uwtable", i32 2}
!62 = !{i32 7, !"frame-pointer", i32 2}
!63 = !{!"clang version 16.0.0"}
!64 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !65, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!65 = !DISubroutineType(types: !66)
!66 = !{null, !22, !22}
!67 = !{}
!68 = !DILocalVariable(name: "p", arg: 1, scope: !64, file: !2, line: 4, type: !22)
!69 = !DILocation(line: 4, column: 22, scope: !64)
!70 = !DILocalVariable(name: "q", arg: 2, scope: !64, file: !2, line: 4, type: !22)
!71 = !DILocation(line: 4, column: 31, scope: !64)
!72 = !DILocation(line: 5, column: 3, scope: !64)
!73 = !DILocation(line: 6, column: 1, scope: !64)
!74 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !65, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!75 = !DILocalVariable(name: "p", arg: 1, scope: !74, file: !2, line: 8, type: !22)
!76 = !DILocation(line: 8, column: 25, scope: !74)
!77 = !DILocalVariable(name: "q", arg: 2, scope: !74, file: !2, line: 8, type: !22)
!78 = !DILocation(line: 8, column: 34, scope: !74)
!79 = !DILocation(line: 9, column: 3, scope: !74)
!80 = !DILocation(line: 10, column: 1, scope: !74)
!81 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !65, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!82 = !DILocalVariable(name: "p", arg: 1, scope: !81, file: !2, line: 12, type: !22)
!83 = !DILocation(line: 12, column: 21, scope: !81)
!84 = !DILocalVariable(name: "q", arg: 2, scope: !81, file: !2, line: 12, type: !22)
!85 = !DILocation(line: 12, column: 30, scope: !81)
!86 = !DILocation(line: 13, column: 3, scope: !81)
!87 = !DILocation(line: 14, column: 1, scope: !81)
!88 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !65, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!89 = !DILocalVariable(name: "p", arg: 1, scope: !88, file: !2, line: 16, type: !22)
!90 = !DILocation(line: 16, column: 20, scope: !88)
!91 = !DILocalVariable(name: "q", arg: 2, scope: !88, file: !2, line: 16, type: !22)
!92 = !DILocation(line: 16, column: 29, scope: !88)
!93 = !DILocation(line: 17, column: 3, scope: !88)
!94 = !DILocation(line: 18, column: 1, scope: !88)
!95 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !65, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!96 = !DILocalVariable(name: "p", arg: 1, scope: !95, file: !2, line: 20, type: !22)
!97 = !DILocation(line: 20, column: 34, scope: !95)
!98 = !DILocalVariable(name: "q", arg: 2, scope: !95, file: !2, line: 20, type: !22)
!99 = !DILocation(line: 20, column: 43, scope: !95)
!100 = !DILocation(line: 21, column: 3, scope: !95)
!101 = !DILocation(line: 22, column: 1, scope: !95)
!102 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !65, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!103 = !DILocalVariable(name: "p", arg: 1, scope: !102, file: !2, line: 24, type: !22)
!104 = !DILocation(line: 24, column: 33, scope: !102)
!105 = !DILocalVariable(name: "q", arg: 2, scope: !102, file: !2, line: 24, type: !22)
!106 = !DILocation(line: 24, column: 42, scope: !102)
!107 = !DILocation(line: 25, column: 3, scope: !102)
!108 = !DILocation(line: 26, column: 1, scope: !102)
!109 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !110, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!110 = !DISubroutineType(types: !111)
!111 = !{!22, !112}
!112 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!113 = !DILocalVariable(name: "n", arg: 1, scope: !109, file: !2, line: 29, type: !112)
!114 = !DILocation(line: 29, column: 22, scope: !109)
!115 = !DILocation(line: 30, column: 17, scope: !109)
!116 = !DILocation(line: 30, column: 10, scope: !109)
!117 = !DILocation(line: 30, column: 3, scope: !109)
!118 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !110, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!119 = !DILocalVariable(name: "n", arg: 1, scope: !118, file: !2, line: 33, type: !112)
!120 = !DILocation(line: 33, column: 28, scope: !118)
!121 = !DILocation(line: 34, column: 19, scope: !118)
!122 = !DILocation(line: 34, column: 12, scope: !118)
!123 = !DILocation(line: 34, column: 5, scope: !118)
!124 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !110, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!125 = !DILocalVariable(name: "n", arg: 1, scope: !124, file: !2, line: 37, type: !112)
!126 = !DILocation(line: 37, column: 21, scope: !124)
!127 = !DILocation(line: 38, column: 17, scope: !124)
!128 = !DILocation(line: 38, column: 10, scope: !124)
!129 = !DILocation(line: 38, column: 3, scope: !124)
!130 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !110, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!131 = !DILocalVariable(name: "n", arg: 1, scope: !130, file: !2, line: 41, type: !112)
!132 = !DILocation(line: 41, column: 21, scope: !130)
!133 = !DILocation(line: 42, column: 17, scope: !130)
!134 = !DILocation(line: 42, column: 10, scope: !130)
!135 = !DILocation(line: 42, column: 3, scope: !130)
!136 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !110, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!137 = !DILocalVariable(name: "n", arg: 1, scope: !136, file: !2, line: 45, type: !112)
!138 = !DILocation(line: 45, column: 21, scope: !136)
!139 = !DILocation(line: 46, column: 17, scope: !136)
!140 = !DILocation(line: 46, column: 10, scope: !136)
!141 = !DILocation(line: 46, column: 3, scope: !136)
!142 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !110, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!143 = !DILocalVariable(name: "n", arg: 1, scope: !142, file: !2, line: 49, type: !112)
!144 = !DILocation(line: 49, column: 21, scope: !142)
!145 = !DILocation(line: 50, column: 17, scope: !142)
!146 = !DILocation(line: 50, column: 10, scope: !142)
!147 = !DILocation(line: 50, column: 3, scope: !142)
!148 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !110, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!149 = !DILocalVariable(name: "n", arg: 1, scope: !148, file: !2, line: 53, type: !112)
!150 = !DILocation(line: 53, column: 21, scope: !148)
!151 = !DILocation(line: 54, column: 17, scope: !148)
!152 = !DILocation(line: 54, column: 10, scope: !148)
!153 = !DILocation(line: 54, column: 3, scope: !148)
!154 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !110, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!155 = !DILocalVariable(name: "n", arg: 1, scope: !154, file: !2, line: 57, type: !112)
!156 = !DILocation(line: 57, column: 18, scope: !154)
!157 = !DILocation(line: 58, column: 17, scope: !154)
!158 = !DILocation(line: 58, column: 10, scope: !154)
!159 = !DILocation(line: 58, column: 3, scope: !154)
!160 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !161, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!161 = !DISubroutineType(types: !162)
!162 = !{null, !112, !112}
!163 = !DILocalVariable(name: "id", arg: 1, scope: !160, file: !2, line: 67, type: !112)
!164 = !DILocation(line: 67, column: 20, scope: !160)
!165 = !DILocalVariable(name: "flags", arg: 2, scope: !160, file: !2, line: 67, type: !112)
!166 = !DILocation(line: 67, column: 28, scope: !160)
!167 = !DILocation(line: 68, column: 3, scope: !160)
!168 = !DILocation(line: 69, column: 1, scope: !160)
!169 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !170, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!170 = !DISubroutineType(types: !171)
!171 = !{null, !112, !172}
!172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!173 = !DILocalVariable(name: "thdid", arg: 1, scope: !169, file: !2, line: 79, type: !112)
!174 = !DILocation(line: 79, column: 21, scope: !169)
!175 = !DILocalVariable(name: "cxt", arg: 2, scope: !169, file: !2, line: 79, type: !172)
!176 = !DILocation(line: 79, column: 34, scope: !169)
!177 = !DILocation(line: 81, column: 1, scope: !169)
!178 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !170, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!179 = !DILocalVariable(name: "thdid", arg: 1, scope: !178, file: !2, line: 82, type: !112)
!180 = !DILocation(line: 82, column: 21, scope: !178)
!181 = !DILocalVariable(name: "cxt", arg: 2, scope: !178, file: !2, line: 82, type: !172)
!182 = !DILocation(line: 82, column: 33, scope: !178)
!183 = !DILocation(line: 84, column: 1, scope: !178)
!184 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !185, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!185 = !DISubroutineType(types: !186)
!186 = !{null, !112, !172, !172}
!187 = !DILocalVariable(name: "thdid", arg: 1, scope: !184, file: !2, line: 85, type: !112)
!188 = !DILocation(line: 85, column: 26, scope: !184)
!189 = !DILocalVariable(name: "cxt", arg: 2, scope: !184, file: !2, line: 85, type: !172)
!190 = !DILocation(line: 85, column: 38, scope: !184)
!191 = !DILocalVariable(name: "lev", arg: 3, scope: !184, file: !2, line: 85, type: !172)
!192 = !DILocation(line: 85, column: 49, scope: !184)
!193 = !DILocation(line: 87, column: 1, scope: !184)
!194 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !195, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!195 = !DISubroutineType(types: !196)
!196 = !{null, !172}
!197 = !DILocalVariable(name: "lockname", arg: 1, scope: !194, file: !2, line: 89, type: !172)
!198 = !DILocation(line: 89, column: 17, scope: !194)
!199 = !DILocation(line: 91, column: 1, scope: !194)
!200 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !195, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!201 = !DILocalVariable(name: "str", arg: 1, scope: !200, file: !2, line: 93, type: !172)
!202 = !DILocation(line: 93, column: 18, scope: !200)
!203 = !DILocation(line: 94, column: 18, scope: !200)
!204 = !DILocation(line: 94, column: 3, scope: !200)
!205 = !DILocation(line: 95, column: 3, scope: !200)
!206 = !DILocation(line: 96, column: 3, scope: !200)
!207 = !DILocation(line: 97, column: 1, scope: !200)
!208 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !209, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!209 = !DISubroutineType(types: !210)
!210 = !{!22, !211}
!211 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !112, size: 64)
!212 = !DILocalVariable(name: "p", arg: 1, scope: !208, file: !2, line: 100, type: !211)
!213 = !DILocation(line: 100, column: 24, scope: !208)
!214 = !DILocation(line: 101, column: 6, scope: !208)
!215 = !DILocation(line: 101, column: 8, scope: !208)
!216 = !DILocation(line: 102, column: 1, scope: !208)
!217 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !209, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!218 = !DILocalVariable(name: "p", arg: 1, scope: !217, file: !2, line: 104, type: !211)
!219 = !DILocation(line: 104, column: 20, scope: !217)
!220 = !DILocation(line: 105, column: 6, scope: !217)
!221 = !DILocation(line: 105, column: 8, scope: !217)
!222 = !DILocation(line: 106, column: 1, scope: !217)
!223 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !209, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!224 = !DILocalVariable(name: "p", arg: 1, scope: !223, file: !2, line: 110, type: !211)
!225 = !DILocation(line: 110, column: 22, scope: !223)
!226 = !DILocation(line: 111, column: 10, scope: !223)
!227 = !DILocation(line: 111, column: 5, scope: !223)
!228 = !DILocation(line: 112, column: 1, scope: !223)
!229 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !209, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!230 = !DILocalVariable(name: "p", arg: 1, scope: !229, file: !2, line: 115, type: !211)
!231 = !DILocation(line: 115, column: 24, scope: !229)
!232 = !DILocation(line: 116, column: 10, scope: !229)
!233 = !DILocation(line: 116, column: 5, scope: !229)
!234 = !DILocation(line: 117, column: 1, scope: !229)
!235 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !236, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!236 = !DISubroutineType(types: !237)
!237 = !{null}
!238 = !DILocation(line: 135, column: 20, scope: !235)
!239 = distinct !DISubprogram(name: "CWE401_Memory_Leak__int64_t_malloc_45_bad", scope: !33, file: !33, line: 35, type: !236, scopeLine: 36, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!240 = !DILocalVariable(name: "data", scope: !239, file: !33, line: 37, type: !23)
!241 = !DILocation(line: 37, column: 15, scope: !239)
!242 = !DILocation(line: 38, column: 10, scope: !239)
!243 = !DILocation(line: 40, column: 23, scope: !239)
!244 = !DILocation(line: 40, column: 10, scope: !239)
!245 = !DILocation(line: 41, column: 9, scope: !246)
!246 = distinct !DILexicalBlock(scope: !239, file: !33, line: 41, column: 9)
!247 = !DILocation(line: 41, column: 14, scope: !246)
!248 = !DILocation(line: 41, column: 9, scope: !239)
!249 = !DILocation(line: 41, column: 24, scope: !250)
!250 = distinct !DILexicalBlock(scope: !246, file: !33, line: 41, column: 23)
!251 = !DILocation(line: 43, column: 5, scope: !239)
!252 = !DILocation(line: 43, column: 13, scope: !239)
!253 = !DILocation(line: 44, column: 23, scope: !239)
!254 = !DILocation(line: 44, column: 5, scope: !239)
!255 = !DILocation(line: 45, column: 53, scope: !239)
!256 = !DILocation(line: 45, column: 51, scope: !239)
!257 = !DILocation(line: 46, column: 5, scope: !239)
!258 = !DILocation(line: 47, column: 1, scope: !239)
!259 = distinct !DISubprogram(name: "CWE401_Memory_Leak__int64_t_malloc_45_good", scope: !33, file: !33, line: 96, type: !236, scopeLine: 97, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!260 = !DILocation(line: 98, column: 5, scope: !259)
!261 = !DILocation(line: 99, column: 5, scope: !259)
!262 = !DILocation(line: 100, column: 1, scope: !259)
!263 = distinct !DISubprogram(name: "main", scope: !33, file: !33, line: 110, type: !264, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !67)
!264 = !DISubroutineType(types: !265)
!265 = !{!112, !112, !266}
!266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !172, size: 64)
!267 = !DILocalVariable(name: "argc", arg: 1, scope: !263, file: !33, line: 110, type: !112)
!268 = !DILocation(line: 110, column: 14, scope: !263)
!269 = !DILocalVariable(name: "argv", arg: 2, scope: !263, file: !33, line: 110, type: !266)
!270 = !DILocation(line: 110, column: 27, scope: !263)
!271 = !DILocation(line: 113, column: 22, scope: !263)
!272 = !DILocation(line: 113, column: 12, scope: !263)
!273 = !DILocation(line: 113, column: 5, scope: !263)
!274 = !DILocation(line: 115, column: 5, scope: !263)
!275 = !DILocation(line: 116, column: 5, scope: !263)
!276 = !DILocation(line: 117, column: 5, scope: !263)
!277 = !DILocation(line: 120, column: 5, scope: !263)
!278 = !DILocation(line: 121, column: 5, scope: !263)
!279 = !DILocation(line: 122, column: 5, scope: !263)
!280 = !DILocation(line: 124, column: 5, scope: !263)
!281 = distinct !DISubprogram(name: "badSink", scope: !33, file: !33, line: 28, type: !236, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !67)
!282 = !DILocalVariable(name: "data", scope: !281, file: !33, line: 30, type: !23)
!283 = !DILocation(line: 30, column: 15, scope: !281)
!284 = !DILocation(line: 30, column: 22, scope: !281)
!285 = !DILocation(line: 33, column: 1, scope: !281)
!286 = distinct !DISubprogram(name: "goodG2B", scope: !33, file: !33, line: 61, type: !236, scopeLine: 62, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !67)
!287 = !DILocalVariable(name: "data", scope: !286, file: !33, line: 63, type: !23)
!288 = !DILocation(line: 63, column: 15, scope: !286)
!289 = !DILocation(line: 64, column: 10, scope: !286)
!290 = !DILocation(line: 66, column: 23, scope: !286)
!291 = !DILocation(line: 66, column: 10, scope: !286)
!292 = !DILocation(line: 68, column: 5, scope: !286)
!293 = !DILocation(line: 68, column: 13, scope: !286)
!294 = !DILocation(line: 69, column: 23, scope: !286)
!295 = !DILocation(line: 69, column: 5, scope: !286)
!296 = !DILocation(line: 70, column: 57, scope: !286)
!297 = !DILocation(line: 70, column: 55, scope: !286)
!298 = !DILocation(line: 71, column: 5, scope: !286)
!299 = !DILocation(line: 72, column: 1, scope: !286)
!300 = distinct !DISubprogram(name: "goodG2BSink", scope: !33, file: !33, line: 54, type: !236, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !67)
!301 = !DILocalVariable(name: "data", scope: !300, file: !33, line: 56, type: !23)
!302 = !DILocation(line: 56, column: 15, scope: !300)
!303 = !DILocation(line: 56, column: 22, scope: !300)
!304 = !DILocation(line: 59, column: 1, scope: !300)
!305 = distinct !DISubprogram(name: "goodB2G", scope: !33, file: !33, line: 82, type: !236, scopeLine: 83, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !67)
!306 = !DILocalVariable(name: "data", scope: !305, file: !33, line: 84, type: !23)
!307 = !DILocation(line: 84, column: 15, scope: !305)
!308 = !DILocation(line: 85, column: 10, scope: !305)
!309 = !DILocation(line: 87, column: 23, scope: !305)
!310 = !DILocation(line: 87, column: 10, scope: !305)
!311 = !DILocation(line: 88, column: 9, scope: !312)
!312 = distinct !DILexicalBlock(scope: !305, file: !33, line: 88, column: 9)
!313 = !DILocation(line: 88, column: 14, scope: !312)
!314 = !DILocation(line: 88, column: 9, scope: !305)
!315 = !DILocation(line: 88, column: 24, scope: !316)
!316 = distinct !DILexicalBlock(scope: !312, file: !33, line: 88, column: 23)
!317 = !DILocation(line: 90, column: 5, scope: !305)
!318 = !DILocation(line: 90, column: 13, scope: !305)
!319 = !DILocation(line: 91, column: 23, scope: !305)
!320 = !DILocation(line: 91, column: 5, scope: !305)
!321 = !DILocation(line: 92, column: 57, scope: !305)
!322 = !DILocation(line: 92, column: 55, scope: !305)
!323 = !DILocation(line: 93, column: 5, scope: !305)
!324 = !DILocation(line: 94, column: 1, scope: !305)
!325 = distinct !DISubprogram(name: "goodB2GSink", scope: !33, file: !33, line: 75, type: !236, scopeLine: 76, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !67)
!326 = !DILocalVariable(name: "data", scope: !325, file: !33, line: 77, type: !23)
!327 = !DILocation(line: 77, column: 15, scope: !325)
!328 = !DILocation(line: 77, column: 22, scope: !325)
!329 = !DILocation(line: 79, column: 10, scope: !325)
!330 = !DILocation(line: 79, column: 5, scope: !325)
!331 = !DILocation(line: 80, column: 1, scope: !325)
