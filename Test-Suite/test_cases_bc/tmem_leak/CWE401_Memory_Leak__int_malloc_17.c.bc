; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tmem_leak/CWE401_Memory_Leak__int_malloc_17.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__int_malloc_17.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !23
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !28
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !33

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !54 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !58, metadata !DIExpression()), !dbg !59
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !60, metadata !DIExpression()), !dbg !61
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !62
  ret void, !dbg !63
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !64 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !65, metadata !DIExpression()), !dbg !66
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !71 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !72, metadata !DIExpression()), !dbg !73
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !76
  ret void, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !78 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !79, metadata !DIExpression()), !dbg !80
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !83
  ret void, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !85 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !86, metadata !DIExpression()), !dbg !87
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !90
  ret void, !dbg !91
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !92 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !93, metadata !DIExpression()), !dbg !94
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !95, metadata !DIExpression()), !dbg !96
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !97
  ret void, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !102, metadata !DIExpression()), !dbg !103
  %0 = load i32, ptr %n.addr, align 4, !dbg !104
  %conv = sext i32 %0 to i64, !dbg !104
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !105
  ret ptr %call, !dbg !106
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !107 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !108, metadata !DIExpression()), !dbg !109
  %0 = load i32, ptr %n.addr, align 4, !dbg !110
  %conv = sext i32 %0 to i64, !dbg !110
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !111
  ret ptr %call, !dbg !112
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !113 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %0 = load i32, ptr %n.addr, align 4, !dbg !116
  %conv = sext i32 %0 to i64, !dbg !116
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !117
  ret ptr %call, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !119 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !120, metadata !DIExpression()), !dbg !121
  %0 = load i32, ptr %n.addr, align 4, !dbg !122
  %conv = sext i32 %0 to i64, !dbg !122
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !123
  ret ptr %call, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !125 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !126, metadata !DIExpression()), !dbg !127
  %0 = load i32, ptr %n.addr, align 4, !dbg !128
  %conv = sext i32 %0 to i64, !dbg !128
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !129
  ret ptr %call, !dbg !130
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !131 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !132, metadata !DIExpression()), !dbg !133
  %0 = load i32, ptr %n.addr, align 4, !dbg !134
  %conv = sext i32 %0 to i64, !dbg !134
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !135
  ret ptr %call, !dbg !136
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !137 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !138, metadata !DIExpression()), !dbg !139
  %0 = load i32, ptr %n.addr, align 4, !dbg !140
  %conv = sext i32 %0 to i64, !dbg !140
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !141
  ret ptr %call, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !143 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !144, metadata !DIExpression()), !dbg !145
  %0 = load i32, ptr %n.addr, align 4, !dbg !146
  %conv = sext i32 %0 to i64, !dbg !146
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !147
  ret ptr %call, !dbg !148
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !149 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !152, metadata !DIExpression()), !dbg !153
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !154, metadata !DIExpression()), !dbg !155
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !156
  ret void, !dbg !157
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !158 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !162, metadata !DIExpression()), !dbg !163
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !164, metadata !DIExpression()), !dbg !165
  ret void, !dbg !166
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !167 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !168, metadata !DIExpression()), !dbg !169
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !170, metadata !DIExpression()), !dbg !171
  ret void, !dbg !172
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !173 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !176, metadata !DIExpression()), !dbg !177
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !178, metadata !DIExpression()), !dbg !179
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !180, metadata !DIExpression()), !dbg !181
  ret void, !dbg !182
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !183 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !186, metadata !DIExpression()), !dbg !187
  ret void, !dbg !188
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !189 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !190, metadata !DIExpression()), !dbg !191
  %0 = load ptr, ptr %str.addr, align 8, !dbg !192
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !193
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !194
  %call2 = call i32 @getchar(), !dbg !195
  ret void, !dbg !196
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !197 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !200, metadata !DIExpression()), !dbg !201
  %0 = load ptr, ptr %p.addr, align 8, !dbg !202
  store i32 0, ptr %0, align 4, !dbg !203
  %1 = load ptr, ptr %retval, align 8, !dbg !204
  ret ptr %1, !dbg !204
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !205 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !206, metadata !DIExpression()), !dbg !207
  %0 = load ptr, ptr %p.addr, align 8, !dbg !208
  store i32 0, ptr %0, align 4, !dbg !209
  %1 = load ptr, ptr %retval, align 8, !dbg !210
  ret ptr %1, !dbg !210
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !211 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !212, metadata !DIExpression()), !dbg !213
  %0 = load ptr, ptr %p.addr, align 8, !dbg !214
  call void @free(ptr noundef %0) #7, !dbg !215
  %1 = load ptr, ptr %retval, align 8, !dbg !216
  ret ptr %1, !dbg !216
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !217 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !218, metadata !DIExpression()), !dbg !219
  %0 = load ptr, ptr %p.addr, align 8, !dbg !220
  call void @free(ptr noundef %0) #7, !dbg !221
  %1 = load ptr, ptr %retval, align 8, !dbg !222
  ret ptr %1, !dbg !222
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !223 {
entry:
  ret void, !dbg !226
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__int_malloc_17_bad() #0 !dbg !227 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %i, metadata !228, metadata !DIExpression()), !dbg !229
  call void @llvm.dbg.declare(metadata ptr %j, metadata !230, metadata !DIExpression()), !dbg !231
  call void @llvm.dbg.declare(metadata ptr %data, metadata !232, metadata !DIExpression()), !dbg !233
  store ptr null, ptr %data, align 8, !dbg !234
  store i32 0, ptr %i, align 4, !dbg !235
  br label %for.cond, !dbg !237

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !238
  %cmp = icmp slt i32 %0, 1, !dbg !240
  br i1 %cmp, label %for.body, label %for.end, !dbg !241

for.body:                                         ; preds = %for.cond
  %call = call ptr @NFRMALLOC(i32 noundef 400), !dbg !242
  store ptr %call, ptr %data, align 8, !dbg !244
  %1 = load ptr, ptr %data, align 8, !dbg !245
  %cmp1 = icmp eq ptr %1, null, !dbg !247
  br i1 %cmp1, label %if.then, label %if.end, !dbg !248

if.then:                                          ; preds = %for.body
  call void @exit(i32 noundef -1) #8, !dbg !249
  unreachable, !dbg !249

if.end:                                           ; preds = %for.body
  %2 = load ptr, ptr %data, align 8, !dbg !251
  %arrayidx = getelementptr inbounds i32, ptr %2, i64 0, !dbg !251
  store i32 5, ptr %arrayidx, align 4, !dbg !252
  %3 = load ptr, ptr %data, align 8, !dbg !253
  %arrayidx2 = getelementptr inbounds i32, ptr %3, i64 0, !dbg !253
  %4 = load i32, ptr %arrayidx2, align 4, !dbg !253
  call void @printIntLine(i32 noundef %4), !dbg !254
  br label %for.inc, !dbg !255

for.inc:                                          ; preds = %if.end
  %5 = load i32, ptr %i, align 4, !dbg !256
  %inc = add nsw i32 %5, 1, !dbg !256
  store i32 %inc, ptr %i, align 4, !dbg !256
  br label %for.cond, !dbg !257, !llvm.loop !258

for.end:                                          ; preds = %for.cond
  store i32 0, ptr %j, align 4, !dbg !261
  br label %for.cond3, !dbg !263

for.cond3:                                        ; preds = %for.inc6, %for.end
  %6 = load i32, ptr %j, align 4, !dbg !264
  %cmp4 = icmp slt i32 %6, 1, !dbg !266
  br i1 %cmp4, label %for.body5, label %for.end8, !dbg !267

for.body5:                                        ; preds = %for.cond3
  br label %for.inc6, !dbg !268

for.inc6:                                         ; preds = %for.body5
  %7 = load i32, ptr %j, align 4, !dbg !270
  %inc7 = add nsw i32 %7, 1, !dbg !270
  store i32 %inc7, ptr %j, align 4, !dbg !270
  br label %for.cond3, !dbg !271, !llvm.loop !272

for.end8:                                         ; preds = %for.cond3
  ret void, !dbg !274
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

declare void @printIntLine(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__int_malloc_17_good() #0 !dbg !275 {
entry:
  call void @goodB2G(), !dbg !276
  call void @goodG2B(), !dbg !277
  ret void, !dbg !278
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !279 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !283, metadata !DIExpression()), !dbg !284
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !285, metadata !DIExpression()), !dbg !286
  %call = call i64 @time(ptr noundef null) #7, !dbg !287
  %conv = trunc i64 %call to i32, !dbg !288
  call void @srand(i32 noundef %conv) #7, !dbg !289
  call void @printLine(ptr noundef @.str.3), !dbg !290
  call void @CWE401_Memory_Leak__int_malloc_17_good(), !dbg !291
  call void @printLine(ptr noundef @.str.4), !dbg !292
  call void @printLine(ptr noundef @.str.5), !dbg !293
  call void @CWE401_Memory_Leak__int_malloc_17_bad(), !dbg !294
  call void @printLine(ptr noundef @.str.6), !dbg !295
  ret i32 0, !dbg !296
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !297 {
entry:
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %i, metadata !298, metadata !DIExpression()), !dbg !299
  call void @llvm.dbg.declare(metadata ptr %k, metadata !300, metadata !DIExpression()), !dbg !301
  call void @llvm.dbg.declare(metadata ptr %data, metadata !302, metadata !DIExpression()), !dbg !303
  store ptr null, ptr %data, align 8, !dbg !304
  store i32 0, ptr %i, align 4, !dbg !305
  br label %for.cond, !dbg !307

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !308
  %cmp = icmp slt i32 %0, 1, !dbg !310
  br i1 %cmp, label %for.body, label %for.end, !dbg !311

for.body:                                         ; preds = %for.cond
  %call = call ptr @SAFEMALLOC(i32 noundef 400), !dbg !312
  store ptr %call, ptr %data, align 8, !dbg !314
  %1 = load ptr, ptr %data, align 8, !dbg !315
  %cmp1 = icmp eq ptr %1, null, !dbg !317
  br i1 %cmp1, label %if.then, label %if.end, !dbg !318

if.then:                                          ; preds = %for.body
  call void @exit(i32 noundef -1) #8, !dbg !319
  unreachable, !dbg !319

if.end:                                           ; preds = %for.body
  %2 = load ptr, ptr %data, align 8, !dbg !321
  %arrayidx = getelementptr inbounds i32, ptr %2, i64 0, !dbg !321
  store i32 5, ptr %arrayidx, align 4, !dbg !322
  %3 = load ptr, ptr %data, align 8, !dbg !323
  %arrayidx2 = getelementptr inbounds i32, ptr %3, i64 0, !dbg !323
  %4 = load i32, ptr %arrayidx2, align 4, !dbg !323
  call void @printIntLine(i32 noundef %4), !dbg !324
  br label %for.inc, !dbg !325

for.inc:                                          ; preds = %if.end
  %5 = load i32, ptr %i, align 4, !dbg !326
  %inc = add nsw i32 %5, 1, !dbg !326
  store i32 %inc, ptr %i, align 4, !dbg !326
  br label %for.cond, !dbg !327, !llvm.loop !328

for.end:                                          ; preds = %for.cond
  store i32 0, ptr %k, align 4, !dbg !330
  br label %for.cond3, !dbg !332

for.cond3:                                        ; preds = %for.inc6, %for.end
  %6 = load i32, ptr %k, align 4, !dbg !333
  %cmp4 = icmp slt i32 %6, 1, !dbg !335
  br i1 %cmp4, label %for.body5, label %for.end8, !dbg !336

for.body5:                                        ; preds = %for.cond3
  %7 = load ptr, ptr %data, align 8, !dbg !337
  call void @free(ptr noundef %7) #7, !dbg !339
  br label %for.inc6, !dbg !340

for.inc6:                                         ; preds = %for.body5
  %8 = load i32, ptr %k, align 4, !dbg !341
  %inc7 = add nsw i32 %8, 1, !dbg !341
  store i32 %inc7, ptr %k, align 4, !dbg !341
  br label %for.cond3, !dbg !342, !llvm.loop !343

for.end8:                                         ; preds = %for.cond3
  ret void, !dbg !345
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !346 {
entry:
  %h = alloca i32, align 4
  %j = alloca i32, align 4
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %h, metadata !347, metadata !DIExpression()), !dbg !348
  call void @llvm.dbg.declare(metadata ptr %j, metadata !349, metadata !DIExpression()), !dbg !350
  call void @llvm.dbg.declare(metadata ptr %data, metadata !351, metadata !DIExpression()), !dbg !352
  store ptr null, ptr %data, align 8, !dbg !353
  store i32 0, ptr %h, align 4, !dbg !354
  br label %for.cond, !dbg !356

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %h, align 4, !dbg !357
  %cmp = icmp slt i32 %0, 1, !dbg !359
  br i1 %cmp, label %for.body, label %for.end, !dbg !360

for.body:                                         ; preds = %for.cond
  %1 = alloca i8, i64 400, align 16, !dbg !361
  store ptr %1, ptr %data, align 8, !dbg !363
  %2 = load ptr, ptr %data, align 8, !dbg !364
  %arrayidx = getelementptr inbounds i32, ptr %2, i64 0, !dbg !364
  store i32 5, ptr %arrayidx, align 4, !dbg !365
  %3 = load ptr, ptr %data, align 8, !dbg !366
  %arrayidx1 = getelementptr inbounds i32, ptr %3, i64 0, !dbg !366
  %4 = load i32, ptr %arrayidx1, align 4, !dbg !366
  call void @printIntLine(i32 noundef %4), !dbg !367
  br label %for.inc, !dbg !368

for.inc:                                          ; preds = %for.body
  %5 = load i32, ptr %h, align 4, !dbg !369
  %inc = add nsw i32 %5, 1, !dbg !369
  store i32 %inc, ptr %h, align 4, !dbg !369
  br label %for.cond, !dbg !370, !llvm.loop !371

for.end:                                          ; preds = %for.cond
  store i32 0, ptr %j, align 4, !dbg !373
  br label %for.cond2, !dbg !375

for.cond2:                                        ; preds = %for.inc5, %for.end
  %6 = load i32, ptr %j, align 4, !dbg !376
  %cmp3 = icmp slt i32 %6, 1, !dbg !378
  br i1 %cmp3, label %for.body4, label %for.end7, !dbg !379

for.body4:                                        ; preds = %for.cond2
  br label %for.inc5, !dbg !380

for.inc5:                                         ; preds = %for.body4
  %7 = load i32, ptr %j, align 4, !dbg !382
  %inc6 = add nsw i32 %7, 1, !dbg !382
  store i32 %inc6, ptr %j, align 4, !dbg !382
  br label %for.cond2, !dbg !383, !llvm.loop !384

for.end7:                                         ; preds = %for.cond2
  ret void, !dbg !386
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!38}
!llvm.module.flags = !{!46, !47, !48, !49, !50, !51, !52}
!llvm.ident = !{!53}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !19, line: 112, type: !20, isLocal: true, isDefinition: true)
!19 = !DIFile(filename: "src/tmem_leak/CWE401_Memory_Leak__int_malloc_17.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "046c7f1da56838020b1316a3338d5104")
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 18)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !19, line: 114, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 16)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(scope: null, file: !19, line: 117, type: !30, isLocal: true, isDefinition: true)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 17)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !19, line: 119, type: !35, isLocal: true, isDefinition: true)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 15)
!38 = distinct !DICompileUnit(language: DW_LANG_C11, file: !39, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !40, globals: !45, splitDebugInlining: false, nameTableKind: None)
!39 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__int_malloc_17.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "046c7f1da56838020b1316a3338d5104")
!40 = !{!41, !42, !44}
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64)
!43 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!44 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!45 = !{!0, !7, !12, !17, !23, !28, !33}
!46 = !{i32 7, !"Dwarf Version", i32 5}
!47 = !{i32 2, !"Debug Info Version", i32 3}
!48 = !{i32 1, !"wchar_size", i32 4}
!49 = !{i32 8, !"PIC Level", i32 2}
!50 = !{i32 7, !"PIE Level", i32 2}
!51 = !{i32 7, !"uwtable", i32 2}
!52 = !{i32 7, !"frame-pointer", i32 2}
!53 = !{!"clang version 16.0.0"}
!54 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !55, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!55 = !DISubroutineType(types: !56)
!56 = !{null, !41, !41}
!57 = !{}
!58 = !DILocalVariable(name: "p", arg: 1, scope: !54, file: !2, line: 4, type: !41)
!59 = !DILocation(line: 4, column: 22, scope: !54)
!60 = !DILocalVariable(name: "q", arg: 2, scope: !54, file: !2, line: 4, type: !41)
!61 = !DILocation(line: 4, column: 31, scope: !54)
!62 = !DILocation(line: 5, column: 3, scope: !54)
!63 = !DILocation(line: 6, column: 1, scope: !54)
!64 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !55, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!65 = !DILocalVariable(name: "p", arg: 1, scope: !64, file: !2, line: 8, type: !41)
!66 = !DILocation(line: 8, column: 25, scope: !64)
!67 = !DILocalVariable(name: "q", arg: 2, scope: !64, file: !2, line: 8, type: !41)
!68 = !DILocation(line: 8, column: 34, scope: !64)
!69 = !DILocation(line: 9, column: 3, scope: !64)
!70 = !DILocation(line: 10, column: 1, scope: !64)
!71 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !55, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!72 = !DILocalVariable(name: "p", arg: 1, scope: !71, file: !2, line: 12, type: !41)
!73 = !DILocation(line: 12, column: 21, scope: !71)
!74 = !DILocalVariable(name: "q", arg: 2, scope: !71, file: !2, line: 12, type: !41)
!75 = !DILocation(line: 12, column: 30, scope: !71)
!76 = !DILocation(line: 13, column: 3, scope: !71)
!77 = !DILocation(line: 14, column: 1, scope: !71)
!78 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !55, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!79 = !DILocalVariable(name: "p", arg: 1, scope: !78, file: !2, line: 16, type: !41)
!80 = !DILocation(line: 16, column: 20, scope: !78)
!81 = !DILocalVariable(name: "q", arg: 2, scope: !78, file: !2, line: 16, type: !41)
!82 = !DILocation(line: 16, column: 29, scope: !78)
!83 = !DILocation(line: 17, column: 3, scope: !78)
!84 = !DILocation(line: 18, column: 1, scope: !78)
!85 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !55, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!86 = !DILocalVariable(name: "p", arg: 1, scope: !85, file: !2, line: 20, type: !41)
!87 = !DILocation(line: 20, column: 34, scope: !85)
!88 = !DILocalVariable(name: "q", arg: 2, scope: !85, file: !2, line: 20, type: !41)
!89 = !DILocation(line: 20, column: 43, scope: !85)
!90 = !DILocation(line: 21, column: 3, scope: !85)
!91 = !DILocation(line: 22, column: 1, scope: !85)
!92 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !55, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!93 = !DILocalVariable(name: "p", arg: 1, scope: !92, file: !2, line: 24, type: !41)
!94 = !DILocation(line: 24, column: 33, scope: !92)
!95 = !DILocalVariable(name: "q", arg: 2, scope: !92, file: !2, line: 24, type: !41)
!96 = !DILocation(line: 24, column: 42, scope: !92)
!97 = !DILocation(line: 25, column: 3, scope: !92)
!98 = !DILocation(line: 26, column: 1, scope: !92)
!99 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !100, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!100 = !DISubroutineType(types: !101)
!101 = !{!41, !43}
!102 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !2, line: 29, type: !43)
!103 = !DILocation(line: 29, column: 22, scope: !99)
!104 = !DILocation(line: 30, column: 17, scope: !99)
!105 = !DILocation(line: 30, column: 10, scope: !99)
!106 = !DILocation(line: 30, column: 3, scope: !99)
!107 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !100, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!108 = !DILocalVariable(name: "n", arg: 1, scope: !107, file: !2, line: 33, type: !43)
!109 = !DILocation(line: 33, column: 28, scope: !107)
!110 = !DILocation(line: 34, column: 19, scope: !107)
!111 = !DILocation(line: 34, column: 12, scope: !107)
!112 = !DILocation(line: 34, column: 5, scope: !107)
!113 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !100, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!114 = !DILocalVariable(name: "n", arg: 1, scope: !113, file: !2, line: 37, type: !43)
!115 = !DILocation(line: 37, column: 21, scope: !113)
!116 = !DILocation(line: 38, column: 17, scope: !113)
!117 = !DILocation(line: 38, column: 10, scope: !113)
!118 = !DILocation(line: 38, column: 3, scope: !113)
!119 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !100, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!120 = !DILocalVariable(name: "n", arg: 1, scope: !119, file: !2, line: 41, type: !43)
!121 = !DILocation(line: 41, column: 21, scope: !119)
!122 = !DILocation(line: 42, column: 17, scope: !119)
!123 = !DILocation(line: 42, column: 10, scope: !119)
!124 = !DILocation(line: 42, column: 3, scope: !119)
!125 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !100, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!126 = !DILocalVariable(name: "n", arg: 1, scope: !125, file: !2, line: 45, type: !43)
!127 = !DILocation(line: 45, column: 21, scope: !125)
!128 = !DILocation(line: 46, column: 17, scope: !125)
!129 = !DILocation(line: 46, column: 10, scope: !125)
!130 = !DILocation(line: 46, column: 3, scope: !125)
!131 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !100, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!132 = !DILocalVariable(name: "n", arg: 1, scope: !131, file: !2, line: 49, type: !43)
!133 = !DILocation(line: 49, column: 21, scope: !131)
!134 = !DILocation(line: 50, column: 17, scope: !131)
!135 = !DILocation(line: 50, column: 10, scope: !131)
!136 = !DILocation(line: 50, column: 3, scope: !131)
!137 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !100, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!138 = !DILocalVariable(name: "n", arg: 1, scope: !137, file: !2, line: 53, type: !43)
!139 = !DILocation(line: 53, column: 21, scope: !137)
!140 = !DILocation(line: 54, column: 17, scope: !137)
!141 = !DILocation(line: 54, column: 10, scope: !137)
!142 = !DILocation(line: 54, column: 3, scope: !137)
!143 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !100, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!144 = !DILocalVariable(name: "n", arg: 1, scope: !143, file: !2, line: 57, type: !43)
!145 = !DILocation(line: 57, column: 18, scope: !143)
!146 = !DILocation(line: 58, column: 17, scope: !143)
!147 = !DILocation(line: 58, column: 10, scope: !143)
!148 = !DILocation(line: 58, column: 3, scope: !143)
!149 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !150, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!150 = !DISubroutineType(types: !151)
!151 = !{null, !43, !43}
!152 = !DILocalVariable(name: "id", arg: 1, scope: !149, file: !2, line: 67, type: !43)
!153 = !DILocation(line: 67, column: 20, scope: !149)
!154 = !DILocalVariable(name: "flags", arg: 2, scope: !149, file: !2, line: 67, type: !43)
!155 = !DILocation(line: 67, column: 28, scope: !149)
!156 = !DILocation(line: 68, column: 3, scope: !149)
!157 = !DILocation(line: 69, column: 1, scope: !149)
!158 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !159, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!159 = !DISubroutineType(types: !160)
!160 = !{null, !43, !161}
!161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!162 = !DILocalVariable(name: "thdid", arg: 1, scope: !158, file: !2, line: 79, type: !43)
!163 = !DILocation(line: 79, column: 21, scope: !158)
!164 = !DILocalVariable(name: "cxt", arg: 2, scope: !158, file: !2, line: 79, type: !161)
!165 = !DILocation(line: 79, column: 34, scope: !158)
!166 = !DILocation(line: 81, column: 1, scope: !158)
!167 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !159, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!168 = !DILocalVariable(name: "thdid", arg: 1, scope: !167, file: !2, line: 82, type: !43)
!169 = !DILocation(line: 82, column: 21, scope: !167)
!170 = !DILocalVariable(name: "cxt", arg: 2, scope: !167, file: !2, line: 82, type: !161)
!171 = !DILocation(line: 82, column: 33, scope: !167)
!172 = !DILocation(line: 84, column: 1, scope: !167)
!173 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !174, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!174 = !DISubroutineType(types: !175)
!175 = !{null, !43, !161, !161}
!176 = !DILocalVariable(name: "thdid", arg: 1, scope: !173, file: !2, line: 85, type: !43)
!177 = !DILocation(line: 85, column: 26, scope: !173)
!178 = !DILocalVariable(name: "cxt", arg: 2, scope: !173, file: !2, line: 85, type: !161)
!179 = !DILocation(line: 85, column: 38, scope: !173)
!180 = !DILocalVariable(name: "lev", arg: 3, scope: !173, file: !2, line: 85, type: !161)
!181 = !DILocation(line: 85, column: 49, scope: !173)
!182 = !DILocation(line: 87, column: 1, scope: !173)
!183 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !184, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!184 = !DISubroutineType(types: !185)
!185 = !{null, !161}
!186 = !DILocalVariable(name: "lockname", arg: 1, scope: !183, file: !2, line: 89, type: !161)
!187 = !DILocation(line: 89, column: 17, scope: !183)
!188 = !DILocation(line: 91, column: 1, scope: !183)
!189 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !184, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!190 = !DILocalVariable(name: "str", arg: 1, scope: !189, file: !2, line: 93, type: !161)
!191 = !DILocation(line: 93, column: 18, scope: !189)
!192 = !DILocation(line: 94, column: 18, scope: !189)
!193 = !DILocation(line: 94, column: 3, scope: !189)
!194 = !DILocation(line: 95, column: 3, scope: !189)
!195 = !DILocation(line: 96, column: 3, scope: !189)
!196 = !DILocation(line: 97, column: 1, scope: !189)
!197 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !198, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!198 = !DISubroutineType(types: !199)
!199 = !{!41, !42}
!200 = !DILocalVariable(name: "p", arg: 1, scope: !197, file: !2, line: 100, type: !42)
!201 = !DILocation(line: 100, column: 24, scope: !197)
!202 = !DILocation(line: 101, column: 6, scope: !197)
!203 = !DILocation(line: 101, column: 8, scope: !197)
!204 = !DILocation(line: 102, column: 1, scope: !197)
!205 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !198, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!206 = !DILocalVariable(name: "p", arg: 1, scope: !205, file: !2, line: 104, type: !42)
!207 = !DILocation(line: 104, column: 20, scope: !205)
!208 = !DILocation(line: 105, column: 6, scope: !205)
!209 = !DILocation(line: 105, column: 8, scope: !205)
!210 = !DILocation(line: 106, column: 1, scope: !205)
!211 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !198, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!212 = !DILocalVariable(name: "p", arg: 1, scope: !211, file: !2, line: 110, type: !42)
!213 = !DILocation(line: 110, column: 22, scope: !211)
!214 = !DILocation(line: 111, column: 10, scope: !211)
!215 = !DILocation(line: 111, column: 5, scope: !211)
!216 = !DILocation(line: 112, column: 1, scope: !211)
!217 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !198, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!218 = !DILocalVariable(name: "p", arg: 1, scope: !217, file: !2, line: 115, type: !42)
!219 = !DILocation(line: 115, column: 24, scope: !217)
!220 = !DILocation(line: 116, column: 10, scope: !217)
!221 = !DILocation(line: 116, column: 5, scope: !217)
!222 = !DILocation(line: 117, column: 1, scope: !217)
!223 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !224, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!224 = !DISubroutineType(types: !225)
!225 = !{null}
!226 = !DILocation(line: 135, column: 20, scope: !223)
!227 = distinct !DISubprogram(name: "CWE401_Memory_Leak__int_malloc_17_bad", scope: !19, file: !19, line: 24, type: !224, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!228 = !DILocalVariable(name: "i", scope: !227, file: !19, line: 26, type: !43)
!229 = !DILocation(line: 26, column: 9, scope: !227)
!230 = !DILocalVariable(name: "j", scope: !227, file: !19, line: 26, type: !43)
!231 = !DILocation(line: 26, column: 11, scope: !227)
!232 = !DILocalVariable(name: "data", scope: !227, file: !19, line: 27, type: !42)
!233 = !DILocation(line: 27, column: 11, scope: !227)
!234 = !DILocation(line: 28, column: 10, scope: !227)
!235 = !DILocation(line: 29, column: 11, scope: !236)
!236 = distinct !DILexicalBlock(scope: !227, file: !19, line: 29, column: 5)
!237 = !DILocation(line: 29, column: 9, scope: !236)
!238 = !DILocation(line: 29, column: 16, scope: !239)
!239 = distinct !DILexicalBlock(scope: !236, file: !19, line: 29, column: 5)
!240 = !DILocation(line: 29, column: 18, scope: !239)
!241 = !DILocation(line: 29, column: 5, scope: !236)
!242 = !DILocation(line: 32, column: 23, scope: !243)
!243 = distinct !DILexicalBlock(scope: !239, file: !19, line: 30, column: 5)
!244 = !DILocation(line: 32, column: 14, scope: !243)
!245 = !DILocation(line: 33, column: 13, scope: !246)
!246 = distinct !DILexicalBlock(scope: !243, file: !19, line: 33, column: 13)
!247 = !DILocation(line: 33, column: 18, scope: !246)
!248 = !DILocation(line: 33, column: 13, scope: !243)
!249 = !DILocation(line: 33, column: 28, scope: !250)
!250 = distinct !DILexicalBlock(scope: !246, file: !19, line: 33, column: 27)
!251 = !DILocation(line: 35, column: 9, scope: !243)
!252 = !DILocation(line: 35, column: 17, scope: !243)
!253 = !DILocation(line: 36, column: 22, scope: !243)
!254 = !DILocation(line: 36, column: 9, scope: !243)
!255 = !DILocation(line: 37, column: 5, scope: !243)
!256 = !DILocation(line: 29, column: 24, scope: !239)
!257 = !DILocation(line: 29, column: 5, scope: !239)
!258 = distinct !{!258, !241, !259, !260}
!259 = !DILocation(line: 37, column: 5, scope: !236)
!260 = !{!"llvm.loop.mustprogress"}
!261 = !DILocation(line: 38, column: 11, scope: !262)
!262 = distinct !DILexicalBlock(scope: !227, file: !19, line: 38, column: 5)
!263 = !DILocation(line: 38, column: 9, scope: !262)
!264 = !DILocation(line: 38, column: 16, scope: !265)
!265 = distinct !DILexicalBlock(scope: !262, file: !19, line: 38, column: 5)
!266 = !DILocation(line: 38, column: 18, scope: !265)
!267 = !DILocation(line: 38, column: 5, scope: !262)
!268 = !DILocation(line: 42, column: 5, scope: !269)
!269 = distinct !DILexicalBlock(scope: !265, file: !19, line: 39, column: 5)
!270 = !DILocation(line: 38, column: 24, scope: !265)
!271 = !DILocation(line: 38, column: 5, scope: !265)
!272 = distinct !{!272, !267, !273, !260}
!273 = !DILocation(line: 42, column: 5, scope: !262)
!274 = !DILocation(line: 43, column: 1, scope: !227)
!275 = distinct !DISubprogram(name: "CWE401_Memory_Leak__int_malloc_17_good", scope: !19, file: !19, line: 92, type: !224, scopeLine: 93, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!276 = !DILocation(line: 94, column: 5, scope: !275)
!277 = !DILocation(line: 95, column: 5, scope: !275)
!278 = !DILocation(line: 96, column: 1, scope: !275)
!279 = distinct !DISubprogram(name: "main", scope: !19, file: !19, line: 107, type: !280, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !38, retainedNodes: !57)
!280 = !DISubroutineType(types: !281)
!281 = !{!43, !43, !282}
!282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !161, size: 64)
!283 = !DILocalVariable(name: "argc", arg: 1, scope: !279, file: !19, line: 107, type: !43)
!284 = !DILocation(line: 107, column: 14, scope: !279)
!285 = !DILocalVariable(name: "argv", arg: 2, scope: !279, file: !19, line: 107, type: !282)
!286 = !DILocation(line: 107, column: 27, scope: !279)
!287 = !DILocation(line: 110, column: 22, scope: !279)
!288 = !DILocation(line: 110, column: 12, scope: !279)
!289 = !DILocation(line: 110, column: 5, scope: !279)
!290 = !DILocation(line: 112, column: 5, scope: !279)
!291 = !DILocation(line: 113, column: 5, scope: !279)
!292 = !DILocation(line: 114, column: 5, scope: !279)
!293 = !DILocation(line: 117, column: 5, scope: !279)
!294 = !DILocation(line: 118, column: 5, scope: !279)
!295 = !DILocation(line: 119, column: 5, scope: !279)
!296 = !DILocation(line: 121, column: 5, scope: !279)
!297 = distinct !DISubprogram(name: "goodB2G", scope: !19, file: !19, line: 50, type: !224, scopeLine: 51, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !57)
!298 = !DILocalVariable(name: "i", scope: !297, file: !19, line: 52, type: !43)
!299 = !DILocation(line: 52, column: 9, scope: !297)
!300 = !DILocalVariable(name: "k", scope: !297, file: !19, line: 52, type: !43)
!301 = !DILocation(line: 52, column: 11, scope: !297)
!302 = !DILocalVariable(name: "data", scope: !297, file: !19, line: 53, type: !42)
!303 = !DILocation(line: 53, column: 11, scope: !297)
!304 = !DILocation(line: 54, column: 10, scope: !297)
!305 = !DILocation(line: 55, column: 11, scope: !306)
!306 = distinct !DILexicalBlock(scope: !297, file: !19, line: 55, column: 5)
!307 = !DILocation(line: 55, column: 9, scope: !306)
!308 = !DILocation(line: 55, column: 16, scope: !309)
!309 = distinct !DILexicalBlock(scope: !306, file: !19, line: 55, column: 5)
!310 = !DILocation(line: 55, column: 18, scope: !309)
!311 = !DILocation(line: 55, column: 5, scope: !306)
!312 = !DILocation(line: 58, column: 23, scope: !313)
!313 = distinct !DILexicalBlock(scope: !309, file: !19, line: 56, column: 5)
!314 = !DILocation(line: 58, column: 14, scope: !313)
!315 = !DILocation(line: 59, column: 13, scope: !316)
!316 = distinct !DILexicalBlock(scope: !313, file: !19, line: 59, column: 13)
!317 = !DILocation(line: 59, column: 18, scope: !316)
!318 = !DILocation(line: 59, column: 13, scope: !313)
!319 = !DILocation(line: 59, column: 28, scope: !320)
!320 = distinct !DILexicalBlock(scope: !316, file: !19, line: 59, column: 27)
!321 = !DILocation(line: 61, column: 9, scope: !313)
!322 = !DILocation(line: 61, column: 17, scope: !313)
!323 = !DILocation(line: 62, column: 22, scope: !313)
!324 = !DILocation(line: 62, column: 9, scope: !313)
!325 = !DILocation(line: 63, column: 5, scope: !313)
!326 = !DILocation(line: 55, column: 24, scope: !309)
!327 = !DILocation(line: 55, column: 5, scope: !309)
!328 = distinct !{!328, !311, !329, !260}
!329 = !DILocation(line: 63, column: 5, scope: !306)
!330 = !DILocation(line: 64, column: 11, scope: !331)
!331 = distinct !DILexicalBlock(scope: !297, file: !19, line: 64, column: 5)
!332 = !DILocation(line: 64, column: 9, scope: !331)
!333 = !DILocation(line: 64, column: 16, scope: !334)
!334 = distinct !DILexicalBlock(scope: !331, file: !19, line: 64, column: 5)
!335 = !DILocation(line: 64, column: 18, scope: !334)
!336 = !DILocation(line: 64, column: 5, scope: !331)
!337 = !DILocation(line: 67, column: 14, scope: !338)
!338 = distinct !DILexicalBlock(scope: !334, file: !19, line: 65, column: 5)
!339 = !DILocation(line: 67, column: 9, scope: !338)
!340 = !DILocation(line: 68, column: 5, scope: !338)
!341 = !DILocation(line: 64, column: 24, scope: !334)
!342 = !DILocation(line: 64, column: 5, scope: !334)
!343 = distinct !{!343, !336, !344, !260}
!344 = !DILocation(line: 68, column: 5, scope: !331)
!345 = !DILocation(line: 69, column: 1, scope: !297)
!346 = distinct !DISubprogram(name: "goodG2B", scope: !19, file: !19, line: 72, type: !224, scopeLine: 73, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !38, retainedNodes: !57)
!347 = !DILocalVariable(name: "h", scope: !346, file: !19, line: 74, type: !43)
!348 = !DILocation(line: 74, column: 9, scope: !346)
!349 = !DILocalVariable(name: "j", scope: !346, file: !19, line: 74, type: !43)
!350 = !DILocation(line: 74, column: 11, scope: !346)
!351 = !DILocalVariable(name: "data", scope: !346, file: !19, line: 75, type: !42)
!352 = !DILocation(line: 75, column: 11, scope: !346)
!353 = !DILocation(line: 76, column: 10, scope: !346)
!354 = !DILocation(line: 77, column: 11, scope: !355)
!355 = distinct !DILexicalBlock(scope: !346, file: !19, line: 77, column: 5)
!356 = !DILocation(line: 77, column: 9, scope: !355)
!357 = !DILocation(line: 77, column: 16, scope: !358)
!358 = distinct !DILexicalBlock(scope: !355, file: !19, line: 77, column: 5)
!359 = !DILocation(line: 77, column: 18, scope: !358)
!360 = !DILocation(line: 77, column: 5, scope: !355)
!361 = !DILocation(line: 80, column: 23, scope: !362)
!362 = distinct !DILexicalBlock(scope: !358, file: !19, line: 78, column: 5)
!363 = !DILocation(line: 80, column: 14, scope: !362)
!364 = !DILocation(line: 82, column: 9, scope: !362)
!365 = !DILocation(line: 82, column: 17, scope: !362)
!366 = !DILocation(line: 83, column: 22, scope: !362)
!367 = !DILocation(line: 83, column: 9, scope: !362)
!368 = !DILocation(line: 84, column: 5, scope: !362)
!369 = !DILocation(line: 77, column: 24, scope: !358)
!370 = !DILocation(line: 77, column: 5, scope: !358)
!371 = distinct !{!371, !360, !372, !260}
!372 = !DILocation(line: 84, column: 5, scope: !355)
!373 = !DILocation(line: 85, column: 11, scope: !374)
!374 = distinct !DILexicalBlock(scope: !346, file: !19, line: 85, column: 5)
!375 = !DILocation(line: 85, column: 9, scope: !374)
!376 = !DILocation(line: 85, column: 16, scope: !377)
!377 = distinct !DILexicalBlock(scope: !374, file: !19, line: 85, column: 5)
!378 = !DILocation(line: 85, column: 18, scope: !377)
!379 = !DILocation(line: 85, column: 5, scope: !374)
!380 = !DILocation(line: 89, column: 5, scope: !381)
!381 = distinct !DILexicalBlock(scope: !377, file: !19, line: 86, column: 5)
!382 = !DILocation(line: 85, column: 24, scope: !377)
!383 = !DILocation(line: 85, column: 5, scope: !377)
!384 = distinct !{!384, !379, !385, !260}
!385 = !DILocation(line: 89, column: 5, scope: !374)
!386 = !DILocation(line: 90, column: 1, scope: !346)
