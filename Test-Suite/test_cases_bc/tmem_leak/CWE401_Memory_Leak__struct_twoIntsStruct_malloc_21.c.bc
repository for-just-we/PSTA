; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tmem_leak/CWE401_Memory_Leak__struct_twoIntsStruct_malloc_21.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__struct_twoIntsStruct_malloc_21.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@badStatic = internal global i32 0, align 4, !dbg !17
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !34
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !40
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !45
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !50
@goodB2G1Static = internal global i32 0, align 4, !dbg !55
@.str.7 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1, !dbg !57
@goodB2G2Static = internal global i32 0, align 4, !dbg !62
@goodG2BStatic = internal global i32 0, align 4, !dbg !64

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !74 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !78, metadata !DIExpression()), !dbg !79
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !82
  ret void, !dbg !83
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !84 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !85, metadata !DIExpression()), !dbg !86
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !87, metadata !DIExpression()), !dbg !88
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !89
  ret void, !dbg !90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !91 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !92, metadata !DIExpression()), !dbg !93
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !96
  ret void, !dbg !97
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !98 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !99, metadata !DIExpression()), !dbg !100
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !101, metadata !DIExpression()), !dbg !102
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !103
  ret void, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !105 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !106, metadata !DIExpression()), !dbg !107
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !108, metadata !DIExpression()), !dbg !109
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !110
  ret void, !dbg !111
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !112 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !113, metadata !DIExpression()), !dbg !114
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !117
  ret void, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !119 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !122, metadata !DIExpression()), !dbg !123
  %0 = load i32, ptr %n.addr, align 4, !dbg !124
  %conv = sext i32 %0 to i64, !dbg !124
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !125
  ret ptr %call, !dbg !126
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !127 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !128, metadata !DIExpression()), !dbg !129
  %0 = load i32, ptr %n.addr, align 4, !dbg !130
  %conv = sext i32 %0 to i64, !dbg !130
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !131
  ret ptr %call, !dbg !132
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !133 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !134, metadata !DIExpression()), !dbg !135
  %0 = load i32, ptr %n.addr, align 4, !dbg !136
  %conv = sext i32 %0 to i64, !dbg !136
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !137
  ret ptr %call, !dbg !138
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !139 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !140, metadata !DIExpression()), !dbg !141
  %0 = load i32, ptr %n.addr, align 4, !dbg !142
  %conv = sext i32 %0 to i64, !dbg !142
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !143
  ret ptr %call, !dbg !144
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !145 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !146, metadata !DIExpression()), !dbg !147
  %0 = load i32, ptr %n.addr, align 4, !dbg !148
  %conv = sext i32 %0 to i64, !dbg !148
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !149
  ret ptr %call, !dbg !150
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !151 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !152, metadata !DIExpression()), !dbg !153
  %0 = load i32, ptr %n.addr, align 4, !dbg !154
  %conv = sext i32 %0 to i64, !dbg !154
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !155
  ret ptr %call, !dbg !156
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !157 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !158, metadata !DIExpression()), !dbg !159
  %0 = load i32, ptr %n.addr, align 4, !dbg !160
  %conv = sext i32 %0 to i64, !dbg !160
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !161
  ret ptr %call, !dbg !162
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !163 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !164, metadata !DIExpression()), !dbg !165
  %0 = load i32, ptr %n.addr, align 4, !dbg !166
  %conv = sext i32 %0 to i64, !dbg !166
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !167
  ret ptr %call, !dbg !168
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !169 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !172, metadata !DIExpression()), !dbg !173
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !174, metadata !DIExpression()), !dbg !175
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !176
  ret void, !dbg !177
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !178 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !182, metadata !DIExpression()), !dbg !183
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !184, metadata !DIExpression()), !dbg !185
  ret void, !dbg !186
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !187 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !188, metadata !DIExpression()), !dbg !189
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !190, metadata !DIExpression()), !dbg !191
  ret void, !dbg !192
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !193 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !196, metadata !DIExpression()), !dbg !197
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !198, metadata !DIExpression()), !dbg !199
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !200, metadata !DIExpression()), !dbg !201
  ret void, !dbg !202
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !203 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !206, metadata !DIExpression()), !dbg !207
  ret void, !dbg !208
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !209 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !210, metadata !DIExpression()), !dbg !211
  %0 = load ptr, ptr %str.addr, align 8, !dbg !212
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !213
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !214
  %call2 = call i32 @getchar(), !dbg !215
  ret void, !dbg !216
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !217 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !221, metadata !DIExpression()), !dbg !222
  %0 = load ptr, ptr %p.addr, align 8, !dbg !223
  store i32 0, ptr %0, align 4, !dbg !224
  %1 = load ptr, ptr %retval, align 8, !dbg !225
  ret ptr %1, !dbg !225
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !226 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !227, metadata !DIExpression()), !dbg !228
  %0 = load ptr, ptr %p.addr, align 8, !dbg !229
  store i32 0, ptr %0, align 4, !dbg !230
  %1 = load ptr, ptr %retval, align 8, !dbg !231
  ret ptr %1, !dbg !231
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !232 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !233, metadata !DIExpression()), !dbg !234
  %0 = load ptr, ptr %p.addr, align 8, !dbg !235
  call void @free(ptr noundef %0) #7, !dbg !236
  %1 = load ptr, ptr %retval, align 8, !dbg !237
  ret ptr %1, !dbg !237
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !238 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !239, metadata !DIExpression()), !dbg !240
  %0 = load ptr, ptr %p.addr, align 8, !dbg !241
  call void @free(ptr noundef %0) #7, !dbg !242
  %1 = load ptr, ptr %retval, align 8, !dbg !243
  ret ptr %1, !dbg !243
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !244 {
entry:
  ret void, !dbg !247
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_21_bad() #0 !dbg !248 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !249, metadata !DIExpression()), !dbg !250
  store ptr null, ptr %data, align 8, !dbg !251
  %call = call ptr @NFRMALLOC(i32 noundef 800), !dbg !252
  store ptr %call, ptr %data, align 8, !dbg !253
  %0 = load ptr, ptr %data, align 8, !dbg !254
  %cmp = icmp eq ptr %0, null, !dbg !256
  br i1 %cmp, label %if.then, label %if.end, !dbg !257

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !258
  unreachable, !dbg !258

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !260
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %1, i64 0, !dbg !260
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !261
  store i32 0, ptr %intOne, align 4, !dbg !262
  %2 = load ptr, ptr %data, align 8, !dbg !263
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !263
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !264
  store i32 0, ptr %intTwo, align 4, !dbg !265
  %3 = load ptr, ptr %data, align 8, !dbg !266
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !266
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !267
  store i32 1, ptr @badStatic, align 4, !dbg !268
  %4 = load ptr, ptr %data, align 8, !dbg !269
  call void @badSink(ptr noundef %4), !dbg !270
  ret void, !dbg !271
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

declare void @printStructLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @badSink(ptr noundef %data) #0 !dbg !272 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !275, metadata !DIExpression()), !dbg !276
  %0 = load i32, ptr @badStatic, align 4, !dbg !277
  %tobool = icmp ne i32 %0, 0, !dbg !277
  br i1 %tobool, label %if.then, label %if.end, !dbg !279

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !280

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !282
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_21_good() #0 !dbg !283 {
entry:
  call void @goodB2G1(), !dbg !284
  call void @goodB2G2(), !dbg !285
  call void @goodG2B(), !dbg !286
  ret void, !dbg !287
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !288 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !292, metadata !DIExpression()), !dbg !293
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !294, metadata !DIExpression()), !dbg !295
  %call = call i64 @time(ptr noundef null) #7, !dbg !296
  %conv = trunc i64 %call to i32, !dbg !297
  call void @srand(i32 noundef %conv) #7, !dbg !298
  call void @printLine(ptr noundef @.str.3), !dbg !299
  call void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_21_good(), !dbg !300
  call void @printLine(ptr noundef @.str.4), !dbg !301
  call void @printLine(ptr noundef @.str.5), !dbg !302
  call void @CWE401_Memory_Leak__struct_twoIntsStruct_malloc_21_bad(), !dbg !303
  call void @printLine(ptr noundef @.str.6), !dbg !304
  ret i32 0, !dbg !305
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 !dbg !306 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !307, metadata !DIExpression()), !dbg !308
  store ptr null, ptr %data, align 8, !dbg !309
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !310
  store ptr %call, ptr %data, align 8, !dbg !311
  %0 = load ptr, ptr %data, align 8, !dbg !312
  %cmp = icmp eq ptr %0, null, !dbg !314
  br i1 %cmp, label %if.then, label %if.end, !dbg !315

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !316
  unreachable, !dbg !316

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !318
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %1, i64 0, !dbg !318
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !319
  store i32 0, ptr %intOne, align 4, !dbg !320
  %2 = load ptr, ptr %data, align 8, !dbg !321
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !321
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !322
  store i32 0, ptr %intTwo, align 4, !dbg !323
  %3 = load ptr, ptr %data, align 8, !dbg !324
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !324
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !325
  store i32 0, ptr @goodB2G1Static, align 4, !dbg !326
  %4 = load ptr, ptr %data, align 8, !dbg !327
  call void @goodB2G1Sink(ptr noundef %4), !dbg !328
  ret void, !dbg !329
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1Sink(ptr noundef %data) #0 !dbg !330 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !331, metadata !DIExpression()), !dbg !332
  %0 = load i32, ptr @goodB2G1Static, align 4, !dbg !333
  %tobool = icmp ne i32 %0, 0, !dbg !333
  br i1 %tobool, label %if.then, label %if.else, !dbg !335

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.7), !dbg !336
  br label %if.end, !dbg !338

if.else:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !339
  call void @free(ptr noundef %1) #7, !dbg !341
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !342
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 !dbg !343 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !344, metadata !DIExpression()), !dbg !345
  store ptr null, ptr %data, align 8, !dbg !346
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !347
  store ptr %call, ptr %data, align 8, !dbg !348
  %0 = load ptr, ptr %data, align 8, !dbg !349
  %cmp = icmp eq ptr %0, null, !dbg !351
  br i1 %cmp, label %if.then, label %if.end, !dbg !352

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !353
  unreachable, !dbg !353

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !355
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %1, i64 0, !dbg !355
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !356
  store i32 0, ptr %intOne, align 4, !dbg !357
  %2 = load ptr, ptr %data, align 8, !dbg !358
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !358
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !359
  store i32 0, ptr %intTwo, align 4, !dbg !360
  %3 = load ptr, ptr %data, align 8, !dbg !361
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !361
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !362
  store i32 1, ptr @goodB2G2Static, align 4, !dbg !363
  %4 = load ptr, ptr %data, align 8, !dbg !364
  call void @goodB2G2Sink(ptr noundef %4), !dbg !365
  ret void, !dbg !366
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2Sink(ptr noundef %data) #0 !dbg !367 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !368, metadata !DIExpression()), !dbg !369
  %0 = load i32, ptr @goodB2G2Static, align 4, !dbg !370
  %tobool = icmp ne i32 %0, 0, !dbg !370
  br i1 %tobool, label %if.then, label %if.end, !dbg !372

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !373
  call void @free(ptr noundef %1) #7, !dbg !375
  br label %if.end, !dbg !376

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !377
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !378 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !379, metadata !DIExpression()), !dbg !380
  store ptr null, ptr %data, align 8, !dbg !381
  %0 = alloca i8, i64 800, align 16, !dbg !382
  store ptr %0, ptr %data, align 8, !dbg !383
  %1 = load ptr, ptr %data, align 8, !dbg !384
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %1, i64 0, !dbg !384
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !385
  store i32 0, ptr %intOne, align 4, !dbg !386
  %2 = load ptr, ptr %data, align 8, !dbg !387
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !387
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !388
  store i32 0, ptr %intTwo, align 4, !dbg !389
  %3 = load ptr, ptr %data, align 8, !dbg !390
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !390
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !391
  store i32 1, ptr @goodG2BStatic, align 4, !dbg !392
  %4 = load ptr, ptr %data, align 8, !dbg !393
  call void @goodG2BSink(ptr noundef %4), !dbg !394
  ret void, !dbg !395
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2BSink(ptr noundef %data) #0 !dbg !396 {
entry:
  %data.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !397, metadata !DIExpression()), !dbg !398
  %0 = load i32, ptr @goodG2BStatic, align 4, !dbg !399
  %tobool = icmp ne i32 %0, 0, !dbg !399
  br i1 %tobool, label %if.then, label %if.end, !dbg !401

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !402

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !404
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!66, !67, !68, !69, !70, !71, !72}
!llvm.ident = !{!73}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "badStatic", scope: !19, file: !36, line: 25, type: !28, isLocal: true, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !33, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__struct_twoIntsStruct_malloc_21.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "9700f8df3f418a48b91e111b55937f34")
!21 = !{!22, !23, !30, !32}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !25, line: 96, size: 64, elements: !26)
!25 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!26 = !{!27, !29}
!27 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !24, file: !25, line: 98, baseType: !28, size: 32)
!28 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!29 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !24, file: !25, line: 99, baseType: !28, size: 32, offset: 32)
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64)
!31 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !25, line: 100, baseType: !24)
!32 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!33 = !{!0, !7, !12, !34, !40, !45, !50, !17, !55, !57, !62, !64}
!34 = !DIGlobalVariableExpression(var: !35, expr: !DIExpression())
!35 = distinct !DIGlobalVariable(scope: null, file: !36, line: 160, type: !37, isLocal: true, isDefinition: true)
!36 = !DIFile(filename: "src/tmem_leak/CWE401_Memory_Leak__struct_twoIntsStruct_malloc_21.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "9700f8df3f418a48b91e111b55937f34")
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !38)
!38 = !{!39}
!39 = !DISubrange(count: 18)
!40 = !DIGlobalVariableExpression(var: !41, expr: !DIExpression())
!41 = distinct !DIGlobalVariable(scope: null, file: !36, line: 162, type: !42, isLocal: true, isDefinition: true)
!42 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !43)
!43 = !{!44}
!44 = !DISubrange(count: 16)
!45 = !DIGlobalVariableExpression(var: !46, expr: !DIExpression())
!46 = distinct !DIGlobalVariable(scope: null, file: !36, line: 165, type: !47, isLocal: true, isDefinition: true)
!47 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !48)
!48 = !{!49}
!49 = !DISubrange(count: 17)
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(scope: null, file: !36, line: 167, type: !52, isLocal: true, isDefinition: true)
!52 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !53)
!53 = !{!54}
!54 = !DISubrange(count: 15)
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "goodB2G1Static", scope: !19, file: !36, line: 56, type: !28, isLocal: true, isDefinition: true)
!57 = !DIGlobalVariableExpression(var: !58, expr: !DIExpression())
!58 = distinct !DIGlobalVariable(scope: null, file: !36, line: 66, type: !59, isLocal: true, isDefinition: true)
!59 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 168, elements: !60)
!60 = !{!61}
!61 = !DISubrange(count: 21)
!62 = !DIGlobalVariableExpression(var: !63, expr: !DIExpression())
!63 = distinct !DIGlobalVariable(name: "goodB2G2Static", scope: !19, file: !36, line: 57, type: !28, isLocal: true, isDefinition: true)
!64 = !DIGlobalVariableExpression(var: !65, expr: !DIExpression())
!65 = distinct !DIGlobalVariable(name: "goodG2BStatic", scope: !19, file: !36, line: 58, type: !28, isLocal: true, isDefinition: true)
!66 = !{i32 7, !"Dwarf Version", i32 5}
!67 = !{i32 2, !"Debug Info Version", i32 3}
!68 = !{i32 1, !"wchar_size", i32 4}
!69 = !{i32 8, !"PIC Level", i32 2}
!70 = !{i32 7, !"PIE Level", i32 2}
!71 = !{i32 7, !"uwtable", i32 2}
!72 = !{i32 7, !"frame-pointer", i32 2}
!73 = !{!"clang version 16.0.0"}
!74 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !75, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!75 = !DISubroutineType(types: !76)
!76 = !{null, !22, !22}
!77 = !{}
!78 = !DILocalVariable(name: "p", arg: 1, scope: !74, file: !2, line: 4, type: !22)
!79 = !DILocation(line: 4, column: 22, scope: !74)
!80 = !DILocalVariable(name: "q", arg: 2, scope: !74, file: !2, line: 4, type: !22)
!81 = !DILocation(line: 4, column: 31, scope: !74)
!82 = !DILocation(line: 5, column: 3, scope: !74)
!83 = !DILocation(line: 6, column: 1, scope: !74)
!84 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !75, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!85 = !DILocalVariable(name: "p", arg: 1, scope: !84, file: !2, line: 8, type: !22)
!86 = !DILocation(line: 8, column: 25, scope: !84)
!87 = !DILocalVariable(name: "q", arg: 2, scope: !84, file: !2, line: 8, type: !22)
!88 = !DILocation(line: 8, column: 34, scope: !84)
!89 = !DILocation(line: 9, column: 3, scope: !84)
!90 = !DILocation(line: 10, column: 1, scope: !84)
!91 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !75, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!92 = !DILocalVariable(name: "p", arg: 1, scope: !91, file: !2, line: 12, type: !22)
!93 = !DILocation(line: 12, column: 21, scope: !91)
!94 = !DILocalVariable(name: "q", arg: 2, scope: !91, file: !2, line: 12, type: !22)
!95 = !DILocation(line: 12, column: 30, scope: !91)
!96 = !DILocation(line: 13, column: 3, scope: !91)
!97 = !DILocation(line: 14, column: 1, scope: !91)
!98 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !75, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!99 = !DILocalVariable(name: "p", arg: 1, scope: !98, file: !2, line: 16, type: !22)
!100 = !DILocation(line: 16, column: 20, scope: !98)
!101 = !DILocalVariable(name: "q", arg: 2, scope: !98, file: !2, line: 16, type: !22)
!102 = !DILocation(line: 16, column: 29, scope: !98)
!103 = !DILocation(line: 17, column: 3, scope: !98)
!104 = !DILocation(line: 18, column: 1, scope: !98)
!105 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !75, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!106 = !DILocalVariable(name: "p", arg: 1, scope: !105, file: !2, line: 20, type: !22)
!107 = !DILocation(line: 20, column: 34, scope: !105)
!108 = !DILocalVariable(name: "q", arg: 2, scope: !105, file: !2, line: 20, type: !22)
!109 = !DILocation(line: 20, column: 43, scope: !105)
!110 = !DILocation(line: 21, column: 3, scope: !105)
!111 = !DILocation(line: 22, column: 1, scope: !105)
!112 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !75, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!113 = !DILocalVariable(name: "p", arg: 1, scope: !112, file: !2, line: 24, type: !22)
!114 = !DILocation(line: 24, column: 33, scope: !112)
!115 = !DILocalVariable(name: "q", arg: 2, scope: !112, file: !2, line: 24, type: !22)
!116 = !DILocation(line: 24, column: 42, scope: !112)
!117 = !DILocation(line: 25, column: 3, scope: !112)
!118 = !DILocation(line: 26, column: 1, scope: !112)
!119 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !120, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!120 = !DISubroutineType(types: !121)
!121 = !{!22, !28}
!122 = !DILocalVariable(name: "n", arg: 1, scope: !119, file: !2, line: 29, type: !28)
!123 = !DILocation(line: 29, column: 22, scope: !119)
!124 = !DILocation(line: 30, column: 17, scope: !119)
!125 = !DILocation(line: 30, column: 10, scope: !119)
!126 = !DILocation(line: 30, column: 3, scope: !119)
!127 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !120, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!128 = !DILocalVariable(name: "n", arg: 1, scope: !127, file: !2, line: 33, type: !28)
!129 = !DILocation(line: 33, column: 28, scope: !127)
!130 = !DILocation(line: 34, column: 19, scope: !127)
!131 = !DILocation(line: 34, column: 12, scope: !127)
!132 = !DILocation(line: 34, column: 5, scope: !127)
!133 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !120, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!134 = !DILocalVariable(name: "n", arg: 1, scope: !133, file: !2, line: 37, type: !28)
!135 = !DILocation(line: 37, column: 21, scope: !133)
!136 = !DILocation(line: 38, column: 17, scope: !133)
!137 = !DILocation(line: 38, column: 10, scope: !133)
!138 = !DILocation(line: 38, column: 3, scope: !133)
!139 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !120, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!140 = !DILocalVariable(name: "n", arg: 1, scope: !139, file: !2, line: 41, type: !28)
!141 = !DILocation(line: 41, column: 21, scope: !139)
!142 = !DILocation(line: 42, column: 17, scope: !139)
!143 = !DILocation(line: 42, column: 10, scope: !139)
!144 = !DILocation(line: 42, column: 3, scope: !139)
!145 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !120, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!146 = !DILocalVariable(name: "n", arg: 1, scope: !145, file: !2, line: 45, type: !28)
!147 = !DILocation(line: 45, column: 21, scope: !145)
!148 = !DILocation(line: 46, column: 17, scope: !145)
!149 = !DILocation(line: 46, column: 10, scope: !145)
!150 = !DILocation(line: 46, column: 3, scope: !145)
!151 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !120, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!152 = !DILocalVariable(name: "n", arg: 1, scope: !151, file: !2, line: 49, type: !28)
!153 = !DILocation(line: 49, column: 21, scope: !151)
!154 = !DILocation(line: 50, column: 17, scope: !151)
!155 = !DILocation(line: 50, column: 10, scope: !151)
!156 = !DILocation(line: 50, column: 3, scope: !151)
!157 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !120, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!158 = !DILocalVariable(name: "n", arg: 1, scope: !157, file: !2, line: 53, type: !28)
!159 = !DILocation(line: 53, column: 21, scope: !157)
!160 = !DILocation(line: 54, column: 17, scope: !157)
!161 = !DILocation(line: 54, column: 10, scope: !157)
!162 = !DILocation(line: 54, column: 3, scope: !157)
!163 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !120, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!164 = !DILocalVariable(name: "n", arg: 1, scope: !163, file: !2, line: 57, type: !28)
!165 = !DILocation(line: 57, column: 18, scope: !163)
!166 = !DILocation(line: 58, column: 17, scope: !163)
!167 = !DILocation(line: 58, column: 10, scope: !163)
!168 = !DILocation(line: 58, column: 3, scope: !163)
!169 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !170, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!170 = !DISubroutineType(types: !171)
!171 = !{null, !28, !28}
!172 = !DILocalVariable(name: "id", arg: 1, scope: !169, file: !2, line: 67, type: !28)
!173 = !DILocation(line: 67, column: 20, scope: !169)
!174 = !DILocalVariable(name: "flags", arg: 2, scope: !169, file: !2, line: 67, type: !28)
!175 = !DILocation(line: 67, column: 28, scope: !169)
!176 = !DILocation(line: 68, column: 3, scope: !169)
!177 = !DILocation(line: 69, column: 1, scope: !169)
!178 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !179, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!179 = !DISubroutineType(types: !180)
!180 = !{null, !28, !181}
!181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!182 = !DILocalVariable(name: "thdid", arg: 1, scope: !178, file: !2, line: 79, type: !28)
!183 = !DILocation(line: 79, column: 21, scope: !178)
!184 = !DILocalVariable(name: "cxt", arg: 2, scope: !178, file: !2, line: 79, type: !181)
!185 = !DILocation(line: 79, column: 34, scope: !178)
!186 = !DILocation(line: 81, column: 1, scope: !178)
!187 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !179, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!188 = !DILocalVariable(name: "thdid", arg: 1, scope: !187, file: !2, line: 82, type: !28)
!189 = !DILocation(line: 82, column: 21, scope: !187)
!190 = !DILocalVariable(name: "cxt", arg: 2, scope: !187, file: !2, line: 82, type: !181)
!191 = !DILocation(line: 82, column: 33, scope: !187)
!192 = !DILocation(line: 84, column: 1, scope: !187)
!193 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !194, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!194 = !DISubroutineType(types: !195)
!195 = !{null, !28, !181, !181}
!196 = !DILocalVariable(name: "thdid", arg: 1, scope: !193, file: !2, line: 85, type: !28)
!197 = !DILocation(line: 85, column: 26, scope: !193)
!198 = !DILocalVariable(name: "cxt", arg: 2, scope: !193, file: !2, line: 85, type: !181)
!199 = !DILocation(line: 85, column: 38, scope: !193)
!200 = !DILocalVariable(name: "lev", arg: 3, scope: !193, file: !2, line: 85, type: !181)
!201 = !DILocation(line: 85, column: 49, scope: !193)
!202 = !DILocation(line: 87, column: 1, scope: !193)
!203 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !204, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!204 = !DISubroutineType(types: !205)
!205 = !{null, !181}
!206 = !DILocalVariable(name: "lockname", arg: 1, scope: !203, file: !2, line: 89, type: !181)
!207 = !DILocation(line: 89, column: 17, scope: !203)
!208 = !DILocation(line: 91, column: 1, scope: !203)
!209 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !204, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!210 = !DILocalVariable(name: "str", arg: 1, scope: !209, file: !2, line: 93, type: !181)
!211 = !DILocation(line: 93, column: 18, scope: !209)
!212 = !DILocation(line: 94, column: 18, scope: !209)
!213 = !DILocation(line: 94, column: 3, scope: !209)
!214 = !DILocation(line: 95, column: 3, scope: !209)
!215 = !DILocation(line: 96, column: 3, scope: !209)
!216 = !DILocation(line: 97, column: 1, scope: !209)
!217 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !218, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!218 = !DISubroutineType(types: !219)
!219 = !{!22, !220}
!220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64)
!221 = !DILocalVariable(name: "p", arg: 1, scope: !217, file: !2, line: 100, type: !220)
!222 = !DILocation(line: 100, column: 24, scope: !217)
!223 = !DILocation(line: 101, column: 6, scope: !217)
!224 = !DILocation(line: 101, column: 8, scope: !217)
!225 = !DILocation(line: 102, column: 1, scope: !217)
!226 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !218, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!227 = !DILocalVariable(name: "p", arg: 1, scope: !226, file: !2, line: 104, type: !220)
!228 = !DILocation(line: 104, column: 20, scope: !226)
!229 = !DILocation(line: 105, column: 6, scope: !226)
!230 = !DILocation(line: 105, column: 8, scope: !226)
!231 = !DILocation(line: 106, column: 1, scope: !226)
!232 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !218, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!233 = !DILocalVariable(name: "p", arg: 1, scope: !232, file: !2, line: 110, type: !220)
!234 = !DILocation(line: 110, column: 22, scope: !232)
!235 = !DILocation(line: 111, column: 10, scope: !232)
!236 = !DILocation(line: 111, column: 5, scope: !232)
!237 = !DILocation(line: 112, column: 1, scope: !232)
!238 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !218, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!239 = !DILocalVariable(name: "p", arg: 1, scope: !238, file: !2, line: 115, type: !220)
!240 = !DILocation(line: 115, column: 24, scope: !238)
!241 = !DILocation(line: 116, column: 10, scope: !238)
!242 = !DILocation(line: 116, column: 5, scope: !238)
!243 = !DILocation(line: 117, column: 1, scope: !238)
!244 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !245, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!245 = !DISubroutineType(types: !246)
!246 = !{null}
!247 = !DILocation(line: 135, column: 20, scope: !244)
!248 = distinct !DISubprogram(name: "CWE401_Memory_Leak__struct_twoIntsStruct_malloc_21_bad", scope: !36, file: !36, line: 36, type: !245, scopeLine: 37, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!249 = !DILocalVariable(name: "data", scope: !248, file: !36, line: 38, type: !23)
!250 = !DILocation(line: 38, column: 29, scope: !248)
!251 = !DILocation(line: 39, column: 10, scope: !248)
!252 = !DILocation(line: 41, column: 37, scope: !248)
!253 = !DILocation(line: 41, column: 10, scope: !248)
!254 = !DILocation(line: 42, column: 9, scope: !255)
!255 = distinct !DILexicalBlock(scope: !248, file: !36, line: 42, column: 9)
!256 = !DILocation(line: 42, column: 14, scope: !255)
!257 = !DILocation(line: 42, column: 9, scope: !248)
!258 = !DILocation(line: 42, column: 24, scope: !259)
!259 = distinct !DILexicalBlock(scope: !255, file: !36, line: 42, column: 23)
!260 = !DILocation(line: 44, column: 5, scope: !248)
!261 = !DILocation(line: 44, column: 13, scope: !248)
!262 = !DILocation(line: 44, column: 20, scope: !248)
!263 = !DILocation(line: 45, column: 5, scope: !248)
!264 = !DILocation(line: 45, column: 13, scope: !248)
!265 = !DILocation(line: 45, column: 20, scope: !248)
!266 = !DILocation(line: 46, column: 39, scope: !248)
!267 = !DILocation(line: 46, column: 5, scope: !248)
!268 = !DILocation(line: 47, column: 15, scope: !248)
!269 = !DILocation(line: 48, column: 13, scope: !248)
!270 = !DILocation(line: 48, column: 5, scope: !248)
!271 = !DILocation(line: 49, column: 1, scope: !248)
!272 = distinct !DISubprogram(name: "badSink", scope: !36, file: !36, line: 27, type: !273, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !77)
!273 = !DISubroutineType(types: !274)
!274 = !{null, !23}
!275 = !DILocalVariable(name: "data", arg: 1, scope: !272, file: !36, line: 27, type: !23)
!276 = !DILocation(line: 27, column: 45, scope: !272)
!277 = !DILocation(line: 29, column: 8, scope: !278)
!278 = distinct !DILexicalBlock(scope: !272, file: !36, line: 29, column: 8)
!279 = !DILocation(line: 29, column: 8, scope: !272)
!280 = !DILocation(line: 33, column: 5, scope: !281)
!281 = distinct !DILexicalBlock(scope: !278, file: !36, line: 30, column: 5)
!282 = !DILocation(line: 34, column: 1, scope: !272)
!283 = distinct !DISubprogram(name: "CWE401_Memory_Leak__struct_twoIntsStruct_malloc_21_good", scope: !36, file: !36, line: 139, type: !245, scopeLine: 140, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!284 = !DILocation(line: 141, column: 5, scope: !283)
!285 = !DILocation(line: 142, column: 5, scope: !283)
!286 = !DILocation(line: 143, column: 5, scope: !283)
!287 = !DILocation(line: 144, column: 1, scope: !283)
!288 = distinct !DISubprogram(name: "main", scope: !36, file: !36, line: 155, type: !289, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !77)
!289 = !DISubroutineType(types: !290)
!290 = !{!28, !28, !291}
!291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !181, size: 64)
!292 = !DILocalVariable(name: "argc", arg: 1, scope: !288, file: !36, line: 155, type: !28)
!293 = !DILocation(line: 155, column: 14, scope: !288)
!294 = !DILocalVariable(name: "argv", arg: 2, scope: !288, file: !36, line: 155, type: !291)
!295 = !DILocation(line: 155, column: 27, scope: !288)
!296 = !DILocation(line: 158, column: 22, scope: !288)
!297 = !DILocation(line: 158, column: 12, scope: !288)
!298 = !DILocation(line: 158, column: 5, scope: !288)
!299 = !DILocation(line: 160, column: 5, scope: !288)
!300 = !DILocation(line: 161, column: 5, scope: !288)
!301 = !DILocation(line: 162, column: 5, scope: !288)
!302 = !DILocation(line: 165, column: 5, scope: !288)
!303 = !DILocation(line: 166, column: 5, scope: !288)
!304 = !DILocation(line: 167, column: 5, scope: !288)
!305 = !DILocation(line: 169, column: 5, scope: !288)
!306 = distinct !DISubprogram(name: "goodB2G1", scope: !36, file: !36, line: 75, type: !245, scopeLine: 76, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !77)
!307 = !DILocalVariable(name: "data", scope: !306, file: !36, line: 77, type: !23)
!308 = !DILocation(line: 77, column: 29, scope: !306)
!309 = !DILocation(line: 78, column: 10, scope: !306)
!310 = !DILocation(line: 80, column: 37, scope: !306)
!311 = !DILocation(line: 80, column: 10, scope: !306)
!312 = !DILocation(line: 81, column: 9, scope: !313)
!313 = distinct !DILexicalBlock(scope: !306, file: !36, line: 81, column: 9)
!314 = !DILocation(line: 81, column: 14, scope: !313)
!315 = !DILocation(line: 81, column: 9, scope: !306)
!316 = !DILocation(line: 81, column: 24, scope: !317)
!317 = distinct !DILexicalBlock(scope: !313, file: !36, line: 81, column: 23)
!318 = !DILocation(line: 83, column: 5, scope: !306)
!319 = !DILocation(line: 83, column: 13, scope: !306)
!320 = !DILocation(line: 83, column: 20, scope: !306)
!321 = !DILocation(line: 84, column: 5, scope: !306)
!322 = !DILocation(line: 84, column: 13, scope: !306)
!323 = !DILocation(line: 84, column: 20, scope: !306)
!324 = !DILocation(line: 85, column: 39, scope: !306)
!325 = !DILocation(line: 85, column: 5, scope: !306)
!326 = !DILocation(line: 86, column: 20, scope: !306)
!327 = !DILocation(line: 87, column: 18, scope: !306)
!328 = !DILocation(line: 87, column: 5, scope: !306)
!329 = !DILocation(line: 88, column: 1, scope: !306)
!330 = distinct !DISubprogram(name: "goodB2G1Sink", scope: !36, file: !36, line: 61, type: !273, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !77)
!331 = !DILocalVariable(name: "data", arg: 1, scope: !330, file: !36, line: 61, type: !23)
!332 = !DILocation(line: 61, column: 50, scope: !330)
!333 = !DILocation(line: 63, column: 8, scope: !334)
!334 = distinct !DILexicalBlock(scope: !330, file: !36, line: 63, column: 8)
!335 = !DILocation(line: 63, column: 8, scope: !330)
!336 = !DILocation(line: 66, column: 9, scope: !337)
!337 = distinct !DILexicalBlock(scope: !334, file: !36, line: 64, column: 5)
!338 = !DILocation(line: 67, column: 5, scope: !337)
!339 = !DILocation(line: 71, column: 14, scope: !340)
!340 = distinct !DILexicalBlock(scope: !334, file: !36, line: 69, column: 5)
!341 = !DILocation(line: 71, column: 9, scope: !340)
!342 = !DILocation(line: 73, column: 1, scope: !330)
!343 = distinct !DISubprogram(name: "goodB2G2", scope: !36, file: !36, line: 100, type: !245, scopeLine: 101, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !77)
!344 = !DILocalVariable(name: "data", scope: !343, file: !36, line: 102, type: !23)
!345 = !DILocation(line: 102, column: 29, scope: !343)
!346 = !DILocation(line: 103, column: 10, scope: !343)
!347 = !DILocation(line: 105, column: 37, scope: !343)
!348 = !DILocation(line: 105, column: 10, scope: !343)
!349 = !DILocation(line: 106, column: 9, scope: !350)
!350 = distinct !DILexicalBlock(scope: !343, file: !36, line: 106, column: 9)
!351 = !DILocation(line: 106, column: 14, scope: !350)
!352 = !DILocation(line: 106, column: 9, scope: !343)
!353 = !DILocation(line: 106, column: 24, scope: !354)
!354 = distinct !DILexicalBlock(scope: !350, file: !36, line: 106, column: 23)
!355 = !DILocation(line: 108, column: 5, scope: !343)
!356 = !DILocation(line: 108, column: 13, scope: !343)
!357 = !DILocation(line: 108, column: 20, scope: !343)
!358 = !DILocation(line: 109, column: 5, scope: !343)
!359 = !DILocation(line: 109, column: 13, scope: !343)
!360 = !DILocation(line: 109, column: 20, scope: !343)
!361 = !DILocation(line: 110, column: 39, scope: !343)
!362 = !DILocation(line: 110, column: 5, scope: !343)
!363 = !DILocation(line: 111, column: 20, scope: !343)
!364 = !DILocation(line: 112, column: 18, scope: !343)
!365 = !DILocation(line: 112, column: 5, scope: !343)
!366 = !DILocation(line: 113, column: 1, scope: !343)
!367 = distinct !DISubprogram(name: "goodB2G2Sink", scope: !36, file: !36, line: 91, type: !273, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !77)
!368 = !DILocalVariable(name: "data", arg: 1, scope: !367, file: !36, line: 91, type: !23)
!369 = !DILocation(line: 91, column: 50, scope: !367)
!370 = !DILocation(line: 93, column: 8, scope: !371)
!371 = distinct !DILexicalBlock(scope: !367, file: !36, line: 93, column: 8)
!372 = !DILocation(line: 93, column: 8, scope: !367)
!373 = !DILocation(line: 96, column: 14, scope: !374)
!374 = distinct !DILexicalBlock(scope: !371, file: !36, line: 94, column: 5)
!375 = !DILocation(line: 96, column: 9, scope: !374)
!376 = !DILocation(line: 97, column: 5, scope: !374)
!377 = !DILocation(line: 98, column: 1, scope: !367)
!378 = distinct !DISubprogram(name: "goodG2B", scope: !36, file: !36, line: 125, type: !245, scopeLine: 126, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !77)
!379 = !DILocalVariable(name: "data", scope: !378, file: !36, line: 127, type: !23)
!380 = !DILocation(line: 127, column: 29, scope: !378)
!381 = !DILocation(line: 128, column: 10, scope: !378)
!382 = !DILocation(line: 130, column: 37, scope: !378)
!383 = !DILocation(line: 130, column: 10, scope: !378)
!384 = !DILocation(line: 132, column: 5, scope: !378)
!385 = !DILocation(line: 132, column: 13, scope: !378)
!386 = !DILocation(line: 132, column: 20, scope: !378)
!387 = !DILocation(line: 133, column: 5, scope: !378)
!388 = !DILocation(line: 133, column: 13, scope: !378)
!389 = !DILocation(line: 133, column: 20, scope: !378)
!390 = !DILocation(line: 134, column: 39, scope: !378)
!391 = !DILocation(line: 134, column: 5, scope: !378)
!392 = !DILocation(line: 135, column: 19, scope: !378)
!393 = !DILocation(line: 136, column: 17, scope: !378)
!394 = !DILocation(line: 136, column: 5, scope: !378)
!395 = !DILocation(line: 137, column: 1, scope: !378)
!396 = distinct !DISubprogram(name: "goodG2BSink", scope: !36, file: !36, line: 116, type: !273, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !77)
!397 = !DILocalVariable(name: "data", arg: 1, scope: !396, file: !36, line: 116, type: !23)
!398 = !DILocation(line: 116, column: 49, scope: !396)
!399 = !DILocation(line: 118, column: 8, scope: !400)
!400 = distinct !DILexicalBlock(scope: !396, file: !36, line: 118, column: 8)
!401 = !DILocation(line: 118, column: 8, scope: !396)
!402 = !DILocation(line: 122, column: 5, scope: !403)
!403 = distinct !DILexicalBlock(scope: !400, file: !36, line: 119, column: 5)
!404 = !DILocation(line: 123, column: 1, scope: !396)
