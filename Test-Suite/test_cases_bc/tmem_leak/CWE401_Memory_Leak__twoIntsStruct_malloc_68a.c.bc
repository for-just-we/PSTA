; ModuleID = '/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/test_cases_bc/tmem_leak/CWE401_Memory_Leak__twoIntsStruct_malloc_68a.c.bc'
source_filename = "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__twoIntsStruct_malloc_68a.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1, !dbg !12
@CWE401_Memory_Leak__twoIntsStruct_malloc_68_badData = dso_local global ptr null, align 8, !dbg !17
@CWE401_Memory_Leak__twoIntsStruct_malloc_68_goodG2BData = dso_local global ptr null, align 8, !dbg !54
@CWE401_Memory_Leak__twoIntsStruct_malloc_68_goodB2GData = dso_local global ptr null, align 8, !dbg !56
@.str.3 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !33
@.str.4 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !39
@.str.5 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !44
@.str.6 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !49

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !66 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !70, metadata !DIExpression()), !dbg !71
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !72, metadata !DIExpression()), !dbg !73
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !74
  ret void, !dbg !75
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !76 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !77, metadata !DIExpression()), !dbg !78
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !81
  ret void, !dbg !82
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !83 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !84, metadata !DIExpression()), !dbg !85
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !88
  ret void, !dbg !89
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !90 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !91, metadata !DIExpression()), !dbg !92
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !95
  ret void, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !97 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !98, metadata !DIExpression()), !dbg !99
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !102
  ret void, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 !dbg !104 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !105, metadata !DIExpression()), !dbg !106
  store ptr %q, ptr %q.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %q.addr, metadata !107, metadata !DIExpression()), !dbg !108
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !109
  ret void, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !111 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %0 = load i32, ptr %n.addr, align 4, !dbg !116
  %conv = sext i32 %0 to i64, !dbg !116
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !117
  ret ptr %call, !dbg !118
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 !dbg !119 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !120, metadata !DIExpression()), !dbg !121
  %0 = load i32, ptr %n.addr, align 4, !dbg !122
  %conv = sext i32 %0 to i64, !dbg !122
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !123
  ret ptr %call, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !125 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !126, metadata !DIExpression()), !dbg !127
  %0 = load i32, ptr %n.addr, align 4, !dbg !128
  %conv = sext i32 %0 to i64, !dbg !128
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !129
  ret ptr %call, !dbg !130
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !131 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !132, metadata !DIExpression()), !dbg !133
  %0 = load i32, ptr %n.addr, align 4, !dbg !134
  %conv = sext i32 %0 to i64, !dbg !134
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !135
  ret ptr %call, !dbg !136
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !137 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !138, metadata !DIExpression()), !dbg !139
  %0 = load i32, ptr %n.addr, align 4, !dbg !140
  %conv = sext i32 %0 to i64, !dbg !140
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !141
  ret ptr %call, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !143 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !144, metadata !DIExpression()), !dbg !145
  %0 = load i32, ptr %n.addr, align 4, !dbg !146
  %conv = sext i32 %0 to i64, !dbg !146
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !147
  ret ptr %call, !dbg !148
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !149 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !150, metadata !DIExpression()), !dbg !151
  %0 = load i32, ptr %n.addr, align 4, !dbg !152
  %conv = sext i32 %0 to i64, !dbg !152
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !153
  ret ptr %call, !dbg !154
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !155 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !156, metadata !DIExpression()), !dbg !157
  %0 = load i32, ptr %n.addr, align 4, !dbg !158
  %conv = sext i32 %0 to i64, !dbg !158
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !159
  ret ptr %call, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 !dbg !161 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %id.addr, metadata !164, metadata !DIExpression()), !dbg !165
  store i32 %flags, ptr %flags.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %flags.addr, metadata !166, metadata !DIExpression()), !dbg !167
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !168
  ret void, !dbg !169
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !170 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !174, metadata !DIExpression()), !dbg !175
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !176, metadata !DIExpression()), !dbg !177
  ret void, !dbg !178
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 !dbg !179 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !180, metadata !DIExpression()), !dbg !181
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !182, metadata !DIExpression()), !dbg !183
  ret void, !dbg !184
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 !dbg !185 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %thdid.addr, metadata !188, metadata !DIExpression()), !dbg !189
  store ptr %cxt, ptr %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %cxt.addr, metadata !190, metadata !DIExpression()), !dbg !191
  store ptr %lev, ptr %lev.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lev.addr, metadata !192, metadata !DIExpression()), !dbg !193
  ret void, !dbg !194
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 !dbg !195 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %lockname.addr, metadata !198, metadata !DIExpression()), !dbg !199
  ret void, !dbg !200
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 !dbg !201 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %str.addr, metadata !202, metadata !DIExpression()), !dbg !203
  %0 = load ptr, ptr %str.addr, align 8, !dbg !204
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0), !dbg !205
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !206
  %call2 = call i32 @getchar(), !dbg !207
  ret void, !dbg !208
}

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEUAFFUNC(ptr noundef %p) #0 !dbg !209 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !213, metadata !DIExpression()), !dbg !214
  %0 = load ptr, ptr %p.addr, align 8, !dbg !215
  store i32 0, ptr %0, align 4, !dbg !216
  %1 = load ptr, ptr %retval, align 8, !dbg !217
  ret ptr %1, !dbg !217
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @UAFFUNC(ptr noundef %p) #0 !dbg !218 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !219, metadata !DIExpression()), !dbg !220
  %0 = load ptr, ptr %p.addr, align 8, !dbg !221
  store i32 0, ptr %0, align 4, !dbg !222
  %1 = load ptr, ptr %retval, align 8, !dbg !223
  ret ptr %1, !dbg !223
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 !dbg !224 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !225, metadata !DIExpression()), !dbg !226
  %0 = load ptr, ptr %p.addr, align 8, !dbg !227
  call void @free(ptr noundef %0) #6, !dbg !228
  %1 = load ptr, ptr %retval, align 8, !dbg !229
  ret ptr %1, !dbg !229
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 !dbg !230 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !231, metadata !DIExpression()), !dbg !232
  %0 = load ptr, ptr %p.addr, align 8, !dbg !233
  call void @free(ptr noundef %0) #6, !dbg !234
  %1 = load ptr, ptr %retval, align 8, !dbg !235
  ret ptr %1, !dbg !235
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !236 {
entry:
  ret void, !dbg !239
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__twoIntsStruct_malloc_68b_badSink() #0 !dbg !240 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !241, metadata !DIExpression()), !dbg !242
  %0 = load ptr, ptr @CWE401_Memory_Leak__twoIntsStruct_malloc_68_badData, align 8, !dbg !243
  store ptr %0, ptr %data, align 8, !dbg !242
  ret void, !dbg !244
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__twoIntsStruct_malloc_68b_goodG2BSink() #0 !dbg !245 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !246, metadata !DIExpression()), !dbg !247
  %0 = load ptr, ptr @CWE401_Memory_Leak__twoIntsStruct_malloc_68_goodG2BData, align 8, !dbg !248
  store ptr %0, ptr %data, align 8, !dbg !247
  ret void, !dbg !249
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__twoIntsStruct_malloc_68b_goodB2GSink() #0 !dbg !250 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !251, metadata !DIExpression()), !dbg !252
  %0 = load ptr, ptr @CWE401_Memory_Leak__twoIntsStruct_malloc_68_goodB2GData, align 8, !dbg !253
  store ptr %0, ptr %data, align 8, !dbg !252
  %1 = load ptr, ptr %data, align 8, !dbg !254
  call void @free(ptr noundef %1) #6, !dbg !255
  ret void, !dbg !256
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__twoIntsStruct_malloc_68_bad() #0 !dbg !257 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !258, metadata !DIExpression()), !dbg !259
  store ptr null, ptr %data, align 8, !dbg !260
  %call = call ptr @NFRMALLOC(i32 noundef 800), !dbg !261
  store ptr %call, ptr %data, align 8, !dbg !262
  %0 = load ptr, ptr %data, align 8, !dbg !263
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %0, i64 0, !dbg !263
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !264
  store i32 0, ptr %intOne, align 4, !dbg !265
  %1 = load ptr, ptr %data, align 8, !dbg !266
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %1, i64 0, !dbg !266
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !267
  store i32 0, ptr %intTwo, align 4, !dbg !268
  %2 = load ptr, ptr %data, align 8, !dbg !269
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !269
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !270
  %3 = load ptr, ptr %data, align 8, !dbg !271
  store ptr %3, ptr @CWE401_Memory_Leak__twoIntsStruct_malloc_68_badData, align 8, !dbg !272
  call void @CWE401_Memory_Leak__twoIntsStruct_malloc_68b_badSink(), !dbg !273
  ret void, !dbg !274
}

declare void @printStructLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE401_Memory_Leak__twoIntsStruct_malloc_68_good() #0 !dbg !275 {
entry:
  call void @goodG2B(), !dbg !276
  call void @goodB2G(), !dbg !277
  ret void, !dbg !278
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !279 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !283, metadata !DIExpression()), !dbg !284
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !285, metadata !DIExpression()), !dbg !286
  %call = call i64 @time(ptr noundef null) #6, !dbg !287
  %conv = trunc i64 %call to i32, !dbg !288
  call void @srand(i32 noundef %conv) #6, !dbg !289
  call void @printLine(ptr noundef @.str.3), !dbg !290
  call void @CWE401_Memory_Leak__twoIntsStruct_malloc_68_good(), !dbg !291
  call void @printLine(ptr noundef @.str.4), !dbg !292
  call void @printLine(ptr noundef @.str.5), !dbg !293
  call void @CWE401_Memory_Leak__twoIntsStruct_malloc_68_bad(), !dbg !294
  call void @printLine(ptr noundef @.str.6), !dbg !295
  ret i32 0, !dbg !296
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !297 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !298, metadata !DIExpression()), !dbg !299
  store ptr null, ptr %data, align 8, !dbg !300
  %0 = alloca i8, i64 800, align 16, !dbg !301
  store ptr %0, ptr %data, align 8, !dbg !302
  %1 = load ptr, ptr %data, align 8, !dbg !303
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %1, i64 0, !dbg !303
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !304
  store i32 0, ptr %intOne, align 4, !dbg !305
  %2 = load ptr, ptr %data, align 8, !dbg !306
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !306
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !307
  store i32 0, ptr %intTwo, align 4, !dbg !308
  %3 = load ptr, ptr %data, align 8, !dbg !309
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %3, i64 0, !dbg !309
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !310
  %4 = load ptr, ptr %data, align 8, !dbg !311
  store ptr %4, ptr @CWE401_Memory_Leak__twoIntsStruct_malloc_68_goodG2BData, align 8, !dbg !312
  call void @CWE401_Memory_Leak__twoIntsStruct_malloc_68b_goodG2BSink(), !dbg !313
  ret void, !dbg !314
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !315 {
entry:
  %data = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !316, metadata !DIExpression()), !dbg !317
  store ptr null, ptr %data, align 8, !dbg !318
  %call = call ptr @SAFEMALLOC(i32 noundef 800), !dbg !319
  store ptr %call, ptr %data, align 8, !dbg !320
  %0 = load ptr, ptr %data, align 8, !dbg !321
  %arrayidx = getelementptr inbounds %struct._twoIntsStruct, ptr %0, i64 0, !dbg !321
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !322
  store i32 0, ptr %intOne, align 4, !dbg !323
  %1 = load ptr, ptr %data, align 8, !dbg !324
  %arrayidx1 = getelementptr inbounds %struct._twoIntsStruct, ptr %1, i64 0, !dbg !324
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !325
  store i32 0, ptr %intTwo, align 4, !dbg !326
  %2 = load ptr, ptr %data, align 8, !dbg !327
  %arrayidx2 = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i64 0, !dbg !327
  call void @printStructLine(ptr noundef %arrayidx2), !dbg !328
  %3 = load ptr, ptr %data, align 8, !dbg !329
  store ptr %3, ptr @CWE401_Memory_Leak__twoIntsStruct_malloc_68_goodB2GData, align 8, !dbg !330
  call void @CWE401_Memory_Leak__twoIntsStruct_malloc_68b_goodB2GSink(), !dbg !331
  ret void, !dbg !332
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!19}
!llvm.module.flags = !{!58, !59, !60, !61, !62, !63, !64}
!llvm.ident = !{!65}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 5, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "aliascheck.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1a872d554bb9ccba276f530467d4645b")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 25)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__twoIntsStruct_malloc_68_badData", scope: !19, file: !35, line: 57, type: !23, isLocal: false, isDefinition: true)
!19 = distinct !DICompileUnit(language: DW_LANG_C11, file: !20, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !21, globals: !32, splitDebugInlining: false, nameTableKind: None)
!20 = !DIFile(filename: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite/src/tmem_leak/CWE401_Memory_Leak__twoIntsStruct_malloc_68a.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "344d365b2cd63e9c88d7c3a55598f82e")
!21 = !{!22, !23, !31}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !25, line: 100, baseType: !26)
!25 = !DIFile(filename: "std_testcase.h", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "1dccefb0310558c17683ded20b0d6982")
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !25, line: 96, size: 64, elements: !27)
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !26, file: !25, line: 98, baseType: !29, size: 32)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !26, file: !25, line: 99, baseType: !29, size: 32, offset: 32)
!31 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!32 = !{!0, !7, !12, !33, !39, !44, !49, !17, !54, !56}
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(scope: null, file: !35, line: 138, type: !36, isLocal: true, isDefinition: true)
!35 = !DIFile(filename: "src/tmem_leak/CWE401_Memory_Leak__twoIntsStruct_malloc_68a.c", directory: "/g/data/ey69/xiao/project/Path-Sensitive-Analysis/Test-Suite", checksumkind: CSK_MD5, checksum: "344d365b2cd63e9c88d7c3a55598f82e")
!36 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !37)
!37 = !{!38}
!38 = !DISubrange(count: 18)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(scope: null, file: !35, line: 140, type: !41, isLocal: true, isDefinition: true)
!41 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !42)
!42 = !{!43}
!43 = !DISubrange(count: 16)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(scope: null, file: !35, line: 143, type: !46, isLocal: true, isDefinition: true)
!46 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !47)
!47 = !{!48}
!48 = !DISubrange(count: 17)
!49 = !DIGlobalVariableExpression(var: !50, expr: !DIExpression())
!50 = distinct !DIGlobalVariable(scope: null, file: !35, line: 145, type: !51, isLocal: true, isDefinition: true)
!51 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !52)
!52 = !{!53}
!53 = !DISubrange(count: 15)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__twoIntsStruct_malloc_68_goodG2BData", scope: !19, file: !35, line: 58, type: !23, isLocal: false, isDefinition: true)
!56 = !DIGlobalVariableExpression(var: !57, expr: !DIExpression())
!57 = distinct !DIGlobalVariable(name: "CWE401_Memory_Leak__twoIntsStruct_malloc_68_goodB2GData", scope: !19, file: !35, line: 59, type: !23, isLocal: false, isDefinition: true)
!58 = !{i32 7, !"Dwarf Version", i32 5}
!59 = !{i32 2, !"Debug Info Version", i32 3}
!60 = !{i32 1, !"wchar_size", i32 4}
!61 = !{i32 8, !"PIC Level", i32 2}
!62 = !{i32 7, !"PIE Level", i32 2}
!63 = !{i32 7, !"uwtable", i32 2}
!64 = !{i32 7, !"frame-pointer", i32 2}
!65 = !{!"clang version 16.0.0"}
!66 = distinct !DISubprogram(name: "MUSTALIAS", scope: !2, file: !2, line: 4, type: !67, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!67 = !DISubroutineType(types: !68)
!68 = !{null, !22, !22}
!69 = !{}
!70 = !DILocalVariable(name: "p", arg: 1, scope: !66, file: !2, line: 4, type: !22)
!71 = !DILocation(line: 4, column: 22, scope: !66)
!72 = !DILocalVariable(name: "q", arg: 2, scope: !66, file: !2, line: 4, type: !22)
!73 = !DILocation(line: 4, column: 31, scope: !66)
!74 = !DILocation(line: 5, column: 3, scope: !66)
!75 = !DILocation(line: 6, column: 1, scope: !66)
!76 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !2, file: !2, line: 8, type: !67, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!77 = !DILocalVariable(name: "p", arg: 1, scope: !76, file: !2, line: 8, type: !22)
!78 = !DILocation(line: 8, column: 25, scope: !76)
!79 = !DILocalVariable(name: "q", arg: 2, scope: !76, file: !2, line: 8, type: !22)
!80 = !DILocation(line: 8, column: 34, scope: !76)
!81 = !DILocation(line: 9, column: 3, scope: !76)
!82 = !DILocation(line: 10, column: 1, scope: !76)
!83 = distinct !DISubprogram(name: "MAYALIAS", scope: !2, file: !2, line: 12, type: !67, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!84 = !DILocalVariable(name: "p", arg: 1, scope: !83, file: !2, line: 12, type: !22)
!85 = !DILocation(line: 12, column: 21, scope: !83)
!86 = !DILocalVariable(name: "q", arg: 2, scope: !83, file: !2, line: 12, type: !22)
!87 = !DILocation(line: 12, column: 30, scope: !83)
!88 = !DILocation(line: 13, column: 3, scope: !83)
!89 = !DILocation(line: 14, column: 1, scope: !83)
!90 = distinct !DISubprogram(name: "NOALIAS", scope: !2, file: !2, line: 16, type: !67, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!91 = !DILocalVariable(name: "p", arg: 1, scope: !90, file: !2, line: 16, type: !22)
!92 = !DILocation(line: 16, column: 20, scope: !90)
!93 = !DILocalVariable(name: "q", arg: 2, scope: !90, file: !2, line: 16, type: !22)
!94 = !DILocation(line: 16, column: 29, scope: !90)
!95 = !DILocation(line: 17, column: 3, scope: !90)
!96 = !DILocation(line: 18, column: 1, scope: !90)
!97 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !2, file: !2, line: 20, type: !67, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!98 = !DILocalVariable(name: "p", arg: 1, scope: !97, file: !2, line: 20, type: !22)
!99 = !DILocation(line: 20, column: 34, scope: !97)
!100 = !DILocalVariable(name: "q", arg: 2, scope: !97, file: !2, line: 20, type: !22)
!101 = !DILocation(line: 20, column: 43, scope: !97)
!102 = !DILocation(line: 21, column: 3, scope: !97)
!103 = !DILocation(line: 22, column: 1, scope: !97)
!104 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !2, file: !2, line: 24, type: !67, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!105 = !DILocalVariable(name: "p", arg: 1, scope: !104, file: !2, line: 24, type: !22)
!106 = !DILocation(line: 24, column: 33, scope: !104)
!107 = !DILocalVariable(name: "q", arg: 2, scope: !104, file: !2, line: 24, type: !22)
!108 = !DILocation(line: 24, column: 42, scope: !104)
!109 = !DILocation(line: 25, column: 3, scope: !104)
!110 = !DILocation(line: 26, column: 1, scope: !104)
!111 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !2, file: !2, line: 29, type: !112, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!112 = !DISubroutineType(types: !113)
!113 = !{!22, !29}
!114 = !DILocalVariable(name: "n", arg: 1, scope: !111, file: !2, line: 29, type: !29)
!115 = !DILocation(line: 29, column: 22, scope: !111)
!116 = !DILocation(line: 30, column: 17, scope: !111)
!117 = !DILocation(line: 30, column: 10, scope: !111)
!118 = !DILocation(line: 30, column: 3, scope: !111)
!119 = distinct !DISubprogram(name: "DOUBLEFREEMALLOC", scope: !2, file: !2, line: 33, type: !112, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!120 = !DILocalVariable(name: "n", arg: 1, scope: !119, file: !2, line: 33, type: !29)
!121 = !DILocation(line: 33, column: 28, scope: !119)
!122 = !DILocation(line: 34, column: 19, scope: !119)
!123 = !DILocation(line: 34, column: 12, scope: !119)
!124 = !DILocation(line: 34, column: 5, scope: !119)
!125 = distinct !DISubprogram(name: "PLKMALLOC", scope: !2, file: !2, line: 37, type: !112, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!126 = !DILocalVariable(name: "n", arg: 1, scope: !125, file: !2, line: 37, type: !29)
!127 = !DILocation(line: 37, column: 21, scope: !125)
!128 = !DILocation(line: 38, column: 17, scope: !125)
!129 = !DILocation(line: 38, column: 10, scope: !125)
!130 = !DILocation(line: 38, column: 3, scope: !125)
!131 = distinct !DISubprogram(name: "NFRMALLOC", scope: !2, file: !2, line: 41, type: !112, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!132 = !DILocalVariable(name: "n", arg: 1, scope: !131, file: !2, line: 41, type: !29)
!133 = !DILocation(line: 41, column: 21, scope: !131)
!134 = !DILocation(line: 42, column: 17, scope: !131)
!135 = !DILocation(line: 42, column: 10, scope: !131)
!136 = !DILocation(line: 42, column: 3, scope: !131)
!137 = distinct !DISubprogram(name: "CLKMALLOC", scope: !2, file: !2, line: 45, type: !112, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!138 = !DILocalVariable(name: "n", arg: 1, scope: !137, file: !2, line: 45, type: !29)
!139 = !DILocation(line: 45, column: 21, scope: !137)
!140 = !DILocation(line: 46, column: 17, scope: !137)
!141 = !DILocation(line: 46, column: 10, scope: !137)
!142 = !DILocation(line: 46, column: 3, scope: !137)
!143 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !2, file: !2, line: 49, type: !112, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!144 = !DILocalVariable(name: "n", arg: 1, scope: !143, file: !2, line: 49, type: !29)
!145 = !DILocation(line: 49, column: 21, scope: !143)
!146 = !DILocation(line: 50, column: 17, scope: !143)
!147 = !DILocation(line: 50, column: 10, scope: !143)
!148 = !DILocation(line: 50, column: 3, scope: !143)
!149 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !2, file: !2, line: 53, type: !112, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!150 = !DILocalVariable(name: "n", arg: 1, scope: !149, file: !2, line: 53, type: !29)
!151 = !DILocation(line: 53, column: 21, scope: !149)
!152 = !DILocation(line: 54, column: 17, scope: !149)
!153 = !DILocation(line: 54, column: 10, scope: !149)
!154 = !DILocation(line: 54, column: 3, scope: !149)
!155 = distinct !DISubprogram(name: "LEAKFN", scope: !2, file: !2, line: 57, type: !112, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!156 = !DILocalVariable(name: "n", arg: 1, scope: !155, file: !2, line: 57, type: !29)
!157 = !DILocation(line: 57, column: 18, scope: !155)
!158 = !DILocation(line: 58, column: 17, scope: !155)
!159 = !DILocation(line: 58, column: 10, scope: !155)
!160 = !DILocation(line: 58, column: 3, scope: !155)
!161 = distinct !DISubprogram(name: "RC_ACCESS", scope: !2, file: !2, line: 67, type: !162, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!162 = !DISubroutineType(types: !163)
!163 = !{null, !29, !29}
!164 = !DILocalVariable(name: "id", arg: 1, scope: !161, file: !2, line: 67, type: !29)
!165 = !DILocation(line: 67, column: 20, scope: !161)
!166 = !DILocalVariable(name: "flags", arg: 2, scope: !161, file: !2, line: 67, type: !29)
!167 = !DILocation(line: 67, column: 28, scope: !161)
!168 = !DILocation(line: 68, column: 3, scope: !161)
!169 = !DILocation(line: 69, column: 1, scope: !161)
!170 = distinct !DISubprogram(name: "CXT_THREAD", scope: !2, file: !2, line: 79, type: !171, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!171 = !DISubroutineType(types: !172)
!172 = !{null, !29, !173}
!173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!174 = !DILocalVariable(name: "thdid", arg: 1, scope: !170, file: !2, line: 79, type: !29)
!175 = !DILocation(line: 79, column: 21, scope: !170)
!176 = !DILocalVariable(name: "cxt", arg: 2, scope: !170, file: !2, line: 79, type: !173)
!177 = !DILocation(line: 79, column: 34, scope: !170)
!178 = !DILocation(line: 81, column: 1, scope: !170)
!179 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !2, file: !2, line: 82, type: !171, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!180 = !DILocalVariable(name: "thdid", arg: 1, scope: !179, file: !2, line: 82, type: !29)
!181 = !DILocation(line: 82, column: 21, scope: !179)
!182 = !DILocalVariable(name: "cxt", arg: 2, scope: !179, file: !2, line: 82, type: !173)
!183 = !DILocation(line: 82, column: 33, scope: !179)
!184 = !DILocation(line: 84, column: 1, scope: !179)
!185 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !2, file: !2, line: 85, type: !186, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!186 = !DISubroutineType(types: !187)
!187 = !{null, !29, !173, !173}
!188 = !DILocalVariable(name: "thdid", arg: 1, scope: !185, file: !2, line: 85, type: !29)
!189 = !DILocation(line: 85, column: 26, scope: !185)
!190 = !DILocalVariable(name: "cxt", arg: 2, scope: !185, file: !2, line: 85, type: !173)
!191 = !DILocation(line: 85, column: 38, scope: !185)
!192 = !DILocalVariable(name: "lev", arg: 3, scope: !185, file: !2, line: 85, type: !173)
!193 = !DILocation(line: 85, column: 49, scope: !185)
!194 = !DILocation(line: 87, column: 1, scope: !185)
!195 = distinct !DISubprogram(name: "LOCK", scope: !2, file: !2, line: 89, type: !196, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!196 = !DISubroutineType(types: !197)
!197 = !{null, !173}
!198 = !DILocalVariable(name: "lockname", arg: 1, scope: !195, file: !2, line: 89, type: !173)
!199 = !DILocation(line: 89, column: 17, scope: !195)
!200 = !DILocation(line: 91, column: 1, scope: !195)
!201 = distinct !DISubprogram(name: "PAUSE", scope: !2, file: !2, line: 93, type: !196, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!202 = !DILocalVariable(name: "str", arg: 1, scope: !201, file: !2, line: 93, type: !173)
!203 = !DILocation(line: 93, column: 18, scope: !201)
!204 = !DILocation(line: 94, column: 18, scope: !201)
!205 = !DILocation(line: 94, column: 3, scope: !201)
!206 = !DILocation(line: 95, column: 3, scope: !201)
!207 = !DILocation(line: 96, column: 3, scope: !201)
!208 = !DILocation(line: 97, column: 1, scope: !201)
!209 = distinct !DISubprogram(name: "SAFEUAFFUNC", scope: !2, file: !2, line: 100, type: !210, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!210 = !DISubroutineType(types: !211)
!211 = !{!22, !212}
!212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!213 = !DILocalVariable(name: "p", arg: 1, scope: !209, file: !2, line: 100, type: !212)
!214 = !DILocation(line: 100, column: 24, scope: !209)
!215 = !DILocation(line: 101, column: 6, scope: !209)
!216 = !DILocation(line: 101, column: 8, scope: !209)
!217 = !DILocation(line: 102, column: 1, scope: !209)
!218 = distinct !DISubprogram(name: "UAFFUNC", scope: !2, file: !2, line: 104, type: !210, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!219 = !DILocalVariable(name: "p", arg: 1, scope: !218, file: !2, line: 104, type: !212)
!220 = !DILocation(line: 104, column: 20, scope: !218)
!221 = !DILocation(line: 105, column: 6, scope: !218)
!222 = !DILocation(line: 105, column: 8, scope: !218)
!223 = !DILocation(line: 106, column: 1, scope: !218)
!224 = distinct !DISubprogram(name: "SAFEFREE", scope: !2, file: !2, line: 110, type: !210, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!225 = !DILocalVariable(name: "p", arg: 1, scope: !224, file: !2, line: 110, type: !212)
!226 = !DILocation(line: 110, column: 22, scope: !224)
!227 = !DILocation(line: 111, column: 10, scope: !224)
!228 = !DILocation(line: 111, column: 5, scope: !224)
!229 = !DILocation(line: 112, column: 1, scope: !224)
!230 = distinct !DISubprogram(name: "DOUBLEFREE", scope: !2, file: !2, line: 115, type: !210, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!231 = !DILocalVariable(name: "p", arg: 1, scope: !230, file: !2, line: 115, type: !212)
!232 = !DILocation(line: 115, column: 24, scope: !230)
!233 = !DILocation(line: 116, column: 10, scope: !230)
!234 = !DILocation(line: 116, column: 5, scope: !230)
!235 = !DILocation(line: 117, column: 1, scope: !230)
!236 = distinct !DISubprogram(name: "deref", scope: !2, file: !2, line: 135, type: !237, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!237 = !DISubroutineType(types: !238)
!238 = !{null}
!239 = !DILocation(line: 135, column: 20, scope: !236)
!240 = distinct !DISubprogram(name: "CWE401_Memory_Leak__twoIntsStruct_malloc_68b_badSink", scope: !35, file: !35, line: 28, type: !237, scopeLine: 29, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!241 = !DILocalVariable(name: "data", scope: !240, file: !35, line: 30, type: !23)
!242 = !DILocation(line: 30, column: 21, scope: !240)
!243 = !DILocation(line: 30, column: 28, scope: !240)
!244 = !DILocation(line: 33, column: 1, scope: !240)
!245 = distinct !DISubprogram(name: "CWE401_Memory_Leak__twoIntsStruct_malloc_68b_goodG2BSink", scope: !35, file: !35, line: 40, type: !237, scopeLine: 41, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!246 = !DILocalVariable(name: "data", scope: !245, file: !35, line: 42, type: !23)
!247 = !DILocation(line: 42, column: 21, scope: !245)
!248 = !DILocation(line: 42, column: 28, scope: !245)
!249 = !DILocation(line: 45, column: 1, scope: !245)
!250 = distinct !DISubprogram(name: "CWE401_Memory_Leak__twoIntsStruct_malloc_68b_goodB2GSink", scope: !35, file: !35, line: 48, type: !237, scopeLine: 49, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!251 = !DILocalVariable(name: "data", scope: !250, file: !35, line: 50, type: !23)
!252 = !DILocation(line: 50, column: 21, scope: !250)
!253 = !DILocation(line: 50, column: 28, scope: !250)
!254 = !DILocation(line: 52, column: 10, scope: !250)
!255 = !DILocation(line: 52, column: 5, scope: !250)
!256 = !DILocation(line: 53, column: 1, scope: !250)
!257 = distinct !DISubprogram(name: "CWE401_Memory_Leak__twoIntsStruct_malloc_68_bad", scope: !35, file: !35, line: 66, type: !237, scopeLine: 67, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!258 = !DILocalVariable(name: "data", scope: !257, file: !35, line: 68, type: !23)
!259 = !DILocation(line: 68, column: 21, scope: !257)
!260 = !DILocation(line: 69, column: 10, scope: !257)
!261 = !DILocation(line: 71, column: 29, scope: !257)
!262 = !DILocation(line: 71, column: 10, scope: !257)
!263 = !DILocation(line: 73, column: 5, scope: !257)
!264 = !DILocation(line: 73, column: 13, scope: !257)
!265 = !DILocation(line: 73, column: 20, scope: !257)
!266 = !DILocation(line: 74, column: 5, scope: !257)
!267 = !DILocation(line: 74, column: 13, scope: !257)
!268 = !DILocation(line: 74, column: 20, scope: !257)
!269 = !DILocation(line: 75, column: 22, scope: !257)
!270 = !DILocation(line: 75, column: 5, scope: !257)
!271 = !DILocation(line: 76, column: 59, scope: !257)
!272 = !DILocation(line: 76, column: 57, scope: !257)
!273 = !DILocation(line: 77, column: 5, scope: !257)
!274 = !DILocation(line: 78, column: 1, scope: !257)
!275 = distinct !DISubprogram(name: "CWE401_Memory_Leak__twoIntsStruct_malloc_68_good", scope: !35, file: !35, line: 118, type: !237, scopeLine: 119, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!276 = !DILocation(line: 120, column: 5, scope: !275)
!277 = !DILocation(line: 121, column: 5, scope: !275)
!278 = !DILocation(line: 122, column: 1, scope: !275)
!279 = distinct !DISubprogram(name: "main", scope: !35, file: !35, line: 133, type: !280, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !19, retainedNodes: !69)
!280 = !DISubroutineType(types: !281)
!281 = !{!29, !29, !282}
!282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !173, size: 64)
!283 = !DILocalVariable(name: "argc", arg: 1, scope: !279, file: !35, line: 133, type: !29)
!284 = !DILocation(line: 133, column: 14, scope: !279)
!285 = !DILocalVariable(name: "argv", arg: 2, scope: !279, file: !35, line: 133, type: !282)
!286 = !DILocation(line: 133, column: 27, scope: !279)
!287 = !DILocation(line: 136, column: 22, scope: !279)
!288 = !DILocation(line: 136, column: 12, scope: !279)
!289 = !DILocation(line: 136, column: 5, scope: !279)
!290 = !DILocation(line: 138, column: 5, scope: !279)
!291 = !DILocation(line: 139, column: 5, scope: !279)
!292 = !DILocation(line: 140, column: 5, scope: !279)
!293 = !DILocation(line: 143, column: 5, scope: !279)
!294 = !DILocation(line: 144, column: 5, scope: !279)
!295 = !DILocation(line: 145, column: 5, scope: !279)
!296 = !DILocation(line: 147, column: 5, scope: !279)
!297 = distinct !DISubprogram(name: "goodG2B", scope: !35, file: !35, line: 89, type: !237, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !69)
!298 = !DILocalVariable(name: "data", scope: !297, file: !35, line: 91, type: !23)
!299 = !DILocation(line: 91, column: 21, scope: !297)
!300 = !DILocation(line: 92, column: 10, scope: !297)
!301 = !DILocation(line: 94, column: 29, scope: !297)
!302 = !DILocation(line: 94, column: 10, scope: !297)
!303 = !DILocation(line: 96, column: 5, scope: !297)
!304 = !DILocation(line: 96, column: 13, scope: !297)
!305 = !DILocation(line: 96, column: 20, scope: !297)
!306 = !DILocation(line: 97, column: 5, scope: !297)
!307 = !DILocation(line: 97, column: 13, scope: !297)
!308 = !DILocation(line: 97, column: 20, scope: !297)
!309 = !DILocation(line: 98, column: 22, scope: !297)
!310 = !DILocation(line: 98, column: 5, scope: !297)
!311 = !DILocation(line: 99, column: 63, scope: !297)
!312 = !DILocation(line: 99, column: 61, scope: !297)
!313 = !DILocation(line: 100, column: 5, scope: !297)
!314 = !DILocation(line: 101, column: 1, scope: !297)
!315 = distinct !DISubprogram(name: "goodB2G", scope: !35, file: !35, line: 104, type: !237, scopeLine: 105, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !19, retainedNodes: !69)
!316 = !DILocalVariable(name: "data", scope: !315, file: !35, line: 106, type: !23)
!317 = !DILocation(line: 106, column: 21, scope: !315)
!318 = !DILocation(line: 107, column: 10, scope: !315)
!319 = !DILocation(line: 109, column: 29, scope: !315)
!320 = !DILocation(line: 109, column: 10, scope: !315)
!321 = !DILocation(line: 111, column: 5, scope: !315)
!322 = !DILocation(line: 111, column: 13, scope: !315)
!323 = !DILocation(line: 111, column: 20, scope: !315)
!324 = !DILocation(line: 112, column: 5, scope: !315)
!325 = !DILocation(line: 112, column: 13, scope: !315)
!326 = !DILocation(line: 112, column: 20, scope: !315)
!327 = !DILocation(line: 113, column: 22, scope: !315)
!328 = !DILocation(line: 113, column: 5, scope: !315)
!329 = !DILocation(line: 114, column: 63, scope: !315)
!330 = !DILocation(line: 114, column: 61, scope: !315)
!331 = !DILocation(line: 115, column: 5, scope: !315)
!332 = !DILocation(line: 116, column: 1, scope: !315)
